// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case 'ashr':
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case 'lshr':
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          ret = [0, low];
          break;
        case 'ashr':
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case 'lshr':
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          ret = [0, low << (bits - 32)];
          break;
        case 'ashr':
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case 'lshr':
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    assert(ret);
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
  assert(i < TOTAL_MEMORY);
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

function String_len(ptr) {
  var i = ptr;
  while (HEAP8[(i++)]) { // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  assert(i < TOTAL_MEMORY);
  }
  return i - ptr - 1;
}
Module['String_len'] = String_len;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 31200;

assert(STATICTOP < TOTAL_MEMORY);






var _stdout;
var _stdin;
var _stderr;


































































































































































































































































































































































































































































































































































































































































































































































































































































allocate([1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_NONE, 5242880);
allocate([99,111,110,116,9,111,102,102,115,101,116,9,116,121,112,101,9,111,112,99,111,100,101,9,109,97,115,107,9,118,97,108,117,101,9,100,101,115,99,0] /* cont\09offset\09type */, "i8", ALLOC_NONE, 5243040);
allocate([98, 121, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 115, 104, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 100, 101, 102, 97, 117, 108, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 98, 101, 115, 104, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 98, 101, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 98, 101, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 108, 101, 115, 104, 111, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 108, 101, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 108, 101, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 2, 0, 0, 0, 112, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 13, 0, 0, 0, 2, 0, 0, 0, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0, 98, 101, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 108, 101, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 114, 101, 103, 101, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 17, 0, 0, 0, 2, 0, 0, 0, 98, 101, 115, 116, 114, 105, 110, 103, 49, 54, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 18, 0, 0, 0, 2, 0, 0, 0, 108, 101, 115, 116, 114, 105, 110, 103, 49, 54, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0, 0, 2, 0, 0, 0, 115, 101, 97, 114, 99, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 20, 0, 0, 0, 2, 0, 0, 0, 109, 101, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 21, 0, 0, 0, 2, 0, 0, 0, 109, 101, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 22, 0, 0, 0, 2, 0, 0, 0, 109, 101, 108, 111, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 113, 117, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 108, 101, 113, 117, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 98, 101, 113, 117, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 26, 0, 0, 0, 3, 0, 0, 0, 113, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 27, 0, 0, 0, 2, 0, 0, 0, 108, 101, 113, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 28, 0, 0, 0, 2, 0, 0, 0, 98, 101, 113, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 29, 0, 0, 0, 2, 0, 0, 0, 113, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 30, 0, 0, 0, 2, 0, 0, 0, 108, 101, 113, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 31, 0, 0, 0, 2, 0, 0, 0, 98, 101, 113, 108, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 32, 0, 0, 0, 2, 0, 0, 0, 102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 33, 0, 0, 0, 4, 0, 0, 0, 98, 101, 102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 34, 0, 0, 0, 4, 0, 0, 0, 108, 101, 102, 108, 111, 97, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 35, 0, 0, 0, 4, 0, 0, 0, 100, 111, 117, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 36, 0, 0, 0, 5, 0, 0, 0, 98, 101, 100, 111, 117, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 37, 0, 0, 0, 5, 0, 0, 0, 108, 101, 100, 111, 117, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 38, 0, 0, 0, 5, 0, 0, 0, 108, 101, 105, 100, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 98, 101, 105, 100, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 39, 0, 0, 0, 1, 0, 0, 0, 105, 110, 100, 105, 114, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 41, 0, 0, 0, 1, 0, 0, 0, 113, 119, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 42, 0, 0, 0, 2, 0, 0, 0, 108, 101, 113, 119, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 43, 0, 0, 0, 2, 0, 0, 0, 98, 101, 113, 119, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 44, 0, 0, 0, 2, 0, 0, 0, 110, 97, 109, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 45, 0, 0, 0, 2, 0, 0, 0, 117, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 46, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5243080);
allocate([0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2] /* \00\00\00\00\00\00\0 */, "i8", ALLOC_NONE, 5244396);
allocate([116, 97, 114, 32, 97, 114, 99, 104, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 79, 83, 73, 88, 32, 116, 97, 114, 32, 97, 114, 99, 104, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 79, 83, 73, 88, 32, 116, 97, 114, 32, 97, 114, 99, 104, 105, 118, 101, 32, 40, 71, 78, 85, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_NONE, 5244652);
allocate([0, 0, 0, 0, 100000, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5244748);
allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_NONE, 5244756);
allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NONE, 5244764);
allocate(4, "i8", ALLOC_NONE, 5244772);
allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 5244776);
allocate([111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,115,0] /* option requires an a */, "i8", ALLOC_NONE, 5244980);
allocate([111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,99,0] /* option requires an a */, "i8", ALLOC_NONE, 5245016);
allocate([64,40,35,41,36,70,105,108,101,58,32,114,101,97,100,99,100,102,46,99,44,118,32,49,46,51,51,32,50,48,49,50,47,48,54,47,50,48,32,50,49,58,53,50,58,51,54,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: readcdf.c */, "i8", ALLOC_NONE, 5245052);
allocate([64,40,35,41,36,70,105,108,101,58,32,99,100,102,95,116,105,109,101,46,99,44,118,32,49,46,49,50,32,50,48,49,50,47,48,53,47,49,53,32,49,55,58,49,52,58,51,54,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: cdf_time. */, "i8", ALLOC_NONE, 5245116);
allocate([64,40,35,41,36,70,105,108,101,58,32,99,100,102,46,99,44,118,32,49,46,53,49,32,50,48,49,50,47,48,51,47,50,48,32,49,56,58,50,56,58,48,50,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: cdf.c,v 1 */, "i8", ALLOC_NONE, 5245180);
allocate([64,40,35,41,36,70,105,108,101,58,32,97,112,112,116,121,112,101,46,99,44,118,32,49,46,49,51,32,50,48,49,49,47,48,57,47,48,55,32,50,49,58,53,55,58,49,53,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: apptype.c */, "i8", ALLOC_NONE, 5245240);
allocate([64,40,35,41,36,70,105,108,101,58,32,115,111,102,116,109,97,103,105,99,46,99,44,118,32,49,46,49,53,54,32,50,48,49,51,47,48,49,47,48,51,32,50,51,58,49,49,58,51,56,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: softmagic */, "i8", ALLOC_NONE, 5245304);
allocate([64,40,35,41,36,70,105,108,101,58,32,102,117,110,99,115,46,99,44,118,32,49,46,54,49,32,50,48,49,50,47,49,48,47,51,48,32,50,51,58,49,49,58,53,49,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: funcs.c,v */, "i8", ALLOC_NONE, 5245372);
allocate([64,40,35,41,36,70,105,108,101,58,32,102,115,109,97,103,105,99,46,99,44,118,32,49,46,54,53,32,50,48,49,50,47,48,56,47,50,54,32,48,57,58,53,54,58,50,54,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: fsmagic.c */, "i8", ALLOC_NONE, 5245436);
allocate([64,40,35,41,36,70,105,108,101,58,32,112,114,105,110,116,46,99,44,118,32,49,46,55,53,32,50,48,49,50,47,49,48,47,51,48,32,50,51,58,49,49,58,53,49,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: print.c,v */, "i8", ALLOC_NONE, 5245500);
allocate([64,40,35,41,36,70,105,108,101,58,32,103,101,116,111,112,116,95,108,111,110,103,46,99,44,118,32,49,46,54,32,50,48,48,57,47,48,50,47,49,51,32,49,56,58,52,56,58,48,53,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: getopt_lo */, "i8", ALLOC_NONE, 5245564);
allocate([64,40,35,41,36,70,105,108,101,58,32,114,101,97,100,101,108,102,46,99,44,118,32,49,46,57,52,32,50,48,49,50,47,49,50,47,49,51,32,49,51,58,52,56,58,51,49,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: readelf.c */, "i8", ALLOC_NONE, 5245632);
allocate([64,40,35,41,36,70,105,108,101,58,32,105,115,95,116,97,114,46,99,44,118,32,49,46,51,55,32,50,48,49,48,47,49,49,47,51,48,32,49,52,58,53,56,58,53,51,32,114,114,116,32,69,120,112,32,36,0] /* @(#)$File: is_tar.c, */, "i8", ALLOC_NONE, 5245696);
allocate([64,40,35,41,36,70,105,108,101,58,32,99,111,109,112,114,101,115,115,46,99,44,118,32,49,46,55,48,32,50,48,49,50,47,49,49,47,48,55,32,49,55,58,53,52,58,52,56,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: compress. */, "i8", ALLOC_NONE, 5245756);
allocate([64,40,35,41,36,70,105,108,101,58,32,101,110,99,111,100,105,110,103,46,99,44,118,32,49,46,55,32,50,48,49,50,47,48,49,47,50,52,32,49,57,58,48,50,58,48,50,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: encoding. */, "i8", ALLOC_NONE, 5245820);
allocate([64,40,35,41,36,70,105,108,101,58,32,118,97,115,112,114,105,110,116,102,46,99,44,118,32,49,46,49,48,32,50,48,49,50,47,48,56,47,48,57,32,49,54,58,52,48,58,48,52,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: vasprintf */, "i8", ALLOC_NONE, 5245884);
allocate([64,40,35,41,36,70,105,108,101,58,32,97,115,99,109,97,103,105,99,46,99,44,118,32,49,46,56,53,32,50,48,49,50,47,48,56,47,48,57,32,49,54,58,51,51,58,49,53,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: ascmagic. */, "i8", ALLOC_NONE, 5245952);
allocate([64,40,35,41,36,70,105,108,101,58,32,97,115,112,114,105,110,116,102,46,99,44,118,32,49,46,52,32,50,48,49,48,47,48,55,47,50,49,32,49,54,58,52,55,58,49,55,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: asprintf. */, "i8", ALLOC_NONE, 5246016);
allocate([64,40,35,41,36,70,105,108,101,58,32,97,112,112,114,101,110,116,105,99,101,46,99,44,118,32,49,46,49,56,49,32,50,48,49,51,47,48,49,47,48,51,32,50,51,58,49,49,58,51,56,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: apprentic */, "i8", ALLOC_NONE, 5246080);
allocate([64,40,35,41,36,70,105,108,101,58,32,109,97,103,105,99,46,99,44,118,32,49,46,55,55,32,50,48,49,50,47,49,48,47,51,49,32,49,55,58,50,48,58,48,54,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: magic.c,v */, "i8", ALLOC_NONE, 5246148);
allocate([64,40,35,41,36,70,105,108,101,58,32,102,105,108,101,46,99,44,118,32,49,46,49,52,56,32,50,48,49,50,47,49,49,47,50,49,32,49,54,58,50,55,58,51,57,32,99,104,114,105,115,116,111,115,32,69,120,112,32,36,0] /* @(#)$File: file.c,v  */, "i8", ALLOC_NONE, 5246212);
allocate([136, 0, 0, 0, 120, 0, 0, 0, 56, 0, 0, 0, 40, 0, 0, 0, 16, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5246276);
allocate([100, 0, 0, 0, 84, 0, 0, 0, 44, 0, 0, 0, 28, 0, 0, 0, 8, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5246296);
allocate(4, "i8", ALLOC_NONE, 5246316);
allocate(4, "i8", ALLOC_NONE, 5246320);
allocate(4, "i8", ALLOC_NONE, 5246324);
allocate([83, 86, 82, 52, 0, 0, 0, 0, 70, 114, 101, 101, 66, 83, 68, 0, 78, 101, 116, 66, 83, 68, 0, 0], "i8", ALLOC_NONE, 5246328);
allocate(4, "i8", ALLOC_NONE, 5246352);
allocate([63], ["i32",0,0,0], ALLOC_NONE, 5246356);
allocate([1], ["i32",0,0,0], ALLOC_NONE, 5246360);
allocate([1], ["i32",0,0,0], ALLOC_NONE, 5246364);
allocate(4, "i8", ALLOC_NONE, 5246368);
allocate([0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 1048576, 0, 0, 0], ["*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 5246372);
allocate(4, "i8", ALLOC_NONE, 5246452);
allocate(10, "i8", ALLOC_NONE, 5246456);
allocate(4, "i8", ALLOC_NONE, 5246468);
allocate([-1], ["i32",0,0,0], ALLOC_NONE, 5246472);
allocate([-1], ["i32",0,0,0], ALLOC_NONE, 5246476);
allocate(4, "i8", ALLOC_NONE, 5246480);
allocate([111,112,116,105,111,110,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,46,42,115,0] /* option doesn't take  */, "i8", ALLOC_NONE, 5246484);
allocate([11], ["i32",0,0,0], ALLOC_NONE, 5246524);
allocate(24, "i8", ALLOC_NONE, 5246528);
allocate([31, 0, 0, 0, 28, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5246552);
allocate(8, "i8", ALLOC_NONE, 5246600);
allocate([232], ["i32",0,0,0], ALLOC_NONE, 5246608);
allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 5246612);
allocate(76, "i8", ALLOC_NONE, 5247028);
allocate(4, "i8", ALLOC_NONE, 5247104);
allocate([16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 16, 0, 17, 0, 17, 0, 17, 0, 17, 0, 18, 0, 18, 0, 18, 0, 18, 0, 19, 0, 19, 0, 19, 0, 19, 0, 20, 0, 20, 0, 20, 0, 20, 0, 21, 0, 21, 0, 21, 0, 21, 0, 16, 0, 78, 0, 68, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_NONE, 5247108);
allocate([3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13, 0, 15, 0, 17, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 43, 0, 51, 0, 59, 0, 67, 0, 83, 0, 99, 0, 115, 0, 131, 0, 163, 0, 195, 0, 227, 0, 258, 0, 0, 0, 0, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_NONE, 5247172);
allocate([16, 0, 16, 0, 16, 0, 16, 0, 17, 0, 17, 0, 18, 0, 18, 0, 19, 0, 19, 0, 20, 0, 20, 0, 21, 0, 21, 0, 22, 0, 22, 0, 23, 0, 23, 0, 24, 0, 24, 0, 25, 0, 25, 0, 26, 0, 26, 0, 27, 0, 27, 0, 28, 0, 28, 0, 29, 0, 29, 0, 64, 0, 64, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_NONE, 5247236);
allocate([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 7, 0, 9, 0, 13, 0, 17, 0, 25, 0, 33, 0, 49, 0, 65, 0, 97, 0, 129, 0, 193, 0, 257, 0, 385, 0, 513, 0, 769, 0, 1025, 0, 1537, 0, 2049, 0, 3073, 0, 4097, 0, 6145, 0, 8193, 0, 12289, 0, 16385, 0, 24577, 0, 0, 0, 0, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_NONE, 5247300);
allocate([16, 0, 17, 0, 18, 0, 0, 0, 8, 0, 7, 0, 9, 0, 6, 0, 10, 0, 5, 0, 11, 0, 4, 0, 12, 0, 3, 0, 13, 0, 2, 0, 14, 0, 1, 0, 15, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_NONE, 5247364);
allocate([117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,115,0] /* unknown option -- %s */, "i8", ALLOC_NONE, 5247404);
allocate([117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,99,0] /* unknown option -- %c */, "i8", ALLOC_NONE, 5247428);
allocate([47,46,109,97,103,105,99,47,109,97,103,105,99,46,109,103,99,0] /* /.magic/magic.mgc\00 */, "i8", ALLOC_NONE, 5247452);
allocate(4, "i8", ALLOC_NONE, 5247472);
allocate([105, 102, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 101, 108, 105, 102, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 101, 108, 115, 101, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5247476);
allocate([96, 7, 0, 0, 0, 8, 80, 0, 0, 8, 16, 0, 20, 8, 115, 0, 18, 7, 31, 0, 0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 192, 0, 16, 7, 10, 0, 0, 8, 96, 0, 0, 8, 32, 0, 0, 9, 160, 0, 0, 8, 0, 0, 0, 8, 128, 0, 0, 8, 64, 0, 0, 9, 224, 0, 16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9, 144, 0, 19, 7, 59, 0, 0, 8, 120, 0, 0, 8, 56, 0, 0, 9, 208, 0, 17, 7, 17, 0, 0, 8, 104, 0, 0, 8, 40, 0, 0, 9, 176, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72, 0, 0, 9, 240, 0, 16, 7, 4, 0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19, 7, 43, 0, 0, 8, 116, 0, 0, 8, 52, 0, 0, 9, 200, 0, 17, 7, 13, 0, 0, 8, 100, 0, 0, 8, 36, 0, 0, 9, 168, 0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9, 232, 0, 16, 7, 8, 0, 0, 8, 92, 0, 0, 8, 28, 0, 0, 9, 152, 0, 20, 7, 83, 0, 0, 8, 124, 0, 0, 8, 60, 0, 0, 9, 216, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8, 44, 0, 0, 9, 184, 0, 0, 8, 12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 248, 0, 16, 7, 3, 0, 0, 8, 82, 0, 0, 8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8, 114, 0, 0, 8, 50, 0, 0, 9, 196, 0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0, 0, 9, 164, 0, 0, 8, 2, 0, 0, 8, 130, 0, 0, 8, 66, 0, 0, 9, 228, 0, 16, 7, 7, 0, 0, 8, 90, 0, 0, 8, 26, 0, 0, 9, 148, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8, 58, 0, 0, 9, 212, 0, 18, 7, 19, 0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 180, 0, 0, 8, 10, 0, 0, 8, 138, 0, 0, 8, 74, 0, 0, 9, 244, 0, 16, 7, 5, 0, 0, 8, 86, 0, 0, 8, 22, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9, 204, 0, 17, 7, 15, 0, 0, 8, 102, 0, 0, 8, 38, 0, 0, 9, 172, 0, 0, 8, 6, 0, 0, 8, 134, 0, 0, 8, 70, 0, 0, 9, 236, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30, 0, 0, 9, 156, 0, 20, 7, 99, 0, 0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 220, 0, 18, 7, 27, 0, 0, 8, 110, 0, 0, 8, 46, 0, 0, 9, 188, 0, 0, 8, 14, 0, 0, 8, 142, 0, 0, 8, 78, 0, 0, 9, 252, 0, 96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8, 131, 0, 18, 7, 31, 0, 0, 8, 113, 0, 0, 8, 49, 0, 0, 9, 194, 0, 16, 7, 10, 0, 0, 8, 97, 0, 0, 8, 33, 0, 0, 9, 162, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65, 0, 0, 9, 226, 0, 16, 7, 6, 0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 146, 0, 19, 7, 59, 0, 0, 8, 121, 0, 0, 8, 57, 0, 0, 9, 210, 0, 17, 7, 17, 0, 0, 8, 105, 0, 0, 8, 41, 0, 0, 9, 178, 0, 0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 242, 0, 16, 7, 4, 0, 0, 8, 85, 0, 0, 8, 21, 0, 16, 8, 258, 0, 19, 7, 43, 0, 0, 8, 117, 0, 0, 8, 53, 0, 0, 9, 202, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0, 0, 9, 170, 0, 0, 8, 5, 0, 0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 234, 0, 16, 7, 8, 0, 0, 8, 93, 0, 0, 8, 29, 0, 0, 9, 154, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8, 61, 0, 0, 9, 218, 0, 18, 7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 186, 0, 0, 8, 13, 0, 0, 8, 141, 0, 0, 8, 77, 0, 0, 9, 250, 0, 16, 7, 3, 0, 0, 8, 83, 0, 0, 8, 19, 0, 21, 8, 195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0, 9, 198, 0, 17, 7, 11, 0, 0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 166, 0, 0, 8, 3, 0, 0, 8, 131, 0, 0, 8, 67, 0, 0, 9, 230, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27, 0, 0, 9, 150, 0, 20, 7, 67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 214, 0, 18, 7, 19, 0, 0, 8, 107, 0, 0, 8, 43, 0, 0, 9, 182, 0, 0, 8, 11, 0, 0, 8, 139, 0, 0, 8, 75, 0, 0, 9, 246, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 119, 0, 0, 8, 55, 0, 0, 9, 206, 0, 17, 7, 15, 0, 0, 8, 103, 0, 0, 8, 39, 0, 0, 9, 174, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71, 0, 0, 9, 238, 0, 16, 7, 9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 158, 0, 20, 7, 99, 0, 0, 8, 127, 0, 0, 8, 63, 0, 0, 9, 222, 0, 18, 7, 27, 0, 0, 8, 111, 0, 0, 8, 47, 0, 0, 9, 190, 0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9, 254, 0, 96, 7, 0, 0, 0, 8, 80, 0, 0, 8, 16, 0, 20, 8, 115, 0, 18, 7, 31, 0, 0, 8, 112, 0, 0, 8, 48, 0, 0, 9, 193, 0, 16, 7, 10, 0, 0, 8, 96, 0, 0, 8, 32, 0, 0, 9, 161, 0, 0, 8, 0, 0, 0, 8, 128, 0, 0, 8, 64, 0, 0, 9, 225, 0, 16, 7, 6, 0, 0, 8, 88, 0, 0, 8, 24, 0, 0, 9, 145, 0, 19, 7, 59, 0, 0, 8, 120, 0, 0, 8, 56, 0, 0, 9, 209, 0, 17, 7, 17, 0, 0, 8, 104, 0, 0, 8, 40, 0, 0, 9, 177, 0, 0, 8, 8, 0, 0, 8, 136, 0, 0, 8, 72, 0, 0, 9, 241, 0, 16, 7, 4, 0, 0, 8, 84, 0, 0, 8, 20, 0, 21, 8, 227, 0, 19, 7, 43, 0, 0, 8, 116, 0, 0, 8, 52, 0, 0, 9, 201, 0, 17, 7, 13, 0, 0, 8, 100, 0, 0, 8, 36, 0, 0, 9, 169, 0, 0, 8, 4, 0, 0, 8, 132, 0, 0, 8, 68, 0, 0, 9, 233, 0, 16, 7, 8, 0, 0, 8, 92, 0, 0, 8, 28, 0, 0, 9, 153, 0, 20, 7, 83, 0, 0, 8, 124, 0, 0, 8, 60, 0, 0, 9, 217, 0, 18, 7, 23, 0, 0, 8, 108, 0, 0, 8, 44, 0, 0, 9, 185, 0, 0, 8, 12, 0, 0, 8, 140, 0, 0, 8, 76, 0, 0, 9, 249, 0, 16, 7, 3, 0, 0, 8, 82, 0, 0, 8, 18, 0, 21, 8, 163, 0, 19, 7, 35, 0, 0, 8, 114, 0, 0, 8, 50, 0, 0, 9, 197, 0, 17, 7, 11, 0, 0, 8, 98, 0, 0, 8, 34, 0, 0, 9, 165, 0, 0, 8, 2, 0, 0, 8, 130, 0, 0, 8, 66, 0, 0, 9, 229, 0, 16, 7, 7, 0, 0, 8, 90, 0, 0, 8, 26, 0, 0, 9, 149, 0, 20, 7, 67, 0, 0, 8, 122, 0, 0, 8, 58, 0, 0, 9, 213, 0, 18, 7, 19, 0, 0, 8, 106, 0, 0, 8, 42, 0, 0, 9, 181, 0, 0, 8, 10, 0, 0, 8, 138, 0, 0, 8, 74, 0, 0, 9, 245, 0, 16, 7, 5, 0, 0, 8, 86, 0, 0, 8, 22, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 118, 0, 0, 8, 54, 0, 0, 9, 205, 0, 17, 7, 15, 0, 0, 8, 102, 0, 0, 8, 38, 0, 0, 9, 173, 0, 0, 8, 6, 0, 0, 8, 134, 0, 0, 8, 70, 0, 0, 9, 237, 0, 16, 7, 9, 0, 0, 8, 94, 0, 0, 8, 30, 0, 0, 9, 157, 0, 20, 7, 99, 0, 0, 8, 126, 0, 0, 8, 62, 0, 0, 9, 221, 0, 18, 7, 27, 0, 0, 8, 110, 0, 0, 8, 46, 0, 0, 9, 189, 0, 0, 8, 14, 0, 0, 8, 142, 0, 0, 8, 78, 0, 0, 9, 253, 0, 96, 7, 0, 0, 0, 8, 81, 0, 0, 8, 17, 0, 21, 8, 131, 0, 18, 7, 31, 0, 0, 8, 113, 0, 0, 8, 49, 0, 0, 9, 195, 0, 16, 7, 10, 0, 0, 8, 97, 0, 0, 8, 33, 0, 0, 9, 163, 0, 0, 8, 1, 0, 0, 8, 129, 0, 0, 8, 65, 0, 0, 9, 227, 0, 16, 7, 6, 0, 0, 8, 89, 0, 0, 8, 25, 0, 0, 9, 147, 0, 19, 7, 59, 0, 0, 8, 121, 0, 0, 8, 57, 0, 0, 9, 211, 0, 17, 7, 17, 0, 0, 8, 105, 0, 0, 8, 41, 0, 0, 9, 179, 0, 0, 8, 9, 0, 0, 8, 137, 0, 0, 8, 73, 0, 0, 9, 243, 0, 16, 7, 4, 0, 0, 8, 85, 0, 0, 8, 21, 0, 16, 8, 258, 0, 19, 7, 43, 0, 0, 8, 117, 0, 0, 8, 53, 0, 0, 9, 203, 0, 17, 7, 13, 0, 0, 8, 101, 0, 0, 8, 37, 0, 0, 9, 171, 0, 0, 8, 5, 0, 0, 8, 133, 0, 0, 8, 69, 0, 0, 9, 235, 0, 16, 7, 8, 0, 0, 8, 93, 0, 0, 8, 29, 0, 0, 9, 155, 0, 20, 7, 83, 0, 0, 8, 125, 0, 0, 8, 61, 0, 0, 9, 219, 0, 18, 7, 23, 0, 0, 8, 109, 0, 0, 8, 45, 0, 0, 9, 187, 0, 0, 8, 13, 0, 0, 8, 141, 0, 0, 8, 77, 0, 0, 9, 251, 0, 16, 7, 3, 0, 0, 8, 83, 0, 0, 8, 19, 0, 21, 8, 195, 0, 19, 7, 35, 0, 0, 8, 115, 0, 0, 8, 51, 0, 0, 9, 199, 0, 17, 7, 11, 0, 0, 8, 99, 0, 0, 8, 35, 0, 0, 9, 167, 0, 0, 8, 3, 0, 0, 8, 131, 0, 0, 8, 67, 0, 0, 9, 231, 0, 16, 7, 7, 0, 0, 8, 91, 0, 0, 8, 27, 0, 0, 9, 151, 0, 20, 7, 67, 0, 0, 8, 123, 0, 0, 8, 59, 0, 0, 9, 215, 0, 18, 7, 19, 0, 0, 8, 107, 0, 0, 8, 43, 0, 0, 9, 183, 0, 0, 8, 11, 0, 0, 8, 139, 0, 0, 8, 75, 0, 0, 9, 247, 0, 16, 7, 5, 0, 0, 8, 87, 0, 0, 8, 23, 0, 64, 8, 0, 0, 19, 7, 51, 0, 0, 8, 119, 0, 0, 8, 55, 0, 0, 9, 207, 0, 17, 7, 15, 0, 0, 8, 103, 0, 0, 8, 39, 0, 0, 9, 175, 0, 0, 8, 7, 0, 0, 8, 135, 0, 0, 8, 71, 0, 0, 9, 239, 0, 16, 7, 9, 0, 0, 8, 95, 0, 0, 8, 31, 0, 0, 9, 159, 0, 20, 7, 99, 0, 0, 8, 127, 0, 0, 8, 63, 0, 0, 9, 223, 0, 18, 7, 27, 0, 0, 8, 111, 0, 0, 8, 47, 0, 0, 9, 191, 0, 0, 8, 15, 0, 0, 8, 143, 0, 0, 8, 79, 0, 0, 9, 255, 0], ["i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0], ALLOC_NONE, 5247540);
allocate([16, 5, 1, 0, 23, 5, 257, 0, 19, 5, 17, 0, 27, 5, 4097, 0, 17, 5, 5, 0, 25, 5, 1025, 0, 21, 5, 65, 0, 29, 5, 16385, 0, 16, 5, 3, 0, 24, 5, 513, 0, 20, 5, 33, 0, 28, 5, 8193, 0, 18, 5, 9, 0, 26, 5, 2049, 0, 22, 5, 129, 0, 64, 5, 0, 0, 16, 5, 2, 0, 23, 5, 385, 0, 19, 5, 25, 0, 27, 5, 6145, 0, 17, 5, 7, 0, 25, 5, 1537, 0, 21, 5, 97, 0, 29, 5, 24577, 0, 16, 5, 4, 0, 24, 5, 769, 0, 20, 5, 49, 0, 28, 5, 12289, 0, 18, 5, 13, 0, 26, 5, 3073, 0, 22, 5, 193, 0, 64, 5, 0, 0], ["i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0,"i8","i8","i16",0], ALLOC_NONE, 5249588);
allocate([47], ["i32",0,0,0], ALLOC_NONE, 5249716);
allocate(188, "i8", ALLOC_NONE, 5249720);
allocate([38,124,94,43,45,42,47,37,0] /* &|^+-_/%\00 */, "i8", ALLOC_NONE, 5249908);
allocate(188, "i8", ALLOC_NONE, 5249920);
allocate(4, "i8", ALLOC_NONE, 5250108);
allocate(4, "i8", ALLOC_NONE, 5250112);
allocate([46,109,103,99,0] /* .mgc\00 */, "i8", ALLOC_NONE, 5250116);
allocate([0,1,2,3,156,9,134,127,151,141,142,11,12,13,14,15,16,17,18,19,157,133,8,135,24,25,146,143,28,29,30,31,128,129,130,131,132,10,23,27,136,137,138,139,140,5,6,7,144,145,22,147,148,149,150,4,152,153,154,155,20,21,158,26,32,160,161,162,163,164,165,166,167,168,213,46,60,40,43,124,38,169,170,171,172,173,174,175,176,177,33,36,42,41,59,126,45,47,178,179,180,181,182,183,184,185,203,44,37,95,62,63,186,187,188,189,190,191,192,193,194,96,58,35,64,39,61,34,195,97,98,99,100,101,102,103,104,105,196,197,198,199,200,201,202,106,107,108,109,110,111,112,113,114,94,204,205,206,207,208,209,229,115,116,117,118,119,120,121,122,210,211,212,91,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,93,230,231,123,65,66,67,68,69,70,71,72,73,232,233,234,235,236,237,125,74,75,76,77,78,79,80,81,82,238,239,240,241,242,243,92,159,83,84,85,86,87,88,89,90,244,245,246,247,248,249,48,49,50,51,52,53,54,55,56,57,250,251,252,253,254,255] /* \00\01\02\03\9C\09\8 */, "i8", ALLOC_NONE, 5250124);
allocate([0, 0, 0, 0, 1996959894, 0, 0, 0, -301047508, 0, 0, 0, -1727442502, 0, 0, 0, 124634137, 0, 0, 0, 1886057615, 0, 0, 0, -379345611, 0, 0, 0, -1637575261, 0, 0, 0, 249268274, 0, 0, 0, 2044508324, 0, 0, 0, -522852066, 0, 0, 0, -1747789432, 0, 0, 0, 162941995, 0, 0, 0, 2125561021, 0, 0, 0, -407360249, 0, 0, 0, -1866523247, 0, 0, 0, 498536548, 0, 0, 0, 1789927666, 0, 0, 0, -205950648, 0, 0, 0, -2067906082, 0, 0, 0, 450548861, 0, 0, 0, 1843258603, 0, 0, 0, -187386543, 0, 0, 0, -2083289657, 0, 0, 0, 325883990, 0, 0, 0, 1684777152, 0, 0, 0, -43845254, 0, 0, 0, -1973040660, 0, 0, 0, 335633487, 0, 0, 0, 1661365465, 0, 0, 0, -99664541, 0, 0, 0, -1928851979, 0, 0, 0, 997073096, 0, 0, 0, 1281953886, 0, 0, 0, -715111964, 0, 0, 0, -1570279054, 0, 0, 0, 1006888145, 0, 0, 0, 1258607687, 0, 0, 0, -770865667, 0, 0, 0, -1526024853, 0, 0, 0, 901097722, 0, 0, 0, 1119000684, 0, 0, 0, -608450090, 0, 0, 0, -1396901568, 0, 0, 0, 853044451, 0, 0, 0, 1172266101, 0, 0, 0, -589951537, 0, 0, 0, -1412350631, 0, 0, 0, 651767980, 0, 0, 0, 1373503546, 0, 0, 0, -925412992, 0, 0, 0, -1076862698, 0, 0, 0, 565507253, 0, 0, 0, 1454621731, 0, 0, 0, -809855591, 0, 0, 0, -1195530993, 0, 0, 0, 671266974, 0, 0, 0, 1594198024, 0, 0, 0, -972236366, 0, 0, 0, -1324619484, 0, 0, 0, 795835527, 0, 0, 0, 1483230225, 0, 0, 0, -1050600021, 0, 0, 0, -1234817731, 0, 0, 0, 1994146192, 0, 0, 0, 31158534, 0, 0, 0, -1731059524, 0, 0, 0, -271249366, 0, 0, 0, 1907459465, 0, 0, 0, 112637215, 0, 0, 0, -1614814043, 0, 0, 0, -390540237, 0, 0, 0, 2013776290, 0, 0, 0, 251722036, 0, 0, 0, -1777751922, 0, 0, 0, -519137256, 0, 0, 0, 2137656763, 0, 0, 0, 141376813, 0, 0, 0, -1855689577, 0, 0, 0, -429695999, 0, 0, 0, 1802195444, 0, 0, 0, 476864866, 0, 0, 0, -2056965928, 0, 0, 0, -228458418, 0, 0, 0, 1812370925, 0, 0, 0, 453092731, 0, 0, 0, -2113342271, 0, 0, 0, -183516073, 0, 0, 0, 1706088902, 0, 0, 0, 314042704, 0, 0, 0, -1950435094, 0, 0, 0, -54949764, 0, 0, 0, 1658658271, 0, 0, 0, 366619977, 0, 0, 0, -1932296973, 0, 0, 0, -69972891, 0, 0, 0, 1303535960, 0, 0, 0, 984961486, 0, 0, 0, -1547960204, 0, 0, 0, -725929758, 0, 0, 0, 1256170817, 0, 0, 0, 1037604311, 0, 0, 0, -1529756563, 0, 0, 0, -740887301, 0, 0, 0, 1131014506, 0, 0, 0, 879679996, 0, 0, 0, -1385723834, 0, 0, 0, -631195440, 0, 0, 0, 1141124467, 0, 0, 0, 855842277, 0, 0, 0, -1442165665, 0, 0, 0, -586318647, 0, 0, 0, 1342533948, 0, 0, 0, 654459306, 0, 0, 0, -1106571248, 0, 0, 0, -921952122, 0, 0, 0, 1466479909, 0, 0, 0, 544179635, 0, 0, 0, -1184443383, 0, 0, 0, -832445281, 0, 0, 0, 1591671054, 0, 0, 0, 702138776, 0, 0, 0, -1328506846, 0, 0, 0, -942167884, 0, 0, 0, 1504918807, 0, 0, 0, 783551873, 0, 0, 0, -1212326853, 0, 0, 0, -1061524307, 0, 0, 0, -306674912, 0, 0, 0, -1698712650, 0, 0, 0, 62317068, 0, 0, 0, 1957810842, 0, 0, 0, -355121351, 0, 0, 0, -1647151185, 0, 0, 0, 81470997, 0, 0, 0, 1943803523, 0, 0, 0, -480048366, 0, 0, 0, -1805370492, 0, 0, 0, 225274430, 0, 0, 0, 2053790376, 0, 0, 0, -468791541, 0, 0, 0, -1828061283, 0, 0, 0, 167816743, 0, 0, 0, 2097651377, 0, 0, 0, -267414716, 0, 0, 0, -2029476910, 0, 0, 0, 503444072, 0, 0, 0, 1762050814, 0, 0, 0, -144550051, 0, 0, 0, -2140837941, 0, 0, 0, 426522225, 0, 0, 0, 1852507879, 0, 0, 0, -19653770, 0, 0, 0, -1982649376, 0, 0, 0, 282753626, 0, 0, 0, 1742555852, 0, 0, 0, -105259153, 0, 0, 0, -1900089351, 0, 0, 0, 397917763, 0, 0, 0, 1622183637, 0, 0, 0, -690576408, 0, 0, 0, -1580100738, 0, 0, 0, 953729732, 0, 0, 0, 1340076626, 0, 0, 0, -776247311, 0, 0, 0, -1497606297, 0, 0, 0, 1068828381, 0, 0, 0, 1219638859, 0, 0, 0, -670225446, 0, 0, 0, -1358292148, 0, 0, 0, 906185462, 0, 0, 0, 1090812512, 0, 0, 0, -547295293, 0, 0, 0, -1469587627, 0, 0, 0, 829329135, 0, 0, 0, 1181335161, 0, 0, 0, -882789492, 0, 0, 0, -1134132454, 0, 0, 0, 628085408, 0, 0, 0, 1382605366, 0, 0, 0, -871598187, 0, 0, 0, -1156888829, 0, 0, 0, 570562233, 0, 0, 0, 1426400815, 0, 0, 0, -977650754, 0, 0, 0, -1296233688, 0, 0, 0, 733239954, 0, 0, 0, 1555261956, 0, 0, 0, -1026031705, 0, 0, 0, -1244606671, 0, 0, 0, 752459403, 0, 0, 0, 1541320221, 0, 0, 0, -1687895376, 0, 0, 0, -328994266, 0, 0, 0, 1969922972, 0, 0, 0, 40735498, 0, 0, 0, -1677130071, 0, 0, 0, -351390145, 0, 0, 0, 1913087877, 0, 0, 0, 83908371, 0, 0, 0, -1782625662, 0, 0, 0, -491226604, 0, 0, 0, 2075208622, 0, 0, 0, 213261112, 0, 0, 0, -1831694693, 0, 0, 0, -438977011, 0, 0, 0, 2094854071, 0, 0, 0, 198958881, 0, 0, 0, -2032938284, 0, 0, 0, -237706686, 0, 0, 0, 1759359992, 0, 0, 0, 534414190, 0, 0, 0, -2118248755, 0, 0, 0, -155638181, 0, 0, 0, 1873836001, 0, 0, 0, 414664567, 0, 0, 0, -2012718362, 0, 0, 0, -15766928, 0, 0, 0, 1711684554, 0, 0, 0, 285281116, 0, 0, 0, -1889165569, 0, 0, 0, -127750551, 0, 0, 0, 1634467795, 0, 0, 0, 376229701, 0, 0, 0, -1609899400, 0, 0, 0, -686959890, 0, 0, 0, 1308918612, 0, 0, 0, 956543938, 0, 0, 0, -1486412191, 0, 0, 0, -799009033, 0, 0, 0, 1231636301, 0, 0, 0, 1047427035, 0, 0, 0, -1362007478, 0, 0, 0, -640263460, 0, 0, 0, 1088359270, 0, 0, 0, 936918000, 0, 0, 0, -1447252397, 0, 0, 0, -558129467, 0, 0, 0, 1202900863, 0, 0, 0, 817233897, 0, 0, 0, -1111625188, 0, 0, 0, -893730166, 0, 0, 0, 1404277552, 0, 0, 0, 615818150, 0, 0, 0, -1160759803, 0, 0, 0, -841546093, 0, 0, 0, 1423857449, 0, 0, 0, 601450431, 0, 0, 0, -1285129682, 0, 0, 0, -1000256840, 0, 0, 0, 1567103746, 0, 0, 0, 711928724, 0, 0, 0, -1274298825, 0, 0, 0, -1022587231, 0, 0, 0, 1510334235, 0, 0, 0, 755167117, 0, 0, 0, 0, 0, 0, 0, 421212481, 0, 0, 0, 842424962, 0, 0, 0, 724390851, 0, 0, 0, 1684849924, 0, 0, 0, 2105013317, 0, 0, 0, 1448781702, 0, 0, 0, 1329698503, 0, 0, 0, -925267448, 0, 0, 0, -775767223, 0, 0, 0, -84940662, 0, 0, 0, -470492725, 0, 0, 0, -1397403892, 0, 0, 0, -1246855603, 0, 0, 0, -1635570290, 0, 0, 0, -2020074289, 0, 0, 0, 1254232657, 0, 0, 0, 1406739216, 0, 0, 0, 2029285587, 0, 0, 0, 1643069842, 0, 0, 0, 783210325, 0, 0, 0, 934667796, 0, 0, 0, 479770071, 0, 0, 0, 92505238, 0, 0, 0, -2112120743, 0, 0, 0, -1694455528, 0, 0, 0, -1339163941, 0, 0, 0, -1456026726, 0, 0, 0, -428384931, 0, 0, 0, -9671652, 0, 0, 0, -733921313, 0, 0, 0, -849736034, 0, 0, 0, -1786501982, 0, 0, 0, -1935731229, 0, 0, 0, -1481488864, 0, 0, 0, -1096190111, 0, 0, 0, -236396122, 0, 0, 0, -386674457, 0, 0, 0, -1008827612, 0, 0, 0, -624577947, 0, 0, 0, 1566420650, 0, 0, 0, 1145479147, 0, 0, 0, 1869335592, 0, 0, 0, 1987116393, 0, 0, 0, 959540142, 0, 0, 0, 539646703, 0, 0, 0, 185010476, 0, 0, 0, 303839341, 0, 0, 0, -549046541, 0, 0, 0, -966981710, 0, 0, 0, -311405455, 0, 0, 0, -194288336, 0, 0, 0, -1154812937, 0, 0, 0, -1573797194, 0, 0, 0, -1994616459, 0, 0, 0, -1878548428, 0, 0, 0, 396344571, 0, 0, 0, 243568058, 0, 0, 0, 631889529, 0, 0, 0, 1018359608, 0, 0, 0, 1945336319, 0, 0, 0, 1793607870, 0, 0, 0, 1103436669, 0, 0, 0, 1490954812, 0, 0, 0, -260485371, 0, 0, 0, -379421116, 0, 0, 0, -1034998393, 0, 0, 0, -615244602, 0, 0, 0, -1810527743, 0, 0, 0, -1928414400, 0, 0, 0, -1507596157, 0, 0, 0, -1086793278, 0, 0, 0, 950060301, 0, 0, 0, 565965900, 0, 0, 0, 177645455, 0, 0, 0, 328046286, 0, 0, 0, 1556873225, 0, 0, 0, 1171730760, 0, 0, 0, 1861902987, 0, 0, 0, 2011255754, 0, 0, 0, -1162125996, 0, 0, 0, -1549767659, 0, 0, 0, -2004009002, 0, 0, 0, -1852436841, 0, 0, 0, -556296112, 0, 0, 0, -942888687, 0, 0, 0, -320734510, 0, 0, 0, -168113261, 0, 0, 0, 1919080284, 0, 0, 0, 1803150877, 0, 0, 0, 1079293406, 0, 0, 0, 1498383519, 0, 0, 0, 370020952, 0, 0, 0, 253043481, 0, 0, 0, 607678682, 0, 0, 0, 1025720731, 0, 0, 0, 1711106983, 0, 0, 0, 2095471334, 0, 0, 0, 1472923941, 0, 0, 0, 1322268772, 0, 0, 0, 26324643, 0, 0, 0, 411738082, 0, 0, 0, 866634785, 0, 0, 0, 717028704, 0, 0, 0, -1390091857, 0, 0, 0, -1270886162, 0, 0, 0, -1626176723, 0, 0, 0, -2046184852, 0, 0, 0, -918018901, 0, 0, 0, -799861270, 0, 0, 0, -75610583, 0, 0, 0, -496666776, 0, 0, 0, 792689142, 0, 0, 0, 908347575, 0, 0, 0, 487136116, 0, 0, 0, 68299317, 0, 0, 0, 1263779058, 0, 0, 0, 1380486579, 0, 0, 0, 2036719216, 0, 0, 0, 1618931505, 0, 0, 0, -404294658, 0, 0, 0, -16923969, 0, 0, 0, -707751556, 0, 0, 0, -859070403, 0, 0, 0, -2088093958, 0, 0, 0, -1701771333, 0, 0, 0, -1313057672, 0, 0, 0, -1465424583, 0, 0, 0, 998479947, 0, 0, 0, 580430090, 0, 0, 0, 162921161, 0, 0, 0, 279890824, 0, 0, 0, 1609522511, 0, 0, 0, 1190423566, 0, 0, 0, 1842954189, 0, 0, 0, 1958874764, 0, 0, 0, -212200893, 0, 0, 0, -364829950, 0, 0, 0, -1049857855, 0, 0, 0, -663273088, 0, 0, 0, -1758013625, 0, 0, 0, -1909594618, 0, 0, 0, -1526680123, 0, 0, 0, -1139047292, 0, 0, 0, 1900120602, 0, 0, 0, 1750776667, 0, 0, 0, 1131931800, 0, 0, 0, 1517083097, 0, 0, 0, 355290910, 0, 0, 0, 204897887, 0, 0, 0, 656092572, 0, 0, 0, 1040194781, 0, 0, 0, -1181220846, 0, 0, 0, -1602014893, 0, 0, 0, -1951505776, 0, 0, 0, -1833610287, 0, 0, 0, -571161322, 0, 0, 0, -990907305, 0, 0, 0, -272455788, 0, 0, 0, -153512235, 0, 0, 0, -1375224599, 0, 0, 0, -1222865496, 0, 0, 0, -1674453397, 0, 0, 0, -2060783830, 0, 0, 0, -898926099, 0, 0, 0, -747616084, 0, 0, 0, -128115857, 0, 0, 0, -515495378, 0, 0, 0, 1725839073, 0, 0, 0, 2143618976, 0, 0, 0, 1424512099, 0, 0, 0, 1307796770, 0, 0, 0, 45282277, 0, 0, 0, 464110244, 0, 0, 0, 813994343, 0, 0, 0, 698327078, 0, 0, 0, -456806728, 0, 0, 0, -35741703, 0, 0, 0, -688665542, 0, 0, 0, -806814341, 0, 0, 0, -2136380484, 0, 0, 0, -1716364547, 0, 0, 0, -1298200258, 0, 0, 0, -1417398145, 0, 0, 0, 740041904, 0, 0, 0, 889656817, 0, 0, 0, 506086962, 0, 0, 0, 120682355, 0, 0, 0, 1215357364, 0, 0, 0, 1366020341, 0, 0, 0, 2051441462, 0, 0, 0, 1667084919, 0, 0, 0, -872753330, 0, 0, 0, -756947441, 0, 0, 0, -104024628, 0, 0, 0, -522746739, 0, 0, 0, -1349119414, 0, 0, 0, -1232264437, 0, 0, 0, -1650429752, 0, 0, 0, -2068102775, 0, 0, 0, 52649286, 0, 0, 0, 439905287, 0, 0, 0, 823476164, 0, 0, 0, 672009861, 0, 0, 0, 1733269570, 0, 0, 0, 2119477507, 0, 0, 0, 1434057408, 0, 0, 0, 1281543041, 0, 0, 0, -2126985953, 0, 0, 0, -1742474146, 0, 0, 0, -1290885219, 0, 0, 0, -1441425700, 0, 0, 0, -447479781, 0, 0, 0, -61918886, 0, 0, 0, -681418087, 0, 0, 0, -830909480, 0, 0, 0, 1239502615, 0, 0, 0, 1358593622, 0, 0, 0, 2077699477, 0, 0, 0, 1657543892, 0, 0, 0, 764250643, 0, 0, 0, 882293586, 0, 0, 0, 532408465, 0, 0, 0, 111204816, 0, 0, 0, 1585378284, 0, 0, 0, 1197851309, 0, 0, 0, 1816695150, 0, 0, 0, 1968414767, 0, 0, 0, 974272232, 0, 0, 0, 587794345, 0, 0, 0, 136598634, 0, 0, 0, 289367339, 0, 0, 0, -1767409180, 0, 0, 0, -1883486043, 0, 0, 0, -1533994138, 0, 0, 0, -1115018713, 0, 0, 0, -221528864, 0, 0, 0, -338653791, 0, 0, 0, -1057104286, 0, 0, 0, -639176925, 0, 0, 0, 347922877, 0, 0, 0, 229101820, 0, 0, 0, 646611775, 0, 0, 0, 1066513022, 0, 0, 0, 1892689081, 0, 0, 0, 1774917112, 0, 0, 0, 1122387515, 0, 0, 0, 1543337850, 0, 0, 0, -597333067, 0, 0, 0, -981574924, 0, 0, 0, -296548041, 0, 0, 0, -146261898, 0, 0, 0, -1207325007, 0, 0, 0, -1592614928, 0, 0, 0, -1975530445, 0, 0, 0, -1826292366, 0, 0, 0, 0, 0, 0, 0, 29518391, 0, 0, 0, 59036782, 0, 0, 0, 38190681, 0, 0, 0, 118073564, 0, 0, 0, 114017003, 0, 0, 0, 76381362, 0, 0, 0, 89069189, 0, 0, 0, 236147128, 0, 0, 0, 265370511, 0, 0, 0, 228034006, 0, 0, 0, 206958561, 0, 0, 0, 152762724, 0, 0, 0, 148411219, 0, 0, 0, 178138378, 0, 0, 0, 190596925, 0, 0, 0, 472294256, 0, 0, 0, 501532999, 0, 0, 0, 530741022, 0, 0, 0, 509615401, 0, 0, 0, 456068012, 0, 0, 0, 451764635, 0, 0, 0, 413917122, 0, 0, 0, 426358261, 0, 0, 0, 305525448, 0, 0, 0, 334993663, 0, 0, 0, 296822438, 0, 0, 0, 275991697, 0, 0, 0, 356276756, 0, 0, 0, 352202787, 0, 0, 0, 381193850, 0, 0, 0, 393929805, 0, 0, 0, 944588512, 0, 0, 0, 965684439, 0, 0, 0, 1003065998, 0, 0, 0, 973863097, 0, 0, 0, 1061482044, 0, 0, 0, 1049003019, 0, 0, 0, 1019230802, 0, 0, 0, 1023561829, 0, 0, 0, 912136024, 0, 0, 0, 933002607, 0, 0, 0, 903529270, 0, 0, 0, 874031361, 0, 0, 0, 827834244, 0, 0, 0, 815125939, 0, 0, 0, 852716522, 0, 0, 0, 856752605, 0, 0, 0, 611050896, 0, 0, 0, 631869351, 0, 0, 0, 669987326, 0, 0, 0, 640506825, 0, 0, 0, 593644876, 0, 0, 0, 580921211, 0, 0, 0, 551983394, 0, 0, 0, 556069653, 0, 0, 0, 712553512, 0, 0, 0, 733666847, 0, 0, 0, 704405574, 0, 0, 0, 675154545, 0, 0, 0, 762387700, 0, 0, 0, 749958851, 0, 0, 0, 787859610, 0, 0, 0, 792175277, 0, 0, 0, 1889177024, 0, 0, 0, 1901651959, 0, 0, 0, 1931368878, 0, 0, 0, 1927033753, 0, 0, 0, 2006131996, 0, 0, 0, 1985040171, 0, 0, 0, 1947726194, 0, 0, 0, 1976933189, 0, 0, 0, 2122964088, 0, 0, 0, 2135668303, 0, 0, 0, 2098006038, 0, 0, 0, 2093965857, 0, 0, 0, 2038461604, 0, 0, 0, 2017599123, 0, 0, 0, 2047123658, 0, 0, 0, 2076625661, 0, 0, 0, 1824272048, 0, 0, 0, 1836991623, 0, 0, 0, 1866005214, 0, 0, 0, 1861914857, 0, 0, 0, 1807058540, 0, 0, 0, 1786244187, 0, 0, 0, 1748062722, 0, 0, 0, 1777547317, 0, 0, 0, 1655668488, 0, 0, 0, 1668093247, 0, 0, 0, 1630251878, 0, 0, 0, 1625932113, 0, 0, 0, 1705433044, 0, 0, 0, 1684323811, 0, 0, 0, 1713505210, 0, 0, 0, 1742760333, 0, 0, 0, 1222101792, 0, 0, 0, 1226154263, 0, 0, 0, 1263738702, 0, 0, 0, 1251046777, 0, 0, 0, 1339974652, 0, 0, 0, 1310460363, 0, 0, 0, 1281013650, 0, 0, 0, 1301863845, 0, 0, 0, 1187289752, 0, 0, 0, 1191637167, 0, 0, 0, 1161842422, 0, 0, 0, 1149379777, 0, 0, 0, 1103966788, 0, 0, 0, 1074747507, 0, 0, 0, 1112139306, 0, 0, 0, 1133218845, 0, 0, 0, 1425107024, 0, 0, 0, 1429406311, 0, 0, 0, 1467333694, 0, 0, 0, 1454888457, 0, 0, 0, 1408811148, 0, 0, 0, 1379576507, 0, 0, 0, 1350309090, 0, 0, 0, 1371438805, 0, 0, 0, 1524775400, 0, 0, 0, 1528845279, 0, 0, 0, 1499917702, 0, 0, 0, 1487177649, 0, 0, 0, 1575719220, 0, 0, 0, 1546255107, 0, 0, 0, 1584350554, 0, 0, 0, 1605185389, 0, 0, 0, -516613248, 0, 0, 0, -520654409, 0, 0, 0, -491663378, 0, 0, 0, -478960167, 0, 0, 0, -432229540, 0, 0, 0, -402728597, 0, 0, 0, -440899790, 0, 0, 0, -461763323, 0, 0, 0, -282703304, 0, 0, 0, -287039473, 0, 0, 0, -324886954, 0, 0, 0, -312413087, 0, 0, 0, -399514908, 0, 0, 0, -370308909, 0, 0, 0, -341100918, 0, 0, 0, -362193731, 0, 0, 0, -49039120, 0, 0, 0, -53357881, 0, 0, 0, -23630690, 0, 0, 0, -11204951, 0, 0, 0, -98955220, 0, 0, 0, -69699045, 0, 0, 0, -107035582, 0, 0, 0, -128143755, 0, 0, 0, -218044088, 0, 0, 0, -222133377, 0, 0, 0, -259769050, 0, 0, 0, -247048431, 0, 0, 0, -200719980, 0, 0, 0, -171234397, 0, 0, 0, -141715974, 0, 0, 0, -162529331, 0, 0, 0, -646423200, 0, 0, 0, -658884777, 0, 0, 0, -620984050, 0, 0, 0, -616635591, 0, 0, 0, -562956868, 0, 0, 0, -541876341, 0, 0, 0, -571137582, 0, 0, 0, -600355867, 0, 0, 0, -680850216, 0, 0, 0, -693541137, 0, 0, 0, -722478922, 0, 0, 0, -718425471, 0, 0, 0, -798841852, 0, 0, 0, -777990605, 0, 0, 0, -739872662, 0, 0, 0, -769385891, 0, 0, 0, -983630320, 0, 0, 0, -996371417, 0, 0, 0, -958780802, 0, 0, 0, -954711991, 0, 0, 0, -1034463540, 0, 0, 0, -1013629701, 0, 0, 0, -1043103070, 0, 0, 0, -1072568171, 0, 0, 0, -884101208, 0, 0, 0, -896547425, 0, 0, 0, -926319674, 0, 0, 0, -922021391, 0, 0, 0, -867956876, 0, 0, 0, -846828221, 0, 0, 0, -809446630, 0, 0, 0, -838682323, 0, 0, 0, -1850763712, 0, 0, 0, -1871840137, 0, 0, 0, -1842658770, 0, 0, 0, -1813436391, 0, 0, 0, -1767489892, 0, 0, 0, -1755032405, 0, 0, 0, -1792873742, 0, 0, 0, -1797226299, 0, 0, 0, -1615017992, 0, 0, 0, -1635865137, 0, 0, 0, -1674046570, 0, 0, 0, -1644529247, 0, 0, 0, -1732939996, 0, 0, 0, -1720253165, 0, 0, 0, -1691239606, 0, 0, 0, -1695297155, 0, 0, 0, -1920387792, 0, 0, 0, -1941217529, 0, 0, 0, -1911692962, 0, 0, 0, -1882223767, 0, 0, 0, -1971282452, 0, 0, 0, -1958545445, 0, 0, 0, -1996207742, 0, 0, 0, -2000280651, 0, 0, 0, -2087033720, 0, 0, 0, -2108158273, 0, 0, 0, -2145472282, 0, 0, 0, -2116232495, 0, 0, 0, -2070688684, 0, 0, 0, -2058246557, 0, 0, 0, -2028529606, 0, 0, 0, -2032831987, 0, 0, 0, -1444753248, 0, 0, 0, -1474250089, 0, 0, 0, -1436154674, 0, 0, 0, -1415287047, 0, 0, 0, -1360299908, 0, 0, 0, -1356262837, 0, 0, 0, -1385190382, 0, 0, 0, -1397897691, 0, 0, 0, -1477345000, 0, 0, 0, -1506546897, 0, 0, 0, -1535814282, 0, 0, 0, -1514717375, 0, 0, 0, -1594349116, 0, 0, 0, -1590017037, 0, 0, 0, -1552089686, 0, 0, 0, -1564567651, 0, 0, 0, -1245416496, 0, 0, 0, -1274668569, 0, 0, 0, -1237276738, 0, 0, 0, -1216164471, 0, 0, 0, -1295131892, 0, 0, 0, -1290817221, 0, 0, 0, -1320611998, 0, 0, 0, -1333041835, 0, 0, 0, -1143528856, 0, 0, 0, -1173010337, 0, 0, 0, -1202457082, 0, 0, 0, -1181639631, 0, 0, 0, -1126266188, 0, 0, 0, -1122180989, 0, 0, 0, -1084596518, 0, 0, 0, -1097321235, 0, 0, 0, 0, 0, 0, 0, -1195612315, 0, 0, 0, -1442199413, 0, 0, 0, 313896942, 0, 0, 0, -1889364137, 0, 0, 0, 937357362, 0, 0, 0, 627793884, 0, 0, 0, -1646839623, 0, 0, 0, -978048785, 0, 0, 0, 2097696650, 0, 0, 0, 1874714724, 0, 0, 0, -687765759, 0, 0, 0, 1255587768, 0, 0, 0, -227878691, 0, 0, 0, -522225869, 0, 0, 0, 1482887254, 0, 0, 0, 1343838111, 0, 0, 0, -391827206, 0, 0, 0, -99573996, 0, 0, 0, 1118632049, 0, 0, 0, -545537848, 0, 0, 0, 1741137837, 0, 0, 0, 1970407491, 0, 0, 0, -842109146, 0, 0, 0, -1783791760, 0, 0, 0, 756094997, 0, 0, 0, 1067759611, 0, 0, 0, -2028416866, 0, 0, 0, 449832999, 0, 0, 0, -1569484990, 0, 0, 0, -1329192788, 0, 0, 0, 142231497, 0, 0, 0, -1607291074, 0, 0, 0, 412010587, 0, 0, 0, 171665333, 0, 0, 0, -1299775280, 0, 0, 0, 793786473, 0, 0, 0, -1746116852, 0, 0, 0, -2057703198, 0, 0, 0, 1038456711, 0, 0, 0, 1703315409, 0, 0, 0, -583343948, 0, 0, 0, -812691622, 0, 0, 0, 1999841343, 0, 0, 0, -354152314, 0, 0, 0, 1381529571, 0, 0, 0, 1089329165, 0, 0, 0, -128860312, 0, 0, 0, -265553759, 0, 0, 0, 1217896388, 0, 0, 0, 1512189994, 0, 0, 0, -492939441, 0, 0, 0, 2135519222, 0, 0, 0, -940242797, 0, 0, 0, -717183107, 0, 0, 0, 1845280792, 0, 0, 0, 899665998, 0, 0, 0, -1927039189, 0, 0, 0, -1617553211, 0, 0, 0, 657096608, 0, 0, 0, -1157806311, 0, 0, 0, 37822588, 0, 0, 0, 284462994, 0, 0, 0, -1471616777, 0, 0, 0, -1693165507, 0, 0, 0, 598228824, 0, 0, 0, 824021174, 0, 0, 0, -1985873965, 0, 0, 0, 343330666, 0, 0, 0, -1396004849, 0, 0, 0, -1098971167, 0, 0, 0, 113467524, 0, 0, 0, 1587572946, 0, 0, 0, -434366537, 0, 0, 0, -190203815, 0, 0, 0, 1276501820, 0, 0, 0, -775755899, 0, 0, 0, 1769898208, 0, 0, 0, 2076913422, 0, 0, 0, -1015592853, 0, 0, 0, -888336478, 0, 0, 0, 1941006535, 0, 0, 0, 1627703081, 0, 0, 0, -642211764, 0, 0, 0, 1148164341, 0, 0, 0, -53215344, 0, 0, 0, -295284610, 0, 0, 0, 1457141531, 0, 0, 0, 247015245, 0, 0, 0, -1241169880, 0, 0, 0, -1531908154, 0, 0, 0, 470583459, 0, 0, 0, -2116308966, 0, 0, 0, 963106687, 0, 0, 0, 735213713, 0, 0, 0, -1821499404, 0, 0, 0, 992409347, 0, 0, 0, -2087022490, 0, 0, 0, -1859174520, 0, 0, 0, 697522413, 0, 0, 0, -1270587308, 0, 0, 0, 217581361, 0, 0, 0, 508405983, 0, 0, 0, -1494102086, 0, 0, 0, -23928852, 0, 0, 0, 1177467017, 0, 0, 0, 1419450215, 0, 0, 0, -332959742, 0, 0, 0, 1911572667, 0, 0, 0, -917753890, 0, 0, 0, -604405712, 0, 0, 0, 1665525589, 0, 0, 0, 1799331996, 0, 0, 0, -746338311, 0, 0, 0, -1053399017, 0, 0, 0, 2039091058, 0, 0, 0, -463652917, 0, 0, 0, 1558270126, 0, 0, 0, 1314193216, 0, 0, 0, -152528859, 0, 0, 0, -1366587277, 0, 0, 0, 372764438, 0, 0, 0, 75645176, 0, 0, 0, -1136777315, 0, 0, 0, 568925988, 0, 0, 0, -1722451903, 0, 0, 0, -1948198993, 0, 0, 0, 861712586, 0, 0, 0, -312887749, 0, 0, 0, 1441124702, 0, 0, 0, 1196457648, 0, 0, 0, -1304107, 0, 0, 0, 1648042348, 0, 0, 0, -628668919, 0, 0, 0, -936187417, 0, 0, 0, 1888390786, 0, 0, 0, 686661332, 0, 0, 0, -1873675855, 0, 0, 0, -2098964897, 0, 0, 0, 978858298, 0, 0, 0, -1483798141, 0, 0, 0, 523464422, 0, 0, 0, 226935048, 0, 0, 0, -1254447507, 0, 0, 0, -1119821404, 0, 0, 0, 100435649, 0, 0, 0, 390670639, 0, 0, 0, -1342878134, 0, 0, 0, 841119475, 0, 0, 0, -1969352298, 0, 0, 0, -1741963656, 0, 0, 0, 546822429, 0, 0, 0, 2029308235, 0, 0, 0, -1068978642, 0, 0, 0, -755170880, 0, 0, 0, 1782671013, 0, 0, 0, -141140452, 0, 0, 0, 1328167289, 0, 0, 0, 1570739863, 0, 0, 0, -450629134, 0, 0, 0, 1298864389, 0, 0, 0, -170426784, 0, 0, 0, -412954226, 0, 0, 0, 1608431339, 0, 0, 0, -1039561134, 0, 0, 0, 2058742071, 0, 0, 0, 1744848601, 0, 0, 0, -792976964, 0, 0, 0, -1998638614, 0, 0, 0, 811816591, 0, 0, 0, 584513889, 0, 0, 0, -1704288764, 0, 0, 0, 129869501, 0, 0, 0, -1090403880, 0, 0, 0, -1380684234, 0, 0, 0, 352848211, 0, 0, 0, 494030490, 0, 0, 0, -1513215489, 0, 0, 0, -1216641519, 0, 0, 0, 264757620, 0, 0, 0, -1844389427, 0, 0, 0, 715964072, 0, 0, 0, 941166918, 0, 0, 0, -2136639965, 0, 0, 0, -658086283, 0, 0, 0, 1618608400, 0, 0, 0, 1926213374, 0, 0, 0, -898381413, 0, 0, 0, 1470427426, 0, 0, 0, -283601337, 0, 0, 0, -38979159, 0, 0, 0, 1158766284, 0, 0, 0, 1984818694, 0, 0, 0, -823031453, 0, 0, 0, -599513459, 0, 0, 0, 1693991400, 0, 0, 0, -114329263, 0, 0, 0, 1100160564, 0, 0, 0, 1395044826, 0, 0, 0, -342174017, 0, 0, 0, -1275476247, 0, 0, 0, 189112716, 0, 0, 0, 435162722, 0, 0, 0, -1588827897, 0, 0, 0, 1016811966, 0, 0, 0, -2077804837, 0, 0, 0, -1768777419, 0, 0, 0, 774831696, 0, 0, 0, 643086745, 0, 0, 0, -1628905732, 0, 0, 0, -1940033262, 0, 0, 0, 887166583, 0, 0, 0, -1456066866, 0, 0, 0, 294275499, 0, 0, 0, 54519365, 0, 0, 0, -1149009632, 0, 0, 0, -471821962, 0, 0, 0, 1532818963, 0, 0, 0, 1240029693, 0, 0, 0, -246071656, 0, 0, 0, 1820460577, 0, 0, 0, -734109372, 0, 0, 0, -963916118, 0, 0, 0, 2117577167, 0, 0, 0, -696303304, 0, 0, 0, 1858283101, 0, 0, 0, 2088143283, 0, 0, 0, -993333546, 0, 0, 0, 1495127663, 0, 0, 0, -509497078, 0, 0, 0, -216785180, 0, 0, 0, 1269332353, 0, 0, 0, 332098007, 0, 0, 0, -1418260814, 0, 0, 0, -1178427044, 0, 0, 0, 25085497, 0, 0, 0, -1666580864, 0, 0, 0, 605395429, 0, 0, 0, 916469259, 0, 0, 0, -1910746770, 0, 0, 0, -2040129881, 0, 0, 0, 1054503362, 0, 0, 0, 745528876, 0, 0, 0, -1798063799, 0, 0, 0, 151290352, 0, 0, 0, -1313282411, 0, 0, 0, -1559410309, 0, 0, 0, 464596510, 0, 0, 0, 1137851976, 0, 0, 0, -76654291, 0, 0, 0, -371460413, 0, 0, 0, 1365741990, 0, 0, 0, -860837601, 0, 0, 0, 1946996346, 0, 0, 0, 1723425172, 0, 0, 0, -570095887, 0, 0, 0, 0, 0, 0, 0, -1775237257, 0, 0, 0, 744558318, 0, 0, 0, -1169094247, 0, 0, 0, 432303367, 0, 0, 0, -1879807376, 0, 0, 0, 900031465, 0, 0, 0, -1550490466, 0, 0, 0, 847829774, 0, 0, 0, -1531388807, 0, 0, 0, 518641120, 0, 0, 0, -1998990697, 0, 0, 0, 726447625, 0, 0, 0, -1115901570, 0, 0, 0, 120436967, 0, 0, 0, -1860321392, 0, 0, 0, 1678817053, 0, 0, 0, -232738710, 0, 0, 0, 1215412723, 0, 0, 0, -566116732, 0, 0, 0, 2111101466, 0, 0, 0, -337322643, 0, 0, 0, 1370871028, 0, 0, 0, -947530877, 0, 0, 0, 1452829715, 0, 0, 0, -1062704284, 0, 0, 0, 2063164157, 0, 0, 0, -322345590, 0, 0, 0, 1331429652, 0, 0, 0, -647231901, 0, 0, 0, 1664946170, 0, 0, 0, -183695219, 0, 0, 0, -937398725, 0, 0, 0, 1578133836, 0, 0, 0, -465477419, 0, 0, 0, 1920034722, 0, 0, 0, -773586116, 0, 0, 0, 1205077067, 0, 0, 0, -41611822, 0, 0, 0, 1807026853, 0, 0, 0, -89606859, 0, 0, 0, 1821946434, 0, 0, 0, -691422245, 0, 0, 0, 1090108588, 0, 0, 0, -479406030, 0, 0, 0, 1969020741, 0, 0, 0, -821176612, 0, 0, 0, 1497223595, 0, 0, 0, -1406084826, 0, 0, 0, 973135441, 0, 0, 0, -2142119992, 0, 0, 0, 375509183, 0, 0, 0, -1242254303, 0, 0, 0, 600093526, 0, 0, 0, -1718240561, 0, 0, 0, 262520248, 0, 0, 0, -1632107992, 0, 0, 0, 143131999, 0, 0, 0, -1294398266, 0, 0, 0, 619252657, 0, 0, 0, -2021888209, 0, 0, 0, 290220120, 0, 0, 0, -1424137791, 0, 0, 0, 1026385590, 0, 0, 0, -1874731914, 0, 0, 0, 108124929, 0, 0, 0, -1138699624, 0, 0, 0, 705746415, 0, 0, 0, -1987726991, 0, 0, 0, 532002310, 0, 0, 0, -1511735393, 0, 0, 0, 869578984, 0, 0, 0, -1563883656, 0, 0, 0, 888733711, 0, 0, 0, -1901590122, 0, 0, 0, 412618465, 0, 0, 0, -1156748673, 0, 0, 0, 759000328, 0, 0, 0, -1754504047, 0, 0, 0, 22832102, 0, 0, 0, -195990677, 0, 0, 0, 1650551836, 0, 0, 0, -667916923, 0, 0, 0, 1308648178, 0, 0, 0, -309000596, 0, 0, 0, 2074411291, 0, 0, 0, -1040971646, 0, 0, 0, 1472466933, 0, 0, 0, -958812059, 0, 0, 0, 1357494034, 0, 0, 0, -356991349, 0, 0, 0, 2089335292, 0, 0, 0, -551690910, 0, 0, 0, 1227741717, 0, 0, 0, -209923188, 0, 0, 0, 1699534075, 0, 0, 0, 1482797645, 0, 0, 0, -833505990, 0, 0, 0, 1946205347, 0, 0, 0, -500122668, 0, 0, 0, 1101389642, 0, 0, 0, -678045635, 0, 0, 0, 1841615268, 0, 0, 0, -67840301, 0, 0, 0, 1793681731, 0, 0, 0, -52859340, 0, 0, 0, 1183344557, 0, 0, 0, -793222950, 0, 0, 0, 1932330052, 0, 0, 0, -451083469, 0, 0, 0, 1598818986, 0, 0, 0, -914616867, 0, 0, 0, 1014039888, 0, 0, 0, -1438580185, 0, 0, 0, 269487038, 0, 0, 0, -2044719927, 0, 0, 0, 632645719, 0, 0, 0, -1283100896, 0, 0, 0, 164914873, 0, 0, 0, -1612422706, 0, 0, 0, 251256414, 0, 0, 0, -1731602135, 0, 0, 0, 580440240, 0, 0, 0, -1264003129, 0, 0, 0, 389919577, 0, 0, 0, -2129808338, 0, 0, 0, 995933623, 0, 0, 0, -1385383232, 0, 0, 0, 545503469, 0, 0, 0, -1229733990, 0, 0, 0, 216184323, 0, 0, 0, -1697468044, 0, 0, 0, 961009130, 0, 0, 0, -1351101795, 0, 0, 0, 354867972, 0, 0, 0, -2095653773, 0, 0, 0, 302736355, 0, 0, 0, -2076482412, 0, 0, 0, 1047162125, 0, 0, 0, -1470469510, 0, 0, 0, 198119140, 0, 0, 0, -1644230253, 0, 0, 0, 665714698, 0, 0, 0, -1315043459, 0, 0, 0, 1150488560, 0, 0, 0, -761067385, 0, 0, 0, 1760690462, 0, 0, 0, -20838807, 0, 0, 0, 1566008055, 0, 0, 0, -882416256, 0, 0, 0, 1899392025, 0, 0, 0, -419009682, 0, 0, 0, 1981535486, 0, 0, 0, -533998711, 0, 0, 0, 1518000656, 0, 0, 0, -867508889, 0, 0, 0, 1876933113, 0, 0, 0, -101728626, 0, 0, 0, 1136572183, 0, 0, 0, -712069024, 0, 0, 0, -391915818, 0, 0, 0, 2123616673, 0, 0, 0, -993863624, 0, 0, 0, 1391648591, 0, 0, 0, -244859951, 0, 0, 0, 1733803174, 0, 0, 0, -586762945, 0, 0, 0, 1261875784, 0, 0, 0, -634712616, 0, 0, 0, 1276840623, 0, 0, 0, -162921674, 0, 0, 0, 1618609217, 0, 0, 0, -1007722273, 0, 0, 0, 1440704424, 0, 0, 0, -275878351, 0, 0, 0, 2042521926, 0, 0, 0, -1934401077, 0, 0, 0, 444819132, 0, 0, 0, -1596821723, 0, 0, 0, 920807506, 0, 0, 0, -1787360052, 0, 0, 0, 54987707, 0, 0, 0, -1189739998, 0, 0, 0, 791020885, 0, 0, 0, -1103381819, 0, 0, 0, 671858098, 0, 0, 0, -1839549397, 0, 0, 0, 74101596, 0, 0, 0, -1476405310, 0, 0, 0, 835702965, 0, 0, 0, -1952523988, 0, 0, 0, 497999451, 0, 0, 0, -1329437541, 0, 0, 0, 653419500, 0, 0, 0, -1667011979, 0, 0, 0, 177433858, 0, 0, 0, -1459222116, 0, 0, 0, 1060507371, 0, 0, 0, -2056845454, 0, 0, 0, 324468741, 0, 0, 0, -2109030507, 0, 0, 0, 343587042, 0, 0, 0, -1372868229, 0, 0, 0, 941340172, 0, 0, 0, -1685138798, 0, 0, 0, 230610405, 0, 0, 0, -1209017220, 0, 0, 0, 568318731, 0, 0, 0, -724380794, 0, 0, 0, 1122161905, 0, 0, 0, -122430104, 0, 0, 0, 1854134815, 0, 0, 0, -854147455, 0, 0, 0, 1529264630, 0, 0, 0, -512249745, 0, 0, 0, 2001188632, 0, 0, 0, -430307192, 0, 0, 0, 1885999103, 0, 0, 0, -902101402, 0, 0, 0, 1544225041, 0, 0, 0, -6396529, 0, 0, 0, 1773036280, 0, 0, 0, -738235551, 0, 0, 0, 1171221526, 0, 0, 0, 2028079776, 0, 0, 0, -288223785, 0, 0, 0, 1417872462, 0, 0, 0, -1028455623, 0, 0, 0, 1629906855, 0, 0, 0, -149528368, 0, 0, 0, 1296525641, 0, 0, 0, -612929986, 0, 0, 0, 1248514478, 0, 0, 0, -598026535, 0, 0, 0, 1712054080, 0, 0, 0, -264513481, 0, 0, 0, 1403960489, 0, 0, 0, -979452962, 0, 0, 0, 2144318023, 0, 0, 0, -369117904, 0, 0, 0, 485670333, 0, 0, 0, -1966949686, 0, 0, 0, 814986067, 0, 0, 0, -1499220956, 0, 0, 0, 87478458, 0, 0, 0, -1828268083, 0, 0, 0, 693624404, 0, 0, 0, -1083713245, 0, 0, 0, 779773619, 0, 0, 0, -1203084860, 0, 0, 0, 35350621, 0, 0, 0, -1809092822, 0, 0, 0, 935201716, 0, 0, 0, -1584526141, 0, 0, 0, 467600730, 0, 0, 0, -1913716179, 0, 0, 0, 0, 0, 0, 0, 1093737241, 0, 0, 0, -2107492814, 0, 0, 0, -1017959125, 0, 0, 0, 80047204, 0, 0, 0, 1173649277, 0, 0, 0, -2035852714, 0, 0, 0, -946454193, 0, 0, 0, 143317448, 0, 0, 0, 1237041873, 0, 0, 0, -1964445702, 0, 0, 0, -874908445, 0, 0, 0, 206550444, 0, 0, 0, 1300147893, 0, 0, 0, -1909619810, 0, 0, 0, -820209529, 0, 0, 0, 1360183882, 0, 0, 0, 270784851, 0, 0, 0, -747572104, 0, 0, 0, -1841172639, 0, 0, 0, 1440198190, 0, 0, 0, 350663991, 0, 0, 0, -675964900, 0, 0, 0, -1769700603, 0, 0, 0, 1503140738, 0, 0, 0, 413728923, 0, 0, 0, -604361296, 0, 0, 0, -1697958231, 0, 0, 0, 1566406630, 0, 0, 0, 476867839, 0, 0, 0, -549502508, 0, 0, 0, -1643226419, 0, 0, 0, -1574665067, 0, 0, 0, -485122164, 0, 0, 0, 541504167, 0, 0, 0, 1635232190, 0, 0, 0, -1495144207, 0, 0, 0, -405736472, 0, 0, 0, 612622019, 0, 0, 0, 1706214874, 0, 0, 0, -1431413411, 0, 0, 0, -341883324, 0, 0, 0, 684485487, 0, 0, 0, 1778217078, 0, 0, 0, -1368706759, 0, 0, 0, -279303648, 0, 0, 0, 738789131, 0, 0, 0, 1832393746, 0, 0, 0, -214546721, 0, 0, 0, -1308140090, 0, 0, 0, 1901359341, 0, 0, 0, 811953140, 0, 0, 0, -135058757, 0, 0, 0, -1228787294, 0, 0, 0, 1972444297, 0, 0, 0, 882902928, 0, 0, 0, -71524585, 0, 0, 0, -1165130738, 0, 0, 0, 2044635429, 0, 0, 0, 955232828, 0, 0, 0, -8785037, 0, 0, 0, -1102518166, 0, 0, 0, 2098971969, 0, 0, 0, 1009442392, 0, 0, 0, 89094640, 0, 0, 0, 1149133545, 0, 0, 0, -2027073598, 0, 0, 0, -971221797, 0, 0, 0, 25826708, 0, 0, 0, 1086000781, 0, 0, 0, -2081938522, 0, 0, 0, -1025951553, 0, 0, 0, 231055416, 0, 0, 0, 1291107105, 0, 0, 0, -1884842486, 0, 0, 0, -828994285, 0, 0, 0, 151047260, 0, 0, 0, 1211225925, 0, 0, 0, -1956447634, 0, 0, 0, -900472457, 0, 0, 0, 1415429050, 0, 0, 0, 359440547, 0, 0, 0, -700478072, 0, 0, 0, -1760651631, 0, 0, 0, 1352194014, 0, 0, 0, 296340679, 0, 0, 0, -755310100, 0, 0, 0, -1815348491, 0, 0, 0, 1557619314, 0, 0, 0, 501643627, 0, 0, 0, -558541760, 0, 0, 0, -1618718887, 0, 0, 0, 1477578262, 0, 0, 0, 421729551, 0, 0, 0, -630179804, 0, 0, 0, -1690229955, 0, 0, 0, -1486095003, 0, 0, 0, -430250372, 0, 0, 0, 621398871, 0, 0, 0, 1681444942, 0, 0, 0, -1548840703, 0, 0, 0, -492860904, 0, 0, 0, 567060275, 0, 0, 0, 1627241514, 0, 0, 0, -1344199507, 0, 0, 0, -288342092, 0, 0, 0, 763564703, 0, 0, 0, 1823607174, 0, 0, 0, -1423685431, 0, 0, 0, -367701040, 0, 0, 0, 692485883, 0, 0, 0, 1752655330, 0, 0, 0, -159826129, 0, 0, 0, -1220008906, 0, 0, 0, 1947928861, 0, 0, 0, 891949572, 0, 0, 0, -222538933, 0, 0, 0, -1282586542, 0, 0, 0, 1893623161, 0, 0, 0, 837779040, 0, 0, 0, -17570073, 0, 0, 0, -1077740034, 0, 0, 0, 2089930965, 0, 0, 0, 1033948108, 0, 0, 0, -97088893, 0, 0, 0, -1157131878, 0, 0, 0, 2018819249, 0, 0, 0, 962963368, 0, 0, 0, 1268286267, 0, 0, 0, 178886690, 0, 0, 0, -906316535, 0, 0, 0, -1999917552, 0, 0, 0, 1331556191, 0, 0, 0, 242021446, 0, 0, 0, -851453587, 0, 0, 0, -1945189772, 0, 0, 0, 1125276403, 0, 0, 0, 35865066, 0, 0, 0, -1049596735, 0, 0, 0, -2143193128, 0, 0, 0, 1205286551, 0, 0, 0, 115748238, 0, 0, 0, -977993563, 0, 0, 0, -2071716932, 0, 0, 0, 445268337, 0, 0, 0, 1539005032, 0, 0, 0, -1729595581, 0, 0, 0, -640062374, 0, 0, 0, 508505365, 0, 0, 0, 1602106892, 0, 0, 0, -1674765529, 0, 0, 0, -585367490, 0, 0, 0, 302028985, 0, 0, 0, 1395753888, 0, 0, 0, -1872580981, 0, 0, 0, -783043182, 0, 0, 0, 382072029, 0, 0, 0, 1475669956, 0, 0, 0, -1800944913, 0, 0, 0, -711534090, 0, 0, 0, -373553234, 0, 0, 0, -1467147081, 0, 0, 0, 1809723804, 0, 0, 0, 720317061, 0, 0, 0, -310809654, 0, 0, 0, -1404538669, 0, 0, 0, 1864064504, 0, 0, 0, 774522593, 0, 0, 0, -516497818, 0, 0, 0, -1610103425, 0, 0, 0, 1666508884, 0, 0, 0, 577106765, 0, 0, 0, -437014014, 0, 0, 0, -1530746597, 0, 0, 0, 1737589808, 0, 0, 0, 648060713, 0, 0, 0, -1196505628, 0, 0, 0, -106963203, 0, 0, 0, 986510294, 0, 0, 0, 2080237775, 0, 0, 0, -1133794944, 0, 0, 0, -44387687, 0, 0, 0, 1040818098, 0, 0, 0, 2134410411, 0, 0, 0, -1339810772, 0, 0, 0, -250280139, 0, 0, 0, 843459102, 0, 0, 0, 1937191175, 0, 0, 0, -1260294072, 0, 0, 0, -170890415, 0, 0, 0, 914572922, 0, 0, 0, 2008178019, 0, 0, 0, 1322777291, 0, 0, 0, 266789330, 0, 0, 0, -860500743, 0, 0, 0, -1920673824, 0, 0, 0, 1242732207, 0, 0, 0, 186879414, 0, 0, 0, -932142947, 0, 0, 0, -1992180860, 0, 0, 0, 1180508931, 0, 0, 0, 124532762, 0, 0, 0, -1002498767, 0, 0, 0, -2062676440, 0, 0, 0, 1117278055, 0, 0, 0, 61428862, 0, 0, 0, -1057326763, 0, 0, 0, -2117377460, 0, 0, 0, 533018753, 0, 0, 0, 1593058200, 0, 0, 0, -1649996109, 0, 0, 0, -594143830, 0, 0, 0, 453006565, 0, 0, 0, 1513181180, 0, 0, 0, -1721605417, 0, 0, 0, -665617970, 0, 0, 0, 391110985, 0, 0, 0, 1451162192, 0, 0, 0, -1792157829, 0, 0, 0, -736310174, 0, 0, 0, 327847213, 0, 0, 0, 1388025396, 0, 0, 0, -1847018721, 0, 0, 0, -791044090, 0, 0, 0, -319586722, 0, 0, 0, -1379769017, 0, 0, 0, 1855015020, 0, 0, 0, 799036277, 0, 0, 0, -399109574, 0, 0, 0, -1459156701, 0, 0, 0, 1783899144, 0, 0, 0, 728055569, 0, 0, 0, -461789290, 0, 0, 0, -1521959793, 0, 0, 0, 1713082788, 0, 0, 0, 657099453, 0, 0, 0, -524497934, 0, 0, 0, -1584541461, 0, 0, 0, 1658781120, 0, 0, 0, 602924761, 0, 0, 0, -1109279724, 0, 0, 0, -53434611, 0, 0, 0, 1065585190, 0, 0, 0, 2125631807, 0, 0, 0, -1188769680, 0, 0, 0, -132789399, 0, 0, 0, 994502210, 0, 0, 0, 2054683995, 0, 0, 0, -1251252772, 0, 0, 0, -195395899, 0, 0, 0, 923358190, 0, 0, 0, 1983400183, 0, 0, 0, -1313994312, 0, 0, 0, -258010463, 0, 0, 0, 869023626, 0, 0, 0, 1929192595, 0, 0, 0, 0, 0, 0, 0, 929743361, 0, 0, 0, 1859421187, 0, 0, 0, 1505641986, 0, 0, 0, -592967417, 0, 0, 0, -339555578, 0, 0, 0, -1300460284, 0, 0, 0, -2062135547, 0, 0, 0, -1202646258, 0, 0, 0, -1891905265, 0, 0, 0, -695888115, 0, 0, 0, -504408820, 0, 0, 0, 1694046729, 0, 0, 0, 1402198024, 0, 0, 0, 170761738, 0, 0, 0, 1028086795, 0, 0, 0, 1889740316, 0, 0, 0, 1204413469, 0, 0, 0, 511156767, 0, 0, 0, 689791006, 0, 0, 0, -1408553189, 0, 0, 0, -1688081126, 0, 0, 0, -1025529064, 0, 0, 0, -172660455, 0, 0, 0, -923650798, 0, 0, 0, -6752493, 0, 0, 0, -1507413743, 0, 0, 0, -1857260784, 0, 0, 0, 341457941, 0, 0, 0, 590413332, 0, 0, 0, 2056173590, 0, 0, 0, 1306819095, 0, 0, 0, -532263624, 0, 0, 0, -684945607, 0, 0, 0, -1902982853, 0, 0, 0, -1174926534, 0, 0, 0, 1022247999, 0, 0, 0, 193234494, 0, 0, 0, 1379582012, 0, 0, 0, 1699742269, 0, 0, 0, 1477926454, 0, 0, 0, 1870502967, 0, 0, 0, 918805045, 0, 0, 0, 27858996, 0, 0, 0, -2067835087, 0, 0, 0, -1277848272, 0, 0, 0, -362032334, 0, 0, 0, -587132621, 0, 0, 0, -1864013020, 0, 0, 0, -1483757275, 0, 0, 0, -30281945, 0, 0, 0, -916771546, 0, 0, 0, 1280139811, 0, 0, 0, 2066194466, 0, 0, 0, 580511264, 0, 0, 0, 368256033, 0, 0, 0, 682915882, 0, 0, 0, 534690347, 0, 0, 0, 1180761129, 0, 0, 0, 1896496680, 0, 0, 0, -199462611, 0, 0, 0, -1015631060, 0, 0, 0, -1698106066, 0, 0, 0, -1381877969, 0, 0, 0, -1064461712, 0, 0, 0, -135833487, 0, 0, 0, -1369891213, 0, 0, 0, -1724654478, 0, 0, 0, 472224631, 0, 0, 0, 726618486, 0, 0, 0, 1928402804, 0, 0, 0, 1167840629, 0, 0, 0, 2027719038, 0, 0, 0, 1337346943, 0, 0, 0, 369626493, 0, 0, 0, 560123772, 0, 0, 0, -1535868807, 0, 0, 0, -1826733448, 0, 0, 0, -895482758, 0, 0, 0, -37042565, 0, 0, 0, -1339114388, 0, 0, 0, -2025554323, 0, 0, 0, -554026897, 0, 0, 0, -376374674, 0, 0, 0, 1820767595, 0, 0, 0, 1542223722, 0, 0, 0, 38941032, 0, 0, 0, 892924777, 0, 0, 0, 142585698, 0, 0, 0, 1058368867, 0, 0, 0, 1722493793, 0, 0, 0, 1371662688, 0, 0, 0, -724064667, 0, 0, 0, -474127260, 0, 0, 0, -1174199706, 0, 0, 0, -1922441113, 0, 0, 0, 550229832, 0, 0, 0, 396432713, 0, 0, 0, 1310675787, 0, 0, 0, 2037748042, 0, 0, 0, -60563889, 0, 0, 0, -888595378, 0, 0, 0, -1833477556, 0, 0, 0, -1512204211, 0, 0, 0, -1734687674, 0, 0, 0, -1343224249, 0, 0, 0, -162643899, 0, 0, 0, -1054571964, 0, 0, 0, 1144180033, 0, 0, 0, 1935150912, 0, 0, 0, 719735106, 0, 0, 0, 495749955, 0, 0, 0, 1349054804, 0, 0, 0, 1728197461, 0, 0, 0, 1052538199, 0, 0, 0, 165066582, 0, 0, 0, -1933510573, 0, 0, 0, -1146471854, 0, 0, 0, -501973936, 0, 0, 0, -713114031, 0, 0, 0, -398859686, 0, 0, 0, -548200357, 0, 0, 0, -2031262119, 0, 0, 0, -1316510632, 0, 0, 0, 881978205, 0, 0, 0, 66791772, 0, 0, 0, 1514499934, 0, 0, 0, 1831841119, 0, 0, 0, -2145700383, 0, 0, 0, -1217267744, 0, 0, 0, -288378398, 0, 0, 0, -643468317, 0, 0, 0, 1555250406, 0, 0, 0, 1809448679, 0, 0, 0, 845658341, 0, 0, 0, 84769508, 0, 0, 0, 944383727, 0, 0, 0, 253813998, 0, 0, 0, 1453236972, 0, 0, 0, 1643405549, 0, 0, 0, -454938648, 0, 0, 0, -746000919, 0, 0, 0, -1976128533, 0, 0, 0, -1118017046, 0, 0, 0, -256371715, 0, 0, 0, -942484996, 0, 0, 0, -1637050370, 0, 0, 0, -1459202561, 0, 0, 0, 739252986, 0, 0, 0, 461035771, 0, 0, 0, 1120182009, 0, 0, 0, 1974361336, 0, 0, 0, 1223229683, 0, 0, 0, 2139341554, 0, 0, 0, 641565936, 0, 0, 0, 290932465, 0, 0, 0, -1807676940, 0, 0, 0, -1557410827, 0, 0, 0, -90862089, 0, 0, 0, -838905866, 0, 0, 0, 1616738521, 0, 0, 0, 1463270104, 0, 0, 0, 243924186, 0, 0, 0, 971194075, 0, 0, 0, -1124765218, 0, 0, 0, -1952468001, 0, 0, 0, -769526307, 0, 0, 0, -448055332, 0, 0, 0, -670274601, 0, 0, 0, -278484522, 0, 0, 0, -1227296812, 0, 0, 0, -2119029291, 0, 0, 0, 77882064, 0, 0, 0, 869179601, 0, 0, 0, 1785784019, 0, 0, 0, 1561994450, 0, 0, 0, 285105861, 0, 0, 0, 664050884, 0, 0, 0, 2116737734, 0, 0, 0, 1228937415, 0, 0, 0, -866756670, 0, 0, 0, -79915581, 0, 0, 0, -1568484415, 0, 0, 0, -1779953216, 0, 0, 0, -1464906293, 0, 0, 0, -1614442550, 0, 0, 0, -964965944, 0, 0, 0, -250541111, 0, 0, 0, 1946633420, 0, 0, 0, 1131251405, 0, 0, 0, 450085071, 0, 0, 0, 767099598, 0, 0, 0, 1083617169, 0, 0, 0, 2013031824, 0, 0, 0, 776088466, 0, 0, 0, 422111635, 0, 0, 0, -1673615722, 0, 0, 0, -1420532585, 0, 0, 0, -219536747, 0, 0, 0, -981409644, 0, 0, 0, -121127777, 0, 0, 0, -810713442, 0, 0, 0, -1777125220, 0, 0, 0, -1585841507, 0, 0, 0, 611300760, 0, 0, 0, 319125401, 0, 0, 0, 1253781915, 0, 0, 0, 2110911386, 0, 0, 0, 808814989, 0, 0, 0, 123685772, 0, 0, 0, 1591807374, 0, 0, 0, 1770770319, 0, 0, 0, -325222262, 0, 0, 0, -604552565, 0, 0, 0, -2109143927, 0, 0, 0, -1255946616, 0, 0, 0, -2006672765, 0, 0, 0, -1089578878, 0, 0, 0, -424665472, 0, 0, 0, -774185855, 0, 0, 0, 1422693252, 0, 0, 0, 1671844229, 0, 0, 0, 974657415, 0, 0, 0, 225629574, 0, 0, 0, -1596923223, 0, 0, 0, -1749409624, 0, 0, 0, -838572374, 0, 0, 0, -110189397, 0, 0, 0, 2088299438, 0, 0, 0, 1259481519, 0, 0, 0, 313290669, 0, 0, 0, 633777580, 0, 0, 0, 411169191, 0, 0, 0, 803943334, 0, 0, 0, 1985312164, 0, 0, 0, 1094694821, 0, 0, 0, -1003882336, 0, 0, 0, -213697887, 0, 0, 0, -1426228061, 0, 0, 0, -1650999646, 0, 0, 0, -797719371, 0, 0, 0, -417790284, 0, 0, 0, -1096335178, 0, 0, 0, -1983020361, 0, 0, 0, 215731634, 0, 0, 0, 1001459635, 0, 0, 0, 1645169073, 0, 0, 0, 1432718256, 0, 0, 0, 1747113915, 0, 0, 0, 1598559674, 0, 0, 0, 116806584, 0, 0, 0, 832344505, 0, 0, 0, -1265967428, 0, 0, 0, -2082464579, 0, 0, 0, -631350593, 0, 0, 0, -315320130, 0, 0, 0, 0, 0, 0, 0, 1701297336, 0, 0, 0, -1949824598, 0, 0, 0, -290474734, 0, 0, 0, 1469538959, 0, 0, 0, 854646327, 0, 0, 0, -597726427, 0, 0, 0, -1187457123, 0, 0, 0, -282544955, 0, 0, 0, -1974531971, 0, 0, 0, 1692450159, 0, 0, 0, 25625047, 0, 0, 0, -1195387318, 0, 0, 0, -573019406, 0, 0, 0, 863494112, 0, 0, 0, 1443914584, 0, 0, 0, -1621681840, 0, 0, 0, -97475096, 0, 0, 0, 345968890, 0, 0, 0, 1912122434, 0, 0, 0, -926909473, 0, 0, 0, -1381513369, 0, 0, 0, 1124627061, 0, 0, 0, 644861645, 0, 0, 0, 1887415701, 0, 0, 0, 353898797, 0, 0, 0, -71850945, 0, 0, 0, -1630529401, 0, 0, 0, 669568794, 0, 0, 0, 1116697506, 0, 0, 0, -1407138128, 0, 0, 0, -918062584, 0, 0, 0, 1051669152, 0, 0, 0, 1539870232, 0, 0, 0, -1251525878, 0, 0, 0, -805271630, 0, 0, 0, 1765298223, 0, 0, 0, 207613079, 0, 0, 0, -487564923, 0, 0, 0, -2020088515, 0, 0, 0, -779647387, 0, 0, 0, -1260373283, 0, 0, 0, 1515163599, 0, 0, 0, 1059599223, 0, 0, 0, -2045713174, 0, 0, 0, -478717870, 0, 0, 0, 232320320, 0, 0, 0, 1757368824, 0, 0, 0, -1577571344, 0, 0, 0, -996174008, 0, 0, 0, 707797594, 0, 0, 0, 1331142370, 0, 0, 0, -160478849, 0, 0, 0, -1828129337, 0, 0, 0, 2108113109, 0, 0, 0, 415300717, 0, 0, 0, 1322295093, 0, 0, 0, 733422477, 0, 0, 0, -988244321, 0, 0, 0, -1602278873, 0, 0, 0, 424148410, 0, 0, 0, 2082488578, 0, 0, 0, -1836059632, 0, 0, 0, -135771992, 0, 0, 0, 1029182619, 0, 0, 0, 1480566819, 0, 0, 0, -1232069327, 0, 0, 0, -738745975, 0, 0, 0, 1791981076, 0, 0, 0, 262720172, 0, 0, 0, -519602242, 0, 0, 0, -2074033402, 0, 0, 0, -764370850, 0, 0, 0, -1223222042, 0, 0, 0, 1505274356, 0, 0, 0, 1021252940, 0, 0, 0, -2048408879, 0, 0, 0, -528449943, 0, 0, 0, 238013307, 0, 0, 0, 1799911363, 0, 0, 0, -1576071733, 0, 0, 0, -949440141, 0, 0, 0, 700908641, 0, 0, 0, 1285601497, 0, 0, 0, -174559420, 0, 0, 0, -1862282244, 0, 0, 0, 2119198446, 0, 0, 0, 456645206, 0, 0, 0, 1294448910, 0, 0, 0, 675284406, 0, 0, 0, -957370204, 0, 0, 0, -1551365092, 0, 0, 0, 447798145, 0, 0, 0, 2144823097, 0, 0, 0, -1854352853, 0, 0, 0, -199266669, 0, 0, 0, 66528827, 0, 0, 0, 1720752771, 0, 0, 0, -2009124975, 0, 0, 0, -312962263, 0, 0, 0, 1415595188, 0, 0, 0, 822605836, 0, 0, 0, -542618338, 0, 0, 0, -1160777306, 0, 0, 0, -320892162, 0, 0, 0, -1984418234, 0, 0, 0, 1729600340, 0, 0, 0, 40904684, 0, 0, 0, -1152847759, 0, 0, 0, -567325495, 0, 0, 0, 813758939, 0, 0, 0, 1441219939, 0, 0, 0, -1667219605, 0, 0, 0, -104365101, 0, 0, 0, 392705729, 0, 0, 0, 1913621113, 0, 0, 0, -885563932, 0, 0, 0, -1370431140, 0, 0, 0, 1090475086, 0, 0, 0, 630778102, 0, 0, 0, 1938328494, 0, 0, 0, 384775958, 0, 0, 0, -129990140, 0, 0, 0, -1658372420, 0, 0, 0, 606071073, 0, 0, 0, 1098405273, 0, 0, 0, -1344806773, 0, 0, 0, -894411725, 0, 0, 0, 1001806317, 0, 0, 0, 1590814037, 0, 0, 0, -1333899193, 0, 0, 0, -719721217, 0, 0, 0, 1814117218, 0, 0, 0, 155617242, 0, 0, 0, -404147512, 0, 0, 0, -2104586640, 0, 0, 0, -727782104, 0, 0, 0, -1309060720, 0, 0, 0, 1599530114, 0, 0, 0, 976312378, 0, 0, 0, -2096525401, 0, 0, 0, -428985569, 0, 0, 0, 146900493, 0, 0, 0, 1839610549, 0, 0, 0, -1528741699, 0, 0, 0, -1048118267, 0, 0, 0, 791234839, 0, 0, 0, 1246688687, 0, 0, 0, -210361806, 0, 0, 0, -1777230198, 0, 0, 0, 2025728920, 0, 0, 0, 500799264, 0, 0, 0, 1271526520, 0, 0, 0, 783173824, 0, 0, 0, -1073611310, 0, 0, 0, -1520025238, 0, 0, 0, 475961079, 0, 0, 0, 2033789519, 0, 0, 0, -1751736483, 0, 0, 0, -219077659, 0, 0, 0, 85551949, 0, 0, 0, 1618925557, 0, 0, 0, -1898880281, 0, 0, 0, -340337057, 0, 0, 0, 1385040322, 0, 0, 0, 938063226, 0, 0, 0, -649723800, 0, 0, 0, -1138639664, 0, 0, 0, -365830264, 0, 0, 0, -1890163920, 0, 0, 0, 1643763234, 0, 0, 0, 77490842, 0, 0, 0, -1113146105, 0, 0, 0, -658439745, 0, 0, 0, 913224877, 0, 0, 0, 1393100821, 0, 0, 0, -1706135011, 0, 0, 0, -14037339, 0, 0, 0, 294026167, 0, 0, 0, 1960953615, 0, 0, 0, -841412462, 0, 0, 0, -1463899094, 0, 0, 0, 1175525688, 0, 0, 0, 594978176, 0, 0, 0, 1969669848, 0, 0, 0, 268532320, 0, 0, 0, -22098062, 0, 0, 0, -1681296438, 0, 0, 0, 586261591, 0, 0, 0, 1201019119, 0, 0, 0, -1455837699, 0, 0, 0, -866250427, 0, 0, 0, 116280694, 0, 0, 0, 1669984718, 0, 0, 0, -1926871844, 0, 0, 0, -398329756, 0, 0, 0, 1366896633, 0, 0, 0, 874419009, 0, 0, 0, -625924525, 0, 0, 0, -1076454677, 0, 0, 0, -372835917, 0, 0, 0, -1935588085, 0, 0, 0, 1645146137, 0, 0, 0, 124341409, 0, 0, 0, -1101948100, 0, 0, 0, -617207932, 0, 0, 0, 899256982, 0, 0, 0, 1358835246, 0, 0, 0, -1715907546, 0, 0, 0, -52500322, 0, 0, 0, 309419404, 0, 0, 0, 1997988148, 0, 0, 0, -835832151, 0, 0, 0, -1421243887, 0, 0, 0, 1172717315, 0, 0, 0, 545358779, 0, 0, 0, 1989271779, 0, 0, 0, 334912603, 0, 0, 0, -44439223, 0, 0, 0, -1740745231, 0, 0, 0, 554074732, 0, 0, 0, 1147223764, 0, 0, 0, -1429304378, 0, 0, 0, -810993794, 0, 0, 0, 943816662, 0, 0, 0, 1562821486, 0, 0, 0, -1282836868, 0, 0, 0, -688993596, 0, 0, 0, 1876303193, 0, 0, 0, 179413473, 0, 0, 0, -467790605, 0, 0, 0, -2122733493, 0, 0, 0, -680932589, 0, 0, 0, -1307674709, 0, 0, 0, 1554105017, 0, 0, 0, 969309697, 0, 0, 0, -2130794084, 0, 0, 0, -442952412, 0, 0, 0, 188129334, 0, 0, 0, 1850809486, 0, 0, 0, -1491704186, 0, 0, 0, -1032725954, 0, 0, 0, 752774956, 0, 0, 0, 1236915092, 0, 0, 0, -259980279, 0, 0, 0, -1780041551, 0, 0, 0, 2068385187, 0, 0, 0, 506376475, 0, 0, 0, 1212076611, 0, 0, 0, 760835835, 0, 0, 0, -1007232023, 0, 0, 0, -1500420271, 0, 0, 0, 531214540, 0, 0, 0, 2060323956, 0, 0, 0, -1805534874, 0, 0, 0, -251263522, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5250380);
allocate([31, 157, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 157, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 139, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 158, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 160, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 31, 30, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 75, 3, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 66, 90, 104, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 76, 90, 73, 80, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 253, 55, 122, 88, 90, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 76, 82, 90, 73, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ["i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 5258572);
allocate([0, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 1, undef, 0, 0, 0, 0, 0, 0, 2, undef, 0, 0, 0, 0, 0, 0, 3, undef, 0, 0, 0, 0, 0, 0, 4, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 0, 0, 0, 0, 6, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 0, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 9, undef, 0, 0, 0, 0, 0, 0, 9, undef, 0, 0, 0, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 11, undef, 0, 0, 0, 0, 0, 0, 11, undef, 0, 0, 0, 0, 0, 0, 12, undef, 0, 0, 0, 0, 0, 0, 12, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 0, 0, 0, 0, 14, undef, 0, 0, 0, 0, 0, 0, 15, undef, 0, 0, 0, 0, 0, 0, 16, undef, 0, 0, 0, 0, 0, 0, 17, undef, 0, 0, 0, 0, 0, 0, 18, undef, 0, 0, 0, 0, 0, 0, 19, undef, 0, 0, 0, 0, 0, 0, 20, undef, 0, 0, 0, 0, 0, 0, 21, undef, 0, 0, 0, 0, 0, 0, 22, undef, 0, 0, 0, 0, 0, 0, 23, undef, 0, 0, 0, 0, 0, 0, 24, undef, 0, 0, 0, 0, 0, 0, 25, undef, 0, 0, 0, 0, 0, 0, 26, undef, 0, 0, 0, 0, 0, 0, 27, undef, 0, 0, 0, 0, 0, 0, 28, undef, 0, 0, 0, 0, 0, 0, 28, undef, 0, 0, 0, 0, 0, 0, 29, undef, 0, 0, 0, 0, 0, 0, 29, undef, 0, 0, 0, 0, 0, 0, 30, undef, 0, 0, 0, 0, 0, 0, 30, undef, 0, 0, 0, 0, 0, 0, 31, undef, 0, 0, 0, 0, 0, 0, 31, undef, 0, 0, 0, 0, 0, 0, 32, undef, 0, 0, 0, 0, 0, 0, 33, undef, 0, 0, 0, 0, 0, 0, 34, undef, 0, 0, 0, 0, 0, 0, 35, undef, 0, 0, 0, 0, 0, 0, 36, undef, 0, 0, 0, 0, 0, 0, 37, undef, 0, 0, 0, 0, 0, 0, 38, undef, 0, 0, 0, 0, 0, 0, 39, undef, 0, 0, 0, 0, 0, 0, 40, undef, 0, 0, 0, 0, 0, 0, 41, undef, 0, 0, 0, 0, 0, 0, 42, undef, 0, 0, 0, 0, 0, 0, 43, undef, 0, 0, 0, 0, 0, 0, 44, undef, 0, 0, 0, 0, 0, 0, 45, undef, 0, 0, 0, 0, 0, 0, 45, undef, 0, 0, 0, 0, 0, 0, 46, undef, 0, 0, 0, 0, 0, 0, 46, undef, 0, 0, 0, 0, 0, 0, 47, undef, 0, 0, 0, 0, 0, 0, 47, undef, 0, 0, 0, 0, 0, 0, 48, undef, 0, 0, 0, 0, 0, 0, 49, undef, 0, 0, 0, 0, 0, 0, 50, undef, 0, 0, 0, 0, 0, 0, 51, undef, 0, 0, 0, 0, 0, 0, 52, undef, 0, 0, 0, 0, 0, 0, 53, undef, 0, 0, 0, 0, 0, 0, 54, undef, 0, 0, 0, 0, 0, 0, 55, undef, 0, 0, 0, 0, 0, 0, 56, undef, 0, 0, 0, 0, 0, 0, 57, undef, 0, 0, 0, 0, 0, 0, 58, undef, 0, 0, 0, 0, 0, 0, 59, undef, 0, 0, 0, 0, 0, 0, 60, undef, 0, 0, 0, 0, 0, 0, 61, undef, 0, 0, 0, 0, 0, 0, 62, undef, 0, 0, 0, 0, 0, 0, 63, undef, 0, 0, 0, 0, 0, 0, 64, undef, 0, 0, 0, 0, 0, 0, 91, undef, 0, 0, 0, 0, 0, 0, 92, undef, 0, 0, 0, 0, 0, 0, 92, undef, 0, 0, 0, 0, 0, 0, 93, undef, 0, 0, 0, 0, 0, 0, 94, undef, 0, 0, 0, 0, 0, 0, 94, undef, 0, 0, 0, 0, 0, 0, 95, undef, 0, 0, 0, 0, 0, 0, 95, undef, 0, 0, 0, 0, 0, 0, 96, undef, 0, 0, 0, 0, 0, 0, 123, undef, 0, 0, 0, 0, 0, 0, 123, undef, 0, 0, 0, 0, 0, 0, 124, undef, 0, 0, 0, 0, 0, 0, 125, undef, 0, 0, 0, 0, 0, 0, 125, undef, 0, 0, 0, 0, 0, 0, 126, undef, 0, 0, 0, 0, 0, 0, 127, undef, 0, 0, 0, 0, 0, 0, 0, undef, 0, 0], ["*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8"], ALLOC_NONE, 5258880);
allocate([85,84,67,0] /* UTC\00 */, "i8", ALLOC_NONE, 5259648);
allocate([5,83,117,109,109,97,114,121,73,110,102,111,114,109,97,116,105,111,110,0] /* \05SummaryInformatio */, "i8", ALLOC_NONE, 5259652);
allocate(4, "i8", ALLOC_NONE, 5259672);
allocate(156, "i8", ALLOC_NONE, 5259676);
allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_NONE, 5259832);
allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 524288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4194304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16777216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0,"i64",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_NONE, 5259976);
allocate(4, "i8", ALLOC_NONE, 5260288);
allocate([0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0], ALLOC_NONE, 5260292);
allocate([-249691108, 0, 0, 0, 9, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0], ALLOC_NONE, 5260340);
allocate([8], ["i32",0,0,0], ALLOC_NONE, 5260348);
allocate([97,109,98,105,103,117,111,117,115,32,111,112,116,105,111,110,32,45,45,32,37,46,42,115,0] /* ambiguous option --  */, "i8", ALLOC_NONE, 5260352);
allocate([10,45,32,0] /* \0A- \00 */, "i8", ALLOC_NONE, 5260380);
allocate(1, "i8", ALLOC_NONE, 5260384);
allocate([100,101,114,101,102,101,114,101,110,99,101,0] /* dereference\00 */, "i8", ALLOC_NONE, 5260388);
allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_NONE, 5260400);
allocate([108,105,115,116,0] /* list\00 */, "i8", ALLOC_NONE, 5260464);
allocate([97,108,110,117,109,0] /* alnum\00 */, "i8", ALLOC_NONE, 5260472);
allocate([107,101,101,112,45,103,111,105,110,103,0] /* keep-going\00 */, "i8", ALLOC_NONE, 5260480);
allocate([68,69,76,0] /* DEL\00 */, "i8", ALLOC_NONE, 5260492);
allocate([109,105,109,101,45,101,110,99,111,100,105,110,103,0] /* mime-encoding\00 */, "i8", ALLOC_NONE, 5260496);
allocate([116,105,108,100,101,0] /* tilde\00 */, "i8", ALLOC_NONE, 5260512);
allocate([44,32,37,115,32,108,105,110,107,101,100,37,115,0] /* , %s linked%s\00 */, "i8", ALLOC_NONE, 5260520);
allocate([109,105,109,101,45,116,121,112,101,0] /* mime-type\00 */, "i8", ALLOC_NONE, 5260536);
allocate([118,110,100,46,109,115,45,111,102,102,105,99,101,0] /* vnd.ms-office\00 */, "i8", ALLOC_NONE, 5260548);
allocate([114,105,103,104,116,45,99,117,114,108,121,45,98,114,97,99,107,101,116,0] /* right-curly-bracket\ */, "i8", ALLOC_NONE, 5260564);
allocate([44,32,105,110,118,97,108,105,100,32,110,111,116,101,32,97,108,105,103,110,109,101,110,116,32,48,120,37,108,120,0] /* , invalid note align */, "i8", ALLOC_NONE, 5260584);
allocate([67,111,100,101,32,112,97,103,101,0] /* Code page\00 */, "i8", ALLOC_NONE, 5260616);
allocate([97,112,112,108,101,0] /* apple\00 */, "i8", ALLOC_NONE, 5260628);
allocate([118,101,114,121,32,115,104,111,114,116,32,102,105,108,101,32,40,110,111,32,109,97,103,105,99,41,0] /* very short file (no  */, "i8", ALLOC_NONE, 5260636);
allocate([99,104,97,114,100,101,118,105,99,101,0] /* chardevice\00 */, "i8", ALLOC_NONE, 5260664);
allocate([114,105,103,104,116,45,98,114,97,99,101,0] /* right-brace\00 */, "i8", ALLOC_NONE, 5260676);
allocate([32,40,117,115,101,115,32,115,104,97,114,101,100,32,108,105,98,115,41,0] /*  (uses shared libs)\ */, "i8", ALLOC_NONE, 5260688);
allocate([105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0] /* invalid code lengths */, "i8", ALLOC_NONE, 5260708);
allocate([37,46,56,108,108,120,0] /* %.8llx\00 */, "i8", ALLOC_NONE, 5260736);
allocate([109,105,109,101,0] /* mime\00 */, "i8", ALLOC_NONE, 5260744);
allocate([82,69,71,95,69,67,84,89,80,69,0] /* REG_ECTYPE\00 */, "i8", ALLOC_NONE, 5260752);
allocate([83,116,114,101,110,103,116,104,32,61,32,37,51,122,117,32,58,32,37,115,32,91,37,115,93,10,0] /* Strength = %3zu : %s */, "i8", ALLOC_NONE, 5260764);
allocate([118,101,114,116,105,99,97,108,45,108,105,110,101,0] /* vertical-line\00 */, "i8", ALLOC_NONE, 5260792);
allocate([100,121,110,97,109,105,99,97,108,108,121,0] /* dynamically\00 */, "i8", ALLOC_NONE, 5260808);
allocate([32,117,110,107,110,111,119,110,32,104,97,114,100,119,97,114,101,32,99,97,112,97,98,105,108,105,116,121,32,48,120,37,108,108,120,0] /*  unknown hardware ca */, "i8", ALLOC_NONE, 5260820);
allocate([115,101,112,97,114,97,116,111,114,0] /* separator\00 */, "i8", ALLOC_NONE, 5260856);
allocate([99,111,117,108,100,32,110,111,116,32,102,111,114,107,0] /* could not fork\00 */, "i8", ALLOC_NONE, 5260868);
allocate([117,116,102,45,49,54,98,101,0] /* utf-16be\00 */, "i8", ALLOC_NONE, 5260884);
allocate([66,69,76,0] /* BEL\00 */, "i8", ALLOC_NONE, 5260896);
allocate([44,32,119,105,116,104,0] /* , with\00 */, "i8", ALLOC_NONE, 5260900);
allocate([108,101,102,116,45,99,117,114,108,121,45,98,114,97,99,107,101,116,0] /* left-curly-bracket\0 */, "i8", ALLOC_NONE, 5260908);
allocate([44,32,99,111,114,114,117,112,116,101,100,32,112,114,111,103,114,97,109,32,104,101,97,100,101,114,32,115,105,122,101,0] /* , corrupted program  */, "i8", ALLOC_NONE, 5260928);
allocate([72,79,77,69,0] /* HOME\00 */, "i8", ALLOC_NONE, 5260960);
allocate([102,105,108,101,115,45,102,114,111,109,0] /* files-from\00 */, "i8", ALLOC_NONE, 5260968);
allocate([108,101,102,116,45,98,114,97,99,101,0] /* left-brace\00 */, "i8", ALLOC_NONE, 5260980);
allocate([115,116,97,116,105,99,97,108,108,121,0] /* statically\00 */, "i8", ALLOC_NONE, 5260992);
allocate([101,120,99,108,117,100,101,0] /* exclude\00 */, "i8", ALLOC_NONE, 5261004);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,105,115,112,108,97,121,32,116,104,105,115,32,104,101,108,112,32,97,110,100,32,101,120,105,116,10,0] /*                  dis */, "i8", ALLOC_NONE, 5261012);
allocate([114,101,103,101,120,32,101,114,114,111,114,32,37,100,44,32,40,37,115,41,0] /* regex error %d, (%s) */, "i8", ALLOC_NONE, 5261060);
allocate([103,114,97,118,101,45,97,99,99,101,110,116,0] /* grave-accent\00 */, "i8", ALLOC_NONE, 5261084);
allocate([44,32,102,114,111,109,32,39,37,46,42,115,39,0] /* , from '%._s'\00 */, "i8", ALLOC_NONE, 5261100);
allocate([99,104,101,99,107,105,110,103,45,112,114,105,110,116,111,117,116,0] /* checking-printout\00 */, "i8", ALLOC_NONE, 5261116);
allocate([39,34,96,0] /* '\22`\00 */, "i8", ALLOC_NONE, 5261136);
allocate([108,111,119,45,108,105,110,101,0] /* low-line\00 */, "i8", ALLOC_NONE, 5261140);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 5261152);
allocate([98,114,105,101,102,0] /* brief\00 */, "i8", ALLOC_NONE, 5261156);
allocate([32,40,115,105,103,110,97,108,32,37,117,41,0] /*  (signal %u)\00 */, "i8", ALLOC_NONE, 5261164);
allocate([117,110,100,101,114,115,99,111,114,101,0] /* underscore\00 */, "i8", ALLOC_NONE, 5261180);
allocate([112,45,62,116,121,112,101,32,60,32,70,73,76,69,95,78,65,77,69,83,95,83,73,90,69,0] /* p-_type _ FILE_NAMES */, "i8", ALLOC_NONE, 5261192);
allocate([117,110,99,111,109,112,114,101,115,115,0] /* uncompress\00 */, "i8", ALLOC_NONE, 5261220);
allocate([44,32,102,114,111,109,32,39,37,46,51,49,115,39,0] /* , from '%.31s'\00 */, "i8", ALLOC_NONE, 5261232);
allocate([99,105,114,99,117,109,102,108,101,120,45,97,99,99,101,110,116,0] /* circumflex-accent\00 */, "i8", ALLOC_NONE, 5261248);
allocate([77,73,77,69,32,116,121,112,101,32,96,37,115,39,32,116,114,117,110,99,97,116,101,100,32,37,122,117,0] /* MIME type `%s' trunc */, "i8", ALLOC_NONE, 5261268);
allocate([109,97,103,105,99,45,102,105,108,101,0] /* magic-file\00 */, "i8", ALLOC_NONE, 5261300);
allocate([44,32,37,115,45,115,116,121,108,101,0] /* , %s-style\00 */, "i8", ALLOC_NONE, 5261312);
allocate([99,105,114,99,117,109,102,108,101,120,0] /* circumflex\00 */, "i8", ALLOC_NONE, 5261324);
allocate([67,117,114,114,101,110,116,32,101,110,116,114,121,32,97,108,114,101,97,100,121,32,104,97,115,32,97,32,77,73,77,69,32,116,121,112,101,32,96,37,115,39,44,32,110,101,119,32,116,121,112,101,32,96,37,115,39,0] /* Current entry alread */, "i8", ALLOC_NONE, 5261336);
allocate([118,101,114,115,105,111,110,0] /* version\00 */, "i8", ALLOC_NONE, 5261396);
allocate([67,97,110,39,116,32,101,120,112,97,110,100,32,115,117,109,109,97,114,121,95,105,110,102,111,0] /* Can't expand summary */, "i8", ALLOC_NONE, 5261404);
allocate([78,101,116,66,83,68,45,67,79,82,69,0] /* NetBSD-CORE\00 */, "i8", ALLOC_NONE, 5261432);
allocate([114,105,103,104,116,45,115,113,117,97,114,101,45,98,114,97,99,107,101,116,0] /* right-square-bracket */, "i8", ALLOC_NONE, 5261444);
allocate([65,80,80,76,69,32,116,121,112,101,32,96,37,115,39,32,116,114,117,110,99,97,116,101,100,32,37,122,117,0] /* APPLE type `%s' trun */, "i8", ALLOC_NONE, 5261468);
allocate([37,46,50,100,0] /* %.2d\00 */, "i8", ALLOC_NONE, 5261500);
allocate([104,101,108,112,0] /* help\00 */, "i8", ALLOC_NONE, 5261508);
allocate([97,112,112,108,105,99,97,116,105,111,110,47,111,99,116,101,116,45,115,116,114,101,97,109,0] /* application/octet-st */, "i8", ALLOC_NONE, 5261516);
allocate([67,79,82,69,0] /* CORE\00 */, "i8", ALLOC_NONE, 5261544);
allocate([37,115,100,105,114,101,99,116,111,114,121,0] /* %sdirectory\00 */, "i8", ALLOC_NONE, 5261552);
allocate([114,101,118,101,114,115,101,45,115,111,108,105,100,117,115,0] /* reverse-solidus\00 */, "i8", ALLOC_NONE, 5261564);
allocate([45,43,47,46,0] /* -+/.\00 */, "i8", ALLOC_NONE, 5261580);
allocate([116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0] /* too many length or d */, "i8", ALLOC_NONE, 5261588);
allocate([116,111,107,101,110,115,0] /* tokens\00 */, "i8", ALLOC_NONE, 5261624);
allocate([47,37,117,0] /* /%u\00 */, "i8", ALLOC_NONE, 5261632);
allocate([105,110,118,97,108,105,100,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,0] /* invalid collating el */, "i8", ALLOC_NONE, 5261636);
allocate([44,32,102,111,114,32,68,114,97,103,111,110,70,108,121,0] /* , for DragonFly\00 */, "i8", ALLOC_NONE, 5261664);
allocate([98,97,99,107,115,108,97,115,104,0] /* backslash\00 */, "i8", ALLOC_NONE, 5261680);
allocate([84,101,120,116,32,112,97,116,116,101,114,110,115,58,10,0] /* Text patterns:\0A\00 */, "i8", ALLOC_NONE, 5261692);
allocate([67,117,114,114,101,110,116,32,101,110,116,114,121,32,97,108,114,101,97,100,121,32,104,97,115,32,97,32,65,80,80,76,69,32,116,121,112,101,32,96,37,46,56,115,39,44,32,110,101,119,32,116,121,112,101,32,96,37,115,39,0] /* Current entry alread */, "i8", ALLOC_NONE, 5261708);
allocate([32,37,115,0] /*  %s\00 */, "i8", ALLOC_NONE, 5261772);
allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_NONE, 5261776);
allocate([99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,105,112,101,0] /* cannot create pipe\0 */, "i8", ALLOC_NONE, 5261784);
allocate([66,105,103,45,101,110,100,105,97,110,32,85,84,70,45,49,54,32,85,110,105,99,111,100,101,0] /* Big-endian UTF-16 Un */, "i8", ALLOC_NONE, 5261804);
allocate([65,67,75,0] /* ACK\00 */, "i8", ALLOC_NONE, 5261832);
allocate([44,32,119,105,116,104,32,118,101,114,121,32,108,111,110,103,32,108,105,110,101,115,0] /* , with very long lin */, "i8", ALLOC_NONE, 5261836);
allocate([68,114,97,103,111,110,70,108,121,0] /* DragonFly\00 */, "i8", ALLOC_NONE, 5261860);
allocate([108,101,102,116,45,115,113,117,97,114,101,45,98,114,97,99,107,101,116,0] /* left-square-bracket\ */, "i8", ALLOC_NONE, 5261872);
allocate([67,97,110,110,111,116,32,104,97,118,101,32,102,97,99,116,111,114,32,111,112,32,96,37,99,39,32,97,110,100,32,102,97,99,116,111,114,32,37,117,0] /* Cannot have factor o */, "i8", ALLOC_NONE, 5261892);
allocate([110,111,32,114,101,97,100,32,112,101,114,109,105,115,115,105,111,110,0] /* no read permission\0 */, "i8", ALLOC_NONE, 5261936);
allocate([116,97,114,0] /* tar\00 */, "i8", ALLOC_NONE, 5261956);
allocate([44,32,102,111,114,32,79,112,101,110,66,83,68,0] /* , for OpenBSD\00 */, "i8", ALLOC_NONE, 5261960);
allocate([99,111,109,109,101,114,99,105,97,108,45,97,116,0] /* commercial-at\00 */, "i8", ALLOC_NONE, 5261976);
allocate([66,97,100,32,102,97,99,116,111,114,32,96,37,115,39,0] /* Bad factor `%s'\00 */, "i8", ALLOC_NONE, 5261992);
allocate([115,111,102,116,0] /* soft\00 */, "i8", ALLOC_NONE, 5262008);
allocate([32,32,32,32,32,32,45,45,104,101,108,112,0] /*       --help\00 */, "i8", ALLOC_NONE, 5262016);
allocate([37,91,45,48,45,57,92,46,93,42,115,0] /* %[-0-9\5C.]_s\00 */, "i8", ALLOC_NONE, 5262032);
allocate([79,112,101,110,66,83,68,0] /* OpenBSD\00 */, "i8", ALLOC_NONE, 5262044);
allocate([113,117,101,115,116,105,111,110,45,109,97,114,107,0] /* question-mark\00 */, "i8", ALLOC_NONE, 5262052);
allocate([84,111,111,32,108,97,114,103,101,32,102,97,99,116,111,114,32,96,37,108,117,39,0] /* Too large factor `%l */, "i8", ALLOC_NONE, 5262068);
allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NONE, 5262092);
allocate([32,40,37,100,41,0] /*  (%d)\00 */, "i8", ALLOC_NONE, 5262104);
allocate([103,114,101,97,116,101,114,45,116,104,97,110,45,115,105,103,110,0] /* greater-than-sign\00 */, "i8", ALLOC_NONE, 5262112);
allocate([85,110,107,110,111,119,110,32,102,97,99,116,111,114,32,111,112,32,96,37,99,39,0] /* Unknown factor op `% */, "i8", ALLOC_NONE, 5262132);
allocate([101,108,102,0] /* elf\00 */, "i8", ALLOC_NONE, 5262156);
allocate([46,37,100,0] /* .%d\00 */, "i8", ALLOC_NONE, 5262160);
allocate([101,113,117,97,108,115,45,115,105,103,110,0] /* equals-sign\00 */, "i8", ALLOC_NONE, 5262164);
allocate([67,117,114,114,101,110,116,32,101,110,116,114,121,32,97,108,114,101,97,100,121,32,104,97,115,32,97,32,115,116,114,101,110,103,116,104,32,116,121,112,101,58,32,37,99,32,37,100,0] /* Current entry alread */, "i8", ALLOC_NONE, 5262176);
allocate([99,111,109,112,114,101,115,115,0] /* compress\00 */, "i8", ALLOC_NONE, 5262228);
allocate([32,37,100,46,37,100,0] /*  %d.%d\00 */, "i8", ALLOC_NONE, 5262240);
allocate([108,101,115,115,45,116,104,97,110,45,115,105,103,110,0] /* less-than-sign\00 */, "i8", ALLOC_NONE, 5262248);
allocate([115,116,114,101,110,103,116,104,0] /* strength\00 */, "i8", ALLOC_NONE, 5262264);
allocate([99,100,102,0] /* cdf\00 */, "i8", ALLOC_NONE, 5262276);
allocate([32,52,46,54,46,50,0] /*  4.6.2\00 */, "i8", ALLOC_NONE, 5262280);
allocate([115,101,109,105,99,111,108,111,110,0] /* semicolon\00 */, "i8", ALLOC_NONE, 5262288);
allocate([97,112,112,108,101,0] /* apple\00 */, "i8", ALLOC_NONE, 5262300);
allocate([97,115,99,105,105,0] /* ascii\00 */, "i8", ALLOC_NONE, 5262308);
allocate([67,97,110,110,111,116,32,114,101,97,100,32,115,117,109,109,97,114,121,32,105,110,102,111,0] /* Cannot read summary  */, "i8", ALLOC_NONE, 5262316);
allocate([44,32,102,111,114,32,70,114,101,101,66,83,68,0] /* , for FreeBSD\00 */, "i8", ALLOC_NONE, 5262344);
allocate([99,111,108,111,110,0] /* colon\00 */, "i8", ALLOC_NONE, 5262360);
allocate([109,105,109,101,0] /* mime\00 */, "i8", ALLOC_NONE, 5262368);
allocate([37,46,50,100,58,0] /* %.2d:\00 */, "i8", ALLOC_NONE, 5262376);
allocate([97,112,112,116,121,112,101,0] /* apptype\00 */, "i8", ALLOC_NONE, 5262384);
allocate([101,109,112,116,121,0] /* empty\00 */, "i8", ALLOC_NONE, 5262392);
allocate([70,114,101,101,66,83,68,0] /* FreeBSD\00 */, "i8", ALLOC_NONE, 5262400);
allocate([100,105,114,101,99,116,111,114,121,0] /* directory\00 */, "i8", ALLOC_NONE, 5262408);
allocate([110,105,110,101,0] /* nine\00 */, "i8", ALLOC_NONE, 5262420);
allocate([115,121,110,116,97,120,32,101,114,114,111,114,58,32,96,101,108,115,101,39,0] /* syntax error: `else' */, "i8", ALLOC_NONE, 5262428);
allocate([105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0] /* invalid stored block */, "i8", ALLOC_NONE, 5262452);
allocate([58,0] /* :\00 */, "i8", ALLOC_NONE, 5262484);
allocate(1, "i8", ALLOC_NONE, 5262488);
allocate([82,69,71,95,69,67,79,76,76,65,84,69,0] /* REG_ECOLLATE\00 */, "i8", ALLOC_NONE, 5262492);
allocate([37,99,0] /* %c\00 */, "i8", ALLOC_NONE, 5262508);
allocate([101,105,103,104,116,0] /* eight\00 */, "i8", ALLOC_NONE, 5262512);
allocate([115,121,110,116,97,120,32,101,114,114,111,114,58,32,96,101,108,105,102,39,0] /* syntax error: `elif' */, "i8", ALLOC_NONE, 5262520);
allocate([83,101,116,32,37,122,117,58,10,66,105,110,97,114,121,32,112,97,116,116,101,114,110,115,58,10,0] /* Set %zu:\0ABinary pa */, "i8", ALLOC_NONE, 5262544);
allocate([44,32,117,115,101,115,0] /* , uses\00 */, "i8", ALLOC_NONE, 5262572);
allocate([37,115,58,32,67,97,110,110,111,116,32,111,112,101,110,32,96,37,115,39,32,40,37,115,41,46,10,0] /* %s: Cannot open `%s' */, "i8", ALLOC_NONE, 5262580);
allocate([99,111,117,108,100,32,110,111,116,32,100,117,112,32,100,101,115,99,114,105,112,116,111,114,32,102,111,114,32,116,101,109,112,32,102,105,108,101,0] /* could not dup descri */, "i8", ALLOC_NONE, 5262608);
allocate([117,116,102,45,49,54,108,101,0] /* utf-16le\00 */, "i8", ALLOC_NONE, 5262648);
allocate([69,78,81,0] /* ENQ\00 */, "i8", ALLOC_NONE, 5262660);
allocate([32,101,120,101,99,117,116,97,98,108,101,0] /*  executable\00 */, "i8", ALLOC_NONE, 5262664);
allocate([90,0] /* Z\00 */, "i8", ALLOC_NONE, 5262676);
allocate([115,101,118,101,110,0] /* seven\00 */, "i8", ALLOC_NONE, 5262680);
allocate([115,121,110,116,97,120,32,101,114,114,111,114,58,32,96,105,102,39,0] /* syntax error: `if'\0 */, "i8", ALLOC_NONE, 5262688);
allocate([114,101,103,117,108,97,114,32,102,105,108,101,44,32,0] /* regular file, \00 */, "i8", ALLOC_NONE, 5262708);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5262724);
allocate([46,37,117,0] /* .%u\00 */, "i8", ALLOC_NONE, 5262728);
allocate([115,105,120,0] /* six\00 */, "i8", ALLOC_NONE, 5262732);
allocate([99,111,100,105,110,103,32,101,114,114,111,114,58,32,109,45,62,116,121,112,101,61,37,100,10,0] /* coding error: m-_typ */, "i8", ALLOC_NONE, 5262736);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5262764);
allocate([85,115,97,103,101,58,32,102,105,108,101,32,91,79,80,84,73,79,78,46,46,46,93,32,91,70,73,76,69,46,46,46,93,10,68,101,116,101,114,109,105,110,101,32,116,121,112,101,32,111,102,32,70,73,76,69,115,46,10,10,0] /* Usage: file [OPTION. */, "i8", ALLOC_NONE, 5262768);
allocate([105,110,118,97,108,105,100,32,109,45,62,116,121,112,101,32,40,37,100,41,32,105,110,32,109,112,114,105,110,116,40,41,0] /* invalid m-_type (%d) */, "i8", ALLOC_NONE, 5262832);
allocate([32,37,117,46,37,117,0] /*  %u.%u\00 */, "i8", ALLOC_NONE, 5262868);
allocate([102,105,118,101,0] /* five\00 */, "i8", ALLOC_NONE, 5262876);
allocate([39,47,37,99,39,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,114,101,103,101,120,10,0] /* '/%c' not allowed on */, "i8", ALLOC_NONE, 5262884);
allocate([69,82,82,79,82,58,32,37,115,10,0] /* ERROR: %s\0A\00 */, "i8", ALLOC_NONE, 5262912);
allocate([44,32,102,111,114,32,78,101,116,66,83,68,0] /* , for NetBSD\00 */, "i8", ALLOC_NONE, 5262924);
allocate([102,111,117,114,0] /* four\00 */, "i8", ALLOC_NONE, 5262940);
allocate([109,105,115,115,105,110,103,32,114,97,110,103,101,59,32,100,101,102,97,117,108,116,105,110,103,32,116,111,32,37,100,10,0] /* missing range; defau */, "i8", ALLOC_NONE, 5262948);
allocate([37,42,115,32,0] /* %_s \00 */, "i8", ALLOC_NONE, 5262984);
allocate([78,101,116,66,83,68,0] /* NetBSD\00 */, "i8", ALLOC_NONE, 5262992);
allocate([116,104,114,101,101,0] /* three\00 */, "i8", ALLOC_NONE, 5263000);
allocate([39,47,37,99,39,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,32,114,101,103,101,120,32,97,110,100,32,115,101,97,114,99,104,10,0] /* '/%c' only allowed o */, "i8", ALLOC_NONE, 5263008);
allocate([47,100,101,118,47,115,116,100,105,110,0] /* /dev/stdin\00 */, "i8", ALLOC_NONE, 5263048);
allocate([37,48,50,120,0] /* %02x\00 */, "i8", ALLOC_NONE, 5263060);
allocate([116,119,111,0] /* two\00 */, "i8", ALLOC_NONE, 5263068);
allocate([110,111,32,109,111,100,105,102,105,101,114,115,32,97,108,108,111,119,101,100,32,102,111,114,32,49,54,45,98,105,116,32,115,116,114,105,110,103,115,10,0] /* no modifiers allowed */, "i8", ALLOC_NONE, 5263072);
allocate([45,0] /* -\00 */, "i8", ALLOC_NONE, 5263116);
allocate([115,104,97,49,0] /* sha1\00 */, "i8", ALLOC_NONE, 5263120);
allocate([111,110,101,0] /* one\00 */, "i8", ALLOC_NONE, 5263128);
allocate([39,47,66,72,104,76,108,39,32,109,111,100,105,102,105,101,114,115,32,97,114,101,32,111,110,108,121,32,97,108,108,111,119,101,100,32,102,111,114,32,112,97,115,99,97,108,32,115,116,114,105,110,103,115,10,0] /* '/BHhLl' modifiers a */, "i8", ALLOC_NONE, 5263132);
allocate([85,115,97,103,101,58,32,37,115,32,91,45,98,99,104,105,107,76,108,78,110,112,114,115,118,122,48,93,32,91,45,45,97,112,112,108,101,93,32,91,45,45,109,105,109,101,45,101,110,99,111,100,105,110,103,93,32,91,45,45,109,105,109,101,45,116,121,112,101,93,10,32,32,32,32,32,32,32,32,32,32,32,32,91,45,101,32,116,101,115,116,110,97,109,101,93,32,91,45,70,32,115,101,112,97,114,97,116,111,114,93,32,91,45,102,32,110,97,109,101,102,105,108,101,93,32,91,45,109,32,109,97,103,105,99,102,105,108,101,115,93,32,102,105,108,101,32,46,46,46,10,32,32,32,32,32,32,32,37,115,32,45,67,32,91,45,109,32,109,97,103,105,99,102,105,108,101,115,93,10,32,32,32,32,32,32,32,37,115,32,91,45,45,104,101,108,112,93,10,0] /* Usage: %s [-bchikLlN */, "i8", ALLOC_NONE, 5263188);
allocate([78,111,32,115,117,109,109,97,114,121,32,105,110,102,111,0] /* No summary info\00 */, "i8", ALLOC_NONE, 5263388);
allocate([109,100,53,47,117,117,105,100,0] /* md5/uuid\00 */, "i8", ALLOC_NONE, 5263404);
allocate([122,101,114,111,0] /* zero\00 */, "i8", ALLOC_NONE, 5263416);
allocate([117,110,107,110,111,119,110,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,58,32,92,37,48,51,111,0] /* unknown escape seque */, "i8", ALLOC_NONE, 5263424);
allocate([37,100,100,43,0] /* %dd+\00 */, "i8", ALLOC_NONE, 5263456);
allocate([44,10,37,42,115,0] /* ,\0A%_s\00 */, "i8", ALLOC_NONE, 5263464);
allocate([97,112,112,108,105,99,97,116,105,111,110,47,120,45,101,109,112,116,121,0] /* application/x-empty\ */, "i8", ALLOC_NONE, 5263472);
allocate([44,32,66,117,105,108,100,73,68,91,37,115,93,61,0] /* , BuildID[%s]=\00 */, "i8", ALLOC_NONE, 5263492);
allocate([37,115,115,116,105,99,107,121,0] /* %ssticky\00 */, "i8", ALLOC_NONE, 5263508);
allocate([115,111,108,105,100,117,115,0] /* solidus\00 */, "i8", ALLOC_NONE, 5263520);
allocate([110,111,32,110,101,101,100,32,116,111,32,101,115,99,97,112,101,32,96,37,99,39,0] /* no need to escape `% */, "i8", ALLOC_NONE, 5263528);
allocate([105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0] /* invalid block type\0 */, "i8", ALLOC_NONE, 5263552);
allocate([44,32,0] /* , \00 */, "i8", ALLOC_NONE, 5263572);
allocate([117,0] /* u\00 */, "i8", ALLOC_NONE, 5263576);
allocate([105,110,118,97,108,105,100,32,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,0] /* invalid regular expr */, "i8", ALLOC_NONE, 5263580);
allocate([32,37,100,46,37,100,46,37,100,0] /*  %d.%d.%d\00 */, "i8", ALLOC_NONE, 5263608);
allocate([115,108,97,115,104,0] /* slash\00 */, "i8", ALLOC_NONE, 5263620);
allocate([91,93,40,41,46,42,63,94,36,124,123,125,0] /* []()._?^$|{}\00 */, "i8", ALLOC_NONE, 5263628);
allocate([110,111,116,32,0] /* not \00 */, "i8", ALLOC_NONE, 5263644);
allocate([117,115,105,110,103,32,114,101,103,117,108,97,114,32,109,97,103,105,99,32,102,105,108,101,32,96,37,115,39,0] /* using regular magic  */, "i8", ALLOC_NONE, 5263652);
allocate([37,115,37,115,0] /* %s%s\00 */, "i8", ALLOC_NONE, 5263684);
allocate([101,114,114,111,114,32,119,104,105,108,101,32,119,114,105,116,105,110,103,32,116,111,32,116,101,109,112,32,102,105,108,101,0] /* error while writing  */, "i8", ALLOC_NONE, 5263692);
allocate([76,105,116,116,108,101,45,101,110,100,105,97,110,32,85,84,70,45,49,54,32,85,110,105,99,111,100,101,0] /* Little-endian UTF-16 */, "i8", ALLOC_NONE, 5263728);
allocate([69,79,84,0] /* EOT\00 */, "i8", ALLOC_NONE, 5263760);
allocate([37,0] /* %\00 */, "i8", ALLOC_NONE, 5263764);
allocate([32,37,115,0] /*  %s\00 */, "i8", ALLOC_NONE, 5263768);
allocate([60,117,110,107,110,111,119,110,62,0] /* _unknown_\00 */, "i8", ALLOC_NONE, 5263772);
allocate([102,117,108,108,45,115,116,111,112,0] /* full-stop\00 */, "i8", ALLOC_NONE, 5263784);
allocate([60,62,38,94,61,33,0] /* __&^=!\00 */, "i8", ALLOC_NONE, 5263796);
allocate([101,120,101,99,117,116,97,98,108,101,44,32,0] /* executable, \00 */, "i8", ALLOC_NONE, 5263804);
allocate([37,46,42,115,0] /* %._s\00 */, "i8", ALLOC_NONE, 5263820);
allocate([107,78,101,116,66,83,68,0] /* kNetBSD\00 */, "i8", ALLOC_NONE, 5263828);
allocate([112,101,114,105,111,100,0] /* period\00 */, "i8", ALLOC_NONE, 5263836);
allocate([101,115,99,97,112,101,100,32,116,97,98,32,102,111,117,110,100,44,32,117,115,101,32,92,116,32,105,110,115,116,101,97,100,0] /* escaped tab found, u */, "i8", ALLOC_NONE, 5263844);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5263880);
allocate([37,115,58,32,37,115,10,0] /* %s: %s\0A\00 */, "i8", ALLOC_NONE, 5263884);
allocate([37,103,0] /* %g\00 */, "i8", ALLOC_NONE, 5263892);
allocate([107,70,114,101,101,66,83,68,0] /* kFreeBSD\00 */, "i8", ALLOC_NONE, 5263896);
allocate([104,121,112,104,101,110,45,109,105,110,117,115,0] /* hyphen-minus\00 */, "i8", ALLOC_NONE, 5263908);
allocate([105,110,99,111,109,112,108,101,116,101,32,101,115,99,97,112,101,0] /* incomplete escape\00 */, "i8", ALLOC_NONE, 5263924);
allocate([37,111,0] /* %o\00 */, "i8", ALLOC_NONE, 5263944);
allocate([83,111,108,97,114,105,115,0] /* Solaris\00 */, "i8", ALLOC_NONE, 5263948);
allocate([104,121,112,104,101,110,0] /* hyphen\00 */, "i8", ALLOC_NONE, 5263956);
allocate([115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,58,32,96,37,115,39,0] /* string too long: `%s */, "i8", ALLOC_NONE, 5263964);
allocate([10,82,101,112,111,114,116,32,98,117,103,115,32,116,111,32,104,116,116,112,58,47,47,98,117,103,115,46,103,119,46,99,111,109,47,10,0] /* \0AReport bugs to ht */, "i8", ALLOC_NONE, 5263988);
allocate([72,117,114,100,0] /* Hurd\00 */, "i8", ALLOC_NONE, 5264028);
allocate([99,111,109,109,97,0] /* comma\00 */, "i8", ALLOC_NONE, 5264036);
allocate([99,97,110,110,111,116,32,103,101,116,32,115,116,114,105,110,103,32,102,114,111,109,32,96,37,115,39,0] /* cannot get string fr */, "i8", ALLOC_NONE, 5264044);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,114,105,110,116,32,100,101,98,117,103,103,105,110,103,32,109,101,115,115,97,103,101,115,10,0] /*                 prin */, "i8", ALLOC_NONE, 5264072);
allocate([76,105,110,117,120,0] /* Linux\00 */, "i8", ALLOC_NONE, 5264116);
allocate([112,108,117,115,45,115,105,103,110,0] /* plus-sign\00 */, "i8", ALLOC_NONE, 5264124);
allocate([84,111,111,32,109,97,110,121,32,102,111,114,109,97,116,32,115,116,114,105,110,103,115,32,40,115,104,111,117,108,100,32,104,97,118,101,32,97,116,32,109,111,115,116,32,111,110,101,41,32,102,111,114,32,96,37,115,39,32,119,105,116,104,32,100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,0] /* Too many format stri */, "i8", ALLOC_NONE, 5264136);
allocate([32,32,45,37,99,44,32,45,45,100,101,98,117,103,0] /*   -%c, --debug\00 */, "i8", ALLOC_NONE, 5264220);
allocate([44,32,102,111,114,32,71,78,85,47,0] /* , for GNU/\00 */, "i8", ALLOC_NONE, 5264236);
allocate([97,115,116,101,114,105,115,107,0] /* asterisk\00 */, "i8", ALLOC_NONE, 5264248);
allocate([80,114,105,110,116,102,32,102,111,114,109,97,116,32,96,37,99,39,32,105,115,32,110,111,116,32,118,97,108,105,100,32,102,111,114,32,116,121,112,101,32,96,37,115,39,32,105,110,32,100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,0] /* Printf format `%c' i */, "i8", ALLOC_NONE, 5264260);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,109,112,105,108,101,32,102,105,108,101,32,115,112,101,99,105,102,105,101,100,32,98,121,32,45,109,10,0] /*               compil */, "i8", ALLOC_NONE, 5264328);
allocate([67,97,110,110,111,116,32,114,101,97,100,32,115,104,111,114,116,32,115,116,114,101,97,109,0] /* Cannot read short st */, "i8", ALLOC_NONE, 5264372);
allocate([71,78,85,0] /* GNU\00 */, "i8", ALLOC_NONE, 5264400);
allocate([114,105,103,104,116,45,112,97,114,101,110,116,104,101,115,105,115,0] /* right-parenthesis\00 */, "i8", ALLOC_NONE, 5264404);
allocate([78,111,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,102,111,114,32,96,37,115,39,32,119,105,116,104,32,100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,0] /* No format string for */, "i8", ALLOC_NONE, 5264424);
allocate([48,120,37,120,0] /* 0x%x\00 */, "i8", ALLOC_NONE, 5264472);
allocate([32,32,45,37,99,44,32,45,45,99,111,109,112,105,108,101,0] /*   -%c, --compile\00 */, "i8", ALLOC_NONE, 5264480);
allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NONE, 5264500);
allocate([44,32,102,111,114,32,83,117,83,69,32,37,100,46,37,100,0] /* , for SuSE %d.%d\00 */, "i8", ALLOC_NONE, 5264508);
allocate([37,115,115,101,116,103,105,100,0] /* %ssetgid\00 */, "i8", ALLOC_NONE, 5264528);
allocate([108,101,102,116,45,112,97,114,101,110,116,104,101,115,105,115,0] /* left-parenthesis\00 */, "i8", ALLOC_NONE, 5264540);
allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,99,111,110,115,105,115,116,101,110,99,121,32,98,101,116,119,101,101,110,32,109,45,62,116,121,112,101,32,97,110,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,115,0] /* Internal error incon */, "i8", ALLOC_NONE, 5264560);
allocate([104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0] /* header crc mismatch\ */, "i8", ALLOC_NONE, 5264624);
allocate([32,32,32,32,32,32,32,32,116,114,101,97,116,32,115,112,101,99,105,97,108,32,40,98,108,111,99,107,47,99,104,97,114,32,100,101,118,105,99,101,115,41,32,102,105,108,101,115,32,97,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,114,100,105,110,97,114,121,32,111,110,101,115,10,0] /*         treat specia */, "i8", ALLOC_NONE, 5264644);
allocate([32,37,115,37,115,0] /*  %s%s\00 */, "i8", ALLOC_NONE, 5264740);
allocate([82,69,71,95,66,65,68,80,65,84,0] /* REG_BADPAT\00 */, "i8", ALLOC_NONE, 5264748);
allocate([83,117,83,69,0] /* SuSE\00 */, "i8", ALLOC_NONE, 5264760);
allocate([97,112,111,115,116,114,111,112,104,101,0] /* apostrophe\00 */, "i8", ALLOC_NONE, 5264768);
allocate([100,101,115,99,114,105,112,116,105,111,110,32,96,37,115,39,32,116,114,117,110,99,97,116,101,100,0] /* description `%s' tru */, "i8", ALLOC_NONE, 5264780);
allocate(1, "i8", ALLOC_NONE, 5264808);
allocate([32,32,45,37,99,44,32,45,45,115,112,101,99,105,97,108,45,102,105,108,101,115,0] /*   -%c, --special-fil */, "i8", ALLOC_NONE, 5264812);
allocate([109,97,103,105,99,32,101,108,101,109,101,110,116,32,115,105,122,101,32,37,108,117,32,33,61,32,37,108,117,0] /* magic element size % */, "i8", ALLOC_NONE, 5264836);
allocate([101,114,114,111,114,32,99,111,112,121,105,110,103,32,102,114,111,109,32,112,105,112,101,32,116,111,32,116,101,109,112,32,102,105,108,101,0] /* error copying from p */, "i8", ALLOC_NONE, 5264868);
allocate([85,84,70,45,56,32,85,110,105,99,111,100,101,0] /* UTF-8 Unicode\00 */, "i8", ALLOC_NONE, 5264908);
allocate([69,84,88,0] /* ETX\00 */, "i8", ALLOC_NONE, 5264924);
allocate([40,115,45,62,98,117,102,102,101,114,95,98,97,115,101,41,91,115,45,62,98,117,102,102,101,114,95,108,101,110,32,45,32,49,93,32,61,61,32,49,0] /* (s-_buffer_base)[s-_ */, "i8", ALLOC_NONE, 5264928);
allocate([32,116,101,120,116,32,101,120,101,99,117,116,97,98,108,101,36,0] /*  text executable$\00 */, "i8", ALLOC_NONE, 5264972);
allocate([44,32,98,97,100,32,110,111,116,101,32,100,101,115,99,114,105,112,116,105,111,110,32,115,105,122,101,32,48,120,37,108,120,0] /* , bad note descripti */, "i8", ALLOC_NONE, 5264992);
allocate([97,109,112,101,114,115,97,110,100,0] /* ampersand\00 */, "i8", ALLOC_NONE, 5265028);
allocate([80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0] /* POSIXLY_CORRECT\00 */, "i8", ALLOC_NONE, 5265040);
allocate([37,99,61,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* %c= not supported\00 */, "i8", ALLOC_NONE, 5265056);
allocate([119,114,105,116,97,98,108,101,44,32,0] /* writable, \00 */, "i8", ALLOC_NONE, 5265076);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,110,39,116,32,116,114,97,110,115,108,97,116,101,32,117,110,112,114,105,110,116,97,98,108,101,32,99,104,97,114,115,32,116,111,32,92,111,111,111,10,0] /*                   do */, "i8", ALLOC_NONE, 5265088);
allocate([44,32,98,97,100,32,110,111,116,101,32,110,97,109,101,32,115,105,122,101,32,48,120,37,108,120,0] /* , bad note name size */, "i8", ALLOC_NONE, 5265152);
allocate([112,101,114,99,101,110,116,45,115,105,103,110,0] /* percent-sign\00 */, "i8", ALLOC_NONE, 5265180);
allocate([105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,111,112,58,32,37,99,0] /* invalid string op: % */, "i8", ALLOC_NONE, 5265196);
allocate([32,32,45,37,99,44,32,45,45,114,97,119,0] /*   -%c, --raw\00 */, "i8", ALLOC_NONE, 5265220);
allocate([109,97,103,105,99,32,102,105,108,101,32,102,114,111,109,32,37,115,10,0] /* magic file from %s\0 */, "i8", ALLOC_NONE, 5265236);
allocate([73,77,65,0] /* IMA\00 */, "i8", ALLOC_NONE, 5265256);
allocate([37,117,0] /* %u\00 */, "i8", ALLOC_NONE, 5265260);
allocate([100,111,108,108,97,114,45,115,105,103,110,0] /* dollar-sign\00 */, "i8", ALLOC_NONE, 5265264);
allocate([115,116,114,105,110,103,32,101,120,116,101,110,115,105,111,110,32,96,37,99,39,32,105,110,118,97,108,105,100,0] /* string extension `%c */, "i8", ALLOC_NONE, 5265276);
allocate([32,32,32,32,32,32,32,32,112,114,101,115,101,114,118,101,32,97,99,99,101,115,115,32,116,105,109,101,115,32,111,110,32,102,105,108,101,115,10,0] /*         preserve acc */, "i8", ALLOC_NONE, 5265308);
allocate([70,74,70,77,65,85,0] /* FJFMAU\00 */, "i8", ALLOC_NONE, 5265348);
allocate([110,117,109,98,101,114,45,115,105,103,110,0] /* number-sign\00 */, "i8", ALLOC_NONE, 5265356);
allocate([122,101,114,111,32,114,97,110,103,101,0] /* zero range\00 */, "i8", ALLOC_NONE, 5265368);
allocate([32,32,45,37,99,44,32,45,45,112,114,101,115,101,114,118,101,45,100,97,116,101,0] /*   -%c, --preserve-da */, "i8", ALLOC_NONE, 5265380);
allocate([70,77,65,70,0] /* FMAF\00 */, "i8", ALLOC_NONE, 5265404);
allocate([113,117,111,116,97,116,105,111,110,45,109,97,114,107,0] /* quotation-mark\00 */, "i8", ALLOC_NONE, 5265412);
allocate([109,117,108,116,105,112,108,101,32,114,97,110,103,101,115,0] /* multiple ranges\00 */, "i8", ALLOC_NONE, 5265428);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,101,114,109,105,110,97,116,101,32,102,105,108,101,110,97,109,101,115,32,119,105,116,104,32,65,83,67,73,73,32,78,85,76,10,0] /*                termi */, "i8", ALLOC_NONE, 5265444);
allocate([65,83,73,95,66,76,75,95,73,78,73,84,0] /* ASI_BLK_INIT\00 */, "i8", ALLOC_NONE, 5265496);
allocate([101,120,99,108,97,109,97,116,105,111,110,45,109,97,114,107,0] /* exclamation-mark\00 */, "i8", ALLOC_NONE, 5265512);
allocate([39,126,39,32,105,110,118,97,108,105,100,32,102,111,114,32,115,116,114,105,110,103,32,116,121,112,101,115,0] /* '~' invalid for stri */, "i8", ALLOC_NONE, 5265532);
allocate([32,32,45,37,99,44,32,45,45,112,114,105,110,116,48,0] /*   -%c, --print0\00 */, "i8", ALLOC_NONE, 5265564);
allocate([86,73,83,50,0] /* VIS2\00 */, "i8", ALLOC_NONE, 5265580);
allocate([115,112,97,99,101,0] /* space\00 */, "i8", ALLOC_NONE, 5265588);
allocate([116,121,112,101,32,96,37,115,39,32,105,110,118,97,108,105,100,0] /* type `%s' invalid\00 */, "i8", ALLOC_NONE, 5265596);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,32,110,111,116,32,112,97,100,32,111,117,116,112,117,116,10,0] /*                do no */, "i8", ALLOC_NONE, 5265616);
allocate(1, "i8", ALLOC_NONE, 5265652);
allocate([67,97,110,39,116,32,114,101,97,100,32,100,105,114,101,99,116,111,114,121,0] /* Can't read directory */, "i8", ALLOC_NONE, 5265656);
allocate([86,73,83,0] /* VIS\00 */, "i8", ALLOC_NONE, 5265680);
allocate([85,83,0] /* US\00 */, "i8", ALLOC_NONE, 5265684);
allocate([109,105,115,115,105,110,103,32,39,41,39,32,105,110,32,105,110,100,105,114,101,99,116,32,111,102,102,115,101,116,0] /* missing ')' in indir */, "i8", ALLOC_NONE, 5265688);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5265720);
allocate([42,66,97,100,42,32,48,120,37,49,54,46,49,54,108,108,120,10,0] /* _Bad_ 0x%16.16llx\0A */, "i8", ALLOC_NONE, 5265724);
allocate([32,32,45,37,99,44,32,45,45,110,111,45,112,97,100,0] /*   -%c, --no-pad\00 */, "i8", ALLOC_NONE, 5265744);
allocate([101,114,114,111,114,32,114,101,97,100,105,110,103,0] /* error reading\00 */, "i8", ALLOC_NONE, 5265760);
allocate([80,79,80,67,0] /* POPC\00 */, "i8", ALLOC_NONE, 5265776);
allocate(1, "i8", ALLOC_NONE, 5265784);
allocate([73,83,49,0] /* IS1\00 */, "i8", ALLOC_NONE, 5265788);
allocate([105,110,95,111,102,102,115,101,116,32,96,37,115,39,32,105,110,118,97,108,105,100,0] /* in_offset `%s' inval */, "i8", ALLOC_NONE, 5265792);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,100,111,32,110,111,116,32,98,117,102,102,101,114,32,111,117,116,112,117,116,10,0] /*             do not b */, "i8", ALLOC_NONE, 5265816);
allocate([117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0] /* unknown header flags */, "i8", ALLOC_NONE, 5265852);
allocate([37,99,37,117,41,44,0] /* %c%u),\00 */, "i8", ALLOC_NONE, 5265880);
allocate([114,101,103,101,120,101,99,40,41,32,102,97,105,108,101,100,32,116,111,32,109,97,116,99,104,0] /* regexec() failed to  */, "i8", ALLOC_NONE, 5265888);
allocate([86,56,80,76,85,83,0] /* V8PLUS\00 */, "i8", ALLOC_NONE, 5265916);
allocate([82,83,0] /* RS\00 */, "i8", ALLOC_NONE, 5265924);
allocate([105,110,100,105,114,101,99,116,32,111,102,102,115,101,116,32,116,121,112,101,32,96,37,99,39,32,105,110,118,97,108,105,100,0] /* indirect offset type */, "i8", ALLOC_NONE, 5265928);
allocate([44,32,37,115,115,116,114,105,112,112,101,100,0] /* , %sstripped\00 */, "i8", ALLOC_NONE, 5265964);
allocate([32,32,45,37,99,44,32,45,45,110,111,45,98,117,102,102,101,114,0] /*   -%c, --no-buffer\0 */, "i8", ALLOC_NONE, 5265980);
allocate([37,46,51,111,0] /* %.3o\00 */, "i8", ALLOC_NONE, 5266000);
allocate([99,97,110,110,111,116,32,99,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,102,111,114,32,112,105,112,101,32,99,111,112,121,0] /* cannot create tempor */, "i8", ALLOC_NONE, 5266008);
allocate([117,116,102,45,56,0] /* utf-8\00 */, "i8", ALLOC_NONE, 5266052);
allocate([83,84,88,0] /* STX\00 */, "i8", ALLOC_NONE, 5266060);
allocate([118,97,115,112,114,105,110,116,102,46,99,0] /* vasprintf.c\00 */, "i8", ALLOC_NONE, 5266064);
allocate([44,32,0] /* , \00 */, "i8", ALLOC_NONE, 5266076);
allocate([70,83,77,85,76,68,0] /* FSMULD\00 */, "i8", ALLOC_NONE, 5266080);
allocate([73,83,50,0] /* IS2\00 */, "i8", ALLOC_NONE, 5266088);
allocate([111,102,102,115,101,116,32,96,37,115,39,32,105,110,118,97,108,105,100,0] /* offset `%s' invalid\ */, "i8", ALLOC_NONE, 5266092);
allocate(1, "i8", ALLOC_NONE, 5266112);
allocate([99,97,110,110,111,116,32,114,101,97,100,32,96,37,115,39,0] /* cannot read `%s'\00 */, "i8", ALLOC_NONE, 5266116);
allocate([32,32,32,32,32,32,32,100,111,110,39,116,32,102,111,108,108,111,119,32,115,121,109,108,105,110,107,115,10,0] /*        don't follow  */, "i8", ALLOC_NONE, 5266136);
allocate([1,2,3,4,0] /* \01\02\03\04\00 */, "i8", ALLOC_NONE, 5266168);
allocate([68,73,86,51,50,0] /* DIV32\00 */, "i8", ALLOC_NONE, 5266176);
allocate([71,83,0] /* GS\00 */, "i8", ALLOC_NONE, 5266184);
allocate([114,101,108,97,116,105,118,101,32,111,102,102,115,101,116,32,97,116,32,108,101,118,101,108,32,48,0] /* relative offset at l */, "i8", ALLOC_NONE, 5266188);
allocate([32,32,45,37,99,44,32,45,45,110,111,45,100,101,114,101,102,101,114,101,110,99,101,0] /*   -%c, --no-derefere */, "i8", ALLOC_NONE, 5266216);
allocate([53,46,49,50,0] /* 5.12\00 */, "i8", ALLOC_NONE, 5266240);
allocate([77,85,76,51,50,0] /* MUL32\00 */, "i8", ALLOC_NONE, 5266248);
allocate([73,83,51,0] /* IS3\00 */, "i8", ALLOC_NONE, 5266256);
allocate([78,111,32,99,117,114,114,101,110,116,32,101,110,116,114,121,32,102,111,114,32,99,111,110,116,105,110,117,97,116,105,111,110,0] /* No current entry for */, "i8", ALLOC_NONE, 5266260);
allocate([37,104,117,0] /* %hu\00 */, "i8", ALLOC_NONE, 5266296);
allocate([32,32,32,32,32,32,32,32,32,32,102,111,108,108,111,119,32,115,121,109,108,105,110,107,115,32,40,100,101,102,97,117,108,116,41,10,0] /*           follow sym */, "i8", ALLOC_NONE, 5266300);
allocate([83,83,69,52,46,50,0] /* SSE4.2\00 */, "i8", ALLOC_NONE, 5266340);
allocate([70,83,0] /* FS\00 */, "i8", ALLOC_NONE, 5266348);
allocate([78,111,32,99,117,114,114,101,110,116,32,101,110,116,114,121,32,102,111,114,32,58,33,37,115,32,116,121,112,101,0] /* No current entry for */, "i8", ALLOC_NONE, 5266352);
allocate([32,32,45,37,99,44,32,45,45,100,101,114,101,102,101,114,101,110,99,101,0] /*   -%c, --dereference */, "i8", ALLOC_NONE, 5266384);
allocate([83,83,69,52,46,49,0] /* SSE4.1\00 */, "i8", ALLOC_NONE, 5266408);
allocate([73,83,52,0] /* IS4\00 */, "i8", ALLOC_NONE, 5266416);
allocate([85,110,107,110,111,119,110,32,33,58,32,101,110,116,114,121,32,96,37,115,39,0] /* Unknown !: entry `%s */, "i8", ALLOC_NONE, 5266420);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,108,105,115,116,32,109,97,103,105,99,32,115,116,114,101,110,103,116,104,10,0] /*                  lis */, "i8", ALLOC_NONE, 5266444);
allocate([42,42,42,32,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,101,114,114,111,114,32,99,111,100,101,32,42,42,42,0] /* ___ unknown regexp e */, "i8", ALLOC_NONE, 5266484);
allocate([83,83,83,69,51,0] /* SSSE3\00 */, "i8", ALLOC_NONE, 5266520);
allocate([69,83,67,0] /* ESC\00 */, "i8", ALLOC_NONE, 5266528);
allocate([99,97,110,110,111,116,32,114,101,97,100,32,109,97,103,105,99,32,102,105,108,101,32,96,37,115,39,0] /* cannot read magic fi */, "i8", ALLOC_NONE, 5266532);
allocate([32,32,45,37,99,44,32,45,45,108,105,115,116,0] /*   -%c, --list\00 */, "i8", ALLOC_NONE, 5266560);
allocate([37,115,37,115,0] /* %s%s\00 */, "i8", ALLOC_NONE, 5266576);
allocate(1, "i8", ALLOC_NONE, 5266584);
allocate([65,77,68,95,76,90,67,78,84,0] /* AMD_LZCNT\00 */, "i8", ALLOC_NONE, 5266588);
allocate([83,85,66,0] /* SUB\00 */, "i8", ALLOC_NONE, 5266600);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 5266604);
allocate([32,32,32,32,32,32,32,32,32,32,32,100,111,110,39,116,32,115,116,111,112,32,97,116,32,116,104,101,32,102,105,114,115,116,32,109,97,116,99,104,10,0] /*            don't sto */, "i8", ALLOC_NONE, 5266608);
allocate([67,97,110,39,116,32,114,101,97,100,32,83,83,65,84,0] /* Can't read SSAT\00 */, "i8", ALLOC_NONE, 5266652);
allocate([120,45,114,112,116,0] /* x-rpt\00 */, "i8", ALLOC_NONE, 5266668);
allocate([105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,111,32,114,101,103,101,120,32,114,111,117,116,105,110,101,0] /* invalid argument to  */, "i8", ALLOC_NONE, 5266676);
allocate([80,79,80,67,78,84,0] /* POPCNT\00 */, "i8", ALLOC_NONE, 5266712);
allocate([69,77,0] /* EM\00 */, "i8", ALLOC_NONE, 5266720);
allocate([42,42,42,32,80,111,115,115,105,98,108,101,32,98,105,110,97,114,121,32,116,101,115,116,32,102,111,114,32,116,101,120,116,32,116,121,112,101,10,0] /* ___ Possible binary  */, "i8", ALLOC_NONE, 5266724);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0] /* invalid distance too */, "i8", ALLOC_NONE, 5266764);
allocate([32,32,45,37,99,44,32,45,45,107,101,101,112,45,103,111,105,110,103,0] /*   -%c, --keep-going\ */, "i8", ALLOC_NONE, 5266796);
allocate([101,114,114,111,114,32,115,101,101,107,105,110,103,0] /* error seeking\00 */, "i8", ALLOC_NONE, 5266816);
allocate([67,114,121,115,116,97,108,32,82,101,112,111,114,116,115,0] /* Crystal Reports\00 */, "i8", ALLOC_NONE, 5266832);
allocate([82,69,71,95,73,78,86,65,82,71,0] /* REG_INVARG\00 */, "i8", ALLOC_NONE, 5266848);
allocate([65,77,68,95,83,83,69,52,65,0] /* AMD_SSE4A\00 */, "i8", ALLOC_NONE, 5266860);
allocate([44,32,0] /* , \00 */, "i8", ALLOC_NONE, 5266872);
allocate([67,65,78,0] /* CAN\00 */, "i8", ALLOC_NONE, 5266876);
allocate([40,110,111,32,100,101,115,99,114,105,112,116,105,111,110,41,0] /* (no description)\00 */, "i8", ALLOC_NONE, 5266880);
allocate([32,32,32,32,32,32,32,32,111,117,116,112,117,116,32,116,104,101,32,77,73,77,69,32,101,110,99,111,100,105,110,103,10,0] /*         output the M */, "i8", ALLOC_NONE, 5266900);
allocate([105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0] /* invalid window size\ */, "i8", ALLOC_NONE, 5266936);
allocate([42,98,97,100,42,0] /* _bad_\00 */, "i8", ALLOC_NONE, 5266956);
allocate([82,69,71,95,78,79,77,65,84,67,72,0] /* REG_NOMATCH\00 */, "i8", ALLOC_NONE, 5266964);
allocate([80,111,119,101,114,112,111,105,110,116,0] /* Powerpoint\00 */, "i8", ALLOC_NONE, 5266976);
allocate([34,99,97,110,39,116,32,104,97,112,112,101,110,34,32,45,45,32,121,111,117,32,102,111,117,110,100,32,97,32,98,117,103,0] /* \22can't happen\22 - */, "i8", ALLOC_NONE, 5266988);
allocate([84,83,67,80,0] /* TSCP\00 */, "i8", ALLOC_NONE, 5267024);
allocate([69,84,66,0] /* ETB\00 */, "i8", ALLOC_NONE, 5267032);
allocate([59,32,0] /* ; \00 */, "i8", ALLOC_NONE, 5267036);
allocate([105,110,118,97,108,105,100,32,111,102,102,115,101,116,32,37,117,32,105,110,32,109,99,111,112,121,40,41,0] /* invalid offset %u in */, "i8", ALLOC_NONE, 5267040);
allocate([44,32,119,105,116,104,32,117,110,107,110,111,119,110,32,99,97,112,97,98,105,108,105,116,121,32,48,120,37,108,108,120,32,61,32,48,120,37,108,108,120,0] /* , with unknown capab */, "i8", ALLOC_NONE, 5267072);
allocate([99,97,110,110,111,116,32,115,116,97,116,32,96,37,115,39,0] /* cannot stat `%s'\00 */, "i8", ALLOC_NONE, 5267116);
allocate([32,32,32,32,32,32,45,45,109,105,109,101,45,101,110,99,111,100,105,110,103,0] /*       --mime-encodin */, "i8", ALLOC_NONE, 5267136);
allocate([117,115,116,97,114,0] /* ustar\00 */, "i8", ALLOC_NONE, 5267160);
allocate([47,116,109,112,47,102,105,108,101,46,88,88,88,88,88,88,0] /* /tmp/file.XXXXXX\00 */, "i8", ALLOC_NONE, 5267168);
allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,58,32,109,45,62,116,121,112,101,61,37,100,10,0] /* cannot happen: m-_ty */, "i8", ALLOC_NONE, 5267188);
allocate([118,110,100,46,109,115,45,101,120,99,101,108,0] /* vnd.ms-excel\00 */, "i8", ALLOC_NONE, 5267216);
allocate([85,84,70,45,56,32,85,110,105,99,111,100,101,32,40,119,105,116,104,32,66,79,77,41,0] /* UTF-8 Unicode (with  */, "i8", ALLOC_NONE, 5267232);
allocate([83,79,72,0] /* SOH\00 */, "i8", ALLOC_NONE, 5267260);
allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NONE, 5267264);
allocate([100,105,111,117,120,88,0] /* diouxX\00 */, "i8", ALLOC_NONE, 5267272);
allocate([82,69,71,95,65,83,83,69,82,84,0] /* REG_ASSERT\00 */, "i8", ALLOC_NONE, 5267280);
allocate([32,116,101,120,116,36,0] /*  text$\00 */, "i8", ALLOC_NONE, 5267292);
allocate([65,72,70,0] /* AHF\00 */, "i8", ALLOC_NONE, 5267300);
allocate([83,89,78,0] /* SYN\00 */, "i8", ALLOC_NONE, 5267304);
allocate(1, "i8", ALLOC_NONE, 5267308);
allocate([108,111,110,103,95,111,112,116,105,111,110,115,32,33,61,32,78,85,76,76,0] /* long_options != NULL */, "i8", ALLOC_NONE, 5267312);
allocate([46,0] /* .\00 */, "i8", ALLOC_NONE, 5267336);
allocate([109,103,101,116,32,64,37,100,58,32,0] /* mget @%d: \00 */, "i8", ALLOC_NONE, 5267340);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,112,117,116,32,116,104,101,32,77,73,77,69,32,116,121,112,101,10,0] /*             output t */, "i8", ALLOC_NONE, 5267352);
allocate([69,120,99,101,108,0] /* Excel\00 */, "i8", ALLOC_NONE, 5267388);
allocate([59,32,99,104,97,114,115,101,116,61,0] /* ; charset=\00 */, "i8", ALLOC_NONE, 5267396);
allocate([101,109,112,116,121,32,40,115,117,98,41,101,120,112,114,101,115,115,105,111,110,0] /* empty (sub)expressio */, "i8", ALLOC_NONE, 5267408);
allocate([67,88,49,54,0] /* CX16\00 */, "i8", ALLOC_NONE, 5267432);
allocate([78,65,75,0] /* NAK\00 */, "i8", ALLOC_NONE, 5267440);
allocate([37,115,37,115,37,115,58,32,37,115,10,0] /* %s%s%s: %s\0A\00 */, "i8", ALLOC_NONE, 5267444);
allocate([105,110,118,97,108,105,100,32,116,121,112,101,32,37,100,32,105,110,32,109,99,111,110,118,101,114,116,40,41,0] /* invalid type %d in m */, "i8", ALLOC_NONE, 5267456);
allocate([32,32,32,32,32,32,45,45,109,105,109,101,45,116,121,112,101,0] /*       --mime-type\00 */, "i8", ALLOC_NONE, 5267488);
allocate([37,115,45,37,115,10,0] /* %s-%s\0A\00 */, "i8", ALLOC_NONE, 5267508);
allocate([49,46,50,46,55,0] /* 1.2.7\00 */, "i8", ALLOC_NONE, 5267516);
allocate([87,111,114,100,0] /* Word\00 */, "i8", ALLOC_NONE, 5267524);
allocate([105,110,111,100,101,47,37,115,0] /* inode/%s\00 */, "i8", ALLOC_NONE, 5267532);
allocate([82,69,71,95,69,77,80,84,89,0] /* REG_EMPTY\00 */, "i8", ALLOC_NONE, 5267544);
allocate([77,79,78,0] /* MON\00 */, "i8", ALLOC_NONE, 5267556);
allocate([68,67,52,0] /* DC4\00 */, "i8", ALLOC_NONE, 5267560);
allocate([108,101,118,101,108,32,48,32,34,100,101,102,97,117,108,116,34,32,100,105,100,32,110,111,116,32,115,111,114,116,32,108,97,115,116,0] /* level 0 \22default\2 */, "i8", ALLOC_NONE, 5267564);
allocate([99,97,110,110,111,116,32,102,105,110,100,32,101,110,116,114,121,32,96,37,115,39,0] /* cannot find entry `% */, "i8", ALLOC_NONE, 5267600);
allocate([37,117,58,32,37,46,42,115,32,37,117,0] /* %u: %._s %u\00 */, "i8", ALLOC_NONE, 5267624);
allocate([37,99,0] /* %c\00 */, "i8", ALLOC_NONE, 5267636);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,112,117,116,32,116,104,101,32,65,112,112,108,101,32,67,82,69,65,84,79,82,47,84,89,80,69,10,0] /*                 outp */, "i8", ALLOC_NONE, 5267640);
allocate([44,32,37,115,58,32,37,115,0] /* , %s: %s\00 */, "i8", ALLOC_NONE, 5267688);
allocate([76,111,99,97,108,101,32,73,68,0] /* Locale ID\00 */, "i8", ALLOC_NONE, 5267700);
allocate([98,114,111,107,101,110,32,115,121,109,98,111,108,105,99,32,108,105,110,107,32,116,111,32,96,37,115,39,0] /* broken symbolic link */, "i8", ALLOC_NONE, 5267712);
allocate([114,101,112,101,116,105,116,105,111,110,45,111,112,101,114,97,116,111,114,32,111,112,101,114,97,110,100,32,105,110,118,97,108,105,100,0] /* repetition-operator  */, "i8", ALLOC_NONE, 5267744);
allocate([83,83,69,51,0] /* SSE3\00 */, "i8", ALLOC_NONE, 5267780);
allocate([68,67,51,0] /* DC3\00 */, "i8", ALLOC_NONE, 5267788);
allocate([37,115,47,37,115,0] /* %s/%s\00 */, "i8", ALLOC_NONE, 5267792);
allocate([105,110,100,105,114,101,99,116,32,64,111,102,102,115,61,37,117,91,37,100,93,10,0] /* indirect @offs=%u[%d */, "i8", ALLOC_NONE, 5267800);
allocate([32,32,32,32,32,32,45,45,97,112,112,108,101,0] /*       --apple\00 */, "i8", ALLOC_NONE, 5267824);
allocate([44,32,37,115,58,32,37,103,0] /* , %s: %g\00 */, "i8", ALLOC_NONE, 5267840);
allocate([83,101,99,117,114,105,116,121,0] /* Security\00 */, "i8", ALLOC_NONE, 5267852);
allocate([105,110,111,100,101,47,115,121,109,108,105,110,107,0] /* inode/symlink\00 */, "i8", ALLOC_NONE, 5267864);
allocate([82,69,71,95,66,65,68,82,80,84,0] /* REG_BADRPT\00 */, "i8", ALLOC_NONE, 5267880);
allocate([80,65,85,83,69,0] /* PAUSE\00 */, "i8", ALLOC_NONE, 5267892);
allocate([68,67,50,0] /* DC2\00 */, "i8", ALLOC_NONE, 5267900);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 5267904);
allocate([105,110,100,105,114,101,99,116,32,43,111,102,102,115,61,37,117,10,0] /* indirect +offs=%u\0A */, "i8", ALLOC_NONE, 5267908);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,112,117,116,32,77,73,77,69,32,116,121,112,101,32,115,116,114,105,110,103,115,32,40,45,45,109,105,109,101,45,116,121,112,101,32,97,110,100,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,45,109,105,109,101,45,101,110,99,111,100,105,110,103,41,10,0] /*                  out */, "i8", ALLOC_NONE, 5267928);
allocate([44,32,37,115,58,32,37,117,0] /* , %s: %u\00 */, "i8", ALLOC_NONE, 5268036);
allocate([78,97,109,101,32,111,102,32,67,114,101,97,116,105,110,103,32,65,112,112,108,105,99,97,116,105,111,110,0] /* Name of Creating App */, "i8", ALLOC_NONE, 5268048);
allocate([37,115,101,109,112,116,121,0] /* %sempty\00 */, "i8", ALLOC_NONE, 5268080);
allocate([111,117,116,32,111,102,32,109,101,109,111,114,121,0] /* out of memory\00 */, "i8", ALLOC_NONE, 5268088);
allocate([83,83,69,50,0] /* SSE2\00 */, "i8", ALLOC_NONE, 5268104);
allocate([68,67,49,0] /* DC1\00 */, "i8", ALLOC_NONE, 5268112);
allocate([101,114,114,111,114,32,115,101,101,107,105,110,103,32,96,37,115,39,0] /* error seeking `%s'\0 */, "i8", ALLOC_NONE, 5268116);
allocate([105,110,100,105,114,101,99,116,32,111,102,102,115,61,37,117,10,0] /* indirect offs=%u\0A\ */, "i8", ALLOC_NONE, 5268136);
allocate([32,32,45,37,99,44,32,45,45,109,105,109,101,0] /*   -%c, --mime\00 */, "i8", ALLOC_NONE, 5268156);
allocate([44,32,37,115,58,32,37,100,0] /* , %s: %d\00 */, "i8", ALLOC_NONE, 5268172);
allocate([84,104,117,109,98,110,97,105,108,0] /* Thumbnail\00 */, "i8", ALLOC_NONE, 5268184);
allocate([120,45,101,109,112,116,121,0] /* x-empty\00 */, "i8", ALLOC_NONE, 5268196);
allocate([82,69,71,95,69,83,80,65,67,69,0] /* REG_ESPACE\00 */, "i8", ALLOC_NONE, 5268204);
allocate([83,83,69,0] /* SSE\00 */, "i8", ALLOC_NONE, 5268216);
allocate([82,69,71,95,48,120,37,120,0] /* REG_0x%x\00 */, "i8", ALLOC_NONE, 5268220);
allocate([68,76,69,0] /* DLE\00 */, "i8", ALLOC_NONE, 5268232);
allocate([110,109,32,43,32,115,105,122,101,111,102,40,97,114,41,32,60,32,115,105,122,101,111,102,40,115,116,114,117,99,116,32,109,97,103,105,99,41,0] /* nm + sizeof(ar) _ si */, "i8", ALLOC_NONE, 5268236);
allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,58,32,105,110,118,97,108,105,100,32,114,101,108,97,116,105,111,110,32,96,37,99,39,0] /* cannot happen: inval */, "i8", ALLOC_NONE, 5268276);
allocate([32,83,84,82,73,78,71,32,32,32,32,32,117,115,101,32,115,116,114,105,110,103,32,97,115,32,115,101,112,97,114,97,116,111,114,32,105,110,115,116,101,97,100,32,111,102,32,96,58,39,10,0] /*  STRING     use stri */, "i8", ALLOC_NONE, 5268316);
allocate([67,97,110,39,116,32,114,101,97,100,32,83,65,84,0] /* Can't read SAT\00 */, "i8", ALLOC_NONE, 5268368);
allocate([44,32,37,115,58,32,37,104,100,0] /* , %s: %hd\00 */, "i8", ALLOC_NONE, 5268384);
allocate([78,117,109,98,101,114,32,111,102,32,67,104,97,114,97,99,116,101,114,115,0] /* Number of Characters */, "i8", ALLOC_NONE, 5268396);
allocate([32,40,37,115,41,0] /*  (%s)\00 */, "i8", ALLOC_NONE, 5268420);
allocate([105,110,118,97,108,105,100,32,109,111,100,101,32,48,37,111,0] /* invalid mode 0%o\00 */, "i8", ALLOC_NONE, 5268428);
allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,114,97,110,103,101,0] /* invalid character ra */, "i8", ALLOC_NONE, 5268448);
allocate([70,88,83,82,0] /* FXSR\00 */, "i8", ALLOC_NONE, 5268472);
allocate([83,73,0] /* SI\00 */, "i8", ALLOC_NONE, 5268480);
allocate([97,112,112,114,101,110,116,105,99,101,46,99,0] /* apprentice.c\00 */, "i8", ALLOC_NONE, 5268484);
allocate([40,40,37,108,108,120,32,38,32,37,108,108,120,41,32,33,61,32,37,108,108,120,41,32,61,32,37,100,10,0] /* ((%llx & %llx) != %l */, "i8", ALLOC_NONE, 5268500);
allocate([115,115,32,61,61,32,108,101,110,0] /* ss == len\00 */, "i8", ALLOC_NONE, 5268532);
allocate([32,32,45,37,99,44,32,45,45,115,101,112,97,114,97,116,111,114,0] /*   -%c, --separator\0 */, "i8", ALLOC_NONE, 5268544);
allocate([99,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,37,122,117,32,98,121,116,101,115,0] /* cannot allocate %zu  */, "i8", ALLOC_NONE, 5268564);
allocate([44,32,79,115,32,37,100,44,32,86,101,114,115,105,111,110,58,32,37,100,46,37,100,0] /* , Os %d, Version: %d */, "i8", ALLOC_NONE, 5268592);
allocate([78,117,109,98,101,114,32,111,102,32,87,111,114,100,115,0] /* Number of Words\00 */, "i8", ALLOC_NONE, 5268616);
allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0] /* invalid literal/leng */, "i8", ALLOC_NONE, 5268632);
allocate([108,105,110,101,32,37,122,117,58,32,0] /* line %zu: \00 */, "i8", ALLOC_NONE, 5268660);
allocate([37,115,115,111,99,107,101,116,0] /* %ssocket\00 */, "i8", ALLOC_NONE, 5268672);
allocate([82,69,71,95,69,82,65,78,71,69,0] /* REG_ERANGE\00 */, "i8", ALLOC_NONE, 5268684);
allocate([65,77,68,95,51,68,78,111,119,120,0] /* AMD_3DNowx\00 */, "i8", ALLOC_NONE, 5268696);
allocate([37,115,115,101,116,117,105,100,0] /* %ssetuid\00 */, "i8", ALLOC_NONE, 5268708);
allocate([83,79,0] /* SO\00 */, "i8", ALLOC_NONE, 5268720);
allocate([101,114,114,111,114,32,119,114,105,116,105,110,103,32,96,37,115,39,0] /* error writing `%s'\0 */, "i8", ALLOC_NONE, 5268724);
allocate([40,40,37,108,108,120,32,38,32,37,108,108,120,41,32,61,61,32,37,108,108,120,41,32,61,32,37,100,10,0] /* ((%llx & %llx) == %l */, "i8", ALLOC_NONE, 5268744);
allocate([32,70,73,76,69,32,32,32,32,32,32,114,101,97,100,32,116,104,101,32,102,105,108,101,110,97,109,101,115,32,116,111,32,98,101,32,101,120,97,109,105,110,101,100,32,102,114,111,109,32,70,73,76,69,10,0] /*  FILE      read the  */, "i8", ALLOC_NONE, 5268776);
allocate([117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0] /* unknown compression  */, "i8", ALLOC_NONE, 5268832);
allocate([40,37,115,44,0] /* (%s,\00 */, "i8", ALLOC_NONE, 5268860);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5268868);
allocate([44,32,79,115,58,32,77,97,99,79,83,44,32,86,101,114,115,105,111,110,32,37,100,46,37,100,0] /* , Os: MacOS, Version */, "i8", ALLOC_NONE, 5268872);
allocate([78,117,109,98,101,114,32,111,102,32,80,97,103,101,115,0] /* Number of Pages\00 */, "i8", ALLOC_NONE, 5268900);
allocate(1, "i8", ALLOC_NONE, 5268916);
allocate([115,111,99,107,101,116,0] /* socket\00 */, "i8", ALLOC_NONE, 5268920);
allocate([105,110,118,97,108,105,100,32,114,101,112,101,116,105,116,105,111,110,32,99,111,117,110,116,40,115,41,0] /* invalid repetition c */, "i8", ALLOC_NONE, 5268928);
allocate([65,77,68,95,51,68,78,111,119,0] /* AMD_3DNow\00 */, "i8", ALLOC_NONE, 5268956);
allocate([99,97,114,114,105,97,103,101,45,114,101,116,117,114,110,0] /* carriage-return\00 */, "i8", ALLOC_NONE, 5268968);
allocate([99,97,110,110,111,116,32,111,112,101,110,32,96,37,115,39,0] /* cannot open `%s'\00 */, "i8", ALLOC_NONE, 5268984);
allocate([37,108,108,100,32,60,32,37,108,108,100,32,61,32,37,100,10,0] /* %lld _ %lld = %d\0A\ */, "i8", ALLOC_NONE, 5269004);
allocate([67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,110,111,116,101,0] /* Cannot allocate memo */, "i8", ALLOC_NONE, 5269024);
allocate([32,32,45,37,99,44,32,45,45,102,105,108,101,115,45,102,114,111,109,0] /*   -%c, --files-from\ */, "i8", ALLOC_NONE, 5269056);
allocate([117,115,116,97,114,32,32,0] /* ustar  \00 */, "i8", ALLOC_NONE, 5269076);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 5269084);
allocate([73,110,118,97,108,105,100,32,97,99,116,105,111,110,32,37,100,0] /* Invalid action %d\00 */, "i8", ALLOC_NONE, 5269088);
allocate([44,32,79,115,58,32,87,105,110,100,111,119,115,44,32,86,101,114,115,105,111,110,32,37,100,46,37,100,0] /* , Os: Windows, Versi */, "i8", ALLOC_NONE, 5269108);
allocate([117,115,45,97,115,99,105,105,0] /* us-ascii\00 */, "i8", ALLOC_NONE, 5269140);
allocate([76,97,115,116,32,83,97,118,101,100,32,84,105,109,101,47,68,97,116,101,0] /* Last Saved Time/Date */, "i8", ALLOC_NONE, 5269152);
allocate([78,85,76,0] /* NUL\00 */, "i8", ALLOC_NONE, 5269176);
allocate([114,101,103,101,120,32,101,114,114,111,114,32,37,100,44,32,40,37,115,41,0] /* regex error %d, (%s) */, "i8", ALLOC_NONE, 5269180);
allocate([37,115,115,121,109,98,111,108,105,99,32,108,105,110,107,32,116,111,32,96,37,115,39,0] /* %ssymbolic link to ` */, "i8", ALLOC_NONE, 5269204);
allocate([37,105,0] /* %i\00 */, "i8", ALLOC_NONE, 5269228);
allocate([82,69,71,95,66,65,68,66,82,0] /* REG_BADBR\00 */, "i8", ALLOC_NONE, 5269232);
allocate([116,101,120,116,47,112,108,97,105,110,0] /* text/plain\00 */, "i8", ALLOC_NONE, 5269244);
allocate([65,77,68,95,77,77,88,0] /* AMD_MMX\00 */, "i8", ALLOC_NONE, 5269256);
allocate([45,100,113,111,45,0] /* -dqo-\00 */, "i8", ALLOC_NONE, 5269264);
allocate([67,82,0] /* CR\00 */, "i8", ALLOC_NONE, 5269272);
allocate([46,109,105,109,101,0] /* .mime\00 */, "i8", ALLOC_NONE, 5269276);
allocate([111,112,116,105,111,110,115,32,33,61,32,78,85,76,76,0] /* options != NULL\00 */, "i8", ALLOC_NONE, 5269284);
allocate([77,97,103,105,99,32,100,97,116,97,98,97,115,101,32,105,115,32,110,111,116,32,111,112,101,110,0] /* Magic database is no */, "i8", ALLOC_NONE, 5269300);
allocate([37,108,108,117,32,60,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu _ %llu = %d\0A\ */, "i8", ALLOC_NONE, 5269328);
allocate([32,84,69,83,84,32,32,32,32,32,32,32,32,32,101,120,99,108,117,100,101,32,84,69,83,84,32,102,114,111,109,32,116,104,101,32,108,105,115,116,32,111,102,32,116,101,115,116,32,116,111,32,98,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,101,114,102,111,114,109,101,100,32,102,111,114,32,102,105,108,101,46,32,86,97,108,105,100,32,116,101,115,116,115,32,97,114,101,58,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,111,10,0] /*  TEST         exclud */, "i8", ALLOC_NONE, 5269348);
allocate([66,105,103,0] /* Big\00 */, "i8", ALLOC_NONE, 5269508);
allocate([67,114,101,97,116,101,32,84,105,109,101,47,68,97,116,101,0] /* Create Time/Date\00 */, "i8", ALLOC_NONE, 5269512);
allocate([110,111,32,109,97,103,105,99,32,102,105,108,101,115,32,108,111,97,100,101,100,0] /* no magic files loade */, "i8", ALLOC_NONE, 5269532);
allocate([37,115,112,97,116,104,32,116,111,111,32,108,111,110,103,58,32,96,37,115,39,0] /* %spath too long: `%s */, "i8", ALLOC_NONE, 5269556);
allocate([42,73,110,118,97,108,105,100,32,116,105,109,101,42,0] /* _Invalid time_\00 */, "i8", ALLOC_NONE, 5269580);
allocate([98,114,97,99,101,115,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* braces not balanced\ */, "i8", ALLOC_NONE, 5269596);
allocate([77,77,88,0] /* MMX\00 */, "i8", ALLOC_NONE, 5269616);
allocate([108,114,122,105,112,0] /* lrzip\00 */, "i8", ALLOC_NONE, 5269620);
allocate([102,111,114,109,45,102,101,101,100,0] /* form-feed\00 */, "i8", ALLOC_NONE, 5269628);
allocate([37,46,42,115,37,115,0] /* %._s%s\00 */, "i8", ALLOC_NONE, 5269640);
allocate([37,108,108,100,32,62,32,37,108,108,100,32,61,32,37,100,10,0] /* %lld _ %lld = %d\0A\ */, "i8", ALLOC_NONE, 5269648);
allocate([44,32,117,110,107,110,111,119,110,32,99,108,97,115,115,32,37,100,0] /* , unknown class %d\0 */, "i8", ALLOC_NONE, 5269668);
allocate([32,32,45,37,99,44,32,45,45,101,120,99,108,117,100,101,0] /*   -%c, --exclude\00 */, "i8", ALLOC_NONE, 5269688);
allocate([98,99,67,100,101,58,102,58,70,58,104,105,107,108,76,109,58,110,78,112,114,115,118,122,48,0] /* bcCde:f:F:hiklLm:nNp */, "i8", ALLOC_NONE, 5269708);
allocate([76,105,116,116,108,101,0] /* Little\00 */, "i8", ALLOC_NONE, 5269736);
allocate([76,97,115,116,32,80,114,105,110,116,101,100,0] /* Last Printed\00 */, "i8", ALLOC_NONE, 5269744);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5269760);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5269764);
allocate([120,45,112,97,116,104,45,116,111,111,45,108,111,110,103,0] /* x-path-too-long\00 */, "i8", ALLOC_NONE, 5269768);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5269784);
allocate([82,69,71,95,69,66,82,65,67,69,0] /* REG_EBRACE\00 */, "i8", ALLOC_NONE, 5269788);
allocate([67,77,79,86,0] /* CMOV\00 */, "i8", ALLOC_NONE, 5269800);
allocate([120,122,0] /* xz\00 */, "i8", ALLOC_NONE, 5269808);
allocate([70,70,0] /* FF\00 */, "i8", ALLOC_NONE, 5269812);
allocate([37,46,42,115,46,109,105,109,101,37,115,0] /* %._s.mime%s\00 */, "i8", ALLOC_NONE, 5269816);
allocate([37,108,108,117,32,62,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu _ %llu = %d\0A\ */, "i8", ALLOC_NONE, 5269828);
allocate([32,32,32,32,112,114,105,110,116,32,116,104,101,32,112,97,114,115,101,100,32,102,111,114,109,32,111,102,32,116,104,101,32,109,97,103,105,99,32,102,105,108,101,44,32,117,115,101,32,105,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,106,117,110,99,116,105,111,110,32,119,105,116,104,32,45,109,32,116,111,32,100,101,98,117,103,32,97,32,110,101,119,32,109,97,103,105,99,32,102,105,108,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,101,102,111,114,101,32,105,110,115,116,97,108,108,105,110,103,32,105,116,10,0] /*     print the parsed */, "i8", ALLOC_NONE, 5269848);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 5270032);
allocate([44,32,37,115,32,69,110,100,105,97,110,0] /* , %s Endian\00 */, "i8", ALLOC_NONE, 5270036);
allocate([84,111,116,97,108,32,69,100,105,116,105,110,103,32,84,105,109,101,0] /* Total Editing Time\0 */, "i8", ALLOC_NONE, 5270048);
allocate([59,32,99,104,97,114,115,101,116,61,0] /* ; charset=\00 */, "i8", ALLOC_NONE, 5270068);
allocate([112,97,116,104,32,116,111,111,32,108,111,110,103,58,32,96,37,115,39,0] /* path too long: `%s'\ */, "i8", ALLOC_NONE, 5270080);
allocate([105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0] /* incorrect length che */, "i8", ALLOC_NONE, 5270100);
allocate([87,97,114,110,105,110,103,58,32,0] /* Warning: \00 */, "i8", ALLOC_NONE, 5270124);
allocate([112,97,114,101,110,116,104,101,115,101,115,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* parentheses not bala */, "i8", ALLOC_NONE, 5270136);
allocate([65,77,68,95,83,89,83,67,0] /* AMD_SYSC\00 */, "i8", ALLOC_NONE, 5270164);
allocate([108,122,105,112,0] /* lzip\00 */, "i8", ALLOC_NONE, 5270176);
allocate([118,101,114,116,105,99,97,108,45,116,97,98,0] /* vertical-tab\00 */, "i8", ALLOC_NONE, 5270184);
allocate([44,32,119,105,116,104,32,111,118,101,114,115,116,114,105,107,105,110,103,0] /* , with overstriking\ */, "i8", ALLOC_NONE, 5270200);
allocate([73,110,99,111,110,115,105,115,116,101,110,116,32,101,110,116,114,105,101,115,32,105,110,32,96,37,115,39,32,37,117,32,33,61,32,37,117,0] /* Inconsistent entries */, "i8", ALLOC_NONE, 5270220);
allocate([37,108,108,117,32,61,61,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu == %llu = %d\0A */, "i8", ALLOC_NONE, 5270260);
allocate([32,32,45,37,99,44,32,45,45,99,104,101,99,107,105,110,103,45,112,114,105,110,116,111,117,116,0] /*   -%c, --checking-pr */, "i8", ALLOC_NONE, 5270280);
allocate([97,112,112,108,105,99,97,116,105,111,110,47,67,68,70,86,50,45,99,111,114,114,117,112,116,0] /* application/CDFV2-co */, "i8", ALLOC_NONE, 5270308);
allocate([82,101,118,105,115,105,111,110,32,78,117,109,98,101,114,0] /* Revision Number\00 */, "i8", ALLOC_NONE, 5270336);
allocate([100,97,116,97,0] /* data\00 */, "i8", ALLOC_NONE, 5270352);
allocate([37,115,117,110,114,101,97,100,97,98,108,101,32,115,121,109,108,105,110,107,32,96,37,115,39,32,40,37,115,41,0] /* %sunreadable symlink */, "i8", ALLOC_NONE, 5270360);
allocate([105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0] /* incorrect data check */, "i8", ALLOC_NONE, 5270392);
allocate([37,115,44,32,37,108,117,58,32,0] /* %s, %lu: \00 */, "i8", ALLOC_NONE, 5270416);
allocate([82,69,71,95,69,80,65,82,69,78,0] /* REG_EPAREN\00 */, "i8", ALLOC_NONE, 5270428);
allocate([83,69,80,0] /* SEP\00 */, "i8", ALLOC_NONE, 5270440);
allocate([45,99,100,0] /* -cd\00 */, "i8", ALLOC_NONE, 5270444);
allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NONE, 5270448);
allocate([86,84,0] /* VT\00 */, "i8", ALLOC_NONE, 5270456);
allocate([44,32,119,105,116,104,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,115,0] /* , with escape sequen */, "i8", ALLOC_NONE, 5270460);
allocate([83,105,122,101,32,111,102,32,96,37,115,39,32,37,108,108,117,32,105,115,32,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,37,122,117,0] /* Size of `%s' %llu is */, "i8", ALLOC_NONE, 5270484);
allocate([37,108,108,117,32,33,61,32,37,108,108,117,32,61,32,37,100,10,0] /* %llu != %llu = %d\0A */, "i8", ALLOC_NONE, 5270528);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,32,110,111,116,32,112,114,101,112,101,110,100,32,102,105,108,101,110,97,109,101,115,32,116,111,32,111,117,116,112,117,116,32,108,105,110,101,115,10,0] /*                 do n */, "i8", ALLOC_NONE, 5270548);
allocate([32,99,111,109,112,114,101,115,115,101,100,45,101,110,99,111,100,105,110,103,61,0] /*  compressed-encoding */, "i8", ALLOC_NONE, 5270608);
allocate([44,32,37,115,37,115,0] /* , %s%s\00 */, "i8", ALLOC_NONE, 5270632);
allocate([76,97,115,116,32,83,97,118,101,100,32,66,121,0] /* Last Saved By\00 */, "i8", ALLOC_NONE, 5270640);
allocate([97,115,99,109,97,103,105,99,47,101,110,99,32,37,100,10,0] /* ascmagic/enc %d\0A\0 */, "i8", ALLOC_NONE, 5270656);
allocate([115,121,109,108,105,110,107,0] /* symlink\00 */, "i8", ALLOC_NONE, 5270676);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0] /* invalid distance too */, "i8", ALLOC_NONE, 5270684);
allocate([44,34,37,115,34,93,10,0] /* ,\22%s\22]\0A\00 */, "i8", ALLOC_NONE, 5270716);
allocate([98,114,97,99,107,101,116,115,32,40,91,32,93,41,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* brackets ([ ]) not b */, "i8", ALLOC_NONE, 5270724);
allocate([67,88,56,0] /* CX8\00 */, "i8", ALLOC_NONE, 5270752);
allocate([98,122,105,112,50,0] /* bzip2\00 */, "i8", ALLOC_NONE, 5270756);
allocate([73,110,116,101,114,110,97,116,105,111,110,97,108,32,69,66,67,68,73,67,0] /* International EBCDIC */, "i8", ALLOC_NONE, 5270764);
allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_NONE, 5270788);
allocate([32,108,105,110,101,32,116,101,114,109,105,110,97,116,111,114,115,0] /*  line terminators\00 */, "i8", ALLOC_NONE, 5270796);
allocate([53,46,49,50,0] /* 5.12\00 */, "i8", ALLOC_NONE, 5270816);
allocate([37,108,108,117,32,61,61,32,42,97,110,121,42,32,61,32,49,10,0] /* %llu == _any_ = 1\0A */, "i8", ALLOC_NONE, 5270824);
allocate([32,32,45,37,99,44,32,45,45,98,114,105,101,102,0] /*   -%c, --brief\00 */, "i8", ALLOC_NONE, 5270844);
allocate([67,111,109,112,111,115,105,116,101,32,68,111,99,117,109,101,110,116,32,70,105,108,101,32,86,50,32,68,111,99,117,109,101,110,116,0] /* Composite Document F */, "i8", ALLOC_NONE, 5270860);
allocate([84,101,109,112,108,97,116,101,0] /* Template\00 */, "i8", ALLOC_NONE, 5270896);
allocate([97,115,99,109,97,103,105,99,32,37,100,10,0] /* ascmagic %d\0A\00 */, "i8", ALLOC_NONE, 5270908);
allocate([117,110,114,101,97,100,97,98,108,101,32,115,121,109,108,105,110,107,32,96,37,115,39,0] /* unreadable symlink ` */, "i8", ALLOC_NONE, 5270924);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0] /* invalid distance cod */, "i8", ALLOC_NONE, 5270948);
allocate([39,37,115,39,0] /* '%s'\00 */, "i8", ALLOC_NONE, 5270972);
allocate([82,69,71,95,69,66,82,65,67,75,0] /* REG_EBRACK\00 */, "i8", ALLOC_NONE, 5270980);
allocate([84,83,67,0] /* TSC\00 */, "i8", ALLOC_NONE, 5270992);
allocate([45,99,0] /* -c\00 */, "i8", ALLOC_NONE, 5270996);
allocate([101,98,99,100,105,99,0] /* ebcdic\00 */, "i8", ALLOC_NONE, 5271000);
allocate([76,70,0] /* LF\00 */, "i8", ALLOC_NONE, 5271008);
allocate([32,78,69,76,0] /*  NEL\00 */, "i8", ALLOC_NONE, 5271012);
allocate([70,105,108,101,32,37,115,32,115,117,112,112,111,114,116,115,32,111,110,108,121,32,118,101,114,115,105,111,110,32,37,100,32,109,97,103,105,99,32,102,105,108,101,115,46,32,96,37,115,39,32,105,115,32,118,101,114,115,105,111,110,32,37,100,0] /* File %s supports onl */, "i8", ALLOC_NONE, 5271020);
allocate([105,110,118,97,108,105,100,32,116,121,112,101,32,37,100,32,105,110,32,109,97,103,105,99,99,104,101,99,107,40,41,0] /* invalid type %d in m */, "i8", ALLOC_NONE, 5271088);
allocate([32,32,32,32,32,32,32,32,32,32,32,116,114,121,32,116,111,32,108,111,111,107,32,105,110,115,105,100,101,32,99,111,109,112,114,101,115,115,101,100,32,102,105,108,101,115,10,0] /*            try to lo */, "i8", ALLOC_NONE, 5271120);
allocate([99,111,114,114,117,112,116,58,32,0] /* corrupt: \00 */, "i8", ALLOC_NONE, 5271168);
allocate([97,112,112,108,105,99,97,116,105,111,110,47,37,115,0] /* application/%s\00 */, "i8", ALLOC_NONE, 5271180);
allocate([67,111,109,109,101,110,116,115,0] /* Comments\00 */, "i8", ALLOC_NONE, 5271196);
allocate([116,101,120,116,0] /* text\00 */, "i8", ALLOC_NONE, 5271208);
allocate([101,108,102,32,37,100,10,0] /* elf %d\0A\00 */, "i8", ALLOC_NONE, 5271216);
allocate([37,115,102,105,102,111,32,40,110,97,109,101,100,32,112,105,112,101,41,0] /* %sfifo (named pipe)\ */, "i8", ALLOC_NONE, 5271224);
allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0] /* invalid literal/leng */, "i8", ALLOC_NONE, 5271244);
allocate([37,71,0] /* %G\00 */, "i8", ALLOC_NONE, 5271272);
allocate([98,97,100,32,109,97,103,105,99,32,105,110,32,96,37,115,39,0] /* bad magic in `%s'\00 */, "i8", ALLOC_NONE, 5271276);
allocate([105,110,118,97,108,105,100,32,98,97,99,107,114,101,102,101,114,101,110,99,101,32,110,117,109,98,101,114,0] /* invalid backreferenc */, "i8", ALLOC_NONE, 5271296);
allocate([70,80,85,0] /* FPU\00 */, "i8", ALLOC_NONE, 5271328);
allocate([117,110,99,111,109,112,114,101,115,115,0] /* uncompress\00 */, "i8", ALLOC_NONE, 5271332);
allocate([69,66,67,68,73,67,0] /* EBCDIC\00 */, "i8", ALLOC_NONE, 5271344);
allocate([116,97,98,0] /* tab\00 */, "i8", ALLOC_NONE, 5271352);
allocate([32,76,70,0] /*  LF\00 */, "i8", ALLOC_NONE, 5271356);
allocate([117,110,107,110,111,119,110,0] /* unknown\00 */, "i8", ALLOC_NONE, 5271360);
allocate([114,101,103,101,120,101,99,32,101,114,114,111,114,32,37,100,44,32,40,37,115,41,0] /* regexec error %d, (% */, "i8", ALLOC_NONE, 5271368);
allocate([99,100,102,46,99,0] /* cdf.c\00 */, "i8", ALLOC_NONE, 5271392);
allocate([32,32,45,37,99,44,32,45,45,117,110,99,111,109,112,114,101,115,115,0] /*   -%c, --uncompress\ */, "i8", ALLOC_NONE, 5271400);
allocate([91,58,60,58,93,93,0] /* [:_:]]\00 */, "i8", ALLOC_NONE, 5271420);
allocate([118,97,115,112,114,105,110,116,102,32,102,97,105,108,101,100,0] /* vasprintf failed\00 */, "i8", ALLOC_NONE, 5271428);
allocate([118,110,100,46,109,115,45,112,111,119,101,114,112,111,105,110,116,0] /* vnd.ms-powerpoint\00 */, "i8", ALLOC_NONE, 5271448);
allocate([75,101,121,119,111,114,100,115,0] /* Keywords\00 */, "i8", ALLOC_NONE, 5271468);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0] /* invalid distance cod */, "i8", ALLOC_NONE, 5271480);
allocate([115,111,102,116,109,97,103,105,99,32,37,100,10,0] /* softmagic %d\0A\00 */, "i8", ALLOC_NONE, 5271504);
allocate([102,105,102,111,0] /* fifo\00 */, "i8", ALLOC_NONE, 5271520);
allocate([105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0] /* invalid distances se */, "i8", ALLOC_NONE, 5271528);
allocate([37,115,44,0] /* %s,\00 */, "i8", ALLOC_NONE, 5271552);
allocate([102,105,108,101,32,96,37,115,39,32,105,115,32,116,111,111,32,115,109,97,108,108,0] /* file `%s' is too sma */, "i8", ALLOC_NONE, 5271556);
allocate([82,69,71,95,69,83,85,66,82,69,71,0] /* REG_ESUBREG\00 */, "i8", ALLOC_NONE, 5271580);
allocate([44,32,119,105,116,104,32,117,110,107,110,111,119,110,32,115,111,102,116,119,97,114,101,32,99,97,112,97,98,105,108,105,116,121,32,48,120,37,108,108,120,0] /* , with unknown softw */, "i8", ALLOC_NONE, 5271592);
allocate([99,97,110,110,111,116,32,111,112,101,110,32,96,37,115,39,32,40,37,115,41,0] /* cannot open `%s' (%s */, "i8", ALLOC_NONE, 5271636);
allocate([45,99,100,113,0] /* -cdq\00 */, "i8", ALLOC_NONE, 5271660);
allocate([117,110,107,110,111,119,110,45,56,98,105,116,0] /* unknown-8bit\00 */, "i8", ALLOC_NONE, 5271668);
allocate([72,84,0] /* HT\00 */, "i8", ALLOC_NONE, 5271684);
allocate([32,67,82,0] /*  CR\00 */, "i8", ALLOC_NONE, 5271688);
allocate([37,115,58,37,115,0] /* %s:%s\00 */, "i8", ALLOC_NONE, 5271692);
allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,32,119,105,116,104,32,100,111,117,98,108,101,58,32,105,110,118,97,108,105,100,32,114,101,108,97,116,105,111,110,32,96,37,99,39,0] /* cannot happen with d */, "i8", ALLOC_NONE, 5271700);
allocate([32,76,73,83,84,32,32,32,32,32,32,117,115,101,32,76,73,83,84,32,97,115,32,97,32,99,111,108,111,110,45,115,101,112,97,114,97,116,101,100,32,108,105,115,116,32,111,102,32,109,97,103,105,99,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,117,109,98,101,114,32,102,105,108,101,115,10,0] /*  LIST      use LIST  */, "i8", ALLOC_NONE, 5271752);
allocate([105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0] /* incorrect header che */, "i8", ALLOC_NONE, 5271852);
allocate([62,62,62,62,62,62,62,62,0] /* ________\00 */, "i8", ALLOC_NONE, 5271876);
allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_NONE, 5271888);
allocate([48,0] /* 0\00 */, "i8", ALLOC_NONE, 5271896);
allocate([80,111,119,101,114,80,111,105,110,116,0] /* PowerPoint\00 */, "i8", ALLOC_NONE, 5271900);
allocate([65,117,116,104,111,114,0] /* Author\00 */, "i8", ALLOC_NONE, 5271912);
allocate([99,100,102,32,37,100,10,0] /* cdf %d\0A\00 */, "i8", ALLOC_NONE, 5271920);
allocate([37,115,98,108,111,99,107,32,115,112,101,99,105,97,108,0] /* %sblock special\00 */, "i8", ALLOC_NONE, 5271928);
allocate([105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0] /* invalid literal/leng */, "i8", ALLOC_NONE, 5271944);
allocate([37,108,108,100,0] /* %lld\00 */, "i8", ALLOC_NONE, 5271972);
allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NONE, 5271980);
allocate([116,114,97,105,108,105,110,103,32,98,97,99,107,115,108,97,115,104,32,40,92,41,0] /* trailing backslash ( */, "i8", ALLOC_NONE, 5271988);
allocate([99,97,110,110,111,116,32,115,116,97,116,32,96,37,115,39,0] /* cannot stat `%s'\00 */, "i8", ALLOC_NONE, 5272012);
allocate([44,32,110,111,116,32,107,110,111,119,110,32,116,111,32,117,115,101,32,102,114,97,109,101,32,112,111,105,110,116,101,114,0] /* , not known to use f */, "i8", ALLOC_NONE, 5272032);
allocate([103,122,105,112,0] /* gzip\00 */, "i8", ALLOC_NONE, 5272068);
allocate([78,111,110,45,73,83,79,32,101,120,116,101,110,100,101,100,45,65,83,67,73,73,0] /* Non-ISO extended-ASC */, "i8", ALLOC_NONE, 5272076);
allocate([98,97,99,107,115,112,97,99,101,0] /* backspace\00 */, "i8", ALLOC_NONE, 5272100);
allocate([44,0] /* ,\00 */, "i8", ALLOC_NONE, 5272112);
allocate([37,115,47,37,115,0] /* %s/%s\00 */, "i8", ALLOC_NONE, 5272116);
allocate([99,97,110,110,111,116,32,104,97,112,112,101,110,32,119,105,116,104,32,102,108,111,97,116,58,32,105,110,118,97,108,105,100,32,114,101,108,97,116,105,111,110,32,96,37,99,39,0] /* cannot happen with f */, "i8", ALLOC_NONE, 5272124);
allocate([44,32,99,111,114,114,117,112,116,101,100,32,115,101,99,116,105,111,110,32,104,101,97,100,101,114,32,115,105,122,101,0] /* , corrupted section  */, "i8", ALLOC_NONE, 5272172);
allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,97,98,99,100,101,102,0] /* 0123456789ABCDEFabcd */, "i8", ALLOC_NONE, 5272204);
allocate([32,32,45,37,99,44,32,45,45,109,97,103,105,99,45,102,105,108,101,0] /*   -%c, --magic-file\ */, "i8", ALLOC_NONE, 5272228);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5272248);
allocate([97,112,112,108,105,99,97,116,105,111,110,47,120,45,116,97,114,0] /* application/x-tar\00 */, "i8", ALLOC_NONE, 5272252);
allocate([120,100,105,103,105,116,0] /* xdigit\00 */, "i8", ALLOC_NONE, 5272272);
allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_NONE, 5272280);
allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_NONE, 5272308);
allocate([32,40,0] /*  (\00 */, "i8", ALLOC_NONE, 5272316);
allocate([9,10,11,12,13,32,0] /* \09\0A\0B\0C\0D \00 */, "i8", ALLOC_NONE, 5272320);
allocate([33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126,0] /* !\22#$%&'()_+,-./:;_ */, "i8", ALLOC_NONE, 5272328);
allocate([99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,97,110,121,32,109,97,103,105,99,32,102,105,108,101,115,33,0] /* could not find any m */, "i8", ALLOC_NONE, 5272364);
allocate([109,115,119,111,114,100,0] /* msword\00 */, "i8", ALLOC_NONE, 5272396);
allocate([65,83,67,73,73,0] /* ASCII\00 */, "i8", ALLOC_NONE, 5272404);
allocate([83,117,98,106,101,99,116,0] /* Subject\00 */, "i8", ALLOC_NONE, 5272412);
allocate([112,117,110,99,116,0] /* punct\00 */, "i8", ALLOC_NONE, 5272420);
allocate([91,58,62,58,93,93,0] /* [:_:]]\00 */, "i8", ALLOC_NONE, 5272428);
allocate([116,97,114,32,37,100,10,0] /* tar %d\0A\00 */, "i8", ALLOC_NONE, 5272436);
allocate([98,108,111,99,107,100,101,118,105,99,101,0] /* blockdevice\00 */, "i8", ALLOC_NONE, 5272444);
allocate([105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0] /* invalid code -- miss */, "i8", ALLOC_NONE, 5272456);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 5272496);
allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126,32,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_NONE, 5272500);
allocate([100,105,111,117,120,88,102,101,103,69,71,99,115,112,110,0] /* diouxXfegEGcspn\00 */, "i8", ALLOC_NONE, 5272596);
allocate([82,69,71,95,69,69,83,67,65,80,69,0] /* REG_EESCAPE\00 */, "i8", ALLOC_NONE, 5272612);
allocate([66,97,100,32,114,101,108,97,116,105,111,110,32,37,99,10,0] /* Bad relation %c\0A\0 */, "i8", ALLOC_NONE, 5272624);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 5272644);
allocate([44,32,117,115,101,115,32,102,114,97,109,101,32,112,111,105,110,116,101,114,0] /* , uses frame pointer */, "i8", ALLOC_NONE, 5272648);
allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_NONE, 5272672);
allocate([122,108,105,98,58,32,37,115,0] /* zlib: %s\00 */, "i8", ALLOC_NONE, 5272680);
allocate([105,115,111,45,56,56,53,57,45,49,0] /* iso-8859-1\00 */, "i8", ALLOC_NONE, 5272692);
allocate([66,83,0] /* BS\00 */, "i8", ALLOC_NONE, 5272704);
allocate([32,67,82,76,70,0] /*  CRLF\00 */, "i8", ALLOC_NONE, 5272708);
allocate([37,115,47,46,109,97,103,105,99,0] /* %s/.magic\00 */, "i8", ALLOC_NONE, 5272716);
allocate([110,97,114,103,118,32,33,61,32,78,85,76,76,0] /* nargv != NULL\00 */, "i8", ALLOC_NONE, 5272728);
allocate([47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,109,105,115,99,47,109,97,103,105,99,0] /* /usr/local/share/mis */, "i8", ALLOC_NONE, 5272744);
allocate([97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* abcdefghijklmnopqrst */, "i8", ALLOC_NONE, 5272772);
allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_NONE, 5272800);
allocate([103,101,116,111,112,116,95,108,111,110,103,46,99,0] /* getopt_long.c\00 */, "i8", ALLOC_NONE, 5272808);
allocate([32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,112,117,116,32,118,101,114,115,105,111,110,32,105,110,102,111,114,109,97,116,105,111,110,32,97,110,100,32,101,120,105,116,10,0] /*               output */, "i8", ALLOC_NONE, 5272824);
allocate([37,46,56,115,0] /* %.8s\00 */, "i8", ALLOC_NONE, 5272876);
allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_NONE, 5272884);
allocate([77,65,71,73,67,0] /* MAGIC\00 */, "i8", ALLOC_NONE, 5272980);
allocate([103,114,97,112,104,0] /* graph\00 */, "i8", ALLOC_NONE, 5272988);
allocate([100,101,98,117,103,0] /* debug\00 */, "i8", ALLOC_NONE, 5272996);
allocate([48,49,50,51,52,53,54,55,56,57,0] /* 0123456789\00 */, "i8", ALLOC_NONE, 5273004);
allocate([99,111,109,112,105,108,101,0] /* compile\00 */, "i8", ALLOC_NONE, 5273016);
allocate([100,105,103,105,116,0] /* digit\00 */, "i8", ALLOC_NONE, 5273024);
allocate([115,112,101,99,105,97,108,45,102,105,108,101,115,0] /* special-files\00 */, "i8", ALLOC_NONE, 5273032);
allocate([7,8,9,10,11,12,13,1,2,3,4,5,6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,0] /* \07\08\09\0A\0B\0C\0 */, "i8", ALLOC_NONE, 5273048);
allocate([114,97,119,0] /* raw\00 */, "i8", ALLOC_NONE, 5273084);
allocate([87,111,114,100,68,111,99,117,109,101,110,116,0] /* WordDocument\00 */, "i8", ALLOC_NONE, 5273088);
allocate([99,110,116,114,108,0] /* cntrl\00 */, "i8", ALLOC_NONE, 5273104);
allocate([84,105,116,108,101,0] /* Title\00 */, "i8", ALLOC_NONE, 5273112);
allocate([112,114,101,115,101,114,118,101,45,100,97,116,101,0] /* preserve-date\00 */, "i8", ALLOC_NONE, 5273120);
allocate([122,109,97,103,105,99,32,37,100,10,0] /* zmagic %d\0A\00 */, "i8", ALLOC_NONE, 5273136);
allocate([37,115,99,104,97,114,97,99,116,101,114,32,115,112,101,99,105,97,108,0] /* %scharacter special\ */, "i8", ALLOC_NONE, 5273148);
allocate([32,9,0] /*  \09\00 */, "i8", ALLOC_NONE, 5273168);
allocate([105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0] /* invalid bit length r */, "i8", ALLOC_NONE, 5273172);
allocate([44,37,99,0] /* ,%c\00 */, "i8", ALLOC_NONE, 5273200);
allocate([112,114,105,110,116,48,0] /* print0\00 */, "i8", ALLOC_NONE, 5273204);
allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,0] /* invalid character cl */, "i8", ALLOC_NONE, 5273212);
allocate([66,97,100,32,116,121,112,101,32,37,100,10,0] /* Bad type %d\0A\00 */, "i8", ALLOC_NONE, 5273236);
allocate([98,108,97,110,107,0] /* blank\00 */, "i8", ALLOC_NONE, 5273252);
allocate([32,104,97,114,100,119,97,114,101,32,99,97,112,97,98,105,108,105,116,121,32,48,120,37,108,108,120,0] /*  hardware capability */, "i8", ALLOC_NONE, 5273260);
allocate([110,111,45,112,97,100,0] /* no-pad\00 */, "i8", ALLOC_NONE, 5273288);
allocate([49,46,50,46,53,0] /* 1.2.5\00 */, "i8", ALLOC_NONE, 5273296);
allocate([73,83,79,45,56,56,53,57,0] /* ISO-8859\00 */, "i8", ALLOC_NONE, 5273304);
allocate([97,108,101,114,116,0] /* alert\00 */, "i8", ALLOC_NONE, 5273316);
allocate([32,110,111,0] /*  no\00 */, "i8", ALLOC_NONE, 5273324);
allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_NONE, 5273328);
allocate([37,115,47,46,109,97,103,105,99,46,109,103,99,0] /* %s/.magic.mgc\00 */, "i8", ALLOC_NONE, 5273384);
allocate([110,111,45,98,117,102,102,101,114,0] /* no-buffer\00 */, "i8", ALLOC_NONE, 5273400);
allocate([97,108,112,104,97,0] /* alpha\00 */, "i8", ALLOC_NONE, 5273412);
allocate([110,111,45,100,101,114,101,102,101,114,101,110,99,101,0] /* no-dereference\00 */, "i8", ALLOC_NONE, 5273420);
allocate([32,32,45,37,99,44,32,45,45,118,101,114,115,105,111,110,0] /*   -%c, --version\00 */, "i8", ALLOC_NONE, 5273436);
allocate([80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0] /* POSIXLY_CORRECT\00 */, "i8", ALLOC_NONE, 5273456);
allocate(1, "i8", ALLOC_NONE, 5273472);
allocate(468, "i8", ALLOC_NONE, 5273476);
allocate([112,114,105,110,116,95,105,116,0] /* print_it\00 */, "i8", ALLOC_NONE, 5273944);
allocate([112,101,114,109,117,116,101,95,97,114,103,115,0] /* permute_args\00 */, "i8", ALLOC_NONE, 5273956);
allocate([105,110,105,116,95,102,105,108,101,95,116,97,98,108,101,115,0] /* init_file_tables\00 */, "i8", ALLOC_NONE, 5273972);
allocate([103,101,116,111,112,116,95,108,111,110,103,0] /* getopt_long\00 */, "i8", ALLOC_NONE, 5273992);
allocate([103,101,116,111,112,116,95,105,110,116,101,114,110,97,108,0] /* getopt_internal\00 */, "i8", ALLOC_NONE, 5274004);
allocate([99,100,102,95,114,101,97,100,95,115,104,111,114,116,95,115,101,99,116,111,114,0] /* cdf_read_short_secto */, "i8", ALLOC_NONE, 5274020);
allocate([99,100,102,95,114,101,97,100,95,115,101,99,116,111,114,0] /* cdf_read_sector\00 */, "i8", ALLOC_NONE, 5274044);
allocate([97,112,112,114,101,110,116,105,99,101,95,99,111,109,112,105,108,101,0] /* apprentice_compile\0 */, "i8", ALLOC_NONE, 5274060);
HEAP32[((5242884)>>2)]=((5260616)|0);
HEAP32[((5242892)>>2)]=((5273112)|0);
HEAP32[((5242900)>>2)]=((5272412)|0);
HEAP32[((5242908)>>2)]=((5271912)|0);
HEAP32[((5242916)>>2)]=((5271468)|0);
HEAP32[((5242924)>>2)]=((5271196)|0);
HEAP32[((5242932)>>2)]=((5270896)|0);
HEAP32[((5242940)>>2)]=((5270640)|0);
HEAP32[((5242948)>>2)]=((5270336)|0);
HEAP32[((5242956)>>2)]=((5270048)|0);
HEAP32[((5242964)>>2)]=((5269744)|0);
HEAP32[((5242972)>>2)]=((5269512)|0);
HEAP32[((5242980)>>2)]=((5269152)|0);
HEAP32[((5242988)>>2)]=((5268900)|0);
HEAP32[((5242996)>>2)]=((5268616)|0);
HEAP32[((5243004)>>2)]=((5268396)|0);
HEAP32[((5243012)>>2)]=((5268184)|0);
HEAP32[((5243020)>>2)]=((5268048)|0);
HEAP32[((5243028)>>2)]=((5267852)|0);
HEAP32[((5243036)>>2)]=((5267700)|0);
HEAP32[((5244772)>>2)]=((5262484)|0);
HEAP32[((5244780)>>2)]=((5266964)|0);
HEAP32[((5244784)>>2)]=((5265888)|0);
HEAP32[((5244792)>>2)]=((5264748)|0);
HEAP32[((5244796)>>2)]=((5263580)|0);
HEAP32[((5244804)>>2)]=((5262492)|0);
HEAP32[((5244808)>>2)]=((5261636)|0);
HEAP32[((5244816)>>2)]=((5260752)|0);
HEAP32[((5244820)>>2)]=((5273212)|0);
HEAP32[((5244828)>>2)]=((5272612)|0);
HEAP32[((5244832)>>2)]=((5271988)|0);
HEAP32[((5244840)>>2)]=((5271580)|0);
HEAP32[((5244844)>>2)]=((5271296)|0);
HEAP32[((5244852)>>2)]=((5270980)|0);
HEAP32[((5244856)>>2)]=((5270724)|0);
HEAP32[((5244864)>>2)]=((5270428)|0);
HEAP32[((5244868)>>2)]=((5270136)|0);
HEAP32[((5244876)>>2)]=((5269788)|0);
HEAP32[((5244880)>>2)]=((5269596)|0);
HEAP32[((5244888)>>2)]=((5269232)|0);
HEAP32[((5244892)>>2)]=((5268928)|0);
HEAP32[((5244900)>>2)]=((5268684)|0);
HEAP32[((5244904)>>2)]=((5268448)|0);
HEAP32[((5244912)>>2)]=((5268204)|0);
HEAP32[((5244916)>>2)]=((5268088)|0);
HEAP32[((5244924)>>2)]=((5267880)|0);
HEAP32[((5244928)>>2)]=((5267744)|0);
HEAP32[((5244936)>>2)]=((5267544)|0);
HEAP32[((5244940)>>2)]=((5267408)|0);
HEAP32[((5244948)>>2)]=((5267280)|0);
HEAP32[((5244952)>>2)]=((5266988)|0);
HEAP32[((5244960)>>2)]=((5266848)|0);
HEAP32[((5244964)>>2)]=((5266676)|0);
HEAP32[((5244972)>>2)]=((5266584)|0);
HEAP32[((5244976)>>2)]=((5266484)|0);
HEAP32[((5246320)>>2)]=((5266112)|0);
HEAP32[((5246372)>>2)]=((5262384)|0);
HEAP32[((5246380)>>2)]=((5262308)|0);
HEAP32[((5246388)>>2)]=((5262276)|0);
HEAP32[((5246396)>>2)]=((5262228)|0);
HEAP32[((5246404)>>2)]=((5262156)|0);
HEAP32[((5246412)>>2)]=((5262092)|0);
HEAP32[((5246420)>>2)]=((5262008)|0);
HEAP32[((5246428)>>2)]=((5261956)|0);
HEAP32[((5246436)>>2)]=((5261776)|0);
HEAP32[((5246444)>>2)]=((5261624)|0);
HEAP32[((5246612)>>2)]=((5261508)|0);
HEAP32[((5246628)>>2)]=((5261396)|0);
HEAP32[((5246644)>>2)]=((5261300)|0);
HEAP32[((5246660)>>2)]=((5261220)|0);
HEAP32[((5246676)>>2)]=((5261156)|0);
HEAP32[((5246692)>>2)]=((5261116)|0);
HEAP32[((5246708)>>2)]=((5261004)|0);
HEAP32[((5246724)>>2)]=((5260968)|0);
HEAP32[((5246740)>>2)]=((5260856)|0);
HEAP32[((5246756)>>2)]=((5260744)|0);
HEAP32[((5246772)>>2)]=((5260628)|0);
HEAP32[((5246788)>>2)]=((5260536)|0);
HEAP32[((5246804)>>2)]=((5260496)|0);
HEAP32[((5246820)>>2)]=((5260480)|0);
HEAP32[((5246836)>>2)]=((5260464)|0);
HEAP32[((5246852)>>2)]=((5260388)|0);
HEAP32[((5246868)>>2)]=((5273420)|0);
HEAP32[((5246884)>>2)]=((5273400)|0);
HEAP32[((5246900)>>2)]=((5273288)|0);
HEAP32[((5246916)>>2)]=((5273204)|0);
HEAP32[((5246932)>>2)]=((5273120)|0);
HEAP32[((5246948)>>2)]=((5273084)|0);
HEAP32[((5246964)>>2)]=((5273032)|0);
HEAP32[((5246980)>>2)]=((5273016)|0);
HEAP32[((5246996)>>2)]=((5272996)|0);
HEAP32[((5247028)>>2)]=((5246212)|0);
HEAP32[((5247032)>>2)]=((5246148)|0);
HEAP32[((5247036)>>2)]=((5246080)|0);
HEAP32[((5247040)>>2)]=((5245304)|0);
HEAP32[((5247044)>>2)]=((5245952)|0);
HEAP32[((5247048)>>2)]=((5245820)|0);
HEAP32[((5247052)>>2)]=((5245756)|0);
HEAP32[((5247056)>>2)]=((5245696)|0);
HEAP32[((5247060)>>2)]=((5245632)|0);
HEAP32[((5247064)>>2)]=((5245500)|0);
HEAP32[((5247068)>>2)]=((5245436)|0);
HEAP32[((5247072)>>2)]=((5245372)|0);
HEAP32[((5247076)>>2)]=((5245240)|0);
HEAP32[((5247080)>>2)]=((5245180)|0);
HEAP32[((5247084)>>2)]=((5245116)|0);
HEAP32[((5247088)>>2)]=((5245052)|0);
HEAP32[((5247092)>>2)]=((5245564)|0);
HEAP32[((5247096)>>2)]=((5246016)|0);
HEAP32[((5247100)>>2)]=((5245884)|0);
HEAP32[((5258584)>>2)]=((5272068)|0);
HEAP32[((5258588)>>2)]=((5271660)|0);
HEAP32[((5258612)>>2)]=((5271332)|0);
HEAP32[((5258616)>>2)]=((5270996)|0);
HEAP32[((5258640)>>2)]=((5272068)|0);
HEAP32[((5258644)>>2)]=((5271660)|0);
HEAP32[((5258668)>>2)]=((5272068)|0);
HEAP32[((5258672)>>2)]=((5271660)|0);
HEAP32[((5258696)>>2)]=((5272068)|0);
HEAP32[((5258700)>>2)]=((5271660)|0);
HEAP32[((5258724)>>2)]=((5272068)|0);
HEAP32[((5258728)>>2)]=((5271660)|0);
HEAP32[((5258752)>>2)]=((5272068)|0);
HEAP32[((5258756)>>2)]=((5271660)|0);
HEAP32[((5258780)>>2)]=((5270756)|0);
HEAP32[((5258784)>>2)]=((5270444)|0);
HEAP32[((5258808)>>2)]=((5270176)|0);
HEAP32[((5258812)>>2)]=((5271660)|0);
HEAP32[((5258836)>>2)]=((5269808)|0);
HEAP32[((5258840)>>2)]=((5270444)|0);
HEAP32[((5258864)>>2)]=((5269620)|0);
HEAP32[((5258868)>>2)]=((5269264)|0);
HEAP32[((5258880)>>2)]=((5269176)|0);
HEAP32[((5258888)>>2)]=((5267260)|0);
HEAP32[((5258896)>>2)]=((5266060)|0);
HEAP32[((5258904)>>2)]=((5264924)|0);
HEAP32[((5258912)>>2)]=((5263760)|0);
HEAP32[((5258920)>>2)]=((5262660)|0);
HEAP32[((5258928)>>2)]=((5261832)|0);
HEAP32[((5258936)>>2)]=((5260896)|0);
HEAP32[((5258944)>>2)]=((5273316)|0);
HEAP32[((5258952)>>2)]=((5272704)|0);
HEAP32[((5258960)>>2)]=((5272100)|0);
HEAP32[((5258968)>>2)]=((5271684)|0);
HEAP32[((5258976)>>2)]=((5271352)|0);
HEAP32[((5258984)>>2)]=((5271008)|0);
HEAP32[((5258992)>>2)]=((5270788)|0);
HEAP32[((5259000)>>2)]=((5270456)|0);
HEAP32[((5259008)>>2)]=((5270184)|0);
HEAP32[((5259016)>>2)]=((5269812)|0);
HEAP32[((5259024)>>2)]=((5269628)|0);
HEAP32[((5259032)>>2)]=((5269272)|0);
HEAP32[((5259040)>>2)]=((5268968)|0);
HEAP32[((5259048)>>2)]=((5268720)|0);
HEAP32[((5259056)>>2)]=((5268480)|0);
HEAP32[((5259064)>>2)]=((5268232)|0);
HEAP32[((5259072)>>2)]=((5268112)|0);
HEAP32[((5259080)>>2)]=((5267900)|0);
HEAP32[((5259088)>>2)]=((5267788)|0);
HEAP32[((5259096)>>2)]=((5267560)|0);
HEAP32[((5259104)>>2)]=((5267440)|0);
HEAP32[((5259112)>>2)]=((5267304)|0);
HEAP32[((5259120)>>2)]=((5267032)|0);
HEAP32[((5259128)>>2)]=((5266876)|0);
HEAP32[((5259136)>>2)]=((5266720)|0);
HEAP32[((5259144)>>2)]=((5266600)|0);
HEAP32[((5259152)>>2)]=((5266528)|0);
HEAP32[((5259160)>>2)]=((5266416)|0);
HEAP32[((5259168)>>2)]=((5266348)|0);
HEAP32[((5259176)>>2)]=((5266256)|0);
HEAP32[((5259184)>>2)]=((5266184)|0);
HEAP32[((5259192)>>2)]=((5266088)|0);
HEAP32[((5259200)>>2)]=((5265924)|0);
HEAP32[((5259208)>>2)]=((5265788)|0);
HEAP32[((5259216)>>2)]=((5265684)|0);
HEAP32[((5259224)>>2)]=((5265588)|0);
HEAP32[((5259232)>>2)]=((5265512)|0);
HEAP32[((5259240)>>2)]=((5265412)|0);
HEAP32[((5259248)>>2)]=((5265356)|0);
HEAP32[((5259256)>>2)]=((5265264)|0);
HEAP32[((5259264)>>2)]=((5265180)|0);
HEAP32[((5259272)>>2)]=((5265028)|0);
HEAP32[((5259280)>>2)]=((5264768)|0);
HEAP32[((5259288)>>2)]=((5264540)|0);
HEAP32[((5259296)>>2)]=((5264404)|0);
HEAP32[((5259304)>>2)]=((5264248)|0);
HEAP32[((5259312)>>2)]=((5264124)|0);
HEAP32[((5259320)>>2)]=((5264036)|0);
HEAP32[((5259328)>>2)]=((5263956)|0);
HEAP32[((5259336)>>2)]=((5263908)|0);
HEAP32[((5259344)>>2)]=((5263836)|0);
HEAP32[((5259352)>>2)]=((5263784)|0);
HEAP32[((5259360)>>2)]=((5263620)|0);
HEAP32[((5259368)>>2)]=((5263520)|0);
HEAP32[((5259376)>>2)]=((5263416)|0);
HEAP32[((5259384)>>2)]=((5263128)|0);
HEAP32[((5259392)>>2)]=((5263068)|0);
HEAP32[((5259400)>>2)]=((5263000)|0);
HEAP32[((5259408)>>2)]=((5262940)|0);
HEAP32[((5259416)>>2)]=((5262876)|0);
HEAP32[((5259424)>>2)]=((5262732)|0);
HEAP32[((5259432)>>2)]=((5262680)|0);
HEAP32[((5259440)>>2)]=((5262512)|0);
HEAP32[((5259448)>>2)]=((5262420)|0);
HEAP32[((5259456)>>2)]=((5262360)|0);
HEAP32[((5259464)>>2)]=((5262288)|0);
HEAP32[((5259472)>>2)]=((5262248)|0);
HEAP32[((5259480)>>2)]=((5262164)|0);
HEAP32[((5259488)>>2)]=((5262112)|0);
HEAP32[((5259496)>>2)]=((5262052)|0);
HEAP32[((5259504)>>2)]=((5261976)|0);
HEAP32[((5259512)>>2)]=((5261872)|0);
HEAP32[((5259520)>>2)]=((5261680)|0);
HEAP32[((5259528)>>2)]=((5261564)|0);
HEAP32[((5259536)>>2)]=((5261444)|0);
HEAP32[((5259544)>>2)]=((5261324)|0);
HEAP32[((5259552)>>2)]=((5261248)|0);
HEAP32[((5259560)>>2)]=((5261180)|0);
HEAP32[((5259568)>>2)]=((5261140)|0);
HEAP32[((5259576)>>2)]=((5261084)|0);
HEAP32[((5259584)>>2)]=((5260980)|0);
HEAP32[((5259592)>>2)]=((5260908)|0);
HEAP32[((5259600)>>2)]=((5260792)|0);
HEAP32[((5259608)>>2)]=((5260676)|0);
HEAP32[((5259616)>>2)]=((5260564)|0);
HEAP32[((5259624)>>2)]=((5260512)|0);
HEAP32[((5259632)>>2)]=((5260492)|0);
HEAP32[((5259676)>>2)]=((5260472)|0);
HEAP32[((5259680)>>2)]=((5260400)|0);
HEAP32[((5259684)>>2)]=((5260384)|0);
HEAP32[((5259688)>>2)]=((5273412)|0);
HEAP32[((5259692)>>2)]=((5273328)|0);
HEAP32[((5259696)>>2)]=((5260384)|0);
HEAP32[((5259700)>>2)]=((5273252)|0);
HEAP32[((5259704)>>2)]=((5273168)|0);
HEAP32[((5259708)>>2)]=((5260384)|0);
HEAP32[((5259712)>>2)]=((5273104)|0);
HEAP32[((5259716)>>2)]=((5273048)|0);
HEAP32[((5259720)>>2)]=((5260384)|0);
HEAP32[((5259724)>>2)]=((5273024)|0);
HEAP32[((5259728)>>2)]=((5273004)|0);
HEAP32[((5259732)>>2)]=((5260384)|0);
HEAP32[((5259736)>>2)]=((5272988)|0);
HEAP32[((5259740)>>2)]=((5272884)|0);
HEAP32[((5259744)>>2)]=((5260384)|0);
HEAP32[((5259748)>>2)]=((5272800)|0);
HEAP32[((5259752)>>2)]=((5272772)|0);
HEAP32[((5259756)>>2)]=((5260384)|0);
HEAP32[((5259760)>>2)]=((5272672)|0);
HEAP32[((5259764)>>2)]=((5272500)|0);
HEAP32[((5259768)>>2)]=((5260384)|0);
HEAP32[((5259772)>>2)]=((5272420)|0);
HEAP32[((5259776)>>2)]=((5272328)|0);
HEAP32[((5259780)>>2)]=((5260384)|0);
HEAP32[((5259784)>>2)]=((5265588)|0);
HEAP32[((5259788)>>2)]=((5272320)|0);
HEAP32[((5259792)>>2)]=((5260384)|0);
HEAP32[((5259796)>>2)]=((5272308)|0);
HEAP32[((5259800)>>2)]=((5272280)|0);
HEAP32[((5259804)>>2)]=((5260384)|0);
HEAP32[((5259808)>>2)]=((5272272)|0);
HEAP32[((5259812)>>2)]=((5272204)|0);
HEAP32[((5259816)>>2)]=((5260384)|0);
HEAP32[((5259828)>>2)]=((5260384)|0);
HEAP32[((5259840)>>2)]=((5266248)|0);
HEAP32[((5259852)>>2)]=((5266176)|0);
HEAP32[((5259864)>>2)]=((5266080)|0);
HEAP32[((5259876)>>2)]=((5265916)|0);
HEAP32[((5259888)>>2)]=((5265776)|0);
HEAP32[((5259900)>>2)]=((5265680)|0);
HEAP32[((5259912)>>2)]=((5265580)|0);
HEAP32[((5259924)>>2)]=((5265496)|0);
HEAP32[((5259936)>>2)]=((5265404)|0);
HEAP32[((5259948)>>2)]=((5265348)|0);
HEAP32[((5259960)>>2)]=((5265256)|0);
HEAP32[((5259984)>>2)]=((5271328)|0);
HEAP32[((5259996)>>2)]=((5270992)|0);
HEAP32[((5260008)>>2)]=((5270752)|0);
HEAP32[((5260020)>>2)]=((5270440)|0);
HEAP32[((5260032)>>2)]=((5270164)|0);
HEAP32[((5260044)>>2)]=((5269800)|0);
HEAP32[((5260056)>>2)]=((5269616)|0);
HEAP32[((5260068)>>2)]=((5269256)|0);
HEAP32[((5260080)>>2)]=((5268956)|0);
HEAP32[((5260092)>>2)]=((5268696)|0);
HEAP32[((5260104)>>2)]=((5268472)|0);
HEAP32[((5260116)>>2)]=((5268216)|0);
HEAP32[((5260128)>>2)]=((5268104)|0);
HEAP32[((5260140)>>2)]=((5267892)|0);
HEAP32[((5260152)>>2)]=((5267780)|0);
HEAP32[((5260164)>>2)]=((5267556)|0);
HEAP32[((5260176)>>2)]=((5267432)|0);
HEAP32[((5260188)>>2)]=((5267300)|0);
HEAP32[((5260200)>>2)]=((5267024)|0);
HEAP32[((5260212)>>2)]=((5266860)|0);
HEAP32[((5260224)>>2)]=((5266712)|0);
HEAP32[((5260236)>>2)]=((5266588)|0);
HEAP32[((5260248)>>2)]=((5266520)|0);
HEAP32[((5260260)>>2)]=((5266408)|0);
HEAP32[((5260272)>>2)]=((5266340)|0);
HEAP32[((5260292)>>2)]=((5262368)|0);
HEAP32[((5260304)>>2)]=((5262300)|0);
HEAP32[((5260316)>>2)]=((5262264)|0);

  function _setlocale(category, locale) {
      if (!_setlocale.ret) _setlocale.ret = allocate([0], 'i8', ALLOC_NORMAL);
      return _setlocale.ret;
    }

  
  function _strlen(ptr) {
      return String_len(ptr);
    }function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STACK);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[((poolPtr)+(j))]=line.charCodeAt(j);
        }
        HEAP8[((poolPtr)+(j))]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = String_len(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }


  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[(_fputc.ret)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc;

  
  
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      FS.checkStreams();
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }function _rewind(stream) {
      // void rewind(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rewind.html
      _fseek(stream, 0, 0);  // SEEK_SET.
      if (FS.streams[stream]) FS.streams[stream].error = false;
    }

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  
  var ___stat_struct_layout={__size__:72,st_dev:0,st_ino:4,st_mode:8,st_nlink:12,st_uid:16,st_gid:20,st_rdev:24,st_size:28,st_atime:32,st_spare1:36,st_mtime:40,st_spare2:44,st_ctime:48,st_spare3:52,st_blksize:56,st_blocks:60,st_spare4:64};function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
      if (obj === null || !FS.forceLoadFile(obj)) return -1;
  
      var offsets = ___stat_struct_layout;
  
      // Constants.
      HEAP32[(((buf)+(offsets.st_nlink))>>2)]=1
      HEAP32[(((buf)+(offsets.st_uid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_gid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_blksize))>>2)]=4096
  
      // Variables.
      HEAP32[(((buf)+(offsets.st_ino))>>2)]=obj.inodeNumber
      var time = Math.floor(obj.timestamp / 1000);
      if (offsets.st_atime === undefined) {
        offsets.st_atime = offsets.st_atim.tv_sec;
        offsets.st_mtime = offsets.st_mtim.tv_sec;
        offsets.st_ctime = offsets.st_ctim.tv_sec;
        var nanosec = (obj.timestamp % 1000) * 1000;
        HEAP32[(((buf)+(offsets.st_atim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_mtim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_ctim.tv_nsec))>>2)]=nanosec
      }
      HEAP32[(((buf)+(offsets.st_atime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_mtime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_ctime))>>2)]=time
      var mode = 0;
      var size = 0;
      var blocks = 0;
      var dev = 0;
      var rdev = 0;
      if (obj.isDevice) {
        //  Device numbers reuse inode numbers.
        dev = rdev = obj.inodeNumber;
        size = blocks = 0;
        mode = 0x2000;  // S_IFCHR.
      } else {
        dev = 1;
        rdev = 0;
        // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
        //       but this is not required by the standard.
        if (obj.isFolder) {
          size = 4096;
          blocks = 1;
          mode = 0x4000;  // S_IFDIR.
        } else {
          var data = obj.contents || obj.link;
          size = data.length;
          blocks = Math.ceil(data.length / 4096);
          mode = obj.link === undefined ? 0x8000 : 0xA000;  // S_IFREG, S_IFLNK.
        }
      }
      HEAP32[(((buf)+(offsets.st_dev))>>2)]=dev;
      HEAP32[(((buf)+(offsets.st_rdev))>>2)]=rdev;
      HEAP32[(((buf)+(offsets.st_size))>>2)]=size
      HEAP32[(((buf)+(offsets.st_blocks))>>2)]=blocks
      if (obj.read) mode |= 0x16D;  // S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH.
      if (obj.write) mode |= 0x92;  // S_IWUSR | S_IWGRP | S_IWOTH.
      HEAP32[(((buf)+(offsets.st_mode))>>2)]=mode
  
      return 0;
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else {
        var pathArray = intArrayFromString(FS.streams[fildes].path);
        return _stat(allocate(pathArray, 'i8', ALLOC_STACK), buf);
      }
    }



  
  var ___flock_struct_layout=null;function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      var stream = FS.streams[fildes];
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream = {};
          for (var member in stream) {
            newStream[member] = stream[member];
          }
          arg = dup2 ? arg : Math.max(arg, FS.streams.length); // dup2 wants exactly arg; fcntl wants a free descriptor >= arg
          for (var i = FS.streams.length; i < arg; i++) {
            FS.streams[i] = null; // Keep dense
          }
          FS.streams[arg] = newStream;
          FS.checkStreams();
          return arg;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          var flags = 0;
          if (stream.isRead && stream.isWrite) flags = 2;
          else if (!stream.isRead && stream.isWrite) flags = 1;
          else if (stream.isRead && !stream.isWrite) flags = 0;
          if (stream.isAppend) flags |= 8;
          // Synchronization and blocking flags are irrelevant to us.
          return flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.isAppend = Boolean(arg | 8);
          // Synchronization and blocking flags are irrelevant to us.
          return 0;
        case 7:
        case 20:
          var arg = HEAP32[((varargs)>>2)];
          var offset = ___flock_struct_layout.l_type;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=3
          return 0;
        case 8:
        case 9:
        case 21:
        case 22:
          // Pretend that the locking is successful.
          return 0;
        case 6:
        case 5:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }

  
  function _fpathconf(fildes, name) {
      // long fpathconf(int fildes, int name);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/encrypt.html
      // NOTE: The first parameter is ignored, so pathconf == fpathconf.
      // The constants here aren't real values. Just mimicing glibc.
      switch (name) {
        case 0:
          return 32000;
        case 1:
        case 2:
        case 3:
          return 255;
        case 4:
        case 5:
        case 18:
        case 19:
        case 15:
          return 4096;
        case 6:
        case 7:
        case 13:
          return 1;
        case 8:
          return 0;
        case 11:
        case 9:
        case 10:
        case 100:
        case 16:
        case 17:
        case 14:
          return -1;
        case 12:
          return 64;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }var _pathconf;

  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }

  
  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }var _llvm_memset_p0i8_i32;


  
  var ___utimbuf_struct_layout={__size__:8,actime:0,modtime:4};function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = ___utimbuf_struct_layout.modtime;
        time = HEAP32[(((times)+(offset))>>2)]
        time *= 1000;
      } else {
        time = Date.now();
      }
      var file = FS.findObject(Pointer_stringify(path));
      if (file === null) return -1;
      if (!file.write) {
        ___setErrNo(ERRNO_CODES.EPERM);
        return -1;
      }
      file.timestamp = time;
      return 0;
    }

  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      var target = FS.findObject(path);
      if (target === null) return -1;
      if ((amode & 2 && !target.write) ||  // W_OK.
          ((amode & 1 || amode & 4) && !target.read)) {  // X_OK, R_OK.
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        return 0;
      }
    }

  function _strdup(ptr) {
      var len = String_len(ptr);
      var newStr = _malloc(len + 1);
      _memcpy(newStr, ptr, len);
      HEAP8[((newStr)+(len))]=0;
      return newStr;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }



  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }


  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = FS.absolutePath(Pointer_stringify(dirname));
      if (path === null) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var target = FS.findObject(path);
      if (target === null) return 0;
      if (!target.isFolder) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      } else if (!target.read) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return 0;
      }
      var id = FS.streams.length; // Keep dense
      var contents = [];
      for (var key in target.contents) contents.push(key);
      FS.streams[id] = {
        path: path,
        object: target,
        // An index into contents. Special values: -2 is ".", -1 is "..".
        position: -2,
        isRead: true,
        isWrite: false,
        isAppend: false,
        error: false,
        eof: false,
        ungotten: [],
        // Folder-specific properties:
        // Remember the contents at the time of opening in an array, so we can
        // seek between them relying on a single order.
        contents: contents,
        // Each stream has its own area for readdir() returns.
        currentEntry: _malloc(___dirent_struct_layout.__size__)
      };
      FS.checkStreams();
      return id;
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var stream = FS.streams[dirp];
      var loc = stream.position;
      var entries = 0;
      for (var key in stream.contents) entries++;
      if (loc < -2 || loc >= entries) {
        HEAP32[((result)>>2)]=0
      } else {
        var name, inode, type;
        if (loc === -2) {
          name = '.';
          inode = 1;  // Really undefined.
          type = 4; //DT_DIR
        } else if (loc === -1) {
          name = '..';
          inode = 1;  // Really undefined.
          type = 4; //DT_DIR
        } else {
          var object;
          name = stream.contents[loc];
          object = stream.object.contents[name];
          inode = object.inodeNumber;
          type = object.isDevice ? 2 // DT_CHR, character device.
                : object.isFolder ? 4 // DT_DIR, directory.
                : object.link !== undefined ? 10 // DT_LNK, symbolic link.
                : 8; // DT_REG, regular file.
        }
        stream.position++;
        var offsets = ___dirent_struct_layout;
        HEAP32[(((entry)+(offsets.d_ino))>>2)]=inode
        HEAP32[(((entry)+(offsets.d_off))>>2)]=stream.position
        HEAP32[(((entry)+(offsets.d_reclen))>>2)]=name.length + 1
        for (var i = 0; i < name.length; i++) {
          HEAP8[((entry + offsets.d_name)+(i))]=name.charCodeAt(i)
        }
        HEAP8[((entry + offsets.d_name)+(i))]=0
        HEAP8[((entry)+(offsets.d_type))]=type
        HEAP32[((result)>>2)]=entry
      }
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      } else {
        if (!_readdir.result) _readdir.result = _malloc(4);
        _readdir_r(dirp, FS.streams[dirp].currentEntry, _readdir.result);
        if (HEAP32[((_readdir.result)>>2)] === 0) {
          return 0;
        } else {
          return FS.streams[dirp].currentEntry;
        }
      }
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      } else {
        _free(FS.streams[dirp].currentEntry);
        FS.streams[dirp] = null;
        return 0;
      }
    }

  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var comparator = function(x, y) {
        return Runtime.dynCall('iii', cmp, [x, y]);
      }
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return comparator(base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  var _llvm_memcpy_p0i8_p0i8_i32;

  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295),ret>>>0);
      }
  
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }

  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }

  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var start = str;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return (tempRet0 = 0,0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      try {
        i64Math.fromString(Pointer_stringify(start, str - start), finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return (tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)]);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }

  
  function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }var _strtof;


  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }


  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }

  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }

  function _strndup(ptr, size) {
      var len = String_len(ptr);
  
      if (size >= len) {
        return _strdup(ptr);
      }
  
      if (size < 0) {
        size = 0;
      }
      
      var newStr = _malloc(size + 1);
      _memcpy(newStr, ptr, size);
      HEAP8[((newStr)+(size))]=0;
      return newStr;
    }

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _ioctl(fd, request, varargs) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      var bytes = 0;
      if (info.inQueue.length > 0) {
        bytes = info.inQueue[0].length;
      }
      var dest = HEAP32[((varargs)>>2)];
      HEAP32[((dest)>>2)]=bytes;
      return 0;
    }

  function _select(nfds, readfds, writefds, exceptfds, timeout) {
      // only readfds are supported, not writefds or exceptfds
      // timeout is always 0 - fully async
      assert(!writefds && !exceptfds);
      var ret = 0;
      var l = HEAP32[((readfds)>>2)];
      var h = HEAP32[(((readfds)+(4))>>2)];
      nfds = Math.min(64, nfds); // fd sets have 64 bits
      for (var fd = 0; fd < nfds; fd++) {
        var bit = fd % 32, int = fd < 32 ? l : h;
        if (int & (1 << bit)) {
          // index is in the set, check if it is ready for read
          var info = Sockets.fds[fd];
          if (!info) continue;
          if (info.inQueue.length > 0) ret++;
        }
      }
      return ret;
    }

  
  function _creat(path, mode) {
      // int creat(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/creat.html
      return _open(path, 1 | 512 | 1024, allocate([mode, 0, 0, 0], 'i32', ALLOC_STACK));
    }function _mkstemp(template) {
      if (!_mkstemp.counter) _mkstemp.counter = 0;
      var c = (_mkstemp.counter++).toString();
      var rep = 'XXXXXX';
      while (c.length < rep.length) c = '0' + c;
      writeArrayToMemory(intArrayFromString(c), template + Pointer_stringify(template).indexOf(rep));
      return _creat(template, 0600);
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists || !path.exists) {
        ___setErrNo(path.error);
        return -1;
      } else if (path.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (!path.object.write) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        delete path.parentObject.contents[path.name];
        return 0;
      }
    }

  function _dup2(fildes, fildes2) {
      // int dup2(int fildes, int fildes2);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/dup.html
      if (fildes2 < 0) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (fildes === fildes2 && FS.streams[fildes]) {
        return fildes;
      } else {
        _close(fildes2);
        return _fcntl(fildes, 0, allocate([fildes2, 0, 0, 0], 'i32', ALLOC_STACK), true);  // F_DUPFD.
      }
    }

  function _pipe(fildes) {
      // int pipe(int fildes[2]);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/pipe.html
      // It is possible to implement this using two device streams, but pipes make
      // little sense in a single-threaded environment, so we do not support them.
      ___setErrNo(ERRNO_CODES.ENOSYS);
      return -1;
    }

  function _fork() {
      // pid_t fork(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fork.html
      // We don't support multiple processes.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function _dup(fildes) {
      // int dup(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/dup.html
      return _fcntl(fildes, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));  // F_DUPFD.
    }


  
  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }var _execvp;

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }var _waitpid;
var _llvm_va_start; // stub for _llvm_va_start

  var _vfprintf;

  function _llvm_va_end() {}

  
  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  var ___tm_current=allocate(4*26, "i8", ALLOC_STACK);
  
  
  var ___tm_timezones={};
  
  
  var __tzname=allocate(8, "i32*", ALLOC_STACK);
  
  var __daylight=allocate(1, "i32*", ALLOC_STACK);
  
  var __timezone=allocate(1, "i32*", ALLOC_STACK);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  
  
  var ___tm_formatted=allocate(4*26, "i8", ALLOC_STACK);
  
  
  function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[((buf)+(index))]=chr.charCodeAt(0)
      });
      HEAP8[((buf)+(25))]=0
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime_r(timer, buf) {
      return _asctime_r(_localtime_r(timer, ___tm_current), buf);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }


  
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
  
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }


  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _lstat(path, buf) {
      // int lstat(const char *path, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/lstat.html
      return _stat(path, buf, true);
    }

  function _readlink(path, buf, bufsize) {
      // ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/readlink.html
      var target = FS.findObject(Pointer_stringify(path), true);
      if (target === null) return -1;
      if (target.link !== undefined) {
        var length = Math.min(bufsize - 1, target.link.length);
        for (var i = 0; i < length; i++) {
          HEAP8[((buf)+(i))]=target.link.charCodeAt(i)
        }
        if (bufsize - 1 > length) HEAP8[((buf)+(i))]=0
        return i;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
    }


  function _llvm_va_copy(ppdest, ppsrc) {
      HEAP8[(ppdest)]=HEAP8[(ppsrc)];HEAP8[((ppdest)+(1))]=HEAP8[((ppsrc)+(1))];HEAP8[((ppdest)+(2))]=HEAP8[((ppsrc)+(2))];HEAP8[((ppdest)+(3))]=HEAP8[((ppsrc)+(3))];
      /* Alternate implementation that copies the actual DATA; it assumes the va_list is prefixed by its size
      var psrc = IHEAP[ppsrc]-1;
      var num = IHEAP[psrc]; // right before the data, is the number of (flattened) values
      var pdest = _malloc(num+1);
      _memcpy(pdest, psrc, num+1);
      IHEAP[ppdest] = pdest+1;
      */
    }

  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  var _vsprintf;

  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }

  
  function _memmove(dest, src, num, align) {
      if (src < dest && dest < src + num) {
        // Copy backwards in a safe manner
        src += num;
        dest += num;
        while (num--) {
          dest--;
          src--;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32;

  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
___buildEnvironment(ENV);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  

var FUNCTION_TABLE = [0,0,_parse_strength,0,_apprentice_sort,0,_parse_apple,0,_parse_mime,0,_zcalloc,0,_cmpstrp,0,_zcfree,0];

function _load($magicfile, $flags) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $magic;
      $2=$magicfile;
      $3=$flags;
      var $4=$3;
      var $5=_magic_open($4);
      $magic=$5;
      var $6=$magic;
      var $7=(($6)|0)==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=HEAP32[((_stderr)>>2)];
      var $10=HEAP32[((5246316)>>2)];
      var $11=___errno_location();
      var $12=HEAP32[(($11)>>2)];
      var $13=_strerror($12);
      var $14=_fprintf($9, ((5263884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(4))>>2)]=$13,tempInt));
      $1=0;
      label = 7; break;
    case 4: 
      var $16=$magic;
      var $17=$2;
      var $18=_magic_load($16, $17);
      var $19=(($18)|0)==-1;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=HEAP32[((_stderr)>>2)];
      var $22=HEAP32[((5246316)>>2)];
      var $23=$magic;
      var $24=_magic_error($23);
      var $25=_fprintf($21, ((5263884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$22,HEAP32[(((tempInt)+(4))>>2)]=$24,tempInt));
      var $26=$magic;
      _magic_close($26);
      $1=0;
      label = 7; break;
    case 6: 
      var $28=$magic;
      $1=$28;
      label = 7; break;
    case 7: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}


function _unwrap($ms, $fn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $f;
      var $len;
      var $line=__stackBase__;
      var $llen=(__stackBase__)+(4);
      var $wid;
      var $cwid;
      var $e;
      $2=$ms;
      $3=$fn;
      HEAP32[(($line)>>2)]=0;
      HEAP32[(($llen)>>2)]=0;
      $wid=0;
      $e=0;
      var $4=$3;
      var $5=_strcmp(((5263116)|0), $4);
      var $6=(($5)|0)==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=HEAP32[((_stdin)>>2)];
      $f=$8;
      $wid=1;
      label = 14; break;
    case 4: 
      var $10=$3;
      var $11=_fopen($10, ((5262724)|0));
      $f=$11;
      var $12=(($11)|0)==0;
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=HEAP32[((_stderr)>>2)];
      var $15=HEAP32[((5246316)>>2)];
      var $16=$3;
      var $17=___errno_location();
      var $18=HEAP32[(($17)>>2)];
      var $19=_strerror($18);
      var $20=_fprintf($14, ((5262580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$15,HEAP32[(((tempInt)+(4))>>2)]=$16,HEAP32[(((tempInt)+(8))>>2)]=$19,tempInt));
      $1=1;
      label = 22; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $23=$f;
      var $24=_getline($line, $llen, $23);
      $len=$24;
      var $25=(($24)|0) > 0;
      if ($25) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $27=$len;
      var $28=((($27)-(1))|0);
      var $29=HEAP32[(($line)>>2)];
      var $30=(($29+$28)|0);
      var $31=HEAP8[($30)];
      var $32=(($31 << 24) >> 24);
      var $33=(($32)|0)==10;
      if ($33) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $35=$len;
      var $36=((($35)-(1))|0);
      var $37=HEAP32[(($line)>>2)];
      var $38=(($37+$36)|0);
      HEAP8[($38)]=0;
      label = 10; break;
    case 10: 
      var $40=HEAP32[(($line)>>2)];
      var $41=_file_mbswidth($40);
      $cwid=$41;
      var $42=$cwid;
      var $43=$wid;
      var $44=(($42)|0) > (($43)|0);
      if ($44) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $46=$cwid;
      $wid=$46;
      label = 12; break;
    case 12: 
      label = 7; break;
    case 13: 
      var $49=$f;
      _rewind($49);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $52=$f;
      var $53=_getline($line, $llen, $52);
      $len=$53;
      var $54=(($53)|0) > 0;
      if ($54) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $56=$len;
      var $57=((($56)-(1))|0);
      var $58=HEAP32[(($line)>>2)];
      var $59=(($58+$57)|0);
      var $60=HEAP8[($59)];
      var $61=(($60 << 24) >> 24);
      var $62=(($61)|0)==10;
      if ($62) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $64=$len;
      var $65=((($64)-(1))|0);
      var $66=HEAP32[(($line)>>2)];
      var $67=(($66+$65)|0);
      HEAP8[($67)]=0;
      label = 18; break;
    case 18: 
      var $69=$2;
      var $70=HEAP32[(($line)>>2)];
      var $71=$wid;
      var $72=_process($69, $70, $71);
      var $73=$e;
      var $74=$73 | $72;
      $e=$74;
      var $75=HEAP32[((5246480)>>2)];
      var $76=(($75)|0)!=0;
      if ($76) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $78=HEAP32[((_stdout)>>2)];
      var $79=_fflush($78);
      label = 20; break;
    case 20: 
      label = 15; break;
    case 21: 
      var $82=HEAP32[(($line)>>2)];
      _free($82);
      var $83=$f;
      var $84=_fclose($83);
      var $85=$e;
      $1=$85;
      label = 22; break;
    case 22: 
      var $87=$1;
      STACKTOP = __stackBase__;
      return $87;
    default: assert(0, "bad label: " + label);
  }
}
_unwrap["X"]=1;

function _file_mbswidth($s) {
  var label = 0;


  var $1;
  $1=$s;
  var $2=$1;
  var $3=_strlen($2);

  return $3;
}


function _main($argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $i;
      var $action;
      var $didsomefiles;
      var $errflg;
      var $flags;
      var $e;
      var $magic;
      var $longindex=__stackBase__;
      var $magicfile;
      var $j;
      var $wid;
      var $nw;
      $1=0;
      $2=$argc;
      $3=$argv;
      $action=0;
      $didsomefiles=0;
      $errflg=0;
      $flags=0;
      $e=0;
      $magic=0;
      $magicfile=0;
      var $4=_setlocale(2, ((5273472)|0));
      var $5=$3;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=_strrchr($7, 47);
      HEAP32[((5246316)>>2)]=$8;
      var $9=(($8)|0)!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=HEAP32[((5246316)>>2)];
      var $12=(($11+1)|0);
      HEAP32[((5246316)>>2)]=$12;
      label = 5; break;
    case 4: 
      var $14=$3;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      HEAP32[((5246316)>>2)]=$16;
      label = 5; break;
    case 5: 
      var $18=_getenv(((5273456)|0));
      var $19=(($18)|0)!=0;
      var $20=$19 ? 2 : 0;
      var $21=$flags;
      var $22=$21 | $20;
      $flags=$22;
      label = 6; break;
    case 6: 
      var $24=$2;
      var $25=$3;
      var $26=_getopt_long($24, $25, ((5269708)|0), ((5246612)|0), $longindex);
      $c=$26;
      var $27=(($26)|0)!=-1;
      if ($27) { label = 7; break; } else { label = 55; break; }
    case 7: 
      var $29=$c;
      if ((($29)|0) == 0) {
        label = 8; break;
      }
      else if ((($29)|0) == 48) {
        label = 14; break;
      }
      else if ((($29)|0) == 98) {
        label = 15; break;
      }
      else if ((($29)|0) == 99) {
        label = 16; break;
      }
      else if ((($29)|0) == 67) {
        label = 17; break;
      }
      else if ((($29)|0) == 100) {
        label = 18; break;
      }
      else if ((($29)|0) == 101) {
        label = 19; break;
      }
      else if ((($29)|0) == 102) {
        label = 29; break;
      }
      else if ((($29)|0) == 70) {
        label = 36; break;
      }
      else if ((($29)|0) == 105) {
        label = 37; break;
      }
      else if ((($29)|0) == 107) {
        label = 38; break;
      }
      else if ((($29)|0) == 108) {
        label = 39; break;
      }
      else if ((($29)|0) == 109) {
        label = 40; break;
      }
      else if ((($29)|0) == 110) {
        label = 41; break;
      }
      else if ((($29)|0) == 78) {
        label = 42; break;
      }
      else if ((($29)|0) == 112) {
        label = 43; break;
      }
      else if ((($29)|0) == 114) {
        label = 44; break;
      }
      else if ((($29)|0) == 115) {
        label = 45; break;
      }
      else if ((($29)|0) == 118) {
        label = 46; break;
      }
      else if ((($29)|0) == 122) {
        label = 49; break;
      }
      else if ((($29)|0) == 76) {
        label = 50; break;
      }
      else if ((($29)|0) == 104) {
        label = 51; break;
      }
      else if ((($29)|0) == 63) {
        label = 52; break;
      }
      else {
      label = 53; break;
      }
      
    case 8: 
      var $31=HEAP32[(($longindex)>>2)];
      if ((($31)|0) == 0) {
        label = 9; break;
      }
      else if ((($31)|0) == 10) {
        label = 10; break;
      }
      else if ((($31)|0) == 11) {
        label = 11; break;
      }
      else if ((($31)|0) == 12) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
      
    case 9: 
      _help();
      label = 13; break;
    case 10: 
      var $34=$flags;
      var $35=$34 | 2048;
      $flags=$35;
      label = 13; break;
    case 11: 
      var $37=$flags;
      var $38=$37 | 16;
      $flags=$38;
      label = 13; break;
    case 12: 
      var $40=$flags;
      var $41=$40 | 1024;
      $flags=$41;
      label = 13; break;
    case 13: 
      label = 54; break;
    case 14: 
      HEAP32[((5246452)>>2)]=1;
      label = 54; break;
    case 15: 
      var $45=HEAP32[((5260288)>>2)];
      var $46=((($45)+(1))|0);
      HEAP32[((5260288)>>2)]=$46;
      label = 54; break;
    case 16: 
      $action=1;
      label = 54; break;
    case 17: 
      $action=2;
      label = 54; break;
    case 18: 
      var $50=$flags;
      var $51=$50 | 65;
      $flags=$51;
      label = 54; break;
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $54=$i;
      var $55=(($54)>>>0) < 10;
      if ($55) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $57=$i;
      var $58=((5246372+($57<<3))|0);
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=HEAP32[((5246368)>>2)];
      var $62=_strcmp($60, $61);
      var $63=(($62)|0)==0;
      if ($63) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 25; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $67=$i;
      var $68=((($67)+(1))|0);
      $i=$68;
      label = 20; break;
    case 25: 
      var $70=$i;
      var $71=(($70)|0)==10;
      if ($71) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $73=$errflg;
      var $74=((($73)+(1))|0);
      $errflg=$74;
      label = 28; break;
    case 27: 
      var $76=$i;
      var $77=((5246372+($76<<3))|0);
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$flags;
      var $81=$80 | $79;
      $flags=$81;
      label = 28; break;
    case 28: 
      label = 54; break;
    case 29: 
      var $84=$action;
      var $85=(($84)|0)!=0;
      if ($85) { label = 30; break; } else { label = 31; break; }
    case 30: 
      _usage();
      label = 31; break;
    case 31: 
      var $88=$magic;
      var $89=(($88)|0)==0;
      if ($89) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $91=$magicfile;
      var $92=$flags;
      var $93=_load($91, $92);
      $magic=$93;
      var $94=(($93)|0)==0;
      if ($94) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $1=1;
      label = 95; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $98=$magic;
      var $99=HEAP32[((5246368)>>2)];
      var $100=_unwrap($98, $99);
      var $101=$e;
      var $102=$101 | $100;
      $e=$102;
      var $103=$didsomefiles;
      var $104=((($103)+(1))|0);
      $didsomefiles=$104;
      label = 54; break;
    case 36: 
      var $106=HEAP32[((5246368)>>2)];
      HEAP32[((5244772)>>2)]=$106;
      label = 54; break;
    case 37: 
      var $108=$flags;
      var $109=$108 | 1040;
      $flags=$109;
      label = 54; break;
    case 38: 
      var $111=$flags;
      var $112=$111 | 32;
      $flags=$112;
      label = 54; break;
    case 39: 
      $action=3;
      label = 54; break;
    case 40: 
      var $115=HEAP32[((5246368)>>2)];
      $magicfile=$115;
      label = 54; break;
    case 41: 
      var $117=HEAP32[((5246480)>>2)];
      var $118=((($117)+(1))|0);
      HEAP32[((5246480)>>2)]=$118;
      label = 54; break;
    case 42: 
      var $120=HEAP32[((5246468)>>2)];
      var $121=((($120)+(1))|0);
      HEAP32[((5246468)>>2)]=$121;
      label = 54; break;
    case 43: 
      var $123=$flags;
      var $124=$123 | 128;
      $flags=$124;
      label = 54; break;
    case 44: 
      var $126=$flags;
      var $127=$126 | 256;
      $flags=$127;
      label = 54; break;
    case 45: 
      var $129=$flags;
      var $130=$129 | 8;
      $flags=$130;
      label = 54; break;
    case 46: 
      var $132=$magicfile;
      var $133=(($132)|0)==0;
      if ($133) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $135=$magicfile;
      var $136=$action;
      var $137=_magic_getpath($135, $136);
      $magicfile=$137;
      label = 48; break;
    case 48: 
      var $139=HEAP32[((_stdout)>>2)];
      var $140=HEAP32[((5246316)>>2)];
      var $141=_fprintf($139, ((5267508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$140,HEAP32[(((tempInt)+(4))>>2)]=((5266240)|0),tempInt));
      var $142=HEAP32[((_stdout)>>2)];
      var $143=$magicfile;
      var $144=_fprintf($142, ((5265236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$143,tempInt));
      $1=0;
      label = 95; break;
    case 49: 
      var $146=$flags;
      var $147=$146 | 4;
      $flags=$147;
      label = 54; break;
    case 50: 
      var $149=$flags;
      var $150=$149 | 2;
      $flags=$150;
      label = 54; break;
    case 51: 
      var $152=$flags;
      var $153=$152 & -3;
      $flags=$153;
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $156=$errflg;
      var $157=((($156)+(1))|0);
      $errflg=$157;
      label = 54; break;
    case 54: 
      label = 6; break;
    case 55: 
      var $160=$errflg;
      var $161=(($160)|0)!=0;
      if ($161) { label = 56; break; } else { label = 57; break; }
    case 56: 
      _usage();
      label = 57; break;
    case 57: 
      var $164=$e;
      var $165=(($164)|0)!=0;
      if ($165) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $167=$e;
      $1=$167;
      label = 95; break;
    case 59: 
      var $169=$action;
      if ((($169)|0) == 1 || (($169)|0) == 2 || (($169)|0) == 3) {
        label = 60; break;
      }
      else {
      label = 70; break;
      }
      
    case 60: 
      var $171=$flags;
      var $172=$171 | 64;
      var $173=_magic_open($172);
      $magic=$173;
      var $174=$magic;
      var $175=(($174)|0)==0;
      if ($175) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $177=HEAP32[((_stderr)>>2)];
      var $178=HEAP32[((5246316)>>2)];
      var $179=___errno_location();
      var $180=HEAP32[(($179)>>2)];
      var $181=_strerror($180);
      var $182=_fprintf($177, ((5263884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$178,HEAP32[(((tempInt)+(4))>>2)]=$181,tempInt));
      $1=1;
      label = 95; break;
    case 62: 
      var $184=$action;
      if ((($184)|0) == 1) {
        label = 63; break;
      }
      else if ((($184)|0) == 2) {
        label = 64; break;
      }
      else if ((($184)|0) == 3) {
        label = 65; break;
      }
      else {
      label = 66; break;
      }
      
    case 63: 
      var $186=$magic;
      var $187=$magicfile;
      var $188=_magic_check($186, $187);
      $c=$188;
      label = 67; break;
    case 64: 
      var $190=$magic;
      var $191=$magicfile;
      var $192=_magic_compile($190, $191);
      $c=$192;
      label = 67; break;
    case 65: 
      var $194=$magic;
      var $195=$magicfile;
      var $196=_magic_list($194, $195);
      $c=$196;
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      var $199=$c;
      var $200=(($199)|0)==-1;
      if ($200) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $202=HEAP32[((_stderr)>>2)];
      var $203=HEAP32[((5246316)>>2)];
      var $204=$magic;
      var $205=_magic_error($204);
      var $206=_fprintf($202, ((5263884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$203,HEAP32[(((tempInt)+(4))>>2)]=$205,tempInt));
      $1=1;
      label = 95; break;
    case 69: 
      $1=0;
      label = 95; break;
    case 70: 
      var $209=$magic;
      var $210=(($209)|0)==0;
      if ($210) { label = 71; break; } else { label = 74; break; }
    case 71: 
      var $212=$magicfile;
      var $213=$flags;
      var $214=_load($212, $213);
      $magic=$214;
      var $215=(($214)|0)==0;
      if ($215) { label = 72; break; } else { label = 73; break; }
    case 72: 
      $1=1;
      label = 95; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $220=HEAP32[((5246360)>>2)];
      var $221=$2;
      var $222=(($220)|0)==(($221)|0);
      if ($222) { label = 76; break; } else { label = 79; break; }
    case 76: 
      var $224=$didsomefiles;
      var $225=(($224)|0)!=0;
      if ($225) { label = 78; break; } else { label = 77; break; }
    case 77: 
      _usage();
      label = 78; break;
    case 78: 
      label = 92; break;
    case 79: 
      $wid=0;
      var $229=HEAP32[((5246360)>>2)];
      $j=$229;
      label = 80; break;
    case 80: 
      var $231=$j;
      var $232=$2;
      var $233=(($231)>>>0) < (($232)>>>0);
      if ($233) { label = 81; break; } else { label = 85; break; }
    case 81: 
      var $235=$j;
      var $236=$3;
      var $237=(($236+($235<<2))|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=_file_mbswidth($238);
      $nw=$239;
      var $240=$nw;
      var $241=$wid;
      var $242=(($240)>>>0) > (($241)>>>0);
      if ($242) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $244=$nw;
      $wid=$244;
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $247=$j;
      var $248=((($247)+(1))|0);
      $j=$248;
      label = 80; break;
    case 85: 
      var $250=HEAP32[((5260288)>>2)];
      var $251=(($250)|0)==2;
      if ($251) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $253=HEAP32[((5246360)>>2)];
      var $254=$2;
      var $255=((($254)-(1))|0);
      var $256=(($253)|0) >= (($255)|0);
      var $257=(($256)&1);
      HEAP32[((5260288)>>2)]=$257;
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $260=HEAP32[((5246360)>>2)];
      var $261=$2;
      var $262=(($260)|0) < (($261)|0);
      if ($262) { label = 89; break; } else { label = 91; break; }
    case 89: 
      var $264=$magic;
      var $265=HEAP32[((5246360)>>2)];
      var $266=$3;
      var $267=(($266+($265<<2))|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$wid;
      var $270=_process($264, $268, $269);
      var $271=$e;
      var $272=$271 | $270;
      $e=$272;
      label = 90; break;
    case 90: 
      var $274=HEAP32[((5246360)>>2)];
      var $275=((($274)+(1))|0);
      HEAP32[((5246360)>>2)]=$275;
      label = 88; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $278=$magic;
      var $279=(($278)|0)!=0;
      if ($279) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $281=$magic;
      _magic_close($281);
      label = 94; break;
    case 94: 
      var $283=$e;
      $1=$283;
      label = 95; break;
    case 95: 
      var $285=$1;
      STACKTOP = __stackBase__;
      return $285;
    default: assert(0, "bad label: " + label);
  }
}
Module["_main"] = _main;_main["X"]=1;

function _help() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=HEAP32[((_stdout)>>2)];
  var $2=_fputs(((5262768)|0), $1);
  var $3=HEAP32[((_stdout)>>2)];
  var $4=_fprintf($3, ((5262016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  _docprint(((5261012)|0));
  var $5=HEAP32[((_stdout)>>2)];
  var $6=_fprintf($5, ((5273436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=118,tempInt));
  _docprint(((5272824)|0));
  var $7=HEAP32[((_stdout)>>2)];
  var $8=_fprintf($7, ((5272228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=109,tempInt));
  _docprint(((5271752)|0));
  var $9=HEAP32[((_stdout)>>2)];
  var $10=_fprintf($9, ((5271400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=122,tempInt));
  _docprint(((5271120)|0));
  var $11=HEAP32[((_stdout)>>2)];
  var $12=_fprintf($11, ((5270844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=98,tempInt));
  _docprint(((5270548)|0));
  var $13=HEAP32[((_stdout)>>2)];
  var $14=_fprintf($13, ((5270280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=99,tempInt));
  _docprint(((5269848)|0));
  var $15=HEAP32[((_stdout)>>2)];
  var $16=_fprintf($15, ((5269688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=101,tempInt));
  _docprint(((5269348)|0));
  var $17=HEAP32[((_stdout)>>2)];
  var $18=_fprintf($17, ((5269056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=102,tempInt));
  _docprint(((5268776)|0));
  var $19=HEAP32[((_stdout)>>2)];
  var $20=_fprintf($19, ((5268544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=70,tempInt));
  _docprint(((5268316)|0));
  var $21=HEAP32[((_stdout)>>2)];
  var $22=_fprintf($21, ((5268156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=105,tempInt));
  _docprint(((5267928)|0));
  var $23=HEAP32[((_stdout)>>2)];
  var $24=_fprintf($23, ((5267824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  _docprint(((5267640)|0));
  var $25=HEAP32[((_stdout)>>2)];
  var $26=_fprintf($25, ((5267488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  _docprint(((5267352)|0));
  var $27=HEAP32[((_stdout)>>2)];
  var $28=_fprintf($27, ((5267136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  _docprint(((5266900)|0));
  var $29=HEAP32[((_stdout)>>2)];
  var $30=_fprintf($29, ((5266796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=107,tempInt));
  _docprint(((5266608)|0));
  var $31=HEAP32[((_stdout)>>2)];
  var $32=_fprintf($31, ((5266560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=108,tempInt));
  _docprint(((5266444)|0));
  var $33=HEAP32[((_stdout)>>2)];
  var $34=_fprintf($33, ((5266384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=76,tempInt));
  _docprint(((5266300)|0));
  var $35=HEAP32[((_stdout)>>2)];
  var $36=_fprintf($35, ((5266216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=104,tempInt));
  _docprint(((5266136)|0));
  var $37=HEAP32[((_stdout)>>2)];
  var $38=_fprintf($37, ((5265980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=110,tempInt));
  _docprint(((5265816)|0));
  var $39=HEAP32[((_stdout)>>2)];
  var $40=_fprintf($39, ((5265744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=78,tempInt));
  _docprint(((5265616)|0));
  var $41=HEAP32[((_stdout)>>2)];
  var $42=_fprintf($41, ((5265564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=48,tempInt));
  _docprint(((5265444)|0));
  var $43=HEAP32[((_stdout)>>2)];
  var $44=_fprintf($43, ((5265380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=112,tempInt));
  _docprint(((5265308)|0));
  var $45=HEAP32[((_stdout)>>2)];
  var $46=_fprintf($45, ((5265220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=114,tempInt));
  _docprint(((5265088)|0));
  var $47=HEAP32[((_stdout)>>2)];
  var $48=_fprintf($47, ((5264812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=115,tempInt));
  _docprint(((5264644)|0));
  var $49=HEAP32[((_stdout)>>2)];
  var $50=_fprintf($49, ((5264480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=67,tempInt));
  _docprint(((5264328)|0));
  var $51=HEAP32[((_stdout)>>2)];
  var $52=_fprintf($51, ((5264220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=100,tempInt));
  _docprint(((5264072)|0));
  var $53=HEAP32[((_stdout)>>2)];
  var $54=_fprintf($53, ((5263988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  _exit(0);
  throw "Reached an unreachable!"
  STACKTOP = __stackBase__;
  return;
}
_help["X"]=1;

function _usage() {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=HEAP32[((_stderr)>>2)];
  var $2=HEAP32[((5246316)>>2)];
  var $3=HEAP32[((5246316)>>2)];
  var $4=HEAP32[((5246316)>>2)];
  var $5=_fprintf($1, ((5263188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$2,HEAP32[(((tempInt)+(4))>>2)]=$3,HEAP32[(((tempInt)+(8))>>2)]=$4,tempInt));
  _exit(1);
  throw "Reached an unreachable!"
  STACKTOP = __stackBase__;
  return;
}


function _magic_error($ms) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $2=$ms;
      var $3=$2;
      var $4=(($3)|0)==0;
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=((5269300)|0);
      label = 8; break;
    case 4: 
      var $7=$2;
      var $8=(($7+36)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 1;
      var $11=(($10)|0)!=0;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$2;
      var $14=(($13+16)|0);
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $19 = $16;label = 7; break;
    case 6: 
      var $19 = 0;label = 7; break;
    case 7: 
      var $19;
      $1=$19;
      label = 8; break;
    case 8: 
      var $21=$1;

      return $21;
    default: assert(0, "bad label: " + label);
  }
}


function _magic_setflags($ms, $flags) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$flags;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      var $8=$3;
      var $9=$2;
      var $10=(($9+32)|0);
      HEAP32[(($10)>>2)]=$8;
      $1=0;
      label = 5; break;
    case 5: 
      var $12=$1;

      return $12;
    default: assert(0, "bad label: " + label);
  }
}


function _process($ms, $inname, $wid) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $type;
      var $std_in;
      $2=$ms;
      $3=$inname;
      $4=$wid;
      var $5=$3;
      var $6=_strcmp($5, ((5263116)|0));
      var $7=(($6)|0)==0;
      var $8=(($7)&1);
      $std_in=$8;
      var $9=$4;
      var $10=(($9)|0) > 0;
      if ($10) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $12=HEAP32[((5260288)>>2)];
      var $13=(($12)|0)!=0;
      if ($13) { label = 13; break; } else { label = 4; break; }
    case 4: 
      var $15=$std_in;
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21 = ((5263048)|0);label = 7; break;
    case 6: 
      var $19=$3;
      var $21 = $19;label = 7; break;
    case 7: 
      var $21;
      var $22=_printf(((5263880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$21,tempInt));
      var $23=HEAP32[((5246452)>>2)];
      var $24=(($23)|0)!=0;
      if ($24) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $26=HEAP32[((_stdout)>>2)];
      var $27=_fputc(0, $26);
      label = 9; break;
    case 9: 
      var $29=HEAP32[((5244772)>>2)];
      var $30=_printf(((5263880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$29,tempInt));
      var $31=HEAP32[((5246468)>>2)];
      var $32=(($31)|0)!=0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40 = 0;label = 12; break;
    case 11: 
      var $35=$4;
      var $36=$3;
      var $37=_file_mbswidth($36);
      var $38=((($35)-($37))|0);
      var $40 = $38;label = 12; break;
    case 12: 
      var $40;
      var $41=_printf(((5262984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$40,HEAP32[(((tempInt)+(4))>>2)]=((5273472)|0),tempInt));
      label = 13; break;
    case 13: 
      var $43=$2;
      var $44=$std_in;
      var $45=(($44)|0)!=0;
      if ($45) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $50 = 0;label = 16; break;
    case 15: 
      var $48=$3;
      var $50 = $48;label = 16; break;
    case 16: 
      var $50;
      var $51=_magic_file($43, $50);
      $type=$51;
      var $52=$type;
      var $53=(($52)|0)==0;
      if ($53) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $55=$2;
      var $56=_magic_error($55);
      var $57=_printf(((5262912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$56,tempInt));
      $1=1;
      label = 19; break;
    case 18: 
      var $59=$type;
      var $60=_printf(((5262764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$59,tempInt));
      $1=0;
      label = 19; break;
    case 19: 
      var $62=$1;
      STACKTOP = __stackBase__;
      return $62;
    default: assert(0, "bad label: " + label);
  }
}
_process["X"]=1;

function _docprint($opts) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      var $comma;
      var $sp;
      var $p;
      $1=$opts;
      var $2=$1;
      var $3=_strstr($2, ((5263944)|0));
      $p=$3;
      var $4=$p;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stdout)>>2)];
      var $8=$1;
      var $9=_fprintf($7, ((5263880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      label = 18; break;
    case 4: 
      var $11=$p;
      var $12=((($11)-(1))|0);
      $sp=$12;
      label = 5; break;
    case 5: 
      var $14=$sp;
      var $15=$1;
      var $16=(($14)>>>0) > (($15)>>>0);
      if ($16) { label = 6; break; } else { var $23 = 0;label = 7; break; }
    case 6: 
      var $18=$sp;
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24);
      var $21=(($20)|0)==32;
      var $23 = $21;label = 7; break;
    case 7: 
      var $23;
      if ($23) { label = 8; break; } else { label = 10; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $26=$sp;
      var $27=((($26)-(1))|0);
      $sp=$27;
      label = 5; break;
    case 10: 
      var $29=HEAP32[((_stdout)>>2)];
      var $30=$p;
      var $31=$1;
      var $32=$30;
      var $33=$31;
      var $34=((($32)-($33))|0);
      var $35=$1;
      var $36=_fprintf($29, ((5263820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$34,HEAP32[(((tempInt)+(4))>>2)]=$35,tempInt));
      $comma=0;
      $i=0;
      label = 11; break;
    case 11: 
      var $38=$i;
      var $39=(($38)>>>0) < 10;
      if ($39) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $41=HEAP32[((_stdout)>>2)];
      var $42=$comma;
      var $43=((($42)+(1))|0);
      $comma=$43;
      var $44=(($42)|0)!=0;
      var $45=$44 ? (((5263572)|0)) : (((5273472)|0));
      var $46=$i;
      var $47=((5246372+($46<<3))|0);
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=_fprintf($41, ((5263684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$45,HEAP32[(((tempInt)+(4))>>2)]=$49,tempInt));
      var $51=$i;
      var $52=(($51)|0)!=0;
      if ($52) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $54=$i;
      var $55=((($54)>>>0))%(5);
      var $56=(($55)|0)==0;
      if ($56) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $58=HEAP32[((_stdout)>>2)];
      var $59=$p;
      var $60=$sp;
      var $61=$59;
      var $62=$60;
      var $63=((($61)-($62))|0);
      var $64=((($63)-(1))|0);
      var $65=_fprintf($58, ((5263464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$64,HEAP32[(((tempInt)+(4))>>2)]=((5273472)|0),tempInt));
      $comma=0;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $68=$i;
      var $69=((($68)+(1))|0);
      $i=$69;
      label = 11; break;
    case 17: 
      var $71=HEAP32[((_stdout)>>2)];
      var $72=$1;
      var $73=$p;
      var $74=$1;
      var $75=$73;
      var $76=$74;
      var $77=((($75)-($76))|0);
      var $78=(($72+$77)|0);
      var $79=(($78+2)|0);
      var $80=_fprintf($71, ((5263880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$79,tempInt));
      label = 18; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_docprint["X"]=1;

function _magic_getpath($magicfile, $action) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$magicfile;
      $3=$action;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$2;
      $1=$7;
      label = 10; break;
    case 4: 
      var $9=_getenv(((5272980)|0));
      $2=$9;
      var $10=$2;
      var $11=(($10)|0)!=0;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$2;
      $1=$13;
      label = 10; break;
    case 6: 
      var $15=$3;
      var $16=(($15)|0)==0;
      if ($16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=_get_default_magic();
      var $21 = $18;label = 9; break;
    case 8: 
      var $21 = ((5272744)|0);label = 9; break;
    case 9: 
      var $21;
      $1=$21;
      label = 10; break;
    case 10: 
      var $23=$1;

      return $23;
    default: assert(0, "bad label: " + label);
  }
}


function _get_default_magic() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $home;
      var $hmagicpath=__stackBase__;
      var $st=(__stackBase__)+(4);
      var $2=HEAP32[((5247472)>>2)];
      var $3=(($2)|0)!=0;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=HEAP32[((5247472)>>2)];
      _free($5);
      HEAP32[((5247472)>>2)]=0;
      label = 4; break;
    case 4: 
      var $7=_getenv(((5260960)|0));
      $home=$7;
      var $8=(($7)|0)==0;
      if ($8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=((5272744)|0);
      label = 24; break;
    case 6: 
      var $11=$home;
      var $12=_asprintf($hmagicpath, ((5273384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,tempInt));
      var $13=(($12)|0) < 0;
      if ($13) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=((5272744)|0);
      label = 24; break;
    case 8: 
      var $16=HEAP32[(($hmagicpath)>>2)];
      var $17=_stat($16, $st);
      var $18=(($17)|0)==-1;
      if ($18) { label = 9; break; } else { label = 20; break; }
    case 9: 
      var $20=HEAP32[(($hmagicpath)>>2)];
      _free($20);
      var $21=$home;
      var $22=_asprintf($hmagicpath, ((5272716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$21,tempInt));
      var $23=(($22)|0) < 0;
      if ($23) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=((5272744)|0);
      label = 24; break;
    case 11: 
      var $26=HEAP32[(($hmagicpath)>>2)];
      var $27=_stat($26, $st);
      var $28=(($27)|0)==-1;
      if ($28) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 23; break;
    case 13: 
      var $31=(($st+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 & 61440;
      var $34=(($33)|0)==16384;
      if ($34) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $36=HEAP32[(($hmagicpath)>>2)];
      _free($36);
      var $37=$home;
      var $38=_asprintf($hmagicpath, ((5272116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=((5247452)|0),tempInt));
      var $39=(($38)|0) < 0;
      if ($39) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=((5272744)|0);
      label = 24; break;
    case 16: 
      var $42=HEAP32[(($hmagicpath)>>2)];
      var $43=_access($42, 4);
      var $44=(($43)|0)==-1;
      if ($44) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 23; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $49=HEAP32[(($hmagicpath)>>2)];
      var $50=_asprintf(5247472, ((5271692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$49,HEAP32[(((tempInt)+(4))>>2)]=((5272744)|0),tempInt));
      var $51=(($50)|0) < 0;
      if ($51) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $54=HEAP32[(($hmagicpath)>>2)];
      _free($54);
      var $55=HEAP32[((5247472)>>2)];
      $1=$55;
      label = 24; break;
    case 23: 
      HEAP32[((5247472)>>2)]=0;
      var $57=HEAP32[(($hmagicpath)>>2)];
      _free($57);
      $1=((5272744)|0);
      label = 24; break;
    case 24: 
      var $59=$1;
      STACKTOP = __stackBase__;
      return $59;
    default: assert(0, "bad label: " + label);
  }
}
_get_default_magic["X"]=1;

function _magic_open($flags) {
  var label = 0;


  var $1;
  $1=$flags;
  var $2=$1;
  var $3=_file_ms_alloc($2);

  return $3;
}


function _magic_close($ms) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$ms;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $6=$1;
      _file_ms_free($6);
      label = 5; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _magic_load($ms, $magicfile) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$magicfile;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      var $8=$2;
      var $9=$3;
      var $10=_file_apprentice($8, $9, 0);
      $1=$10;
      label = 5; break;
    case 5: 
      var $12=$1;

      return $12;
    default: assert(0, "bad label: " + label);
  }
}


function _magic_compile($ms, $magicfile) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$magicfile;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      var $8=$2;
      var $9=$3;
      var $10=_file_apprentice($8, $9, 2);
      $1=$10;
      label = 5; break;
    case 5: 
      var $12=$1;

      return $12;
    default: assert(0, "bad label: " + label);
  }
}


function _magic_check($ms, $magicfile) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$magicfile;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      var $8=$2;
      var $9=$3;
      var $10=_file_apprentice($8, $9, 1);
      $1=$10;
      label = 5; break;
    case 5: 
      var $12=$1;

      return $12;
    default: assert(0, "bad label: " + label);
  }
}


function _magic_list($ms, $magicfile) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$magicfile;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      var $8=$2;
      var $9=$3;
      var $10=_file_apprentice($8, $9, 3);
      $1=$10;
      label = 5; break;
    case 5: 
      var $12=$1;

      return $12;
    default: assert(0, "bad label: " + label);
  }
}


function _file_or_fd($ms, $inname, $fd) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rv;
      var $buf;
      var $sb=__stackBase__;
      var $nbytes;
      var $ispipe;
      var $flags;
      var $r;
      $2=$ms;
      $3=$inname;
      $4=$fd;
      $rv=-1;
      $nbytes=0;
      $ispipe=0;
      var $5=_malloc(262209);
      $buf=$5;
      var $6=(($5)|0)==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 46; break;
    case 4: 
      var $9=$2;
      var $10=_file_reset($9);
      var $11=(($10)|0)==-1;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 42; break;
    case 6: 
      var $14=$2;
      var $15=$3;
      var $16=_file_fsmagic($14, $15, $sb);
      if ((($16)|0) == -1) {
        label = 7; break;
      }
      else if ((($16)|0) == 0) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 7: 
      label = 42; break;
    case 8: 
      label = 10; break;
    case 9: 
      $rv=0;
      label = 42; break;
    case 10: 
      var $21=$3;
      var $22=(($21)|0)==0;
      if ($22) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $24=$4;
      var $25=_fstat($24, $sb);
      var $26=(($25)|0)==0;
      if ($26) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $28=(($sb+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 & 61440;
      var $31=(($30)|0)==4096;
      if ($31) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $ispipe=1;
      label = 14; break;
    case 14: 
      label = 25; break;
    case 15: 
      $flags=0;
      var $35=$3;
      var $36=_stat($35, $sb);
      var $37=(($36)|0)==0;
      if ($37) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $39=(($sb+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$40 & 61440;
      var $42=(($41)|0)==4096;
      if ($42) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $44=$flags;
      var $45=$44 | 16384;
      $flags=$45;
      $ispipe=1;
      label = 18; break;
    case 18: 
      var $47=___errno_location();
      HEAP32[(($47)>>2)]=0;
      var $48=$3;
      var $49=$flags;
      var $50=_open($48, $49, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $4=$50;
      var $51=(($50)|0) < 0;
      if ($51) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $53=$2;
      var $54=(($sb+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$3;
      var $57=_unreadable_info($53, $55, $56);
      var $58=(($57)|0)==-1;
      if ($58) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 42; break;
    case 21: 
      $rv=0;
      label = 42; break;
    case 22: 
      var $62=$4;
      var $63=_fcntl($62, 3, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $flags=$63;
      var $64=(($63)|0)!=-1;
      if ($64) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $66=$flags;
      var $67=$66 & -16385;
      $flags=$67;
      var $68=$4;
      var $69=$flags;
      var $70=_fcntl($68, 4, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$69,tempInt));
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $73=$ispipe;
      var $74=(($73)|0)!=0;
      if ($74) { label = 26; break; } else { label = 36; break; }
    case 26: 
      $r=0;
      label = 27; break;
    case 27: 
      var $77=$4;
      var $78=$nbytes;
      var $79=$buf;
      var $80=(($79+$78)|0);
      var $81=$nbytes;
      var $82=(((262144)-($81))|0);
      var $83=_sread($77, $80, $82, 1);
      $r=$83;
      var $84=(($83)|0) > 0;
      if ($84) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $86=$r;
      var $87=$nbytes;
      var $88=((($87)+($86))|0);
      $nbytes=$88;
      var $89=$r;
      var $90=_fpathconf(((5267336)|0), 5);
      var $91=(($89)|0) < (($90)|0);
      if ($91) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      label = 27; break;
    case 31: 
      var $95=$nbytes;
      var $96=(($95)|0)==0;
      if ($96) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $98=$2;
      var $99=(($sb+8)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$3;
      var $102=_unreadable_info($98, $100, $101);
      var $103=(($102)|0)==-1;
      if ($103) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 42; break;
    case 34: 
      $rv=0;
      label = 42; break;
    case 35: 
      label = 39; break;
    case 36: 
      var $108=$4;
      var $109=$buf;
      var $110=_read($108, $109, 262144);
      $nbytes=$110;
      var $111=(($110)|0)==-1;
      if ($111) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $113=$2;
      var $114=___errno_location();
      var $115=HEAP32[(($114)>>2)];
      var $116=$3;
      _file_error($113, $115, ((5266116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$116,tempInt));
      label = 42; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $119=$buf;
      var $120=$nbytes;
      var $121=(($119+$120)|0);
      _memset($121, 0, 65, 1);
      var $122=$2;
      var $123=$4;
      var $124=$3;
      var $125=$buf;
      var $126=$nbytes;
      var $127=_file_buffer($122, $123, $124, $125, $126);
      var $128=(($127)|0)==-1;
      if ($128) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 42; break;
    case 41: 
      $rv=0;
      label = 42; break;
    case 42: 
      var $132=$buf;
      _free($132);
      var $133=$2;
      var $134=$3;
      var $135=$4;
      _close_and_restore($133, $134, $135, $sb);
      var $136=$rv;
      var $137=(($136)|0)==0;
      if ($137) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $139=$2;
      var $140=_file_getbuffer($139);
      var $143 = $140;label = 45; break;
    case 44: 
      var $143 = 0;label = 45; break;
    case 45: 
      var $143;
      $1=$143;
      label = 46; break;
    case 46: 
      var $145=$1;
      STACKTOP = __stackBase__;
      return $145;
    default: assert(0, "bad label: " + label);
  }
}
_file_or_fd["X"]=1;

function _magic_file($ms, $inname) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$inname;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 5; break;
    case 4: 
      var $8=$2;
      var $9=$3;
      var $10=_file_or_fd($8, $9, 1);
      $1=$10;
      label = 5; break;
    case 5: 
      var $12=$1;

      return $12;
    default: assert(0, "bad label: " + label);
  }
}


function _unreadable_info($ms, $md, $file) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ms;
      $3=$md;
      $4=$file;
      var $5=$4;
      var $6=_access($5, 2);
      var $7=(($6)|0)==0;
      if ($7) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $9=$2;
      var $10=_file_printf($9, ((5265076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=(($10)|0)==-1;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 17; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $15=$4;
      var $16=_access($15, 1);
      var $17=(($16)|0)==0;
      if ($17) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $19=$2;
      var $20=_file_printf($19, ((5263804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=(($20)|0)==-1;
      if ($21) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 17; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $25=$3;
      var $26=$25 & 61440;
      var $27=(($26)|0)==32768;
      if ($27) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $29=$2;
      var $30=_file_printf($29, ((5262708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=(($30)|0)==-1;
      if ($31) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=-1;
      label = 17; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $35=$2;
      var $36=_file_printf($35, ((5261936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $37=(($36)|0)==-1;
      if ($37) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=-1;
      label = 17; break;
    case 16: 
      $1=0;
      label = 17; break;
    case 17: 
      var $41=$1;
      STACKTOP = __stackBase__;
      return $41;
    default: assert(0, "bad label: " + label);
  }
}
_unreadable_info["X"]=1;

function _close_and_restore($ms, $name, $fd, $sb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $utbuf=__stackBase__;
      $1=$ms;
      $2=$name;
      $3=$fd;
      $4=$sb;
      var $5=$3;
      var $6=(($5)|0)==1;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 6; break;
    case 4: 
      var $9=$3;
      var $10=_close($9);
      var $11=$1;
      var $12=(($11+32)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 128;
      var $15=(($14)|0)!=0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$utbuf;
      HEAP32[(($17)>>2)]=0; HEAP32[((($17)+(4))>>2)]=0;
      var $18=$4;
      var $19=(($18+32)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($utbuf)|0);
      HEAP32[(($21)>>2)]=$20;
      var $22=$4;
      var $23=(($22+40)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($utbuf+4)|0);
      HEAP32[(($25)>>2)]=$24;
      var $26=$2;
      var $27=_utime($26, $utbuf);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}


function _file_ms_free($ms) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      $1=$ms;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 9; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=(($7)>>>0) < 2;
      if ($8) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $10=$i;
      var $11=$1;
      var $12=(($11)|0);
      var $13=(($12+($10<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      _mlist_free($14);
      label = 7; break;
    case 7: 
      var $16=$i;
      var $17=((($16)+(1))|0);
      $i=$17;
      label = 5; break;
    case 8: 
      var $19=$1;
      var $20=(($19+16)|0);
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      _free($22);
      var $23=$1;
      var $24=(($23+16)|0);
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      _free($26);
      var $27=$1;
      var $28=(($27+8)|0);
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      _free($31);
      var $32=$1;
      var $33=$32;
      _free($33);
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _mlist_free($mlist) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $ml;
      var $next;
      var $mg;
      $1=$mlist;
      var $2=$1;
      var $3=(($2)|0)==0;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 8; break;
    case 4: 
      var $6=$1;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $ml=$8;
      label = 5; break;
    case 5: 
      var $10=$ml;
      var $11=$1;
      var $12=(($10)|0)!=(($11)|0);
      if ($12) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$ml;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      $next=$16;
      var $17=$ml;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      $mg=$19;
      var $20=$mg;
      var $21=$ml;
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$ml;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      _file_delmagic($20, $23, $26);
      var $27=$ml;
      var $28=$27;
      _free($28);
      var $29=$next;
      $ml=$29;
      label = 5; break;
    case 7: 
      var $31=$ml;
      var $32=$31;
      _free($32);
      label = 8; break;
    case 8: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _file_ms_alloc($flags) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $ms;
      var $i;
      var $len;
      $2=$flags;
      var $3=_calloc(1, 128);
      var $4=$3;
      $ms=$4;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 14; break;
    case 4: 
      var $8=$ms;
      var $9=$2;
      var $10=_magic_setflags($8, $9);
      var $11=(($10)|0)==-1;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=___errno_location();
      HEAP32[(($13)>>2)]=22;
      label = 13; break;
    case 6: 
      var $15=$ms;
      var $16=(($15+16)|0);
      var $17=(($16+4)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=$ms;
      var $19=(($18+16)|0);
      var $20=(($19)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$ms;
      var $22=(($21+8)|0);
      var $23=(($22)|0);
      HEAP32[(($23)>>2)]=10;
      $len=160;
      var $24=$len;
      var $25=_malloc($24);
      var $26=$25;
      var $27=$ms;
      var $28=(($27+8)|0);
      var $29=(($28+4)|0);
      HEAP32[(($29)>>2)]=$26;
      var $30=(($26)|0)==0;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 13; break;
    case 8: 
      var $33=$ms;
      var $34=(($33+36)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$ms;
      var $36=(($35+28)|0);
      HEAP32[(($36)>>2)]=-1;
      $i=0;
      label = 9; break;
    case 9: 
      var $38=$i;
      var $39=(($38)>>>0) < 2;
      if ($39) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $41=$i;
      var $42=$ms;
      var $43=(($42)|0);
      var $44=(($43+($41<<2))|0);
      HEAP32[(($44)>>2)]=0;
      label = 11; break;
    case 11: 
      var $46=$i;
      var $47=((($46)+(1))|0);
      $i=$47;
      label = 9; break;
    case 12: 
      var $49=$ms;
      var $50=(($49+40)|0);
      HEAP32[(($50)>>2)]=((5271360)|0);
      var $51=$ms;
      var $52=(($51+44)|0);
      HEAP32[(($52)>>2)]=0;
      var $53=$ms;
      $1=$53;
      label = 14; break;
    case 13: 
      var $55=$ms;
      var $56=$55;
      _free($56);
      $1=0;
      label = 14; break;
    case 14: 
      var $58=$1;

      return $58;
    default: assert(0, "bad label: " + label);
  }
}
_file_ms_alloc["X"]=1;

function _file_apprentice($ms, $fn, $action) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $mfn;
      var $file_err;
      var $errs;
      var $i;
      $2=$ms;
      $3=$fn;
      $4=$action;
      $errs=-1;
      var $5=$3;
      var $6=$4;
      var $7=_magic_getpath($5, $6);
      $3=$7;
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 42; break;
    case 4: 
      _init_file_tables();
      var $11=$3;
      var $12=_strdup($11);
      $mfn=$12;
      var $13=(($12)|0)==0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$2;
      var $16=$3;
      var $17=_strlen($16);
      _file_oomem($15, $17);
      $1=-1;
      label = 42; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $20=$i;
      var $21=(($20)>>>0) < 2;
      if ($21) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $23=$i;
      var $24=$2;
      var $25=(($24)|0);
      var $26=(($25+($23<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      _mlist_free($27);
      var $28=_mlist_alloc();
      var $29=$i;
      var $30=$2;
      var $31=(($30)|0);
      var $32=(($31+($29<<2))|0);
      HEAP32[(($32)>>2)]=$28;
      var $33=(($28)|0)==0;
      if ($33) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $35=$2;
      _file_oomem($35, 20);
      var $36=$i;
      var $37=(($36)|0)!=0;
      if ($37) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $39=$i;
      var $40=((($39)-(1))|0);
      $i=$40;
      label = 11; break;
    case 11: 
      var $42=$i;
      var $43=$2;
      var $44=(($43)|0);
      var $45=(($44+($42<<2))|0);
      var $46=HEAP32[(($45)>>2)];
      _mlist_free($46);
      label = 12; break;
    case 12: 
      var $48=$i;
      var $49=(($48)|0)!=0;
      if ($49) { label = 11; break; } else { label = 13; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $52=$mfn;
      _free($52);
      $1=-1;
      label = 42; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $55=$i;
      var $56=((($55)+(1))|0);
      $i=$56;
      label = 7; break;
    case 17: 
      var $58=$mfn;
      $3=$58;
      label = 18; break;
    case 18: 
      var $60=$3;
      var $61=(($60)|0)!=0;
      if ($61) { label = 19; break; } else { label = 27; break; }
    case 19: 
      var $63=$3;
      var $64=_strchr($63, 58);
      $p=$64;
      var $65=$p;
      var $66=(($65)|0)!=0;
      if ($66) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $68=$p;
      var $69=(($68+1)|0);
      $p=$69;
      HEAP8[($68)]=0;
      label = 21; break;
    case 21: 
      var $71=$3;
      var $72=HEAP8[($71)];
      var $73=(($72 << 24) >> 24);
      var $74=(($73)|0)==0;
      if ($74) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 27; break;
    case 23: 
      var $77=$2;
      var $78=$3;
      var $79=$4;
      var $80=_apprentice_1($77, $78, $79);
      $file_err=$80;
      var $81=$errs;
      var $82=$file_err;
      var $83=(($81)|0) > (($82)|0);
      if ($83) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $85=$errs;
      var $89 = $85;label = 26; break;
    case 25: 
      var $87=$file_err;
      var $89 = $87;label = 26; break;
    case 26: 
      var $89;
      $errs=$89;
      var $90=$p;
      $3=$90;
      label = 18; break;
    case 27: 
      var $92=$mfn;
      _free($92);
      var $93=$errs;
      var $94=(($93)|0)==-1;
      if ($94) { label = 28; break; } else { label = 33; break; }
    case 28: 
      $i=0;
      label = 29; break;
    case 29: 
      var $97=$i;
      var $98=(($97)>>>0) < 2;
      if ($98) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $100=$i;
      var $101=$2;
      var $102=(($101)|0);
      var $103=(($102+($100<<2))|0);
      var $104=HEAP32[(($103)>>2)];
      _mlist_free($104);
      var $105=$i;
      var $106=$2;
      var $107=(($106)|0);
      var $108=(($107+($105<<2))|0);
      HEAP32[(($108)>>2)]=0;
      label = 31; break;
    case 31: 
      var $110=$i;
      var $111=((($110)+(1))|0);
      $i=$111;
      label = 29; break;
    case 32: 
      var $113=$2;
      _file_error($113, 0, ((5272364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 42; break;
    case 33: 
      var $115=$4;
      var $116=(($115)|0)==0;
      if ($116) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $1=0;
      label = 42; break;
    case 35: 
      $i=0;
      label = 36; break;
    case 36: 
      var $120=$i;
      var $121=(($120)>>>0) < 2;
      if ($121) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $123=$i;
      var $124=$2;
      var $125=(($124)|0);
      var $126=(($125+($123<<2))|0);
      var $127=HEAP32[(($126)>>2)];
      _mlist_free($127);
      var $128=$i;
      var $129=$2;
      var $130=(($129)|0);
      var $131=(($130+($128<<2))|0);
      HEAP32[(($131)>>2)]=0;
      label = 38; break;
    case 38: 
      var $133=$i;
      var $134=((($133)+(1))|0);
      $i=$134;
      label = 36; break;
    case 39: 
      var $136=$4;
      if ((($136)|0) == 2 || (($136)|0) == 1 || (($136)|0) == 3) {
        label = 40; break;
      }
      else {
      label = 41; break;
      }
      
    case 40: 
      $1=0;
      label = 42; break;
    case 41: 
      var $139=$2;
      var $140=$4;
      _file_error($139, 0, ((5269088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$140,tempInt));
      $1=-1;
      label = 42; break;
    case 42: 
      var $142=$1;
      STACKTOP = __stackBase__;
      return $142;
    default: assert(0, "bad label: " + label);
  }
}
_file_apprentice["X"]=1;

function _init_file_tables() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p;
      var $1=HEAP32[((5247104)>>2)];
      var $2=(($1)|0)!=0;
      if ($2) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 11; break;
    case 4: 
      var $5=HEAP32[((5247104)>>2)];
      var $6=((($5)+(1))|0);
      HEAP32[((5247104)>>2)]=$6;
      $p=((5243080)|0);
      label = 5; break;
    case 5: 
      var $8=$p;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)!=0;
      if ($11) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $13=$p;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0) < 47;
      if ($16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      ___assert_func(((5268484)|0), 257, ((5273972)|0), ((5261192)|0));
      label = 9; break;
    case 9: 
      var $20=$p;
      var $21=(($20)|0);
      var $22=(($21)|0);
      var $23=$p;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((5249720+($25<<2))|0);
      HEAP32[(($26)>>2)]=$22;
      var $27=$p;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$p;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((5249920+($32<<2))|0);
      HEAP32[(($33)>>2)]=$29;
      label = 10; break;
    case 10: 
      var $35=$p;
      var $36=(($35+28)|0);
      $p=$36;
      label = 5; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _mlist_alloc() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $mlist;
      var $2=_malloc(20);
      var $3=$2;
      $mlist=$3;
      var $4=(($3)|0)==0;
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 5; break;
    case 4: 
      var $7=$mlist;
      var $8=$mlist;
      var $9=(($8+16)|0);
      HEAP32[(($9)>>2)]=$7;
      var $10=$mlist;
      var $11=(($10+12)|0);
      HEAP32[(($11)>>2)]=$7;
      var $12=$mlist;
      $1=$12;
      label = 5; break;
    case 5: 
      var $14=$1;

      return $14;
    default: assert(0, "bad label: " + label);
  }
}


function _apprentice_1($ms, $fn, $action) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $magic=__stackBase__;
      var $nmagic=(__stackBase__)+(8);
      var $ml;
      var $rv;
      var $mapped;
      var $i;
      $2=$ms;
      $3=$fn;
      $4=$action;
      var $5=$magic;
      HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0;
      var $6=$nmagic;
      HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0;
      $rv=-1;
      var $7=HEAP32[((5246608)>>2)];
      var $8=(($7)|0)!=232;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$2;
      _file_error($10, 0, ((5264836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=232,HEAP32[(((tempInt)+(4))>>2)]=232,tempInt));
      $1=-1;
      label = 31; break;
    case 4: 
      var $12=$4;
      var $13=(($12)|0)==2;
      if ($13) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $15=$2;
      var $16=(($magic)|0);
      var $17=(($nmagic)|0);
      var $18=$3;
      var $19=$4;
      var $20=_apprentice_load($15, $16, $17, $18, $19);
      $rv=$20;
      var $21=$rv;
      var $22=(($21)|0)!=0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 31; break;
    case 7: 
      var $25=$2;
      var $26=(($magic)|0);
      var $27=(($nmagic)|0);
      var $28=$3;
      var $29=_apprentice_compile($25, $26, $27, $28);
      $rv=$29;
      var $30=$rv;
      $1=$30;
      label = 31; break;
    case 8: 
      var $32=$2;
      var $33=(($magic)|0);
      var $34=(($nmagic)|0);
      var $35=$3;
      var $36=_apprentice_map($32, $33, $34, $35);
      $rv=$36;
      var $37=(($36)|0) < 0;
      if ($37) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $39=$rv;
      var $40=(($39)|0)==-2;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=-1;
      label = 31; break;
    case 11: 
      var $43=$2;
      var $44=(($43+32)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 & 64;
      var $47=(($46)|0)!=0;
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $49=$2;
      var $50=$3;
      _file_magwarn($49, ((5263652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$50,tempInt));
      label = 13; break;
    case 13: 
      var $52=$2;
      var $53=(($magic)|0);
      var $54=(($nmagic)|0);
      var $55=$3;
      var $56=$4;
      var $57=_apprentice_load($52, $53, $54, $55, $56);
      $rv=$57;
      var $58=$rv;
      var $59=(($58)|0)!=0;
      if ($59) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=-1;
      label = 31; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $63=$rv;
      $mapped=$63;
      $i=0;
      label = 17; break;
    case 17: 
      var $65=$i;
      var $66=(($65)>>>0) < 2;
      if ($66) { label = 18; break; } else { label = 24; break; }
    case 18: 
      var $68=$i;
      var $69=(($magic+($68<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0)==0;
      if ($71) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 23; break;
    case 20: 
      var $74=$i;
      var $75=$2;
      var $76=(($75)|0);
      var $77=(($76+($74<<2))|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$i;
      var $80=(($magic+($79<<2))|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$i;
      var $83=(($nmagic+($82<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$mapped;
      var $86=_add_mlist($78, $81, $84, $85);
      var $87=(($86)|0)==-1;
      if ($87) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $89=$i;
      var $90=(($89)|0)==1;
      var $91=$90 ? 0 : 1;
      $i=$91;
      var $92=$i;
      var $93=(($magic+($92<<2))|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$mapped;
      var $96=$i;
      var $97=(($nmagic+($96<<2))|0);
      var $98=HEAP32[(($97)>>2)];
      _file_delmagic($94, $95, $98);
      var $99=$2;
      _file_oomem($99, 20);
      $1=-1;
      label = 31; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $102=$i;
      var $103=((($102)+(1))|0);
      $i=$103;
      label = 17; break;
    case 24: 
      var $105=$4;
      var $106=(($105)|0)==3;
      if ($106) { label = 25; break; } else { label = 30; break; }
    case 25: 
      $i=0;
      label = 26; break;
    case 26: 
      var $109=$i;
      var $110=(($109)>>>0) < 2;
      if ($110) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $112=$i;
      var $113=_printf(((5262544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$112,tempInt));
      var $114=$i;
      var $115=$2;
      var $116=(($115)|0);
      var $117=(($116+($114<<2))|0);
      var $118=HEAP32[(($117)>>2)];
      _apprentice_list($118, 32);
      var $119=_printf(((5261692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $120=$i;
      var $121=$2;
      var $122=(($121)|0);
      var $123=(($122+($120<<2))|0);
      var $124=HEAP32[(($123)>>2)];
      _apprentice_list($124, 64);
      label = 28; break;
    case 28: 
      var $126=$i;
      var $127=((($126)+(1))|0);
      $i=$127;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 
      $1=0;
      label = 31; break;
    case 31: 
      var $131=$1;
      STACKTOP = __stackBase__;
      return $131;
    default: assert(0, "bad label: " + label);
  }
}
_apprentice_1["X"]=1;

function _file_delmagic($p, $type, $entries) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$type;
      $3=$entries;
      var $4=$1;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 9; break;
    case 4: 
      var $8=$2;
      if ((($8)|0) == 2) {
        label = 5; break;
      }
      else if ((($8)|0) == 1) {
        label = 6; break;
      }
      else if ((($8)|0) == 0) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $11=$1;
      var $12=((($11)-(232))|0);
      $1=$12;
      label = 7; break;
    case 7: 
      var $14=$1;
      var $15=$14;
      _free($15);
      label = 9; break;
    case 8: 
      _abort();
      throw "Reached an unreachable!"
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _file_signextend($ms, $m, $v$0, $v$1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1=__stackBase__;
      var $2;
      var $3;
      var $4=(__stackBase__)+(8);
      $2=$ms;
      $3=$m;
      var $st$6$0=(($4)|0);
      HEAP32[(($st$6$0)>>2)]=$v$0;
      var $st$6$1=(($4+4)|0);
      HEAP32[(($st$6$1)>>2)]=$v$1;
      var $5=$3;
      var $6=(($5+2)|0);
      var $7=HEAP8[($6)];
      var $8=(($7)&255);
      var $9=$8 & 8;
      var $10=(($9)|0)!=0;
      if ($10) { label = 13; break; } else { label = 3; break; }
    case 3: 
      var $12=$3;
      var $13=(($12+6)|0);
      var $14=HEAP8[($13)];
      var $15=(($14)&255);
      if ((($15)|0) == 1) {
        label = 4; break;
      }
      else if ((($15)|0) == 2 || (($15)|0) == 7 || (($15)|0) == 10) {
        label = 5; break;
      }
      else if ((($15)|0) == 6 || (($15)|0) == 9 || (($15)|0) == 12 || (($15)|0) == 21 || (($15)|0) == 14 || (($15)|0) == 15 || (($15)|0) == 16 || (($15)|0) == 22 || (($15)|0) == 4 || (($15)|0) == 8 || (($15)|0) == 11 || (($15)|0) == 23 || (($15)|0) == 33 || (($15)|0) == 34 || (($15)|0) == 35) {
        label = 6; break;
      }
      else if ((($15)|0) == 24 || (($15)|0) == 26 || (($15)|0) == 25 || (($15)|0) == 27 || (($15)|0) == 30 || (($15)|0) == 42 || (($15)|0) == 29 || (($15)|0) == 32 || (($15)|0) == 44 || (($15)|0) == 28 || (($15)|0) == 31 || (($15)|0) == 43 || (($15)|0) == 36 || (($15)|0) == 37 || (($15)|0) == 38) {
        label = 7; break;
      }
      else if ((($15)|0) == 5 || (($15)|0) == 13 || (($15)|0) == 18 || (($15)|0) == 19 || (($15)|0) == 17 || (($15)|0) == 20 || (($15)|0) == 3 || (($15)|0) == 41 || (($15)|0) == 45 || (($15)|0) == 46) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
      
    case 4: 
      var $st$0$0=(($4)|0);
      var $17$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $17$1=HEAP32[(($st$0$1)>>2)];
      var $18$0=$17$0;
      var $18=$18$0&255;
      var $19$0=$18;
      var $19$1=((($18 << 24) >> 24) < 0 ? -1 : 0);
      var $st$8$0=(($4)|0);
      HEAP32[(($st$8$0)>>2)]=$19$0;
      var $st$8$1=(($4+4)|0);
      HEAP32[(($st$8$1)>>2)]=$19$1;
      label = 12; break;
    case 5: 
      var $st$0$0=(($4)|0);
      var $21$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $21$1=HEAP32[(($st$0$1)>>2)];
      var $22$0=$21$0;
      var $22=$22$0&65535;
      var $23$0=$22;
      var $23$1=((($22 << 16) >> 16) < 0 ? -1 : 0);
      var $st$8$0=(($4)|0);
      HEAP32[(($st$8$0)>>2)]=$23$0;
      var $st$8$1=(($4+4)|0);
      HEAP32[(($st$8$1)>>2)]=$23$1;
      label = 12; break;
    case 6: 
      var $st$0$0=(($4)|0);
      var $25$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $25$1=HEAP32[(($st$0$1)>>2)];
      var $26$0=$25$0;
      var $26=$26$0;
      var $27$0=$26;
      var $27$1=((($26)|0) < 0 ? -1 : 0);
      var $st$8$0=(($4)|0);
      HEAP32[(($st$8$0)>>2)]=$27$0;
      var $st$8$1=(($4+4)|0);
      HEAP32[(($st$8$1)>>2)]=$27$1;
      label = 12; break;
    case 7: 
      var $st$0$0=(($4)|0);
      var $29$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $29$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($4)|0);
      HEAP32[(($st$4$0)>>2)]=$29$0;
      var $st$4$1=(($4+4)|0);
      HEAP32[(($st$4$1)>>2)]=$29$1;
      label = 12; break;
    case 8: 
      label = 12; break;
    case 9: 
      var $32=$2;
      var $33=(($32+32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 & 64;
      var $36=(($35)|0)!=0;
      if ($36) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $38=$2;
      var $39=$3;
      var $40=(($39+6)|0);
      var $41=HEAP8[($40)];
      var $42=(($41)&255);
      _file_magwarn($38, ((5267188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$42,tempInt));
      label = 11; break;
    case 11: 
      var $$etemp$0$0=-1;
      var $$etemp$0$1=0;
      var $st$2$0=(($1)|0);
      HEAP32[(($st$2$0)>>2)]=$$etemp$0$0;
      var $st$2$1=(($1+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $st$0$0=(($4)|0);
      var $46$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($4+4)|0);
      var $46$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($1)|0);
      HEAP32[(($st$4$0)>>2)]=$46$0;
      var $st$4$1=(($1+4)|0);
      HEAP32[(($st$4$1)>>2)]=$46$1;
      label = 14; break;
    case 14: 
      var $st$0$0=(($1)|0);
      var $48$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($1+4)|0);
      var $48$1=HEAP32[(($st$0$1)>>2)];
      STACKTOP = __stackBase__;
      return (tempRet0=$48$1,$48$0);
    default: assert(0, "bad label: " + label);
  }
}
_file_signextend["X"]=1;

function _file_showstr($fp, $s, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      $1=$fp;
      $2=$s;
      $3=$len;
      label = 3; break;
    case 3: 
      var $5=$3;
      var $6=(($5)|0)==-1;
      if ($6) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $8=$2;
      var $9=(($8+1)|0);
      $2=$9;
      var $10=HEAP8[($8)];
      $c=$10;
      var $11=$c;
      var $12=(($11 << 24) >> 24);
      var $13=(($12)|0)==0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 24; break;
    case 6: 
      label = 10; break;
    case 7: 
      var $17=$3;
      var $18=((($17)-(1))|0);
      $3=$18;
      var $19=(($17)|0)==0;
      if ($19) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 24; break;
    case 9: 
      var $22=$2;
      var $23=(($22+1)|0);
      $2=$23;
      var $24=HEAP8[($22)];
      $c=$24;
      label = 10; break;
    case 10: 
      var $26=$c;
      var $27=(($26 << 24) >> 24);
      var $28=(($27)|0) >= 32;
      if ($28) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $30=$c;
      var $31=(($30 << 24) >> 24);
      var $32=(($31)|0) <= 126;
      if ($32) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $34=$c;
      var $35=(($34 << 24) >> 24);
      var $36=$1;
      var $37=_fputc($35, $36);
      label = 23; break;
    case 13: 
      var $39=$1;
      var $40=_fputc(92, $39);
      var $41=$c;
      var $42=(($41 << 24) >> 24);
      if ((($42)|0) == 7) {
        label = 14; break;
      }
      else if ((($42)|0) == 8) {
        label = 15; break;
      }
      else if ((($42)|0) == 12) {
        label = 16; break;
      }
      else if ((($42)|0) == 10) {
        label = 17; break;
      }
      else if ((($42)|0) == 13) {
        label = 18; break;
      }
      else if ((($42)|0) == 9) {
        label = 19; break;
      }
      else if ((($42)|0) == 11) {
        label = 20; break;
      }
      else {
      label = 21; break;
      }
      
    case 14: 
      var $44=$1;
      var $45=_fputc(97, $44);
      label = 22; break;
    case 15: 
      var $47=$1;
      var $48=_fputc(98, $47);
      label = 22; break;
    case 16: 
      var $50=$1;
      var $51=_fputc(102, $50);
      label = 22; break;
    case 17: 
      var $53=$1;
      var $54=_fputc(110, $53);
      label = 22; break;
    case 18: 
      var $56=$1;
      var $57=_fputc(114, $56);
      label = 22; break;
    case 19: 
      var $59=$1;
      var $60=_fputc(116, $59);
      label = 22; break;
    case 20: 
      var $62=$1;
      var $63=_fputc(118, $62);
      label = 22; break;
    case 21: 
      var $65=$1;
      var $66=$c;
      var $67=(($66 << 24) >> 24);
      var $68=$67 & 255;
      var $69=_fprintf($65, ((5266000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$68,tempInt));
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 3; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_file_showstr["X"]=1;

function _file_magicfind($ms, $name, $v) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $j;
      var $mlist;
      var $ml;
      var $ma;
      var $nma;
      $2=$ms;
      $3=$name;
      $4=$v;
      var $5=$2;
      var $6=(($5)|0);
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      $mlist=$8;
      var $9=$mlist;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      $ml=$11;
      label = 3; break;
    case 3: 
      var $13=$ml;
      var $14=$mlist;
      var $15=(($13)|0)!=(($14)|0);
      if ($15) { label = 4; break; } else { label = 20; break; }
    case 4: 
      var $17=$ml;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      $ma=$19;
      var $20=$ml;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      $nma=$22;
      $i=0;
      label = 5; break;
    case 5: 
      var $24=$i;
      var $25=$nma;
      var $26=(($24)>>>0) < (($25)>>>0);
      if ($26) { label = 6; break; } else { label = 18; break; }
    case 6: 
      var $28=$i;
      var $29=$ma;
      var $30=(($29+($28)*(232))|0);
      var $31=(($30+6)|0);
      var $32=HEAP8[($31)];
      var $33=(($32)&255);
      var $34=(($33)|0)!=45;
      if ($34) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 17; break;
    case 8: 
      var $37=$i;
      var $38=$ma;
      var $39=(($38+($37)*(232))|0);
      var $40=(($39+32)|0);
      var $41=$40;
      var $42=(($41)|0);
      var $43=$3;
      var $44=_strcmp($42, $43);
      var $45=(($44)|0)==0;
      if ($45) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $47=$i;
      var $48=$ma;
      var $49=(($48+($47)*(232))|0);
      var $50=$4;
      var $51=(($50)|0);
      HEAP32[(($51)>>2)]=$49;
      var $52=$i;
      var $53=((($52)+(1))|0);
      $j=$53;
      label = 10; break;
    case 10: 
      var $55=$j;
      var $56=$nma;
      var $57=(($55)>>>0) < (($56)>>>0);
      if ($57) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $59=$j;
      var $60=$ma;
      var $61=(($60+($59)*(232))|0);
      var $62=(($61)|0);
      var $63=HEAP16[(($62)>>1)];
      var $64=(($63)&65535);
      var $65=(($64)|0)==0;
      if ($65) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $69=$j;
      var $70=((($69)+(1))|0);
      $j=$70;
      label = 10; break;
    case 15: 
      var $72=$j;
      var $73=$i;
      var $74=((($72)-($73))|0);
      var $75=$4;
      var $76=(($75+4)|0);
      HEAP32[(($76)>>2)]=$74;
      $1=0;
      label = 21; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $79=$i;
      var $80=((($79)+(1))|0);
      $i=$80;
      label = 5; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $83=$ml;
      var $84=(($83+12)|0);
      var $85=HEAP32[(($84)>>2)];
      $ml=$85;
      label = 3; break;
    case 20: 
      $1=-1;
      label = 21; break;
    case 21: 
      var $88=$1;

      return $88;
    default: assert(0, "bad label: " + label);
  }
}
_file_magicfind["X"]=1;

function _file_pstring_length_size($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 3968;
      if ((($8)|0) == 128) {
        label = 3; break;
      }
      else if ((($8)|0) == 512 || (($8)|0) == 256) {
        label = 4; break;
      }
      else if ((($8)|0) == 2048 || (($8)|0) == 1024) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
      
    case 3: 
      $1=1;
      label = 7; break;
    case 4: 
      $1=2;
      label = 7; break;
    case 5: 
      $1=4;
      label = 7; break;
    case 6: 
      _abort();
      throw "Reached an unreachable!"
    case 7: 
      var $14=$1;

      return $14;
    default: assert(0, "bad label: " + label);
  }
}


function _file_pstring_get_length($m, $s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $len;
      $1=$m;
      $2=$s;
      $len=0;
      var $3=$1;
      var $4=(($3+24)|0);
      var $5=$4;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 3968;
      if ((($8)|0) == 128) {
        label = 3; break;
      }
      else if ((($8)|0) == 512) {
        label = 4; break;
      }
      else if ((($8)|0) == 256) {
        label = 5; break;
      }
      else if ((($8)|0) == 2048) {
        label = 6; break;
      }
      else if ((($8)|0) == 1024) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 3: 
      var $10=$2;
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      $len=$12;
      label = 9; break;
    case 4: 
      var $14=$2;
      var $15=(($14+1)|0);
      var $16=HEAP8[($15)];
      var $17=(($16 << 24) >> 24);
      var $18=$17 << 8;
      var $19=$2;
      var $20=(($19)|0);
      var $21=HEAP8[($20)];
      var $22=(($21 << 24) >> 24);
      var $23=$18 | $22;
      $len=$23;
      label = 9; break;
    case 5: 
      var $25=$2;
      var $26=(($25)|0);
      var $27=HEAP8[($26)];
      var $28=(($27 << 24) >> 24);
      var $29=$28 << 8;
      var $30=$2;
      var $31=(($30+1)|0);
      var $32=HEAP8[($31)];
      var $33=(($32 << 24) >> 24);
      var $34=$29 | $33;
      $len=$34;
      label = 9; break;
    case 6: 
      var $36=$2;
      var $37=(($36+3)|0);
      var $38=HEAP8[($37)];
      var $39=(($38 << 24) >> 24);
      var $40=$39 << 24;
      var $41=$2;
      var $42=(($41+2)|0);
      var $43=HEAP8[($42)];
      var $44=(($43 << 24) >> 24);
      var $45=$44 << 16;
      var $46=$40 | $45;
      var $47=$2;
      var $48=(($47+1)|0);
      var $49=HEAP8[($48)];
      var $50=(($49 << 24) >> 24);
      var $51=$50 << 8;
      var $52=$46 | $51;
      var $53=$2;
      var $54=(($53)|0);
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      var $57=$52 | $56;
      $len=$57;
      label = 9; break;
    case 7: 
      var $59=$2;
      var $60=(($59)|0);
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$62 << 24;
      var $64=$2;
      var $65=(($64+1)|0);
      var $66=HEAP8[($65)];
      var $67=(($66 << 24) >> 24);
      var $68=$67 << 16;
      var $69=$63 | $68;
      var $70=$2;
      var $71=(($70+2)|0);
      var $72=HEAP8[($71)];
      var $73=(($72 << 24) >> 24);
      var $74=$73 << 8;
      var $75=$69 | $74;
      var $76=$2;
      var $77=(($76+3)|0);
      var $78=HEAP8[($77)];
      var $79=(($78 << 24) >> 24);
      var $80=$75 | $79;
      $len=$80;
      label = 9; break;
    case 8: 
      _abort();
      throw "Reached an unreachable!"
    case 9: 
      var $83=$1;
      var $84=(($83+24)|0);
      var $85=$84;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & 4096;
      var $89=(($88)|0)!=0;
      if ($89) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $91=$1;
      var $92=_file_pstring_length_size($91);
      var $93=$len;
      var $94=((($93)-($92))|0);
      $len=$94;
      label = 11; break;
    case 11: 
      var $96=$len;

      return $96;
    default: assert(0, "bad label: " + label);
  }
}
_file_pstring_get_length["X"]=1;

function _apprentice_load($ms, $magicp, $nmagicp, $fn, $action) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $errs=__stackBase__;
      var $mentry=(__stackBase__)+(4);
      var $mentrycount=(__stackBase__)+(12);
      var $i;
      var $j;
      var $files;
      var $maxfiles;
      var $filearr;
      var $mfn=(__stackBase__)+(20);
      var $st=(__stackBase__)+(24);
      var $dir;
      var $d;
      var $mlen;
      $2=$ms;
      $3=$magicp;
      $4=$nmagicp;
      $5=$fn;
      $6=$action;
      HEAP32[(($errs)>>2)]=0;
      var $7=$mentry;
      HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0;
      var $8=$mentrycount;
      HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0;
      $files=0;
      $maxfiles=0;
      $filearr=0;
      var $9=$2;
      var $10=(($9+32)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 | 64;
      HEAP32[(($10)>>2)]=$12;
      var $13=$6;
      var $14=(($13)|0)==1;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=HEAP32[((_stderr)>>2)];
      var $17=_fprintf($16, ((5267904)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5243040)|0),tempInt));
      label = 4; break;
    case 4: 
      var $19=$5;
      var $20=_stat($19, $st);
      var $21=(($20)|0)==0;
      if ($21) { label = 5; break; } else { label = 25; break; }
    case 5: 
      var $23=(($st+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 61440;
      var $26=(($25)|0)==16384;
      if ($26) { label = 6; break; } else { label = 25; break; }
    case 6: 
      var $28=$5;
      var $29=_opendir($28);
      $dir=$29;
      var $30=$dir;
      var $31=(($30)|0)!=0;
      if ($31) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $33=HEAP32[(($errs)>>2)];
      var $34=((($33)+(1))|0);
      HEAP32[(($errs)>>2)]=$34;
      label = 40; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $37=$dir;
      var $38=_readdir($37);
      $d=$38;
      var $39=(($38)|0)!=0;
      if ($39) { label = 10; break; } else { label = 20; break; }
    case 10: 
      var $41=$5;
      var $42=$d;
      var $43=(($42+4)|0);
      var $44=(($43)|0);
      var $45=_asprintf($mfn, ((5267792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,HEAP32[(((tempInt)+(4))>>2)]=$44,tempInt));
      var $46=(($45)|0) < 0;
      if ($46) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $48=$2;
      var $49=$5;
      var $50=_strlen($49);
      var $51=$d;
      var $52=(($51+4)|0);
      var $53=(($52)|0);
      var $54=_strlen($53);
      var $55=((($50)+($54))|0);
      var $56=((($55)+(2))|0);
      _file_oomem($48, $56);
      var $57=HEAP32[(($errs)>>2)];
      var $58=((($57)+(1))|0);
      HEAP32[(($errs)>>2)]=$58;
      var $59=$dir;
      var $60=_closedir($59);
      label = 40; break;
    case 12: 
      var $62=HEAP32[(($mfn)>>2)];
      var $63=_stat($62, $st);
      var $64=(($63)|0)==-1;
      if ($64) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $66=(($st+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 61440;
      var $69=(($68)|0)==32768;
      if ($69) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $71=HEAP32[(($mfn)>>2)];
      _free($71);
      label = 9; break;
    case 15: 
      var $73=$files;
      var $74=$maxfiles;
      var $75=(($73)>>>0) >= (($74)>>>0);
      if ($75) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $77=$maxfiles;
      var $78=((($77)+(1))|0);
      var $79=((($78<<1))|0);
      $maxfiles=$79;
      var $80=$maxfiles;
      var $81=((($80<<2))|0);
      $mlen=$81;
      var $82=$filearr;
      var $83=$82;
      var $84=$mlen;
      var $85=_realloc($83, $84);
      var $86=$85;
      $filearr=$86;
      var $87=(($86)|0)==0;
      if ($87) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $89=$2;
      var $90=$mlen;
      _file_oomem($89, $90);
      var $91=HEAP32[(($mfn)>>2)];
      _free($91);
      var $92=$dir;
      var $93=_closedir($92);
      var $94=HEAP32[(($errs)>>2)];
      var $95=((($94)+(1))|0);
      HEAP32[(($errs)>>2)]=$95;
      label = 40; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $98=HEAP32[(($mfn)>>2)];
      var $99=$files;
      var $100=((($99)+(1))|0);
      $files=$100;
      var $101=$filearr;
      var $102=(($101+($99<<2))|0);
      HEAP32[(($102)>>2)]=$98;
      label = 9; break;
    case 20: 
      var $104=$dir;
      var $105=_closedir($104);
      var $106=$filearr;
      var $107=$106;
      var $108=$files;
      _qsort($107, $108, 4, 12);
      $i=0;
      label = 21; break;
    case 21: 
      var $110=$i;
      var $111=$files;
      var $112=(($110)>>>0) < (($111)>>>0);
      if ($112) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $114=$2;
      var $115=$6;
      var $116=$i;
      var $117=$filearr;
      var $118=(($117+($116<<2))|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($mentry)|0);
      var $121=(($mentrycount)|0);
      _load_1($114, $115, $119, $errs, $120, $121);
      var $122=$i;
      var $123=$filearr;
      var $124=(($123+($122<<2))|0);
      var $125=HEAP32[(($124)>>2)];
      _free($125);
      label = 23; break;
    case 23: 
      var $127=$i;
      var $128=((($127)+(1))|0);
      $i=$128;
      label = 21; break;
    case 24: 
      var $130=$filearr;
      var $131=$130;
      _free($131);
      label = 26; break;
    case 25: 
      var $133=$2;
      var $134=$6;
      var $135=$5;
      var $136=(($mentry)|0);
      var $137=(($mentrycount)|0);
      _load_1($133, $134, $135, $errs, $136, $137);
      label = 26; break;
    case 26: 
      var $139=HEAP32[(($errs)>>2)];
      var $140=(($139)|0)!=0;
      if ($140) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 40; break;
    case 28: 
      $j=0;
      label = 29; break;
    case 29: 
      var $144=$j;
      var $145=(($144)>>>0) < 2;
      if ($145) { label = 30; break; } else { label = 39; break; }
    case 30: 
      $i=0;
      label = 31; break;
    case 31: 
      var $148=$i;
      var $149=$j;
      var $150=(($mentrycount+($149<<2))|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($148)>>>0) < (($151)>>>0);
      if ($152) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $154=$i;
      var $155=$j;
      var $156=(($mentry+($155<<2))|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+($154)*(12))|0);
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160)|0);
      var $162=HEAP16[(($161)>>1)];
      var $163=(($162)&65535);
      var $164=(($163)|0)!=0;
      if ($164) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $166=$i;
      var $167=((($166)+(1))|0);
      $i=$167;
      label = 31; break;
    case 34: 
      var $169=$2;
      var $170=$j;
      var $171=(($mentry+($170<<2))|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$j;
      var $174=(($mentrycount+($173<<2))|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$i;
      var $177=_set_text_binary($169, $172, $175, $176);
      $i=$177;
      label = 31; break;
    case 35: 
      var $179=$j;
      var $180=(($mentry+($179<<2))|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=$181;
      var $183=$j;
      var $184=(($mentrycount+($183<<2))|0);
      var $185=HEAP32[(($184)>>2)];
      _qsort($182, $185, 12, 4);
      var $186=$2;
      var $187=$j;
      var $188=(($mentry+($187<<2))|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$j;
      var $191=(($mentrycount+($190<<2))|0);
      var $192=HEAP32[(($191)>>2)];
      _set_last_default($186, $189, $192);
      var $193=$2;
      var $194=$j;
      var $195=(($mentry+($194<<2))|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=$j;
      var $198=(($mentrycount+($197<<2))|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=$j;
      var $201=$3;
      var $202=(($201+($200<<2))|0);
      var $203=$j;
      var $204=$4;
      var $205=(($204+($203<<2))|0);
      var $206=_coalesce_entries($193, $196, $199, $202, $205);
      var $207=(($206)|0)==-1;
      if ($207) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $209=HEAP32[(($errs)>>2)];
      var $210=((($209)+(1))|0);
      HEAP32[(($errs)>>2)]=$210;
      label = 40; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $213=$j;
      var $214=((($213)+(1))|0);
      $j=$214;
      label = 29; break;
    case 39: 
      label = 40; break;
    case 40: 
      $j=0;
      label = 41; break;
    case 41: 
      var $218=$j;
      var $219=(($218)>>>0) < 2;
      if ($219) { label = 42; break; } else { label = 44; break; }
    case 42: 
      var $221=$j;
      var $222=(($mentry+($221<<2))|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=$j;
      var $225=(($mentrycount+($224<<2))|0);
      var $226=HEAP32[(($225)>>2)];
      _magic_entry_free($223, $226);
      label = 43; break;
    case 43: 
      var $228=$j;
      var $229=((($228)+(1))|0);
      $j=$229;
      label = 41; break;
    case 44: 
      var $231=HEAP32[(($errs)>>2)];
      var $232=(($231)|0)!=0;
      if ($232) { label = 45; break; } else { label = 52; break; }
    case 45: 
      $j=0;
      label = 46; break;
    case 46: 
      var $235=$j;
      var $236=(($235)>>>0) < 2;
      if ($236) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $238=$j;
      var $239=$3;
      var $240=(($239+($238<<2))|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241)|0)!=0;
      if ($242) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $244=$j;
      var $245=$3;
      var $246=(($245+($244<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=$247;
      _free($248);
      var $249=$j;
      var $250=$3;
      var $251=(($250+($249<<2))|0);
      HEAP32[(($251)>>2)]=0;
      label = 49; break;
    case 49: 
      var $253=$j;
      var $254=$4;
      var $255=(($254+($253<<2))|0);
      HEAP32[(($255)>>2)]=0;
      label = 50; break;
    case 50: 
      var $257=$j;
      var $258=((($257)+(1))|0);
      $j=$258;
      label = 46; break;
    case 51: 
      var $260=HEAP32[(($errs)>>2)];
      $1=$260;
      label = 53; break;
    case 52: 
      $1=0;
      label = 53; break;
    case 53: 
      var $263=$1;
      STACKTOP = __stackBase__;
      return $263;
    default: assert(0, "bad label: " + label);
  }
}
_apprentice_load["X"]=1;

function _apprentice_compile($ms, $magicp, $nmagicp, $fn) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $fd;
      var $dbname;
      var $rv;
      var $i;
      $1=$ms;
      $2=$magicp;
      $3=$nmagicp;
      $4=$fn;
      $fd=-1;
      $rv=-1;
      var $5=$1;
      var $6=$4;
      var $7=_mkdbname($5, $6, 1);
      $dbname=$7;
      var $8=$dbname;
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 24; break;
    case 4: 
      var $12=$dbname;
      var $13=_open($12, 1537, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=420,tempInt));
      $fd=$13;
      var $14=(($13)|0)==-1;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$1;
      var $17=___errno_location();
      var $18=HEAP32[(($17)>>2)];
      var $19=$dbname;
      _file_error($16, $18, ((5268984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
      label = 24; break;
    case 6: 
      var $21=$fd;
      var $22=_write($21, 5260340, 8);
      var $23=(($22)|0)!=8;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $25=$1;
      var $26=___errno_location();
      var $27=HEAP32[(($26)>>2)];
      var $28=$dbname;
      _file_error($25, $27, ((5268724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$28,tempInt));
      label = 24; break;
    case 8: 
      var $30=$fd;
      var $31=$3;
      var $32=$31;
      var $33=HEAP32[((5260348)>>2)];
      var $34=_write($30, $32, $33);
      var $35=HEAP32[((5260348)>>2)];
      var $36=(($34)|0)!=(($35)|0);
      if ($36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $38=$1;
      var $39=___errno_location();
      var $40=HEAP32[(($39)>>2)];
      var $41=$dbname;
      _file_error($38, $40, ((5268724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$41,tempInt));
      label = 24; break;
    case 10: 
      var $43=HEAP32[((5260348)>>2)];
      var $44=((($43)+(8))|0);
      var $45=(($44)>>>0) < 232;
      if ($45) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      ___assert_func(((5268484)|0), 2556, ((5274060)|0), ((5268236)|0));
      label = 13; break;
    case 13: 
      var $49=$fd;
      var $50=_lseek($49, 232, 0);
      var $51=(($50)|0)!=232;
      if ($51) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $53=$1;
      var $54=___errno_location();
      var $55=HEAP32[(($54)>>2)];
      var $56=$dbname;
      _file_error($53, $55, ((5268116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$56,tempInt));
      label = 24; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $59=$i;
      var $60=(($59)>>>0) < 2;
      if ($60) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $62=$fd;
      var $63=$i;
      var $64=$2;
      var $65=(($64+($63<<2))|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$66;
      var $68=$i;
      var $69=$3;
      var $70=(($69+($68<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=((($71)*(232))|0);
      var $73=_write($62, $67, $72);
      var $74=$i;
      var $75=$3;
      var $76=(($75+($74<<2))|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)*(232))|0);
      var $79=(($73)|0)!=(($78)|0);
      if ($79) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $81=$1;
      var $82=___errno_location();
      var $83=HEAP32[(($82)>>2)];
      var $84=$dbname;
      _file_error($81, $83, ((5268724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$84,tempInt));
      label = 24; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $87=$i;
      var $88=((($87)+(1))|0);
      $i=$88;
      label = 16; break;
    case 21: 
      var $90=$fd;
      var $91=(($90)|0)!=-1;
      if ($91) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $93=$fd;
      var $94=_close($93);
      label = 23; break;
    case 23: 
      $rv=0;
      label = 24; break;
    case 24: 
      var $97=$dbname;
      _free($97);
      var $98=$rv;
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }
}
_apprentice_compile["X"]=1;

function _apprentice_map($ms, $magicp, $nmagicp, $fn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $fd;
      var $ret;
      var $st=__stackBase__;
      var $ptr;
      var $version;
      var $entries;
      var $nentries;
      var $needsbyteswap;
      var $dbname;
      var $mm;
      var $i;
      $2=$ms;
      $3=$magicp;
      $4=$nmagicp;
      $5=$fn;
      $dbname=0;
      $mm=0;
      $ret=-1;
      var $6=$2;
      var $7=$5;
      var $8=_mkdbname($6, $7, 0);
      $dbname=$8;
      var $9=$dbname;
      var $10=(($9)|0)==0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 54; break;
    case 4: 
      var $13=$dbname;
      var $14=_open($13, 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $fd=$14;
      var $15=(($14)|0)==-1;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 54; break;
    case 6: 
      var $18=$fd;
      var $19=_fstat($18, $st);
      var $20=(($19)|0)==-1;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$2;
      var $23=___errno_location();
      var $24=HEAP32[(($23)>>2)];
      var $25=$dbname;
      _file_error($22, $24, ((5272012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$25,tempInt));
      label = 44; break;
    case 8: 
      var $27=(($st+28)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0) < 8;
      if ($29) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$2;
      var $32=$dbname;
      _file_error($31, 0, ((5271556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$32,tempInt));
      label = 44; break;
    case 10: 
      var $34=(($st+28)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_malloc($35);
      $mm=$36;
      var $37=(($36)|0)==0;
      if ($37) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$2;
      var $40=(($st+28)|0);
      var $41=HEAP32[(($40)>>2)];
      _file_oomem($39, $41);
      label = 44; break;
    case 12: 
      var $43=$fd;
      var $44=$mm;
      var $45=(($st+28)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=_read($43, $44, $46);
      var $48=(($st+28)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($47)|0)!=(($49)|0);
      if ($50) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $52=$2;
      _file_badread($52);
      label = 44; break;
    case 14: 
      var $54=$fd;
      var $55=_close($54);
      $fd=-1;
      var $56=$mm;
      var $57=$56;
      $ptr=$57;
      var $58=$ptr;
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|0)!=-249691108;
      if ($60) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $62=$ptr;
      var $63=HEAP32[(($62)>>2)];
      var $64=_swap4($63);
      var $65=(($64)|0)!=-249691108;
      if ($65) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $67=$2;
      var $68=$dbname;
      _file_error($67, 0, ((5271276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$68,tempInt));
      label = 44; break;
    case 17: 
      $needsbyteswap=1;
      label = 19; break;
    case 18: 
      $needsbyteswap=0;
      label = 19; break;
    case 19: 
      var $72=$needsbyteswap;
      var $73=(($72)|0)!=0;
      if ($73) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $75=$ptr;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=_swap4($77);
      $version=$78;
      label = 22; break;
    case 21: 
      var $80=$ptr;
      var $81=(($80+4)|0);
      var $82=HEAP32[(($81)>>2)];
      $version=$82;
      label = 22; break;
    case 22: 
      $ret=-2;
      var $84=$version;
      var $85=(($84)|0)!=9;
      if ($85) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $87=$2;
      var $88=$dbname;
      var $89=$version;
      _file_error($87, 0, ((5271020)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=((5270816)|0),HEAP32[(((tempInt)+(4))>>2)]=9,HEAP32[(((tempInt)+(8))>>2)]=$88,HEAP32[(((tempInt)+(12))>>2)]=$89,tempInt));
      label = 44; break;
    case 24: 
      var $91=(($st+28)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=Math.floor(((($92)>>>0))/(232));
      $entries=$93;
      var $94=$entries;
      var $95=((($94)*(232))|0);
      var $96=(($st+28)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($95)|0)!=(($97)|0);
      if ($98) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $100=$2;
      var $101=$dbname;
      var $102=(($st+28)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104$0=$103;
      var $104$1=((($103)|0) < 0 ? -1 : 0);
      var $$etemp$0=((5270484)|0);
      _file_error($100, 0, $$etemp$0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$101,HEAP32[(((tempInt)+(4))>>2)]=$104$0,HEAP32[(((tempInt)+(8))>>2)]=$104$1,HEAP32[(((tempInt)+(12))>>2)]=232,tempInt));
      label = 44; break;
    case 26: 
      var $106=$mm;
      var $107=$106;
      var $108=(($107+232)|0);
      var $109=$3;
      var $110=(($109)|0);
      HEAP32[(($110)>>2)]=$108;
      $nentries=0;
      $i=0;
      label = 27; break;
    case 27: 
      var $112=$i;
      var $113=(($112)>>>0) < 2;
      if ($113) { label = 28; break; } else { label = 35; break; }
    case 28: 
      var $115=$needsbyteswap;
      var $116=(($115)|0)!=0;
      if ($116) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $118=$i;
      var $119=((($118)+(2))|0);
      var $120=$ptr;
      var $121=(($120+($119<<2))|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=_swap4($122);
      var $124=$i;
      var $125=$4;
      var $126=(($125+($124<<2))|0);
      HEAP32[(($126)>>2)]=$123;
      label = 31; break;
    case 30: 
      var $128=$i;
      var $129=((($128)+(2))|0);
      var $130=$ptr;
      var $131=(($130+($129<<2))|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$i;
      var $134=$4;
      var $135=(($134+($133<<2))|0);
      HEAP32[(($135)>>2)]=$132;
      label = 31; break;
    case 31: 
      var $137=$i;
      var $138=(($137)|0)!=1;
      if ($138) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $140=$i;
      var $141=$3;
      var $142=(($141+($140<<2))|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$i;
      var $145=$4;
      var $146=(($145+($144<<2))|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($143+($147)*(232))|0);
      var $149=$i;
      var $150=((($149)+(1))|0);
      var $151=$3;
      var $152=(($151+($150<<2))|0);
      HEAP32[(($152)>>2)]=$148;
      label = 33; break;
    case 33: 
      var $154=$i;
      var $155=$4;
      var $156=(($155+($154<<2))|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$nentries;
      var $159=((($158)+($157))|0);
      $nentries=$159;
      label = 34; break;
    case 34: 
      var $161=$i;
      var $162=((($161)+(1))|0);
      $i=$162;
      label = 27; break;
    case 35: 
      var $164=$entries;
      var $165=$nentries;
      var $166=((($165)+(1))|0);
      var $167=(($164)|0)!=(($166)|0);
      if ($167) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $169=$2;
      var $170=$dbname;
      var $171=$entries;
      var $172=$nentries;
      var $173=((($172)+(1))|0);
      _file_error($169, 0, ((5270220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$170,HEAP32[(((tempInt)+(4))>>2)]=$171,HEAP32[(((tempInt)+(8))>>2)]=$173,tempInt));
      label = 44; break;
    case 37: 
      var $175=$needsbyteswap;
      var $176=(($175)|0)!=0;
      if ($176) { label = 38; break; } else { label = 43; break; }
    case 38: 
      $i=0;
      label = 39; break;
    case 39: 
      var $179=$i;
      var $180=(($179)>>>0) < 2;
      if ($180) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $182=$i;
      var $183=$3;
      var $184=(($183+($182<<2))|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=$i;
      var $187=$4;
      var $188=(($187+($186<<2))|0);
      var $189=HEAP32[(($188)>>2)];
      _byteswap($185, $189);
      label = 41; break;
    case 41: 
      var $191=$i;
      var $192=((($191)+(1))|0);
      $i=$192;
      label = 39; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $195=$dbname;
      _free($195);
      $1=1;
      label = 55; break;
    case 44: 
      var $197=$fd;
      var $198=(($197)|0)!=-1;
      if ($198) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $200=$fd;
      var $201=_close($200);
      label = 46; break;
    case 46: 
      var $203=$mm;
      var $204=(($203)|0)!=0;
      if ($204) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $206=$mm;
      _free($206);
      label = 53; break;
    case 48: 
      $i=0;
      label = 49; break;
    case 49: 
      var $209=$i;
      var $210=(($209)>>>0) < 2;
      if ($210) { label = 50; break; } else { label = 52; break; }
    case 50: 
      var $212=$i;
      var $213=$3;
      var $214=(($213+($212<<2))|0);
      HEAP32[(($214)>>2)]=0;
      var $215=$i;
      var $216=$4;
      var $217=(($216+($215<<2))|0);
      HEAP32[(($217)>>2)]=0;
      label = 51; break;
    case 51: 
      var $219=$i;
      var $220=((($219)+(1))|0);
      $i=$220;
      label = 49; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $224=$dbname;
      _free($224);
      var $225=$ret;
      $1=$225;
      label = 55; break;
    case 55: 
      var $227=$1;
      STACKTOP = __stackBase__;
      return $227;
    default: assert(0, "bad label: " + label);
  }
}
_apprentice_map["X"]=1;

function _swap4($sv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP32[(($1)>>2)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+3)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+2)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+1)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=HEAP32[(($rv)>>2)];
  STACKTOP = __stackBase__;
  return $24;
}


function _swap2($sv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP16[(($1)>>1)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+1)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=HEAP16[(($rv)>>1)];
  STACKTOP = __stackBase__;
  return $14;
}


function _add_mlist($mlp, $magic, $nmagic, $mapped) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ml;
      $2=$mlp;
      $3=$magic;
      $4=$nmagic;
      $5=$mapped;
      var $6=_malloc(20);
      var $7=$6;
      $ml=$7;
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      var $11=$3;
      var $12=$ml;
      var $13=(($12)|0);
      HEAP32[(($13)>>2)]=$11;
      var $14=$4;
      var $15=$ml;
      var $16=(($15+4)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$5;
      var $18=$ml;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$ml;
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+12)|0);
      HEAP32[(($24)>>2)]=$20;
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$ml;
      var $29=(($28+16)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$2;
      var $31=$ml;
      var $32=(($31+12)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$ml;
      var $34=$2;
      var $35=(($34+16)|0);
      HEAP32[(($35)>>2)]=$33;
      $1=0;
      label = 5; break;
    case 5: 
      var $37=$1;

      return $37;
    default: assert(0, "bad label: " + label);
  }
}
_add_mlist["X"]=1;

function _apprentice_list($mlist, $mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $magindex;
      var $ml;
      var $m;
      $1=$mlist;
      $2=$mode;
      $magindex=0;
      var $3=$1;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $ml=$5;
      label = 3; break;
    case 3: 
      var $7=$ml;
      var $8=$1;
      var $9=(($7)|0)!=(($8)|0);
      if ($9) { label = 4; break; } else { label = 24; break; }
    case 4: 
      $magindex=0;
      label = 5; break;
    case 5: 
      var $12=$magindex;
      var $13=$ml;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)>>>0) < (($15)>>>0);
      if ($16) { label = 6; break; } else { label = 22; break; }
    case 6: 
      var $18=$magindex;
      var $19=$ml;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+($18)*(232))|0);
      $m=$22;
      var $23=$m;
      var $24=(($23+2)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&255);
      var $27=$2;
      var $28=$26 & $27;
      var $29=$2;
      var $30=(($28)|0)!=(($29)|0);
      if ($30) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $33=$magindex;
      var $34=((($33)+(1))|0);
      var $35=$ml;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34)>>>0) < (($37)>>>0);
      if ($38) { label = 9; break; } else { var $51 = 0;label = 10; break; }
    case 9: 
      var $40=$magindex;
      var $41=((($40)+(1))|0);
      var $42=$ml;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+($41)*(232))|0);
      var $46=(($45)|0);
      var $47=HEAP16[(($46)>>1)];
      var $48=(($47)&65535);
      var $49=(($48)|0)!=0;
      var $51 = $49;label = 10; break;
    case 10: 
      var $51;
      if ($51) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $53=$magindex;
      var $54=((($53)+(1))|0);
      $magindex=$54;
      label = 8; break;
    case 12: 
      label = 21; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $58=$magindex;
      var $59=((($58)+(1))|0);
      var $60=$ml;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($59)>>>0) < (($62)>>>0);
      if ($63) { label = 15; break; } else { var $98 = 0;label = 18; break; }
    case 15: 
      var $65=$magindex;
      var $66=((($65)+(1))|0);
      var $67=$ml;
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($66)*(232))|0);
      var $71=(($70)|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=(($72)&65535);
      var $74=(($73)|0)!=0;
      if ($74) { label = 16; break; } else { var $98 = 0;label = 18; break; }
    case 16: 
      var $76=$magindex;
      var $77=$ml;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+($76)*(232))|0);
      var $81=(($80+96)|0);
      var $82=(($81)|0);
      var $83=HEAP8[($82)];
      var $84=(($83 << 24) >> 24);
      var $85=(($84)|0)==0;
      if ($85) { label = 17; break; } else { var $98 = 0;label = 18; break; }
    case 17: 
      var $87=$magindex;
      var $88=$ml;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+($87)*(232))|0);
      var $92=(($91+160)|0);
      var $93=(($92)|0);
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=(($95)|0)==0;
      var $98 = $96;label = 18; break;
    case 18: 
      var $98;
      if ($98) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $100=$magindex;
      var $101=((($100)+(1))|0);
      $magindex=$101;
      label = 14; break;
    case 20: 
      var $103=$m;
      var $104=_apprentice_magic_strength($103);
      var $105=$magindex;
      var $106=$ml;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+($105)*(232))|0);
      var $110=(($109+96)|0);
      var $111=(($110)|0);
      var $112=$magindex;
      var $113=$ml;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+($112)*(232))|0);
      var $117=(($116+160)|0);
      var $118=(($117)|0);
      var $119=_printf(((5260764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$104,HEAP32[(((tempInt)+(4))>>2)]=$111,HEAP32[(((tempInt)+(8))>>2)]=$118,tempInt));
      label = 21; break;
    case 21: 
      var $121=$magindex;
      var $122=((($121)+(1))|0);
      $magindex=$122;
      label = 5; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $125=$ml;
      var $126=(($125+12)|0);
      var $127=HEAP32[(($126)>>2)];
      $ml=$127;
      label = 3; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_apprentice_list["X"]=1;

function _mkdbname($ms, $fn, $strip) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $q;
      var $buf=__stackBase__;
      $2=$ms;
      $3=$fn;
      $4=$strip;
      var $5=$4;
      var $6=(($5)|0)!=0;
      if ($6) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $8=$3;
      var $9=_strrchr($8, 47);
      $p=$9;
      var $10=(($9)|0)!=0;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=$p;
      var $13=(($12+1)|0);
      $p=$13;
      $3=$13;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $16=$3;
      $q=$16;
      label = 7; break;
    case 7: 
      var $18=$q;
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24)!=0;
      if ($20) { label = 8; break; } else { label = 10; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $23=$q;
      var $24=(($23+1)|0);
      $q=$24;
      label = 7; break;
    case 10: 
      $p=((5250120)|0);
      label = 11; break;
    case 11: 
      var $27=$p;
      var $28=(($27)>>>0) >= (((((5250116)|0)))>>>0);
      if ($28) { label = 12; break; } else { var $34 = 0;label = 13; break; }
    case 12: 
      var $30=$q;
      var $31=$3;
      var $32=(($30)>>>0) >= (($31)>>>0);
      var $34 = $32;label = 13; break;
    case 13: 
      var $34;
      if ($34) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $36=$p;
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $39=$q;
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=(($38)|0)!=(($41)|0);
      if ($42) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $46=$p;
      var $47=((($46)-(1))|0);
      $p=$47;
      var $48=$q;
      var $49=((($48)-(1))|0);
      $q=$49;
      label = 11; break;
    case 18: 
      var $51=$p;
      var $52=(($51)>>>0) >= (((((5250116)|0)))>>>0);
      if ($52) { label = 19; break; } else { label = 23; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $55=$q;
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24)!=0;
      if ($57) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $59=$q;
      var $60=(($59+1)|0);
      $q=$60;
      label = 20; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $63=$q;
      var $64=(($63+1)|0);
      $q=$64;
      var $65=$2;
      var $66=(($65+32)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 1040;
      var $69=(($68)|0)!=0;
      if ($69) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $71=$q;
      var $72=$3;
      var $73=$71;
      var $74=$72;
      var $75=((($73)-($74))|0);
      var $76=$3;
      var $77=_asprintf($buf, ((5269816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$75,HEAP32[(((tempInt)+(4))>>2)]=$76,HEAP32[(((tempInt)+(8))>>2)]=((5250116)|0),tempInt));
      var $78=HEAP32[(($buf)>>2)];
      var $79=_access($78, 4);
      var $80=(($79)|0)!=-1;
      if ($80) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $82=$2;
      var $83=(($82+32)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 & 16;
      HEAP32[(($83)>>2)]=$85;
      var $86=HEAP32[(($buf)>>2)];
      $1=$86;
      label = 30; break;
    case 26: 
      var $88=HEAP32[(($buf)>>2)];
      _free($88);
      label = 27; break;
    case 27: 
      var $90=$q;
      var $91=$3;
      var $92=$90;
      var $93=$91;
      var $94=((($92)-($93))|0);
      var $95=$3;
      var $96=_asprintf($buf, ((5269640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$94,HEAP32[(((tempInt)+(4))>>2)]=$95,HEAP32[(((tempInt)+(8))>>2)]=((5250116)|0),tempInt));
      var $97=$p;
      var $98=_strstr($97, ((5269276)|0));
      var $99=(($98)|0)!=0;
      if ($99) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $101=$2;
      var $102=(($101+32)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$103 & 16;
      HEAP32[(($102)>>2)]=$104;
      label = 29; break;
    case 29: 
      var $106=HEAP32[(($buf)>>2)];
      $1=$106;
      label = 30; break;
    case 30: 
      var $108=$1;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + label);
  }
}
_mkdbname["X"]=1;

function _byteswap($magic, $nmagic) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $1=$magic;
      $2=$nmagic;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$2;
      var $6=(($4)>>>0) < (($5)>>>0);
      if ($6) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $8=$i;
      var $9=$1;
      var $10=(($9+($8)*(232))|0);
      _bs1($10);
      label = 5; break;
    case 5: 
      var $12=$i;
      var $13=((($12)+(1))|0);
      $i=$13;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _bs1($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$m;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP16[(($3)>>1)];
      var $5=_swap2($4);
      var $6=$1;
      var $7=(($6)|0);
      HEAP16[(($7)>>1)]=$5;
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_swap4($10);
      var $12=$1;
      var $13=(($12+12)|0);
      HEAP32[(($13)>>2)]=$11;
      var $14=$1;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_swap4($16);
      var $18=$1;
      var $19=(($18+16)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$1;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=_swap4($22);
      var $24=$1;
      var $25=(($24+20)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$1;
      var $27=(($26+6)|0);
      var $28=HEAP8[($27)];
      var $29=(($28)&255);
      var $30=(($29)|0)==5;
      if ($30) { label = 11; break; } else { label = 3; break; }
    case 3: 
      var $32=$1;
      var $33=(($32+6)|0);
      var $34=HEAP8[($33)];
      var $35=(($34)&255);
      var $36=(($35)|0)==13;
      if ($36) { label = 11; break; } else { label = 4; break; }
    case 4: 
      var $38=$1;
      var $39=(($38+6)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&255);
      var $42=(($41)|0)==18;
      if ($42) { label = 11; break; } else { label = 5; break; }
    case 5: 
      var $44=$1;
      var $45=(($44+6)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&255);
      var $48=(($47)|0)==19;
      if ($48) { label = 11; break; } else { label = 6; break; }
    case 6: 
      var $50=$1;
      var $51=(($50+6)|0);
      var $52=HEAP8[($51)];
      var $53=(($52)&255);
      var $54=(($53)|0)==17;
      if ($54) { label = 11; break; } else { label = 7; break; }
    case 7: 
      var $56=$1;
      var $57=(($56+6)|0);
      var $58=HEAP8[($57)];
      var $59=(($58)&255);
      var $60=(($59)|0)==20;
      if ($60) { label = 11; break; } else { label = 8; break; }
    case 8: 
      var $62=$1;
      var $63=(($62+6)|0);
      var $64=HEAP8[($63)];
      var $65=(($64)&255);
      var $66=(($65)|0)==45;
      if ($66) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $68=$1;
      var $69=(($68+6)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      var $72=(($71)|0)==46;
      if ($72) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $74=$1;
      var $75=(($74+6)|0);
      var $76=HEAP8[($75)];
      var $77=(($76)&255);
      var $78=(($77)|0)==3;
      if ($78) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $80=$1;
      var $81=(($80+24)|0);
      var $82=$81;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=_swap4($84);
      var $86=$1;
      var $87=(($86+24)|0);
      var $88=$87;
      var $89=(($88)|0);
      HEAP32[(($89)>>2)]=$85;
      var $90=$1;
      var $91=(($90+24)|0);
      var $92=$91;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=_swap4($94);
      var $96=$1;
      var $97=(($96+24)|0);
      var $98=$97;
      var $99=(($98+4)|0);
      HEAP32[(($99)>>2)]=$95;
      label = 13; break;
    case 12: 
      var $101=$1;
      var $102=(($101+32)|0);
      var $103=$102;
      var $st$3$0=(($103)|0);
      var $104$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($103+4)|0);
      var $104$1=HEAP32[(($st$3$1)>>2)];
      var $105$0=_swap8($104$0, $104$1);
      var $105$1=tempRet0;
      var $106=$1;
      var $107=(($106+32)|0);
      var $108=$107;
      var $st$12$0=(($108)|0);
      HEAP32[(($st$12$0)>>2)]=$105$0;
      var $st$12$1=(($108+4)|0);
      HEAP32[(($st$12$1)>>2)]=$105$1;
      var $109=$1;
      var $110=(($109+24)|0);
      var $111=$110;
      var $st$19$0=(($111)|0);
      var $112$0=HEAP32[(($st$19$0)>>2)];
      var $st$19$1=(($111+4)|0);
      var $112$1=HEAP32[(($st$19$1)>>2)];
      var $113$0=_swap8($112$0, $112$1);
      var $113$1=tempRet0;
      var $114=$1;
      var $115=(($114+24)|0);
      var $116=$115;
      var $st$28$0=(($116)|0);
      HEAP32[(($st$28$0)>>2)]=$113$0;
      var $st$28$1=(($116+4)|0);
      HEAP32[(($st$28$1)>>2)]=$113$1;
      label = 13; break;
    case 13: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_bs1["X"]=1;

function _apprentice_magic_strength($m) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $val;
      $2=$m;
      $val=20;
      var $3=$2;
      var $4=(($3+6)|0);
      var $5=HEAP8[($4)];
      var $6=(($5)&255);
      if ((($6)|0) == 3) {
        label = 3; break;
      }
      else if ((($6)|0) == 1) {
        label = 6; break;
      }
      else if ((($6)|0) == 2 || (($6)|0) == 10 || (($6)|0) == 7) {
        label = 7; break;
      }
      else if ((($6)|0) == 4 || (($6)|0) == 11 || (($6)|0) == 8 || (($6)|0) == 23) {
        label = 8; break;
      }
      else if ((($6)|0) == 13 || (($6)|0) == 5) {
        label = 9; break;
      }
      else if ((($6)|0) == 18 || (($6)|0) == 19) {
        label = 10; break;
      }
      else if ((($6)|0) == 20 || (($6)|0) == 17) {
        label = 11; break;
      }
      else if ((($6)|0) == 6 || (($6)|0) == 12 || (($6)|0) == 9 || (($6)|0) == 21 || (($6)|0) == 14 || (($6)|0) == 16 || (($6)|0) == 15 || (($6)|0) == 22 || (($6)|0) == 33 || (($6)|0) == 34 || (($6)|0) == 35) {
        label = 15; break;
      }
      else if ((($6)|0) == 24 || (($6)|0) == 26 || (($6)|0) == 25 || (($6)|0) == 27 || (($6)|0) == 28 || (($6)|0) == 29 || (($6)|0) == 30 || (($6)|0) == 31 || (($6)|0) == 32 || (($6)|0) == 42 || (($6)|0) == 43 || (($6)|0) == 44 || (($6)|0) == 36 || (($6)|0) == 37 || (($6)|0) == 38) {
        label = 16; break;
      }
      else if ((($6)|0) == 41 || (($6)|0) == 45 || (($6)|0) == 46) {
        label = 17; break;
      }
      else {
      label = 18; break;
      }
      
    case 3: 
      var $8=$2;
      var $9=(($8+11)|0);
      var $10=HEAP8[($9)];
      var $11=(($10)&255);
      var $12=(($11)|0)!=0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _abort();
      throw "Reached an unreachable!"
    case 5: 
      $1=0;
      label = 37; break;
    case 6: 
      var $16=$val;
      var $17=((($16)+(10))|0);
      $val=$17;
      label = 19; break;
    case 7: 
      var $19=$val;
      var $20=((($19)+(20))|0);
      $val=$20;
      label = 19; break;
    case 8: 
      var $22=$val;
      var $23=((($22)+(40))|0);
      $val=$23;
      label = 19; break;
    case 9: 
      var $25=$2;
      var $26=(($25+5)|0);
      var $27=HEAP8[($26)];
      var $28=(($27)&255);
      var $29=((($28)*(10))|0);
      var $30=$val;
      var $31=((($30)+($29))|0);
      $val=$31;
      label = 19; break;
    case 10: 
      var $33=$2;
      var $34=(($33+5)|0);
      var $35=HEAP8[($34)];
      var $36=(($35)&255);
      var $37=((($36)*(10))|0);
      var $38=((((($37)|0))/(2))&-1);
      var $39=$val;
      var $40=((($39)+($38))|0);
      $val=$40;
      label = 19; break;
    case 11: 
      var $42=$2;
      var $43=(($42+5)|0);
      var $44=HEAP8[($43)];
      var $45=(($44)&255);
      var $46=$2;
      var $47=(($46+5)|0);
      var $48=HEAP8[($47)];
      var $49=(($48)&255);
      var $50=(((10)/((($49)|0)))&-1);
      var $51=(($50)|0) > 1;
      if ($51) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $53=$2;
      var $54=(($53+5)|0);
      var $55=HEAP8[($54)];
      var $56=(($55)&255);
      var $57=(((10)/((($56)|0)))&-1);
      var $60 = $57;label = 14; break;
    case 13: 
      var $60 = 1;label = 14; break;
    case 14: 
      var $60;
      var $61=((($45)*($60))|0);
      var $62=$val;
      var $63=((($62)+($61))|0);
      $val=$63;
      label = 19; break;
    case 15: 
      var $65=$val;
      var $66=((($65)+(40))|0);
      $val=$66;
      label = 19; break;
    case 16: 
      var $68=$val;
      var $69=((($68)+(80))|0);
      $val=$69;
      label = 19; break;
    case 17: 
      label = 19; break;
    case 18: 
      $val=0;
      var $72=HEAP32[((_stderr)>>2)];
      var $73=$2;
      var $74=(($73+6)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=_fprintf($72, ((5273236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$76,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 19: 
      var $79=$2;
      var $80=(($79+4)|0);
      var $81=HEAP8[($80)];
      var $82=(($81)&255);
      if ((($82)|0) == 120 || (($82)|0) == 33) {
        label = 20; break;
      }
      else if ((($82)|0) == 61) {
        label = 21; break;
      }
      else if ((($82)|0) == 62 || (($82)|0) == 60) {
        label = 22; break;
      }
      else if ((($82)|0) == 94 || (($82)|0) == 38) {
        label = 23; break;
      }
      else {
      label = 24; break;
      }
      
    case 20: 
      $val=0;
      label = 25; break;
    case 21: 
      var $85=$val;
      var $86=((($85)+(10))|0);
      $val=$86;
      label = 25; break;
    case 22: 
      var $88=$val;
      var $89=((($88)-(20))|0);
      $val=$89;
      label = 25; break;
    case 23: 
      var $91=$val;
      var $92=((($91)-(10))|0);
      $val=$92;
      label = 25; break;
    case 24: 
      var $94=HEAP32[((_stderr)>>2)];
      var $95=$2;
      var $96=(($95+4)|0);
      var $97=HEAP8[($96)];
      var $98=(($97)&255);
      var $99=_fprintf($94, ((5272624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$98,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 25: 
      var $101=$val;
      var $102=(($101)|0)==0;
      if ($102) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $val=1;
      label = 27; break;
    case 27: 
      var $105=$2;
      var $106=(($105+11)|0);
      var $107=HEAP8[($106)];
      var $108=(($107)&255);
      if ((($108)|0) == 0) {
        label = 28; break;
      }
      else if ((($108)|0) == 43) {
        label = 29; break;
      }
      else if ((($108)|0) == 45) {
        label = 30; break;
      }
      else if ((($108)|0) == 42) {
        label = 31; break;
      }
      else if ((($108)|0) == 47) {
        label = 32; break;
      }
      else {
      label = 33; break;
      }
      
    case 28: 
      label = 34; break;
    case 29: 
      var $111=$2;
      var $112=(($111+3)|0);
      var $113=HEAP8[($112)];
      var $114=(($113)&255);
      var $115=$val;
      var $116=((($115)+($114))|0);
      $val=$116;
      label = 34; break;
    case 30: 
      var $118=$2;
      var $119=(($118+3)|0);
      var $120=HEAP8[($119)];
      var $121=(($120)&255);
      var $122=$val;
      var $123=((($122)-($121))|0);
      $val=$123;
      label = 34; break;
    case 31: 
      var $125=$2;
      var $126=(($125+3)|0);
      var $127=HEAP8[($126)];
      var $128=(($127)&255);
      var $129=$val;
      var $130=((($129)*($128))|0);
      $val=$130;
      label = 34; break;
    case 32: 
      var $132=$2;
      var $133=(($132+3)|0);
      var $134=HEAP8[($133)];
      var $135=(($134)&255);
      var $136=$val;
      var $137=Math.floor(((($136)>>>0))/((($135)>>>0)));
      $val=$137;
      label = 34; break;
    case 33: 
      _abort();
      throw "Reached an unreachable!"
    case 34: 
      var $140=$2;
      var $141=(($140+96)|0);
      var $142=(($141)|0);
      var $143=HEAP8[($142)];
      var $144=(($143 << 24) >> 24);
      var $145=(($144)|0)==0;
      if ($145) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $147=$val;
      var $148=((($147)+(1))|0);
      $val=$148;
      label = 36; break;
    case 36: 
      var $150=$val;
      $1=$150;
      label = 37; break;
    case 37: 
      var $152=$1;
      STACKTOP = __stackBase__;
      return $152;
    default: assert(0, "bad label: " + label);
  }
}
_apprentice_magic_strength["X"]=1;

function _swap8($sv$0, $sv$1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(8);
  var $s;
  var $d;
  var $st$4$0=(($1)|0);
  HEAP32[(($st$4$0)>>2)]=$sv$0;
  var $st$4$1=(($1+4)|0);
  HEAP32[(($st$4$1)>>2)]=$sv$1;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+7)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+6)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+5)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19+4)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=$s;
  var $25=(($24+3)|0);
  var $26=HEAP8[($25)];
  var $27=$d;
  var $28=(($27+4)|0);
  HEAP8[($28)]=$26;
  var $29=$s;
  var $30=(($29+2)|0);
  var $31=HEAP8[($30)];
  var $32=$d;
  var $33=(($32+5)|0);
  HEAP8[($33)]=$31;
  var $34=$s;
  var $35=(($34+1)|0);
  var $36=HEAP8[($35)];
  var $37=$d;
  var $38=(($37+6)|0);
  HEAP8[($38)]=$36;
  var $39=$s;
  var $40=(($39)|0);
  var $41=HEAP8[($40)];
  var $42=$d;
  var $43=(($42+7)|0);
  HEAP8[($43)]=$41;
  var $st$60$0=(($rv)|0);
  var $44$0=HEAP32[(($st$60$0)>>2)];
  var $st$60$1=(($rv+4)|0);
  var $44$1=HEAP32[(($st$60$1)>>2)];
  STACKTOP = __stackBase__;
  return (tempRet0=$44$1,$44$0);
}
_swap8["X"]=1;

function _cmpstrp($p1, $p2) {
  var label = 0;


  var $1;
  var $2;
  $1=$p1;
  $2=$p2;
  var $3=$1;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=_strcmp($5, $8);

  return $9;
}


function _load_1($ms, $action, $fn, $errs, $mentry, $mentrycount) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $lineno;
      var $llen=__stackBase__;
      var $line=(__stackBase__)+(4);
      var $len;
      var $me=(__stackBase__)+(8);
      var $f;
      var $i;
      $1=$ms;
      $2=$action;
      $3=$fn;
      $4=$errs;
      $5=$mentry;
      $6=$mentrycount;
      $lineno=0;
      HEAP32[(($llen)>>2)]=0;
      HEAP32[(($line)>>2)]=0;
      var $7=$3;
      var $8=$1;
      var $9=(($8+40)|0);
      HEAP32[(($9)>>2)]=$7;
      var $10=_fopen($7, ((5266604)|0));
      $f=$10;
      var $11=$f;
      var $12=(($11)|0)==0;
      if ($12) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $14=___errno_location();
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)!=2;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$1;
      var $19=___errno_location();
      var $20=HEAP32[(($19)>>2)];
      var $21=$3;
      _file_error($18, $20, ((5266532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$21,tempInt));
      label = 5; break;
    case 5: 
      var $23=$4;
      var $24=HEAP32[(($23)>>2)];
      var $25=((($24)+(1))|0);
      HEAP32[(($23)>>2)]=$25;
      label = 41; break;
    case 6: 
      var $27=$me;
      HEAP32[(($27)>>2)]=0; HEAP32[((($27)+(4))>>2)]=0; HEAP32[((($27)+(8))>>2)]=0;
      var $28=$1;
      var $29=(($28+44)|0);
      HEAP32[(($29)>>2)]=1;
      label = 7; break;
    case 7: 
      var $31=$f;
      var $32=_getline($line, $llen, $31);
      $len=$32;
      var $33=(($32)|0)!=-1;
      if ($33) { label = 8; break; } else { label = 38; break; }
    case 8: 
      var $35=$len;
      var $36=(($35)|0)==0;
      if ($36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 37; break;
    case 10: 
      var $39=$len;
      var $40=((($39)-(1))|0);
      var $41=HEAP32[(($line)>>2)];
      var $42=(($41+$40)|0);
      var $43=HEAP8[($42)];
      var $44=(($43 << 24) >> 24);
      var $45=(($44)|0)==10;
      if ($45) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $47=$lineno;
      var $48=((($47)+(1))|0);
      $lineno=$48;
      var $49=$len;
      var $50=((($49)-(1))|0);
      var $51=HEAP32[(($line)>>2)];
      var $52=(($51+$50)|0);
      HEAP8[($52)]=0;
      label = 12; break;
    case 12: 
      var $54=HEAP32[(($line)>>2)];
      var $55=(($54)|0);
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      if ((($57)|0) == 0 || (($57)|0) == 35) {
        label = 13; break;
      }
      else if ((($57)|0) == 33) {
        label = 14; break;
      }
      else {
      label = 30; break;
      }
      
    case 13: 
      label = 37; break;
    case 14: 
      var $60=HEAP32[(($line)>>2)];
      var $61=(($60+1)|0);
      var $62=HEAP8[($61)];
      var $63=(($62 << 24) >> 24);
      var $64=(($63)|0)==58;
      if ($64) { label = 15; break; } else { label = 29; break; }
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $67=$i;
      var $68=((5260292+($67)*(12))|0);
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0)!=0;
      if ($71) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $73=$len;
      var $74=((($73)-(2))|0);
      var $75=$i;
      var $76=((5260292+($75)*(12))|0);
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($74)>>>0) > (($78)>>>0);
      if ($79) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $81=$i;
      var $82=((5260292+($81)*(12))|0);
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=HEAP32[(($line)>>2)];
      var $86=(($85+2)|0);
      var $87=$i;
      var $88=((5260292+($87)*(12))|0);
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=_memcmp($84, $86, $90);
      var $92=(($91)|0)==0;
      if ($92) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 22; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $96=$i;
      var $97=((($96)+(1))|0);
      $i=$97;
      label = 16; break;
    case 22: 
      var $99=$i;
      var $100=((5260292+($99)*(12))|0);
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102)|0)==0;
      if ($103) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $105=$1;
      var $106=HEAP32[(($line)>>2)];
      _file_error($105, 0, ((5266420)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$106,tempInt));
      var $107=$4;
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)+(1))|0);
      HEAP32[(($107)>>2)]=$109;
      label = 37; break;
    case 24: 
      var $111=(($me)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112)|0)==0;
      if ($113) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $115=$1;
      var $116=$i;
      var $117=((5260292+($116)*(12))|0);
      var $118=(($117)|0);
      var $119=HEAP32[(($118)>>2)];
      _file_error($115, 0, ((5266352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$119,tempInt));
      var $120=$4;
      var $121=HEAP32[(($120)>>2)];
      var $122=((($121)+(1))|0);
      HEAP32[(($120)>>2)]=$122;
      label = 37; break;
    case 26: 
      var $124=$i;
      var $125=((5260292+($124)*(12))|0);
      var $126=(($125+8)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$1;
      var $129=HEAP32[(($line)>>2)];
      var $130=$i;
      var $131=((5260292+($130)*(12))|0);
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($129+$133)|0);
      var $135=(($134+2)|0);
      var $136=FUNCTION_TABLE[$127]($128, $me, $135);
      var $137=(($136)|0)!=0;
      if ($137) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $139=$4;
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)+(1))|0);
      HEAP32[(($139)>>2)]=$141;
      label = 37; break;
    case 28: 
      label = 37; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $146=$1;
      var $147=HEAP32[(($line)>>2)];
      var $148=$lineno;
      var $149=$2;
      var $150=_parse($146, $me, $147, $148, $149);
      if ((($150)|0) == 0) {
        label = 32; break;
      }
      else if ((($150)|0) == 1) {
        label = 33; break;
      }
      else {
      label = 34; break;
      }
      
    case 32: 
      label = 37; break;
    case 33: 
      var $153=$1;
      var $154=$5;
      var $155=$6;
      var $156=_addentry($153, $me, $154, $155);
      label = 31; break;
    case 34: 
      var $158=$4;
      var $159=HEAP32[(($158)>>2)];
      var $160=((($159)+(1))|0);
      HEAP32[(($158)>>2)]=$160;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $164=$1;
      var $165=(($164+44)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($166)+(1))|0);
      HEAP32[(($165)>>2)]=$167;
      label = 7; break;
    case 38: 
      var $169=(($me)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170)|0)!=0;
      if ($171) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $173=$1;
      var $174=$5;
      var $175=$6;
      var $176=_addentry($173, $me, $174, $175);
      label = 40; break;
    case 40: 
      var $178=HEAP32[(($line)>>2)];
      _free($178);
      var $179=$f;
      var $180=_fclose($179);
      label = 41; break;
    case 41: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_load_1["X"]=1;

function _set_text_binary($ms, $me, $nme, $starttest) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $p;
      $1=$ms;
      $2=$me;
      $3=$nme;
      $4=$starttest;
      var $5=$4;
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$4;
      var $8=$2;
      var $9=(($8+($7)*(12))|0);
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$i;
      var $13=$2;
      var $14=(($13+($12)*(12))|0);
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      _set_test_type($11, $16);
      var $17=$1;
      var $18=(($17+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 & 1;
      var $21=(($20)|0)==0;
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 18; break;
    case 5: 
      var $24=HEAP32[((_stderr)>>2)];
      var $25=$i;
      var $26=$2;
      var $27=(($26+($25)*(12))|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+160)|0);
      var $31=(($30)|0);
      var $32=$i;
      var $33=$2;
      var $34=(($33+($32)*(12))|0);
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+160)|0);
      var $38=(($37)|0);
      var $39=HEAP8[($38)];
      var $40=(($39 << 24) >> 24);
      var $41=(($40)|0)==0;
      var $42=$41 ? (((5267308)|0)) : (((5267036)|0));
      var $43=$i;
      var $44=$2;
      var $45=(($44+($43)*(12))|0);
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+96)|0);
      var $49=(($48)|0);
      var $50=HEAP8[($49)];
      var $51=(($50 << 24) >> 24);
      var $52=(($51)|0)!=0;
      if ($52) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $54=$i;
      var $55=$2;
      var $56=(($55+($54)*(12))|0);
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+96)|0);
      var $60=(($59)|0);
      var $63 = $60;label = 8; break;
    case 7: 
      var $63 = ((5266880)|0);label = 8; break;
    case 8: 
      var $63;
      var $64=$i;
      var $65=$2;
      var $66=(($65+($64)*(12))|0);
      var $67=(($66)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+2)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      var $72=$71 & 32;
      var $73=(($72)|0)!=0;
      var $74=$73 ? (((5244764)|0)) : (((5244756)|0));
      var $75=_fprintf($24, ((5267444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$42,HEAP32[(((tempInt)+(8))>>2)]=$63,HEAP32[(((tempInt)+(12))>>2)]=$74,tempInt));
      var $76=$i;
      var $77=$2;
      var $78=(($77+($76)*(12))|0);
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+2)|0);
      var $82=HEAP8[($81)];
      var $83=(($82)&255);
      var $84=$83 & 32;
      var $85=(($84)|0)!=0;
      if ($85) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $87=$i;
      var $88=$2;
      var $89=(($88+($87)*(12))|0);
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+96)|0);
      var $93=(($92)|0);
      var $94=_strstr($93, ((5244756)|0));
      $p=$94;
      var $95=$p;
      var $96=(($95)|0)!=0;
      if ($96) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $98=$p;
      var $99=$i;
      var $100=$2;
      var $101=(($100+($99)*(12))|0);
      var $102=(($101)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+96)|0);
      var $105=(($104)|0);
      var $106=(($98)|0)==(($105)|0);
      if ($106) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $108=$p;
      var $109=((($108)-(1))|0);
      var $110=HEAP8[($109)];
      var $111=(($110)&255);
      var $112=_isspace($111);
      var $113=(($112)|0)!=0;
      if ($113) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $115=$p;
      var $116=(($115+5)|0);
      var $117=$i;
      var $118=$2;
      var $119=(($118+($117)*(12))|0);
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+96)|0);
      var $123=(($122)|0);
      var $124=$116;
      var $125=$123;
      var $126=((($124)-($125))|0);
      var $127=(($126)|0)==64;
      if ($127) { label = 15; break; } else { label = 13; break; }
    case 13: 
      var $129=$p;
      var $130=(($129+5)|0);
      var $131=HEAP8[($130)];
      var $132=(($131 << 24) >> 24);
      var $133=(($132)|0)==0;
      if ($133) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $135=$p;
      var $136=(($135+5)|0);
      var $137=HEAP8[($136)];
      var $138=(($137)&255);
      var $139=_isspace($138);
      var $140=(($139)|0)!=0;
      if ($140) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $142=HEAP32[((_stderr)>>2)];
      var $143=_fprintf($142, ((5266724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $147=$i;
      var $148=((($147)+(1))|0);
      $i=$148;
      var $149=$3;
      var $150=(($148)>>>0) < (($149)>>>0);
      if ($150) { label = 19; break; } else { var $162 = 0;label = 20; break; }
    case 19: 
      var $152=$i;
      var $153=$2;
      var $154=(($153+($152)*(12))|0);
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156)|0);
      var $158=HEAP16[(($157)>>1)];
      var $159=(($158)&65535);
      var $160=(($159)|0)!=0;
      var $162 = $160;label = 20; break;
    case 20: 
      var $162;
      if ($162) { label = 3; break; } else { label = 21; break; }
    case 21: 
      var $164=$i;
      STACKTOP = __stackBase__;
      return $164;
    default: assert(0, "bad label: " + label);
  }
}
_set_text_binary["X"]=1;

function _apprentice_sort($a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ma;
      var $mb;
      var $sa;
      var $sb;
      $2=$a;
      $3=$b;
      var $4=$2;
      var $5=$4;
      $ma=$5;
      var $6=$3;
      var $7=$6;
      $mb=$7;
      var $8=$ma;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_apprentice_magic_strength($10);
      $sa=$11;
      var $12=$mb;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_apprentice_magic_strength($14);
      $sb=$15;
      var $16=$sa;
      var $17=$sb;
      var $18=(($16)|0)==(($17)|0);
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 7; break;
    case 4: 
      var $21=$sa;
      var $22=$sb;
      var $23=(($21)>>>0) > (($22)>>>0);
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 7; break;
    case 6: 
      $1=1;
      label = 7; break;
    case 7: 
      var $27=$1;

      return $27;
    default: assert(0, "bad label: " + label);
  }
}


function _set_last_default($ms, $me, $nme) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$ms;
      $2=$me;
      $3=$nme;
      $i=0;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $6=$3;
      var $7=(($5)>>>0) < (($6)>>>0);
      if ($7) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $9=$i;
      var $10=$2;
      var $11=(($10+($9)*(12))|0);
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0);
      var $15=HEAP16[(($14)>>1)];
      var $16=(($15)&65535);
      var $17=(($16)|0)==0;
      if ($17) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $19=$i;
      var $20=$2;
      var $21=(($20+($19)*(12))|0);
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+6)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&255);
      var $27=(($26)|0)==3;
      if ($27) { label = 6; break; } else { label = 14; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $30=$i;
      var $31=((($30)+(1))|0);
      $i=$31;
      var $32=$3;
      var $33=(($31)>>>0) < (($32)>>>0);
      if ($33) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $35=$i;
      var $36=$2;
      var $37=(($36+($35)*(12))|0);
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0);
      var $41=HEAP16[(($40)>>1)];
      var $42=(($41)&65535);
      var $43=(($42)|0)==0;
      if ($43) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      label = 7; break;
    case 11: 
      var $47=$i;
      var $48=$3;
      var $49=(($47)|0)!=(($48)|0);
      if ($49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $51=$i;
      var $52=$2;
      var $53=(($52+($51)*(12))|0);
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$1;
      var $59=(($58+44)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$1;
      _file_magwarn($60, ((5267564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $64=$i;
      var $65=((($64)+(1))|0);
      $i=$65;
      label = 3; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_set_last_default["X"]=1;

function _coalesce_entries($ms, $me, $nme, $ma, $nma) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $i;
      var $mentrycount;
      var $slen;
      $2=$ms;
      $3=$me;
      $4=$nme;
      $5=$ma;
      $6=$nma;
      $mentrycount=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$4;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $12=$i;
      var $13=$3;
      var $14=(($13+($12)*(12))|0);
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$mentrycount;
      var $18=((($17)+($16))|0);
      $mentrycount=$18;
      label = 5; break;
    case 5: 
      var $20=$i;
      var $21=((($20)+(1))|0);
      $i=$21;
      label = 3; break;
    case 6: 
      var $23=$mentrycount;
      var $24=((($23)*(232))|0);
      $slen=$24;
      var $25=$slen;
      var $26=_malloc($25);
      var $27=$26;
      var $28=$5;
      HEAP32[(($28)>>2)]=$27;
      var $29=(($27)|0)==0;
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$2;
      var $32=$slen;
      _file_oomem($31, $32);
      $1=-1;
      label = 13; break;
    case 8: 
      $mentrycount=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $35=$i;
      var $36=$4;
      var $37=(($35)>>>0) < (($36)>>>0);
      if ($37) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $39=$5;
      var $40=HEAP32[(($39)>>2)];
      var $41=$mentrycount;
      var $42=(($40+($41)*(232))|0);
      var $43=$42;
      var $44=$i;
      var $45=$3;
      var $46=(($45+($44)*(12))|0);
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=$i;
      var $51=$3;
      var $52=(($51+($50)*(12))|0);
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)*(232))|0);
      assert($55 % 1 === 0);_memcpy($43, $49, $55);
      var $56=$i;
      var $57=$3;
      var $58=(($57+($56)*(12))|0);
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$mentrycount;
      var $62=((($61)+($60))|0);
      $mentrycount=$62;
      label = 11; break;
    case 11: 
      var $64=$i;
      var $65=((($64)+(1))|0);
      $i=$65;
      label = 9; break;
    case 12: 
      var $67=$mentrycount;
      var $68=$6;
      HEAP32[(($68)>>2)]=$67;
      $1=0;
      label = 13; break;
    case 13: 
      var $70=$1;

      return $70;
    default: assert(0, "bad label: " + label);
  }
}
_coalesce_entries["X"]=1;

function _magic_entry_free($me, $nme) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $1=$me;
      $2=$nme;
      var $3=$1;
      var $4=(($3)|0)==0;
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 9; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $9=$2;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=$i;
      var $13=$1;
      var $14=(($13+($12)*(12))|0);
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      _free($17);
      label = 7; break;
    case 7: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 5; break;
    case 8: 
      var $22=$1;
      var $23=$22;
      _free($23);
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _set_test_type($mstart, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$mstart;
      $2=$m;
      var $3=$2;
      var $4=(($3+6)|0);
      var $5=HEAP8[($4)];
      var $6=(($5)&255);
      if ((($6)|0) == 1 || (($6)|0) == 2 || (($6)|0) == 4 || (($6)|0) == 6 || (($6)|0) == 7 || (($6)|0) == 8 || (($6)|0) == 9 || (($6)|0) == 10 || (($6)|0) == 11 || (($6)|0) == 12 || (($6)|0) == 14 || (($6)|0) == 15 || (($6)|0) == 16 || (($6)|0) == 21 || (($6)|0) == 22 || (($6)|0) == 23 || (($6)|0) == 24 || (($6)|0) == 25 || (($6)|0) == 26 || (($6)|0) == 27 || (($6)|0) == 28 || (($6)|0) == 29 || (($6)|0) == 30 || (($6)|0) == 31 || (($6)|0) == 32 || (($6)|0) == 42 || (($6)|0) == 43 || (($6)|0) == 44 || (($6)|0) == 33 || (($6)|0) == 34 || (($6)|0) == 35 || (($6)|0) == 36 || (($6)|0) == 37 || (($6)|0) == 38) {
        label = 3; break;
      }
      else if ((($6)|0) == 5 || (($6)|0) == 13 || (($6)|0) == 18 || (($6)|0) == 19) {
        label = 4; break;
      }
      else if ((($6)|0) == 17 || (($6)|0) == 20) {
        label = 8; break;
      }
      else if ((($6)|0) == 3) {
        label = 18; break;
      }
      else if ((($6)|0) == 0) {
        label = 19; break;
      }
      else {
      label = 20; break;
      }
      
    case 3: 
      var $8=$1;
      var $9=(($8+2)|0);
      var $10=HEAP8[($9)];
      var $11=(($10)&255);
      var $12=$11 | 32;
      var $13=(($12) & 255);
      HEAP8[($9)]=$13;
      label = 21; break;
    case 4: 
      var $15=$1;
      var $16=(($15+24)|0);
      var $17=$16;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 & 32;
      var $21=(($20)|0)!=0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$1;
      var $24=(($23+2)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&255);
      var $27=$26 | 64;
      var $28=(($27) & 255);
      HEAP8[($24)]=$28;
      label = 7; break;
    case 6: 
      var $30=$1;
      var $31=(($30+2)|0);
      var $32=HEAP8[($31)];
      var $33=(($32)&255);
      var $34=$33 | 32;
      var $35=(($34) & 255);
      HEAP8[($31)]=$35;
      label = 7; break;
    case 7: 
      label = 21; break;
    case 8: 
      var $38=$1;
      var $39=(($38+24)|0);
      var $40=$39;
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 & 64;
      var $44=(($43)|0)!=0;
      if ($44) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $46=$1;
      var $47=(($46+2)|0);
      var $48=HEAP8[($47)];
      var $49=(($48)&255);
      var $50=$49 | 32;
      var $51=(($50) & 255);
      HEAP8[($47)]=$51;
      label = 10; break;
    case 10: 
      var $53=$1;
      var $54=(($53+24)|0);
      var $55=$54;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57 & 32;
      var $59=(($58)|0)!=0;
      if ($59) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $61=$1;
      var $62=(($61+2)|0);
      var $63=HEAP8[($62)];
      var $64=(($63)&255);
      var $65=$64 | 64;
      var $66=(($65) & 255);
      HEAP8[($62)]=$66;
      label = 12; break;
    case 12: 
      var $68=$1;
      var $69=(($68+2)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      var $72=$71 & 96;
      var $73=(($72)|0)!=0;
      if ($73) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 21; break;
    case 14: 
      var $76=$2;
      var $77=(($76+32)|0);
      var $78=$77;
      var $79=(($78)|0);
      var $80=$2;
      var $81=(($80+5)|0);
      var $82=HEAP8[($81)];
      var $83=(($82)&255);
      var $84=_file_looks_utf8($79, $83, 0, 0);
      var $85=(($84)|0) <= 0;
      if ($85) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $87=$1;
      var $88=(($87+2)|0);
      var $89=HEAP8[($88)];
      var $90=(($89)&255);
      var $91=$90 | 32;
      var $92=(($91) & 255);
      HEAP8[($88)]=$92;
      label = 17; break;
    case 16: 
      var $94=$1;
      var $95=(($94+2)|0);
      var $96=HEAP8[($95)];
      var $97=(($96)&255);
      var $98=$97 | 64;
      var $99=(($98) & 255);
      HEAP8[($95)]=$99;
      label = 17; break;
    case 17: 
      label = 21; break;
    case 18: 
      label = 21; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_set_test_type["X"]=1;

function _parse($ms, $me, $line, $lineno, $action) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $i;
      var $m;
      var $l=__stackBase__;
      var $t=(__stackBase__)+(4);
      var $op;
      var $cont_level;
      var $nm;
      var $cnt;
      var $val=(__stackBase__)+(8);
      var $have_range;
      $2=$ms;
      $3=$me;
      $4=$line;
      $5=$lineno;
      $6=$action;
      var $7=$4;
      HEAP32[(($l)>>2)]=$7;
      $cont_level=0;
      label = 3; break;
    case 3: 
      var $9=HEAP32[(($l)>>2)];
      var $10=HEAP8[($9)];
      var $11=(($10 << 24) >> 24);
      var $12=(($11)|0)==62;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=HEAP32[(($l)>>2)];
      var $15=(($14+1)|0);
      HEAP32[(($l)>>2)]=$15;
      var $16=$cont_level;
      var $17=((($16)+(1))|0);
      $cont_level=$17;
      label = 3; break;
    case 5: 
      var $19=$cont_level;
      var $20=(($19)|0)==0;
      if ($20) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $22=$cont_level;
      var $23=HEAP32[((5246324)>>2)];
      var $24=(($22)>>>0) > (($23)>>>0);
      if ($24) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $26=$2;
      var $27=$cont_level;
      var $28=_file_check_mem($26, $27);
      var $29=(($28)|0)==-1;
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 226; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $33=$cont_level;
      HEAP32[((5246324)>>2)]=$33;
      var $34=$cont_level;
      var $35=(($34)|0)!=0;
      if ($35) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $37=$3;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0)==0;
      if ($40) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $42=$2;
      _file_error($42, 0, ((5266260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 226; break;
    case 13: 
      var $44=$3;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$3;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($46)|0)==(($49)|0);
      if ($50) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $52=$3;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)+(10))|0);
      $cnt=$55;
      var $56=$3;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      var $60=$cnt;
      var $61=((($60)*(232))|0);
      var $62=_realloc($59, $61);
      var $63=$62;
      $nm=$63;
      var $64=(($63)|0)==0;
      if ($64) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $66=$2;
      var $67=$cnt;
      var $68=((($67)*(232))|0);
      _file_oomem($66, $68);
      $1=-1;
      label = 226; break;
    case 16: 
      var $70=$nm;
      $m=$70;
      var $71=$3;
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$cnt;
      var $74=$3;
      var $75=(($74+8)|0);
      HEAP32[(($75)>>2)]=$73;
      label = 17; break;
    case 17: 
      var $77=$3;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)+(1))|0);
      HEAP32[(($78)>>2)]=$80;
      var $81=$3;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($79)*(232))|0);
      $m=$84;
      var $85=$m;
      var $86=$85;
      for (var $$dest = $86>>2, $$stop = $$dest + 58; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $87=$cont_level;
      var $88=(($87) & 65535);
      var $89=$m;
      var $90=(($89)|0);
      HEAP16[(($90)>>1)]=$88;
      label = 23; break;
    case 18: 
      var $92=$3;
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|0)!=0;
      if ($95) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=1;
      label = 226; break;
    case 20: 
      var $98=_malloc(2320);
      var $99=$98;
      $m=$99;
      var $100=(($99)|0)==0;
      if ($100) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $102=$2;
      _file_oomem($102, 2320);
      $1=-1;
      label = 226; break;
    case 22: 
      var $104=$m;
      var $105=$3;
      var $106=(($105)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$3;
      var $108=(($107+8)|0);
      HEAP32[(($108)>>2)]=10;
      var $109=$m;
      var $110=$109;
      for (var $$dest = $110>>2, $$stop = $$dest + 58; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $111=$m;
      var $112=(($111+11)|0);
      HEAP8[($112)]=0;
      var $113=$m;
      var $114=(($113)|0);
      HEAP16[(($114)>>1)]=0;
      var $115=$3;
      var $116=(($115+4)|0);
      HEAP32[(($116)>>2)]=1;
      label = 23; break;
    case 23: 
      var $118=$5;
      var $119=$m;
      var $120=(($119+20)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=HEAP32[(($l)>>2)];
      var $122=HEAP8[($121)];
      var $123=(($122 << 24) >> 24);
      var $124=(($123)|0)==38;
      if ($124) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $126=HEAP32[(($l)>>2)];
      var $127=(($126+1)|0);
      HEAP32[(($l)>>2)]=$127;
      var $128=$m;
      var $129=(($128+2)|0);
      var $130=HEAP8[($129)];
      var $131=(($130)&255);
      var $132=$131 | 2;
      var $133=(($132) & 255);
      HEAP8[($129)]=$133;
      label = 25; break;
    case 25: 
      var $135=HEAP32[(($l)>>2)];
      var $136=HEAP8[($135)];
      var $137=(($136 << 24) >> 24);
      var $138=(($137)|0)==40;
      if ($138) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $140=HEAP32[(($l)>>2)];
      var $141=(($140+1)|0);
      HEAP32[(($l)>>2)]=$141;
      var $142=$m;
      var $143=(($142+2)|0);
      var $144=HEAP8[($143)];
      var $145=(($144)&255);
      var $146=$145 | 1;
      var $147=(($146) & 255);
      HEAP8[($143)]=$147;
      var $148=$m;
      var $149=(($148+2)|0);
      var $150=HEAP8[($149)];
      var $151=(($150)&255);
      var $152=$151 & 2;
      var $153=(($152)|0)!=0;
      if ($153) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $155=$m;
      var $156=(($155+2)|0);
      var $157=HEAP8[($156)];
      var $158=(($157)&255);
      var $159=$158 & -3;
      var $160=$159 | 4;
      var $161=(($160) & 255);
      var $162=$m;
      var $163=(($162+2)|0);
      HEAP8[($163)]=$161;
      label = 28; break;
    case 28: 
      var $165=HEAP32[(($l)>>2)];
      var $166=HEAP8[($165)];
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|0)==38;
      if ($168) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $170=HEAP32[(($l)>>2)];
      var $171=(($170+1)|0);
      HEAP32[(($l)>>2)]=$171;
      var $172=$m;
      var $173=(($172+2)|0);
      var $174=HEAP8[($173)];
      var $175=(($174)&255);
      var $176=$175 | 2;
      var $177=(($176) & 255);
      HEAP8[($173)]=$177;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $180=$m;
      var $181=(($180)|0);
      var $182=HEAP16[(($181)>>1)];
      var $183=(($182)&65535);
      var $184=(($183)|0)==0;
      if ($184) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $186=$m;
      var $187=(($186+2)|0);
      var $188=HEAP8[($187)];
      var $189=(($188)&255);
      var $190=$189 & 6;
      var $191=(($190)|0)!=0;
      if ($191) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $193=$2;
      var $194=(($193+32)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=$195 & 64;
      var $197=(($196)|0)!=0;
      if ($197) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $199=$2;
      _file_magwarn($199, ((5266188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $202=HEAP32[(($l)>>2)];
      var $203=_strtoul($202, $t, 0);
      var $204=$m;
      var $205=(($204+12)|0);
      HEAP32[(($205)>>2)]=$203;
      var $206=HEAP32[(($l)>>2)];
      var $207=HEAP32[(($t)>>2)];
      var $208=(($206)|0)==(($207)|0);
      if ($208) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $210=$2;
      var $211=(($210+32)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$212 & 64;
      var $214=(($213)|0)!=0;
      if ($214) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $216=$2;
      var $217=HEAP32[(($l)>>2)];
      _file_magwarn($216, ((5266092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$217,tempInt));
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $220=HEAP32[(($t)>>2)];
      HEAP32[(($l)>>2)]=$220;
      var $221=$m;
      var $222=(($221+2)|0);
      var $223=HEAP8[($222)];
      var $224=(($223)&255);
      var $225=$224 & 1;
      var $226=(($225)|0)!=0;
      if ($226) { label = 41; break; } else { label = 77; break; }
    case 41: 
      var $228=$m;
      var $229=(($228+7)|0);
      HEAP8[($229)]=4;
      var $230=$m;
      var $231=(($230+16)|0);
      HEAP32[(($231)>>2)]=0;
      var $232=HEAP32[(($l)>>2)];
      var $233=HEAP8[($232)];
      var $234=(($233 << 24) >> 24);
      var $235=(($234)|0)==46;
      if ($235) { label = 42; break; } else { label = 57; break; }
    case 42: 
      var $237=HEAP32[(($l)>>2)];
      var $238=(($237+1)|0);
      HEAP32[(($l)>>2)]=$238;
      var $239=HEAP32[(($l)>>2)];
      var $240=HEAP8[($239)];
      var $241=(($240 << 24) >> 24);
      if ((($241)|0) == 108) {
        label = 43; break;
      }
      else if ((($241)|0) == 76) {
        label = 44; break;
      }
      else if ((($241)|0) == 109) {
        label = 45; break;
      }
      else if ((($241)|0) == 104 || (($241)|0) == 115) {
        label = 46; break;
      }
      else if ((($241)|0) == 72 || (($241)|0) == 83) {
        label = 47; break;
      }
      else if ((($241)|0) == 99 || (($241)|0) == 98 || (($241)|0) == 67 || (($241)|0) == 66) {
        label = 48; break;
      }
      else if ((($241)|0) == 101 || (($241)|0) == 102 || (($241)|0) == 103) {
        label = 49; break;
      }
      else if ((($241)|0) == 69 || (($241)|0) == 70 || (($241)|0) == 71) {
        label = 50; break;
      }
      else if ((($241)|0) == 105) {
        label = 51; break;
      }
      else if ((($241)|0) == 73) {
        label = 52; break;
      }
      else {
      label = 53; break;
      }
      
    case 43: 
      var $243=$m;
      var $244=(($243+7)|0);
      HEAP8[($244)]=11;
      label = 56; break;
    case 44: 
      var $246=$m;
      var $247=(($246+7)|0);
      HEAP8[($247)]=8;
      label = 56; break;
    case 45: 
      var $249=$m;
      var $250=(($249+7)|0);
      HEAP8[($250)]=23;
      label = 56; break;
    case 46: 
      var $252=$m;
      var $253=(($252+7)|0);
      HEAP8[($253)]=10;
      label = 56; break;
    case 47: 
      var $255=$m;
      var $256=(($255+7)|0);
      HEAP8[($256)]=7;
      label = 56; break;
    case 48: 
      var $258=$m;
      var $259=(($258+7)|0);
      HEAP8[($259)]=1;
      label = 56; break;
    case 49: 
      var $261=$m;
      var $262=(($261+7)|0);
      HEAP8[($262)]=38;
      label = 56; break;
    case 50: 
      var $264=$m;
      var $265=(($264+7)|0);
      HEAP8[($265)]=37;
      label = 56; break;
    case 51: 
      var $267=$m;
      var $268=(($267+7)|0);
      HEAP8[($268)]=40;
      label = 56; break;
    case 52: 
      var $270=$m;
      var $271=(($270+7)|0);
      HEAP8[($271)]=39;
      label = 56; break;
    case 53: 
      var $273=$2;
      var $274=(($273+32)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=$275 & 64;
      var $277=(($276)|0)!=0;
      if ($277) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $279=$2;
      var $280=HEAP32[(($l)>>2)];
      var $281=HEAP8[($280)];
      var $282=(($281 << 24) >> 24);
      _file_magwarn($279, ((5265928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$282,tempInt));
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $285=HEAP32[(($l)>>2)];
      var $286=(($285+1)|0);
      HEAP32[(($l)>>2)]=$286;
      label = 57; break;
    case 57: 
      var $288=$m;
      var $289=(($288+8)|0);
      HEAP8[($289)]=0;
      var $290=HEAP32[(($l)>>2)];
      var $291=HEAP8[($290)];
      var $292=(($291 << 24) >> 24);
      var $293=(($292)|0)==126;
      if ($293) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $295=$m;
      var $296=(($295+8)|0);
      var $297=HEAP8[($296)];
      var $298=(($297)&255);
      var $299=$298 | 64;
      var $300=(($299) & 255);
      HEAP8[($296)]=$300;
      var $301=HEAP32[(($l)>>2)];
      var $302=(($301+1)|0);
      HEAP32[(($l)>>2)]=$302;
      label = 59; break;
    case 59: 
      var $304=HEAP32[(($l)>>2)];
      var $305=HEAP8[($304)];
      var $306=_get_op($305);
      $op=$306;
      var $307=(($306)|0)!=-1;
      if ($307) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $309=$op;
      var $310=$m;
      var $311=(($310+8)|0);
      var $312=HEAP8[($311)];
      var $313=(($312)&255);
      var $314=$313 | $309;
      var $315=(($314) & 255);
      HEAP8[($311)]=$315;
      var $316=HEAP32[(($l)>>2)];
      var $317=(($316+1)|0);
      HEAP32[(($l)>>2)]=$317;
      label = 61; break;
    case 61: 
      var $319=HEAP32[(($l)>>2)];
      var $320=HEAP8[($319)];
      var $321=(($320 << 24) >> 24);
      var $322=(($321)|0)==40;
      if ($322) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $324=$m;
      var $325=(($324+8)|0);
      var $326=HEAP8[($325)];
      var $327=(($326)&255);
      var $328=$327 | 128;
      var $329=(($328) & 255);
      HEAP8[($325)]=$329;
      var $330=HEAP32[(($l)>>2)];
      var $331=(($330+1)|0);
      HEAP32[(($l)>>2)]=$331;
      label = 63; break;
    case 63: 
      var $333=HEAP32[(($l)>>2)];
      var $334=HEAP8[($333)];
      var $335=(($334)&255);
      var $336=_isdigit($335);
      var $337=(($336)|0)!=0;
      if ($337) { label = 65; break; } else { label = 64; break; }
    case 64: 
      var $339=HEAP32[(($l)>>2)];
      var $340=HEAP8[($339)];
      var $341=(($340 << 24) >> 24);
      var $342=(($341)|0)==45;
      if ($342) { label = 65; break; } else { label = 70; break; }
    case 65: 
      var $344=HEAP32[(($l)>>2)];
      var $345=_strtol($344, $t, 0);
      var $346=$m;
      var $347=(($346+16)|0);
      HEAP32[(($347)>>2)]=$345;
      var $348=HEAP32[(($l)>>2)];
      var $349=HEAP32[(($t)>>2)];
      var $350=(($348)|0)==(($349)|0);
      if ($350) { label = 66; break; } else { label = 69; break; }
    case 66: 
      var $352=$2;
      var $353=(($352+32)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=$354 & 64;
      var $356=(($355)|0)!=0;
      if ($356) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $358=$2;
      var $359=HEAP32[(($l)>>2)];
      _file_magwarn($358, ((5265792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$359,tempInt));
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $362=HEAP32[(($t)>>2)];
      HEAP32[(($l)>>2)]=$362;
      label = 70; break;
    case 70: 
      var $364=HEAP32[(($l)>>2)];
      var $365=(($364+1)|0);
      HEAP32[(($l)>>2)]=$365;
      var $366=HEAP8[($364)];
      var $367=(($366 << 24) >> 24);
      var $368=(($367)|0)!=41;
      if ($368) { label = 73; break; } else { label = 71; break; }
    case 71: 
      var $370=$m;
      var $371=(($370+8)|0);
      var $372=HEAP8[($371)];
      var $373=(($372)&255);
      var $374=$373 & 128;
      var $375=(($374)|0)!=0;
      if ($375) { label = 72; break; } else { label = 76; break; }
    case 72: 
      var $377=HEAP32[(($l)>>2)];
      var $378=(($377+1)|0);
      HEAP32[(($l)>>2)]=$378;
      var $379=HEAP8[($377)];
      var $380=(($379 << 24) >> 24);
      var $381=(($380)|0)!=41;
      if ($381) { label = 73; break; } else { label = 76; break; }
    case 73: 
      var $383=$2;
      var $384=(($383+32)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$385 & 64;
      var $387=(($386)|0)!=0;
      if ($387) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $389=$2;
      _file_magwarn($389, ((5265688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $394=HEAP32[(($l)>>2)];
      var $395=HEAP8[($394)];
      var $396=(($395)&255);
      var $397=(($396)>>>0) <= 127;
      if ($397) { label = 79; break; } else { var $405 = 0;label = 80; break; }
    case 79: 
      var $399=HEAP32[(($l)>>2)];
      var $400=HEAP8[($399)];
      var $401=(($400)&255);
      var $402=_isspace($401);
      var $403=(($402)|0)!=0;
      var $405 = $403;label = 80; break;
    case 80: 
      var $405;
      if ($405) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $407=HEAP32[(($l)>>2)];
      var $408=(($407+1)|0);
      HEAP32[(($l)>>2)]=$408;
      label = 78; break;
    case 82: 
      var $410=HEAP32[(($l)>>2)];
      var $411=_get_cond($410, $l);
      var $412=(($411) & 255);
      var $413=$m;
      var $414=(($413+10)|0);
      HEAP8[($414)]=$412;
      var $415=$2;
      var $416=$m;
      var $417=(($416+10)|0);
      var $418=HEAP8[($417)];
      var $419=(($418)&255);
      var $420=$cont_level;
      var $421=_check_cond($415, $419, $420);
      var $422=(($421)|0)==-1;
      if ($422) { label = 83; break; } else { label = 84; break; }
    case 83: 
      $1=-1;
      label = 226; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $426=HEAP32[(($l)>>2)];
      var $427=HEAP8[($426)];
      var $428=(($427)&255);
      var $429=(($428)>>>0) <= 127;
      if ($429) { label = 86; break; } else { var $437 = 0;label = 87; break; }
    case 86: 
      var $431=HEAP32[(($l)>>2)];
      var $432=HEAP8[($431)];
      var $433=(($432)&255);
      var $434=_isspace($433);
      var $435=(($434)|0)!=0;
      var $437 = $435;label = 87; break;
    case 87: 
      var $437;
      if ($437) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $439=HEAP32[(($l)>>2)];
      var $440=(($439+1)|0);
      HEAP32[(($l)>>2)]=$440;
      label = 85; break;
    case 89: 
      var $442=HEAP32[(($l)>>2)];
      var $443=HEAP8[($442)];
      var $444=(($443 << 24) >> 24);
      var $445=(($444)|0)==117;
      if ($445) { label = 90; break; } else { label = 93; break; }
    case 90: 
      var $447=HEAP32[(($l)>>2)];
      var $448=(($447+1)|0);
      var $449=HEAP8[($448)];
      var $450=(($449 << 24) >> 24);
      var $451=(($450)|0)!=115;
      if ($451) { label = 92; break; } else { label = 91; break; }
    case 91: 
      var $453=HEAP32[(($l)>>2)];
      var $454=(($453+2)|0);
      var $455=HEAP8[($454)];
      var $456=(($455 << 24) >> 24);
      var $457=(($456)|0)!=101;
      if ($457) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $459=HEAP32[(($l)>>2)];
      var $460=(($459+1)|0);
      HEAP32[(($l)>>2)]=$460;
      var $461=$m;
      var $462=(($461+2)|0);
      var $463=HEAP8[($462)];
      var $464=(($463)&255);
      var $465=$464 | 8;
      var $466=(($465) & 255);
      HEAP8[($462)]=$466;
      label = 93; break;
    case 93: 
      var $468=HEAP32[(($l)>>2)];
      var $469=_get_type($468, $l);
      var $470=(($469) & 255);
      var $471=$m;
      var $472=(($471+6)|0);
      HEAP8[($472)]=$470;
      var $473=$m;
      var $474=(($473+6)|0);
      var $475=HEAP8[($474)];
      var $476=(($475)&255);
      var $477=(($476)|0)==0;
      if ($477) { label = 94; break; } else { label = 97; break; }
    case 94: 
      var $479=$2;
      var $480=(($479+32)|0);
      var $481=HEAP32[(($480)>>2)];
      var $482=$481 & 64;
      var $483=(($482)|0)!=0;
      if ($483) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $485=$2;
      var $486=HEAP32[(($l)>>2)];
      _file_magwarn($485, ((5265596)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$486,tempInt));
      label = 96; break;
    case 96: 
      $1=-1;
      label = 226; break;
    case 97: 
      var $489=$m;
      var $490=(($489+9)|0);
      HEAP8[($490)]=0;
      var $491=HEAP32[(($l)>>2)];
      var $492=HEAP8[($491)];
      var $493=(($492 << 24) >> 24);
      var $494=(($493)|0)==126;
      if ($494) { label = 98; break; } else { label = 112; break; }
    case 98: 
      var $496=$m;
      var $497=(($496+6)|0);
      var $498=HEAP8[($497)];
      var $499=(($498)&255);
      var $500=(($499)|0)==5;
      if ($500) { label = 108; break; } else { label = 99; break; }
    case 99: 
      var $502=$m;
      var $503=(($502+6)|0);
      var $504=HEAP8[($503)];
      var $505=(($504)&255);
      var $506=(($505)|0)==13;
      if ($506) { label = 108; break; } else { label = 100; break; }
    case 100: 
      var $508=$m;
      var $509=(($508+6)|0);
      var $510=HEAP8[($509)];
      var $511=(($510)&255);
      var $512=(($511)|0)==18;
      if ($512) { label = 108; break; } else { label = 101; break; }
    case 101: 
      var $514=$m;
      var $515=(($514+6)|0);
      var $516=HEAP8[($515)];
      var $517=(($516)&255);
      var $518=(($517)|0)==19;
      if ($518) { label = 108; break; } else { label = 102; break; }
    case 102: 
      var $520=$m;
      var $521=(($520+6)|0);
      var $522=HEAP8[($521)];
      var $523=(($522)&255);
      var $524=(($523)|0)==17;
      if ($524) { label = 108; break; } else { label = 103; break; }
    case 103: 
      var $526=$m;
      var $527=(($526+6)|0);
      var $528=HEAP8[($527)];
      var $529=(($528)&255);
      var $530=(($529)|0)==20;
      if ($530) { label = 108; break; } else { label = 104; break; }
    case 104: 
      var $532=$m;
      var $533=(($532+6)|0);
      var $534=HEAP8[($533)];
      var $535=(($534)&255);
      var $536=(($535)|0)==45;
      if ($536) { label = 108; break; } else { label = 105; break; }
    case 105: 
      var $538=$m;
      var $539=(($538+6)|0);
      var $540=HEAP8[($539)];
      var $541=(($540)&255);
      var $542=(($541)|0)==46;
      if ($542) { label = 108; break; } else { label = 106; break; }
    case 106: 
      var $544=$m;
      var $545=(($544+6)|0);
      var $546=HEAP8[($545)];
      var $547=(($546)&255);
      var $548=(($547)|0)==3;
      if ($548) { label = 108; break; } else { label = 107; break; }
    case 107: 
      var $550=$m;
      var $551=(($550+9)|0);
      var $552=HEAP8[($551)];
      var $553=(($552)&255);
      var $554=$553 | 64;
      var $555=(($554) & 255);
      HEAP8[($551)]=$555;
      label = 111; break;
    case 108: 
      var $557=$2;
      var $558=(($557+32)|0);
      var $559=HEAP32[(($558)>>2)];
      var $560=$559 & 64;
      var $561=(($560)|0)!=0;
      if ($561) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $563=$2;
      _file_magwarn($563, ((5265532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $566=HEAP32[(($l)>>2)];
      var $567=(($566+1)|0);
      HEAP32[(($l)>>2)]=$567;
      label = 112; break;
    case 112: 
      var $569=$m;
      var $570=(($569+24)|0);
      var $571=$570;
      var $572=(($571)|0);
      HEAP32[(($572)>>2)]=0;
      var $573=$m;
      var $574=(($573+6)|0);
      var $575=HEAP8[($574)];
      var $576=(($575)&255);
      var $577=(($576)|0)==13;
      var $578=$577 ? 128 : 0;
      var $579=$m;
      var $580=(($579+24)|0);
      var $581=$580;
      var $582=(($581+4)|0);
      HEAP32[(($582)>>2)]=$578;
      var $583=HEAP32[(($l)>>2)];
      var $584=HEAP8[($583)];
      var $585=_get_op($584);
      $op=$585;
      var $586=(($585)|0)!=-1;
      if ($586) { label = 113; break; } else { label = 175; break; }
    case 113: 
      var $588=$m;
      var $589=(($588+6)|0);
      var $590=HEAP8[($589)];
      var $591=(($590)&255);
      var $592=(($591)|0)==5;
      if ($592) { label = 123; break; } else { label = 114; break; }
    case 114: 
      var $594=$m;
      var $595=(($594+6)|0);
      var $596=HEAP8[($595)];
      var $597=(($596)&255);
      var $598=(($597)|0)==13;
      if ($598) { label = 123; break; } else { label = 115; break; }
    case 115: 
      var $600=$m;
      var $601=(($600+6)|0);
      var $602=HEAP8[($601)];
      var $603=(($602)&255);
      var $604=(($603)|0)==18;
      if ($604) { label = 123; break; } else { label = 116; break; }
    case 116: 
      var $606=$m;
      var $607=(($606+6)|0);
      var $608=HEAP8[($607)];
      var $609=(($608)&255);
      var $610=(($609)|0)==19;
      if ($610) { label = 123; break; } else { label = 117; break; }
    case 117: 
      var $612=$m;
      var $613=(($612+6)|0);
      var $614=HEAP8[($613)];
      var $615=(($614)&255);
      var $616=(($615)|0)==17;
      if ($616) { label = 123; break; } else { label = 118; break; }
    case 118: 
      var $618=$m;
      var $619=(($618+6)|0);
      var $620=HEAP8[($619)];
      var $621=(($620)&255);
      var $622=(($621)|0)==20;
      if ($622) { label = 123; break; } else { label = 119; break; }
    case 119: 
      var $624=$m;
      var $625=(($624+6)|0);
      var $626=HEAP8[($625)];
      var $627=(($626)&255);
      var $628=(($627)|0)==45;
      if ($628) { label = 123; break; } else { label = 120; break; }
    case 120: 
      var $630=$m;
      var $631=(($630+6)|0);
      var $632=HEAP8[($631)];
      var $633=(($632)&255);
      var $634=(($633)|0)==46;
      if ($634) { label = 123; break; } else { label = 121; break; }
    case 121: 
      var $636=$m;
      var $637=(($636+6)|0);
      var $638=HEAP8[($637)];
      var $639=(($638)&255);
      var $640=(($639)|0)==3;
      if ($640) { label = 123; break; } else { label = 122; break; }
    case 122: 
      var $642=HEAP32[(($l)>>2)];
      var $643=(($642+1)|0);
      HEAP32[(($l)>>2)]=$643;
      var $644=$op;
      var $645=$m;
      var $646=(($645+9)|0);
      var $647=HEAP8[($646)];
      var $648=(($647)&255);
      var $649=$648 | $644;
      var $650=(($649) & 255);
      HEAP8[($646)]=$650;
      var $651=HEAP32[(($l)>>2)];
      var $652$0=_strtoull($651, $t, 0);
      var $652$1=tempRet0;
      var $st$14$0=(($val)|0);
      HEAP32[(($st$14$0)>>2)]=$652$0;
      var $st$14$1=(($val+4)|0);
      HEAP32[(($st$14$1)>>2)]=$652$1;
      var $653=HEAP32[(($t)>>2)];
      HEAP32[(($l)>>2)]=$653;
      var $654=$2;
      var $655=$m;
      var $st$22$0=(($val)|0);
      var $656$0=HEAP32[(($st$22$0)>>2)];
      var $st$22$1=(($val+4)|0);
      var $656$1=HEAP32[(($st$22$1)>>2)];
      var $657$0=_file_signextend($654, $655, $656$0, $656$1);
      var $657$1=tempRet0;
      var $658=$m;
      var $659=(($658+24)|0);
      var $660=$659;
      var $st$31$0=(($660)|0);
      HEAP32[(($st$31$0)>>2)]=$657$0;
      var $st$31$1=(($660+4)|0);
      HEAP32[(($st$31$1)>>2)]=$657$1;
      _eatsize($l);
      label = 174; break;
    case 123: 
      var $662=$op;
      var $663=(($662)|0)==6;
      if ($663) { label = 124; break; } else { label = 170; break; }
    case 124: 
      $have_range=0;
      label = 125; break;
    case 125: 
      var $666=HEAP32[(($l)>>2)];
      var $667=(($666+1)|0);
      HEAP32[(($l)>>2)]=$667;
      var $668=HEAP8[($667)];
      var $669=(($668)&255);
      var $670=_isspace($669);
      var $671=(($670)|0)!=0;
      var $672=$671 ^ 1;
      if ($672) { label = 126; break; } else { label = 167; break; }
    case 126: 
      var $674=HEAP32[(($l)>>2)];
      var $675=HEAP8[($674)];
      var $676=(($675 << 24) >> 24);
      if ((($676)|0) == 48 || (($676)|0) == 49 || (($676)|0) == 50 || (($676)|0) == 51 || (($676)|0) == 52 || (($676)|0) == 53 || (($676)|0) == 54 || (($676)|0) == 55 || (($676)|0) == 56 || (($676)|0) == 57) {
        label = 127; break;
      }
      else if ((($676)|0) == 87) {
        label = 133; break;
      }
      else if ((($676)|0) == 119) {
        label = 134; break;
      }
      else if ((($676)|0) == 99) {
        label = 135; break;
      }
      else if ((($676)|0) == 67) {
        label = 136; break;
      }
      else if ((($676)|0) == 115) {
        label = 137; break;
      }
      else if ((($676)|0) == 98) {
        label = 138; break;
      }
      else if ((($676)|0) == 116) {
        label = 139; break;
      }
      else if ((($676)|0) == 84) {
        label = 140; break;
      }
      else if ((($676)|0) == 66) {
        label = 141; break;
      }
      else if ((($676)|0) == 72) {
        label = 144; break;
      }
      else if ((($676)|0) == 104) {
        label = 147; break;
      }
      else if ((($676)|0) == 76) {
        label = 150; break;
      }
      else if ((($676)|0) == 108) {
        label = 153; break;
      }
      else if ((($676)|0) == 74) {
        label = 156; break;
      }
      else {
      label = 159; break;
      }
      
    case 127: 
      var $678=$have_range;
      var $679=(($678)|0)!=0;
      if ($679) { label = 128; break; } else { label = 130; break; }
    case 128: 
      var $681=$2;
      var $682=(($681+32)|0);
      var $683=HEAP32[(($682)>>2)];
      var $684=$683 & 64;
      var $685=(($684)|0)!=0;
      if ($685) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $687=$2;
      _file_magwarn($687, ((5265428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 130; break;
    case 130: 
      $have_range=1;
      var $689=HEAP32[(($l)>>2)];
      var $690=_strtoul($689, $t, 0);
      var $691=$m;
      var $692=(($691+24)|0);
      var $693=$692;
      var $694=(($693)|0);
      HEAP32[(($694)>>2)]=$690;
      var $695=$m;
      var $696=(($695+24)|0);
      var $697=$696;
      var $698=(($697)|0);
      var $699=HEAP32[(($698)>>2)];
      var $700=(($699)|0)==0;
      if ($700) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $702=$2;
      _file_magwarn($702, ((5265368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 132; break;
    case 132: 
      var $704=HEAP32[(($t)>>2)];
      var $705=((($704)-(1))|0);
      HEAP32[(($l)>>2)]=$705;
      label = 163; break;
    case 133: 
      var $707=$m;
      var $708=(($707+24)|0);
      var $709=$708;
      var $710=(($709+4)|0);
      var $711=HEAP32[(($710)>>2)];
      var $712=$711 | 1;
      HEAP32[(($710)>>2)]=$712;
      label = 163; break;
    case 134: 
      var $714=$m;
      var $715=(($714+24)|0);
      var $716=$715;
      var $717=(($716+4)|0);
      var $718=HEAP32[(($717)>>2)];
      var $719=$718 | 2;
      HEAP32[(($717)>>2)]=$719;
      label = 163; break;
    case 135: 
      var $721=$m;
      var $722=(($721+24)|0);
      var $723=$722;
      var $724=(($723+4)|0);
      var $725=HEAP32[(($724)>>2)];
      var $726=$725 | 4;
      HEAP32[(($724)>>2)]=$726;
      label = 163; break;
    case 136: 
      var $728=$m;
      var $729=(($728+24)|0);
      var $730=$729;
      var $731=(($730+4)|0);
      var $732=HEAP32[(($731)>>2)];
      var $733=$732 | 8;
      HEAP32[(($731)>>2)]=$733;
      label = 163; break;
    case 137: 
      var $735=$m;
      var $736=(($735+24)|0);
      var $737=$736;
      var $738=(($737+4)|0);
      var $739=HEAP32[(($738)>>2)];
      var $740=$739 | 16;
      HEAP32[(($738)>>2)]=$740;
      label = 163; break;
    case 138: 
      var $742=$m;
      var $743=(($742+24)|0);
      var $744=$743;
      var $745=(($744+4)|0);
      var $746=HEAP32[(($745)>>2)];
      var $747=$746 | 64;
      HEAP32[(($745)>>2)]=$747;
      label = 163; break;
    case 139: 
      var $749=$m;
      var $750=(($749+24)|0);
      var $751=$750;
      var $752=(($751+4)|0);
      var $753=HEAP32[(($752)>>2)];
      var $754=$753 | 32;
      HEAP32[(($752)>>2)]=$754;
      label = 163; break;
    case 140: 
      var $756=$m;
      var $757=(($756+24)|0);
      var $758=$757;
      var $759=(($758+4)|0);
      var $760=HEAP32[(($759)>>2)];
      var $761=$760 | 8192;
      HEAP32[(($759)>>2)]=$761;
      label = 163; break;
    case 141: 
      var $763=$m;
      var $764=(($763+6)|0);
      var $765=HEAP8[($764)];
      var $766=(($765)&255);
      var $767=(($766)|0)!=13;
      if ($767) { label = 142; break; } else { label = 143; break; }
    case 142: 
      label = 160; break;
    case 143: 
      var $770=$m;
      var $771=(($770+24)|0);
      var $772=$771;
      var $773=(($772+4)|0);
      var $774=HEAP32[(($773)>>2)];
      var $775=$774 & -3969;
      var $776=$775 | 128;
      var $777=$m;
      var $778=(($777+24)|0);
      var $779=$778;
      var $780=(($779+4)|0);
      HEAP32[(($780)>>2)]=$776;
      label = 163; break;
    case 144: 
      var $782=$m;
      var $783=(($782+6)|0);
      var $784=HEAP8[($783)];
      var $785=(($784)&255);
      var $786=(($785)|0)!=13;
      if ($786) { label = 145; break; } else { label = 146; break; }
    case 145: 
      label = 160; break;
    case 146: 
      var $789=$m;
      var $790=(($789+24)|0);
      var $791=$790;
      var $792=(($791+4)|0);
      var $793=HEAP32[(($792)>>2)];
      var $794=$793 & -3969;
      var $795=$794 | 256;
      var $796=$m;
      var $797=(($796+24)|0);
      var $798=$797;
      var $799=(($798+4)|0);
      HEAP32[(($799)>>2)]=$795;
      label = 163; break;
    case 147: 
      var $801=$m;
      var $802=(($801+6)|0);
      var $803=HEAP8[($802)];
      var $804=(($803)&255);
      var $805=(($804)|0)!=13;
      if ($805) { label = 148; break; } else { label = 149; break; }
    case 148: 
      label = 160; break;
    case 149: 
      var $808=$m;
      var $809=(($808+24)|0);
      var $810=$809;
      var $811=(($810+4)|0);
      var $812=HEAP32[(($811)>>2)];
      var $813=$812 & -3969;
      var $814=$813 | 512;
      var $815=$m;
      var $816=(($815+24)|0);
      var $817=$816;
      var $818=(($817+4)|0);
      HEAP32[(($818)>>2)]=$814;
      label = 163; break;
    case 150: 
      var $820=$m;
      var $821=(($820+6)|0);
      var $822=HEAP8[($821)];
      var $823=(($822)&255);
      var $824=(($823)|0)!=13;
      if ($824) { label = 151; break; } else { label = 152; break; }
    case 151: 
      label = 160; break;
    case 152: 
      var $827=$m;
      var $828=(($827+24)|0);
      var $829=$828;
      var $830=(($829+4)|0);
      var $831=HEAP32[(($830)>>2)];
      var $832=$831 & -3969;
      var $833=$832 | 1024;
      var $834=$m;
      var $835=(($834+24)|0);
      var $836=$835;
      var $837=(($836+4)|0);
      HEAP32[(($837)>>2)]=$833;
      label = 163; break;
    case 153: 
      var $839=$m;
      var $840=(($839+6)|0);
      var $841=HEAP8[($840)];
      var $842=(($841)&255);
      var $843=(($842)|0)!=13;
      if ($843) { label = 154; break; } else { label = 155; break; }
    case 154: 
      label = 160; break;
    case 155: 
      var $846=$m;
      var $847=(($846+24)|0);
      var $848=$847;
      var $849=(($848+4)|0);
      var $850=HEAP32[(($849)>>2)];
      var $851=$850 & -3969;
      var $852=$851 | 2048;
      var $853=$m;
      var $854=(($853+24)|0);
      var $855=$854;
      var $856=(($855+4)|0);
      HEAP32[(($856)>>2)]=$852;
      label = 163; break;
    case 156: 
      var $858=$m;
      var $859=(($858+6)|0);
      var $860=HEAP8[($859)];
      var $861=(($860)&255);
      var $862=(($861)|0)!=13;
      if ($862) { label = 157; break; } else { label = 158; break; }
    case 157: 
      label = 160; break;
    case 158: 
      var $865=$m;
      var $866=(($865+24)|0);
      var $867=$866;
      var $868=(($867+4)|0);
      var $869=HEAP32[(($868)>>2)];
      var $870=$869 | 4096;
      HEAP32[(($868)>>2)]=$870;
      label = 163; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $873=$2;
      var $874=(($873+32)|0);
      var $875=HEAP32[(($874)>>2)];
      var $876=$875 & 64;
      var $877=(($876)|0)!=0;
      if ($877) { label = 161; break; } else { label = 162; break; }
    case 161: 
      var $879=$2;
      var $880=HEAP32[(($l)>>2)];
      var $881=HEAP8[($880)];
      var $882=(($881 << 24) >> 24);
      _file_magwarn($879, ((5265276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$882,tempInt));
      label = 162; break;
    case 162: 
      $1=-1;
      label = 226; break;
    case 163: 
      var $885=HEAP32[(($l)>>2)];
      var $886=(($885+1)|0);
      var $887=HEAP8[($886)];
      var $888=(($887 << 24) >> 24);
      var $889=(($888)|0)==47;
      if ($889) { label = 164; break; } else { label = 166; break; }
    case 164: 
      var $891=HEAP32[(($l)>>2)];
      var $892=(($891+2)|0);
      var $893=HEAP8[($892)];
      var $894=(($893)&255);
      var $895=_isspace($894);
      var $896=(($895)|0)!=0;
      if ($896) { label = 166; break; } else { label = 165; break; }
    case 165: 
      var $898=HEAP32[(($l)>>2)];
      var $899=(($898+1)|0);
      HEAP32[(($l)>>2)]=$899;
      label = 166; break;
    case 166: 
      label = 125; break;
    case 167: 
      var $902=$2;
      var $903=$m;
      var $904=_string_modifier_check($902, $903);
      var $905=(($904)|0)==-1;
      if ($905) { label = 168; break; } else { label = 169; break; }
    case 168: 
      $1=-1;
      label = 226; break;
    case 169: 
      label = 173; break;
    case 170: 
      var $909=$2;
      var $910=(($909+32)|0);
      var $911=HEAP32[(($910)>>2)];
      var $912=$911 & 64;
      var $913=(($912)|0)!=0;
      if ($913) { label = 171; break; } else { label = 172; break; }
    case 171: 
      var $915=$2;
      var $916=HEAP32[(($t)>>2)];
      var $917=HEAP8[($916)];
      var $918=(($917 << 24) >> 24);
      _file_magwarn($915, ((5265196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$918,tempInt));
      label = 172; break;
    case 172: 
      $1=-1;
      label = 226; break;
    case 173: 
      label = 174; break;
    case 174: 
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      var $924=HEAP32[(($l)>>2)];
      var $925=HEAP8[($924)];
      var $926=(($925)&255);
      var $927=(($926)>>>0) <= 127;
      if ($927) { label = 177; break; } else { var $935 = 0;label = 178; break; }
    case 177: 
      var $929=HEAP32[(($l)>>2)];
      var $930=HEAP8[($929)];
      var $931=(($930)&255);
      var $932=_isspace($931);
      var $933=(($932)|0)!=0;
      var $935 = $933;label = 178; break;
    case 178: 
      var $935;
      if ($935) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $937=HEAP32[(($l)>>2)];
      var $938=(($937+1)|0);
      HEAP32[(($l)>>2)]=$938;
      label = 176; break;
    case 180: 
      var $940=HEAP32[(($l)>>2)];
      var $941=HEAP8[($940)];
      var $942=(($941 << 24) >> 24);
      if ((($942)|0) == 62 || (($942)|0) == 60) {
        label = 181; break;
      }
      else if ((($942)|0) == 38 || (($942)|0) == 94 || (($942)|0) == 61) {
        label = 186; break;
      }
      else if ((($942)|0) == 33) {
        label = 189; break;
      }
      else {
      label = 190; break;
      }
      
    case 181: 
      var $944=HEAP32[(($l)>>2)];
      var $945=HEAP8[($944)];
      var $946=$m;
      var $947=(($946+4)|0);
      HEAP8[($947)]=$945;
      var $948=HEAP32[(($l)>>2)];
      var $949=(($948+1)|0);
      HEAP32[(($l)>>2)]=$949;
      var $950=HEAP32[(($l)>>2)];
      var $951=HEAP8[($950)];
      var $952=(($951 << 24) >> 24);
      var $953=(($952)|0)==61;
      if ($953) { label = 182; break; } else { label = 185; break; }
    case 182: 
      var $955=$2;
      var $956=(($955+32)|0);
      var $957=HEAP32[(($956)>>2)];
      var $958=$957 & 64;
      var $959=(($958)|0)!=0;
      if ($959) { label = 183; break; } else { label = 184; break; }
    case 183: 
      var $961=$2;
      var $962=$m;
      var $963=(($962+4)|0);
      var $964=HEAP8[($963)];
      var $965=(($964)&255);
      _file_magwarn($961, ((5265056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$965,tempInt));
      $1=-1;
      label = 226; break;
    case 184: 
      var $967=HEAP32[(($l)>>2)];
      var $968=(($967+1)|0);
      HEAP32[(($l)>>2)]=$968;
      label = 185; break;
    case 185: 
      label = 196; break;
    case 186: 
      var $971=HEAP32[(($l)>>2)];
      var $972=HEAP8[($971)];
      var $973=$m;
      var $974=(($973+4)|0);
      HEAP8[($974)]=$972;
      var $975=HEAP32[(($l)>>2)];
      var $976=(($975+1)|0);
      HEAP32[(($l)>>2)]=$976;
      var $977=HEAP32[(($l)>>2)];
      var $978=HEAP8[($977)];
      var $979=(($978 << 24) >> 24);
      var $980=(($979)|0)==61;
      if ($980) { label = 187; break; } else { label = 188; break; }
    case 187: 
      var $982=HEAP32[(($l)>>2)];
      var $983=(($982+1)|0);
      HEAP32[(($l)>>2)]=$983;
      label = 188; break;
    case 188: 
      label = 196; break;
    case 189: 
      var $986=HEAP32[(($l)>>2)];
      var $987=HEAP8[($986)];
      var $988=$m;
      var $989=(($988+4)|0);
      HEAP8[($989)]=$987;
      var $990=HEAP32[(($l)>>2)];
      var $991=(($990+1)|0);
      HEAP32[(($l)>>2)]=$991;
      label = 196; break;
    case 190: 
      var $993=$m;
      var $994=(($993+4)|0);
      HEAP8[($994)]=61;
      var $995=HEAP32[(($l)>>2)];
      var $996=HEAP8[($995)];
      var $997=(($996 << 24) >> 24);
      var $998=(($997)|0)==120;
      if ($998) { label = 191; break; } else { label = 195; break; }
    case 191: 
      var $1000=HEAP32[(($l)>>2)];
      var $1001=(($1000+1)|0);
      var $1002=HEAP8[($1001)];
      var $1003=(($1002)&255);
      var $1004=(($1003)>>>0) <= 127;
      if ($1004) { label = 192; break; } else { label = 193; break; }
    case 192: 
      var $1006=HEAP32[(($l)>>2)];
      var $1007=(($1006+1)|0);
      var $1008=HEAP8[($1007)];
      var $1009=(($1008)&255);
      var $1010=_isspace($1009);
      var $1011=(($1010)|0)!=0;
      if ($1011) { label = 194; break; } else { label = 193; break; }
    case 193: 
      var $1013=HEAP32[(($l)>>2)];
      var $1014=(($1013+1)|0);
      var $1015=HEAP8[($1014)];
      var $1016=(($1015 << 24) >> 24)!=0;
      if ($1016) { label = 195; break; } else { label = 194; break; }
    case 194: 
      var $1018=HEAP32[(($l)>>2)];
      var $1019=HEAP8[($1018)];
      var $1020=$m;
      var $1021=(($1020+4)|0);
      HEAP8[($1021)]=$1019;
      var $1022=HEAP32[(($l)>>2)];
      var $1023=(($1022+1)|0);
      HEAP32[(($l)>>2)]=$1023;
      label = 195; break;
    case 195: 
      label = 196; break;
    case 196: 
      var $1026=$m;
      var $1027=(($1026+4)|0);
      var $1028=HEAP8[($1027)];
      var $1029=(($1028)&255);
      var $1030=(($1029)|0)!=120;
      if ($1030) { label = 197; break; } else { label = 199; break; }
    case 197: 
      var $1032=$2;
      var $1033=$m;
      var $1034=$6;
      var $1035=_getvalue($1032, $1033, $l, $1034);
      var $1036=(($1035)|0)!=0;
      if ($1036) { label = 198; break; } else { label = 199; break; }
    case 198: 
      $1=-1;
      label = 226; break;
    case 199: 
      label = 200; break;
    case 200: 
      var $1040=HEAP32[(($l)>>2)];
      var $1041=HEAP8[($1040)];
      var $1042=(($1041)&255);
      var $1043=(($1042)>>>0) <= 127;
      if ($1043) { label = 201; break; } else { var $1051 = 0;label = 202; break; }
    case 201: 
      var $1045=HEAP32[(($l)>>2)];
      var $1046=HEAP8[($1045)];
      var $1047=(($1046)&255);
      var $1048=_isspace($1047);
      var $1049=(($1048)|0)!=0;
      var $1051 = $1049;label = 202; break;
    case 202: 
      var $1051;
      if ($1051) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $1053=HEAP32[(($l)>>2)];
      var $1054=(($1053+1)|0);
      HEAP32[(($l)>>2)]=$1054;
      label = 200; break;
    case 204: 
      var $1056=HEAP32[(($l)>>2)];
      var $1057=(($1056)|0);
      var $1058=HEAP8[($1057)];
      var $1059=(($1058 << 24) >> 24);
      var $1060=(($1059)|0)==8;
      if ($1060) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $1062=HEAP32[(($l)>>2)];
      var $1063=(($1062+1)|0);
      HEAP32[(($l)>>2)]=$1063;
      var $1064=$m;
      var $1065=(($1064+2)|0);
      var $1066=HEAP8[($1065)];
      var $1067=(($1066)&255);
      var $1068=$1067 | 16;
      var $1069=(($1068) & 255);
      HEAP8[($1065)]=$1069;
      label = 210; break;
    case 206: 
      var $1071=HEAP32[(($l)>>2)];
      var $1072=(($1071)|0);
      var $1073=HEAP8[($1072)];
      var $1074=(($1073 << 24) >> 24);
      var $1075=(($1074)|0)==92;
      if ($1075) { label = 207; break; } else { label = 209; break; }
    case 207: 
      var $1077=HEAP32[(($l)>>2)];
      var $1078=(($1077+1)|0);
      var $1079=HEAP8[($1078)];
      var $1080=(($1079 << 24) >> 24);
      var $1081=(($1080)|0)==98;
      if ($1081) { label = 208; break; } else { label = 209; break; }
    case 208: 
      var $1083=HEAP32[(($l)>>2)];
      var $1084=(($1083+1)|0);
      HEAP32[(($l)>>2)]=$1084;
      var $1085=HEAP32[(($l)>>2)];
      var $1086=(($1085+1)|0);
      HEAP32[(($l)>>2)]=$1086;
      var $1087=$m;
      var $1088=(($1087+2)|0);
      var $1089=HEAP8[($1088)];
      var $1090=(($1089)&255);
      var $1091=$1090 | 16;
      var $1092=(($1091) & 255);
      HEAP8[($1088)]=$1092;
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      $i=0;
      label = 211; break;
    case 211: 
      var $1096=HEAP32[(($l)>>2)];
      var $1097=(($1096+1)|0);
      HEAP32[(($l)>>2)]=$1097;
      var $1098=HEAP8[($1096)];
      var $1099=$i;
      var $1100=((($1099)+(1))|0);
      $i=$1100;
      var $1101=$m;
      var $1102=(($1101+96)|0);
      var $1103=(($1102+$1099)|0);
      HEAP8[($1103)]=$1098;
      var $1104=(($1098 << 24) >> 24);
      var $1105=(($1104)|0)!=0;
      if ($1105) { label = 212; break; } else { var $1110 = 0;label = 213; break; }
    case 212: 
      var $1107=$i;
      var $1108=(($1107)>>>0) < 64;
      var $1110 = $1108;label = 213; break;
    case 213: 
      var $1110;
      if ($1110) { label = 214; break; } else { label = 215; break; }
    case 214: 
      label = 211; break;
    case 215: 
      var $1113=$i;
      var $1114=(($1113)|0)==64;
      if ($1114) { label = 216; break; } else { label = 219; break; }
    case 216: 
      var $1116=$m;
      var $1117=(($1116+96)|0);
      var $1118=(($1117+63)|0);
      HEAP8[($1118)]=0;
      var $1119=$2;
      var $1120=(($1119+32)|0);
      var $1121=HEAP32[(($1120)>>2)];
      var $1122=$1121 & 64;
      var $1123=(($1122)|0)!=0;
      if ($1123) { label = 217; break; } else { label = 218; break; }
    case 217: 
      var $1125=$2;
      var $1126=$m;
      var $1127=(($1126+96)|0);
      var $1128=(($1127)|0);
      _file_magwarn($1125, ((5264780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1128,tempInt));
      label = 218; break;
    case 218: 
      label = 219; break;
    case 219: 
      var $1131=$2;
      var $1132=(($1131+32)|0);
      var $1133=HEAP32[(($1132)>>2)];
      var $1134=$1133 & 64;
      var $1135=(($1134)|0)!=0;
      if ($1135) { label = 220; break; } else { label = 223; break; }
    case 220: 
      var $1137=$2;
      var $1138=$m;
      var $1139=_check_format($1137, $1138);
      var $1140=(($1139)|0)==-1;
      if ($1140) { label = 221; break; } else { label = 222; break; }
    case 221: 
      $1=-1;
      label = 226; break;
    case 222: 
      label = 223; break;
    case 223: 
      var $1144=$6;
      var $1145=(($1144)|0)==1;
      if ($1145) { label = 224; break; } else { label = 225; break; }
    case 224: 
      var $1147=$m;
      _file_mdump($1147);
      label = 225; break;
    case 225: 
      var $1149=$m;
      var $1150=(($1149+160)|0);
      var $1151=(($1150)|0);
      HEAP8[($1151)]=0;
      $1=0;
      label = 226; break;
    case 226: 
      var $1153=$1;
      STACKTOP = __stackBase__;
      return $1153;
    default: assert(0, "bad label: " + label);
  }
}
_parse["X"]=1;

function _get_op($c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $2=$c;
      var $3=$2;
      var $4=(($3 << 24) >> 24);
      if ((($4)|0) == 38) {
        label = 3; break;
      }
      else if ((($4)|0) == 124) {
        label = 4; break;
      }
      else if ((($4)|0) == 94) {
        label = 5; break;
      }
      else if ((($4)|0) == 43) {
        label = 6; break;
      }
      else if ((($4)|0) == 45) {
        label = 7; break;
      }
      else if ((($4)|0) == 42) {
        label = 8; break;
      }
      else if ((($4)|0) == 47) {
        label = 9; break;
      }
      else if ((($4)|0) == 37) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
      
    case 3: 
      $1=0;
      label = 12; break;
    case 4: 
      $1=1;
      label = 12; break;
    case 5: 
      $1=2;
      label = 12; break;
    case 6: 
      $1=3;
      label = 12; break;
    case 7: 
      $1=4;
      label = 12; break;
    case 8: 
      $1=5;
      label = 12; break;
    case 9: 
      $1=6;
      label = 12; break;
    case 10: 
      $1=7;
      label = 12; break;
    case 11: 
      $1=-1;
      label = 12; break;
    case 12: 
      var $15=$1;

      return $15;
    default: assert(0, "bad label: " + label);
  }
}


function _addentry($ms, $me, $mentry, $mentrycount) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $mp;
      $2=$ms;
      $3=$me;
      $4=$mentry;
      $5=$mentrycount;
      var $6=$3;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+6)|0);
      var $10=HEAP8[($9)];
      var $11=(($10)&255);
      var $12=(($11)|0)==45;
      var $13=$12 ? 1 : 0;
      $i=$13;
      var $14=$i;
      var $15=$5;
      var $16=(($15+($14<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$i;
      var $19=((5246600+($18<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|0)==(($20)|0);
      if ($21) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $23=$i;
      var $24=((5246600+($23<<2))|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)+(200))|0);
      HEAP32[(($24)>>2)]=$26;
      var $27=$i;
      var $28=$4;
      var $29=(($28+($27<<2))|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=$i;
      var $33=((5246600+($32<<2))|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)*(12))|0);
      var $36=_realloc($31, $35);
      var $37=$36;
      $mp=$37;
      var $38=(($37)|0)==0;
      if ($38) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $40=$2;
      var $41=$i;
      var $42=((5246600+($41<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=((($43)*(12))|0);
      _file_oomem($40, $44);
      $1=-1;
      label = 7; break;
    case 5: 
      var $46=$i;
      var $47=$5;
      var $48=(($47+($46<<2))|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$mp;
      var $51=(($50+($49)*(12))|0);
      var $52=$51;
      for (var $$dest = $52>>2, $$stop = $$dest + 600; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $53=$mp;
      var $54=$i;
      var $55=$4;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      label = 6; break;
    case 6: 
      var $58=$i;
      var $59=$5;
      var $60=(($59+($58<<2))|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)+(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=$i;
      var $64=$4;
      var $65=(($64+($63<<2))|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+($61)*(12))|0);
      var $68=$3;
      var $69=$67;
      var $70=$68;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      var $71=$3;
      var $72=$71;
      HEAP32[(($72)>>2)]=0; HEAP32[((($72)+(4))>>2)]=0; HEAP32[((($72)+(8))>>2)]=0;
      $1=0;
      label = 7; break;
    case 7: 
      var $74=$1;

      return $74;
    default: assert(0, "bad label: " + label);
  }
}
_addentry["X"]=1;

function _get_cond($l, $t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $p;
      $1=$l;
      $2=$t;
      $p=((5247476)|0);
      label = 3; break;
    case 3: 
      var $4=$p;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $9=$1;
      var $10=$p;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=$p;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_strncmp($9, $12, $15);
      var $17=(($16)|0)==0;
      if ($17) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $19=$p;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+$21)|0);
      var $24=HEAP8[($23)];
      var $25=(($24)&255);
      var $26=_isspace($25);
      var $27=(($26)|0)!=0;
      if ($27) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $29=$2;
      var $30=(($29)|0)!=0;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$1;
      var $33=$p;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($32+$35)|0);
      var $37=$2;
      HEAP32[(($37)>>2)]=$36;
      label = 8; break;
    case 8: 
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $41=$p;
      var $42=(($41+16)|0);
      $p=$42;
      label = 3; break;
    case 11: 
      var $44=$p;
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];

      return $46;
    default: assert(0, "bad label: " + label);
  }
}
_get_cond["X"]=1;

function _check_cond($ms, $cond, $cont_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $last_cond;
      $2=$ms;
      $3=$cond;
      $4=$cont_level;
      var $5=$4;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+($5<<4))|0);
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      $last_cond=$12;
      var $13=$3;
      if ((($13)|0) == 1) {
        label = 3; break;
      }
      else if ((($13)|0) == 2) {
        label = 9; break;
      }
      else if ((($13)|0) == 3) {
        label = 15; break;
      }
      else if ((($13)|0) == 0) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
      
    case 3: 
      var $15=$last_cond;
      var $16=(($15)|0)!=0;
      if ($16) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $18=$last_cond;
      var $19=(($18)|0)!=2;
      if ($19) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $21=$2;
      var $22=(($21+32)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 64;
      var $25=(($24)|0)!=0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$2;
      _file_magwarn($27, ((5262688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 7; break;
    case 7: 
      $1=-1;
      label = 23; break;
    case 8: 
      $last_cond=1;
      label = 22; break;
    case 9: 
      var $31=$last_cond;
      var $32=(($31)|0)!=1;
      if ($32) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $34=$last_cond;
      var $35=(($34)|0)!=2;
      if ($35) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $37=$2;
      var $38=(($37+32)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & 64;
      var $41=(($40)|0)!=0;
      if ($41) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $43=$2;
      _file_magwarn($43, ((5262520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 13; break;
    case 13: 
      $1=-1;
      label = 23; break;
    case 14: 
      $last_cond=2;
      label = 22; break;
    case 15: 
      var $47=$last_cond;
      var $48=(($47)|0)!=1;
      if ($48) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $50=$last_cond;
      var $51=(($50)|0)!=2;
      if ($51) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $53=$2;
      var $54=(($53+32)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 64;
      var $57=(($56)|0)!=0;
      if ($57) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $59=$2;
      _file_magwarn($59, ((5262428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 19; break;
    case 19: 
      $1=-1;
      label = 23; break;
    case 20: 
      $last_cond=0;
      label = 22; break;
    case 21: 
      $last_cond=0;
      label = 22; break;
    case 22: 
      var $64=$last_cond;
      var $65=$4;
      var $66=$2;
      var $67=(($66+8)|0);
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($65<<4))|0);
      var $71=(($70+12)|0);
      HEAP32[(($71)>>2)]=$64;
      $1=0;
      label = 23; break;
    case 23: 
      var $73=$1;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
_check_cond["X"]=1;

function _get_type($l, $t) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $p;
      $1=$l;
      $2=$t;
      $p=((5243080)|0);
      label = 3; break;
    case 3: 
      var $4=$p;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $9=$1;
      var $10=$p;
      var $11=(($10)|0);
      var $12=(($11)|0);
      var $13=$p;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_strncmp($9, $12, $15);
      var $17=(($16)|0)==0;
      if ($17) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $19=$2;
      var $20=(($19)|0)!=0;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$1;
      var $23=$p;
      var $24=(($23+16)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22+$25)|0);
      var $27=$2;
      HEAP32[(($27)>>2)]=$26;
      label = 7; break;
    case 7: 
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $31=$p;
      var $32=(($31+28)|0);
      $p=$32;
      label = 3; break;
    case 10: 
      var $34=$p;
      var $35=(($34+20)|0);
      var $36=HEAP32[(($35)>>2)];

      return $36;
    default: assert(0, "bad label: " + label);
  }
}


function _eatsize($p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $l;
      $1=$p;
      var $2=$1;
      var $3=HEAP32[(($2)>>2)];
      $l=$3;
      var $4=$l;
      var $5=HEAP8[($4)];
      var $6=(($5)&255);
      var $7=_isupper($6);
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$l;
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=_tolower($12);
      var $19 = $13;label = 5; break;
    case 4: 
      var $15=$l;
      var $16=HEAP8[($15)];
      var $17=(($16 << 24) >> 24);
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      var $20=(($19)|0)==117;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $22=$l;
      var $23=(($22+1)|0);
      $l=$23;
      label = 7; break;
    case 7: 
      var $25=$l;
      var $26=HEAP8[($25)];
      var $27=(($26)&255);
      var $28=_isupper($27);
      var $29=(($28)|0)!=0;
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $31=$l;
      var $32=HEAP8[($31)];
      var $33=(($32)&255);
      var $34=_tolower($33);
      var $40 = $34;label = 10; break;
    case 9: 
      var $36=$l;
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $40 = $38;label = 10; break;
    case 10: 
      var $40;
      if ((($40)|0) == 108 || (($40)|0) == 115 || (($40)|0) == 104 || (($40)|0) == 98 || (($40)|0) == 99) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 11: 
      var $42=$l;
      var $43=(($42+1)|0);
      $l=$43;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $46=$l;
      var $47=$1;
      HEAP32[(($47)>>2)]=$46;

      return;
    default: assert(0, "bad label: " + label);
  }
}
_eatsize["X"]=1;

function _string_modifier_check($ms, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$m;
      var $4=$2;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & 64;
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 24; break;
    case 4: 
      var $11=$3;
      var $12=(($11+6)|0);
      var $13=HEAP8[($12)];
      var $14=(($13)&255);
      var $15=(($14)|0)!=13;
      if ($15) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $17=$3;
      var $18=(($17+24)|0);
      var $19=$18;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & 3968;
      var $23=(($22)|0)!=0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$2;
      _file_magwarn($25, ((5263132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 24; break;
    case 7: 
      var $27=$3;
      var $28=(($27+6)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&255);
      if ((($30)|0) == 18 || (($30)|0) == 19) {
        label = 8; break;
      }
      else if ((($30)|0) == 5 || (($30)|0) == 13) {
        label = 11; break;
      }
      else if ((($30)|0) == 20) {
        label = 14; break;
      }
      else if ((($30)|0) == 17) {
        label = 17; break;
      }
      else {
      label = 22; break;
      }
      
    case 8: 
      var $32=$3;
      var $33=(($32+24)|0);
      var $34=$33;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)!=0;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $39=$2;
      _file_magwarn($39, ((5263072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 24; break;
    case 10: 
      label = 23; break;
    case 11: 
      var $42=$3;
      var $43=(($42+24)|0);
      var $44=$43;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & 16;
      var $48=(($47)|0)!=0;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $50=$2;
      _file_magwarn($50, ((5263008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=115,tempInt));
      $1=-1;
      label = 24; break;
    case 13: 
      label = 23; break;
    case 14: 
      var $53=$3;
      var $54=(($53+24)|0);
      var $55=$54;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|0)==0;
      if ($58) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $60=$2;
      _file_magwarn($60, ((5262948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=100,tempInt));
      var $61=$3;
      var $62=(($61+24)|0);
      var $63=$62;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=100;
      $1=-1;
      label = 24; break;
    case 16: 
      label = 23; break;
    case 17: 
      var $67=$3;
      var $68=(($67+24)|0);
      var $69=$68;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 & 1;
      var $73=(($72)|0)!=0;
      if ($73) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $75=$2;
      _file_magwarn($75, ((5262884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=87,tempInt));
      $1=-1;
      label = 24; break;
    case 19: 
      var $77=$3;
      var $78=(($77+24)|0);
      var $79=$78;
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & 2;
      var $83=(($82)|0)!=0;
      if ($83) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $85=$2;
      _file_magwarn($85, ((5262884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=119,tempInt));
      $1=-1;
      label = 24; break;
    case 21: 
      label = 23; break;
    case 22: 
      var $88=$2;
      var $89=$3;
      var $90=(($89+6)|0);
      var $91=HEAP8[($90)];
      var $92=(($91)&255);
      _file_magwarn($88, ((5262736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$92,tempInt));
      $1=-1;
      label = 24; break;
    case 23: 
      $1=0;
      label = 24; break;
    case 24: 
      var $95=$1;
      STACKTOP = __stackBase__;
      return $95;
    default: assert(0, "bad label: " + label);
  }
}
_string_modifier_check["X"]=1;

function _getvalue($ms, $m, $p, $action) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ep=__stackBase__;
      var $ep1=(__stackBase__)+(4);
      var $ep2=(__stackBase__)+(8);
      $2=$ms;
      $3=$m;
      $4=$p;
      $5=$action;
      var $6=$3;
      var $7=(($6+6)|0);
      var $8=HEAP8[($7)];
      var $9=(($8)&255);
      if ((($9)|0) == 18 || (($9)|0) == 19 || (($9)|0) == 5 || (($9)|0) == 13 || (($9)|0) == 17 || (($9)|0) == 20 || (($9)|0) == 45 || (($9)|0) == 46) {
        label = 3; break;
      }
      else if ((($9)|0) == 33 || (($9)|0) == 34 || (($9)|0) == 35) {
        label = 8; break;
      }
      else if ((($9)|0) == 36 || (($9)|0) == 37 || (($9)|0) == 38) {
        label = 11; break;
      }
      else {
      label = 14; break;
      }
      
    case 3: 
      var $11=$2;
      var $12=$3;
      var $13=$4;
      var $14=HEAP32[(($13)>>2)];
      var $15=$5;
      var $16=(($15)|0)==2;
      var $17=(($16)&1);
      var $18=_getstr($11, $12, $14, $17);
      var $19=$4;
      HEAP32[(($19)>>2)]=$18;
      var $20=$4;
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0)==0;
      if ($22) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $24=$2;
      var $25=(($24+32)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & 64;
      var $28=(($27)|0)!=0;
      if ($28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $30=$2;
      var $31=$3;
      var $32=(($31+32)|0);
      var $33=$32;
      var $34=(($33)|0);
      _file_magwarn($30, ((5264044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$34,tempInt));
      label = 6; break;
    case 6: 
      $1=-1;
      label = 17; break;
    case 7: 
      $1=0;
      label = 17; break;
    case 8: 
      var $38=$3;
      var $39=(($38+4)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&255);
      var $42=(($41)|0)!=120;
      if ($42) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $44=$4;
      var $45=HEAP32[(($44)>>2)];
      var $46=_strtod($45, $ep);
      var $47=$3;
      var $48=(($47+32)|0);
      var $49=$48;
      HEAPF32[(($49)>>2)]=$46;
      var $50=HEAP32[(($ep)>>2)];
      var $51=$4;
      HEAP32[(($51)>>2)]=$50;
      label = 10; break;
    case 10: 
      $1=0;
      label = 17; break;
    case 11: 
      var $54=$3;
      var $55=(($54+4)|0);
      var $56=HEAP8[($55)];
      var $57=(($56)&255);
      var $58=(($57)|0)!=120;
      if ($58) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $60=$4;
      var $61=HEAP32[(($60)>>2)];
      var $62=_strtod($61, $ep1);
      var $63=$3;
      var $64=(($63+32)|0);
      var $65=$64;
      (HEAPF64[(tempDoublePtr)>>3]=$62,HEAP32[(($65)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($65)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $66=HEAP32[(($ep1)>>2)];
      var $67=$4;
      HEAP32[(($67)>>2)]=$66;
      label = 13; break;
    case 13: 
      $1=0;
      label = 17; break;
    case 14: 
      var $70=$3;
      var $71=(($70+4)|0);
      var $72=HEAP8[($71)];
      var $73=(($72)&255);
      var $74=(($73)|0)!=120;
      if ($74) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $76=$2;
      var $77=$3;
      var $78=$4;
      var $79=HEAP32[(($78)>>2)];
      var $80$0=_strtoull($79, $ep2, 0);
      var $80$1=tempRet0;
      var $81$0=_file_signextend($76, $77, $80$0, $80$1);
      var $81$1=tempRet0;
      var $82=$3;
      var $83=(($82+32)|0);
      var $84=$83;
      var $st$11$0=(($84)|0);
      HEAP32[(($st$11$0)>>2)]=$81$0;
      var $st$11$1=(($84+4)|0);
      HEAP32[(($st$11$1)>>2)]=$81$1;
      var $85=HEAP32[(($ep2)>>2)];
      var $86=$4;
      HEAP32[(($86)>>2)]=$85;
      var $87=$4;
      _eatsize($87);
      label = 16; break;
    case 16: 
      $1=0;
      label = 17; break;
    case 17: 
      var $90=$1;
      STACKTOP = __stackBase__;
      return $90;
    default: assert(0, "bad label: " + label);
  }
}
_getvalue["X"]=1;

function _check_format($ms, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ptr;
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+96)|0);
      var $6=(($5)|0);
      $ptr=$6;
      label = 3; break;
    case 3: 
      var $8=$ptr;
      var $9=HEAP8[($8)];
      var $10=(($9 << 24) >> 24)!=0;
      if ($10) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $12=$ptr;
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24);
      var $15=(($14)|0)==37;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $19=$ptr;
      var $20=(($19+1)|0);
      $ptr=$20;
      label = 3; break;
    case 8: 
      var $22=$ptr;
      var $23=HEAP8[($22)];
      var $24=(($23 << 24) >> 24);
      var $25=(($24)|0)==0;
      if ($25) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=1;
      label = 26; break;
    case 10: 
      var $28=$3;
      var $29=(($28+6)|0);
      var $30=HEAP8[($29)];
      var $31=(($30)&255);
      var $32=(($31)>>>0) >= 47;
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $34=$2;
      _file_magwarn($34, ((5264560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 26; break;
    case 12: 
      var $36=$3;
      var $37=(($36+6)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&255);
      var $40=((5249920+($39<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|0)==0;
      if ($42) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $44=$2;
      var $45=$3;
      var $46=(($45+96)|0);
      var $47=(($46)|0);
      var $48=$3;
      var $49=(($48+6)|0);
      var $50=HEAP8[($49)];
      var $51=(($50)&255);
      var $52=((5249720+($51<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      _file_magwarn($44, ((5264424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$47,HEAP32[(((tempInt)+(4))>>2)]=$53,tempInt));
      $1=-1;
      label = 26; break;
    case 14: 
      var $55=$ptr;
      var $56=(($55+1)|0);
      $ptr=$56;
      var $57=$ptr;
      var $58=$3;
      var $59=(($58+6)|0);
      var $60=HEAP8[($59)];
      var $61=(($60)&255);
      var $62=((5249920+($61<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=_check_format_type($57, $63);
      var $65=(($64)|0)==-1;
      if ($65) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $67=$2;
      var $68=$ptr;
      var $69=HEAP8[($68)];
      var $70=(($69 << 24) >> 24);
      var $71=(($70)|0)!=0;
      if ($71) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $73=$ptr;
      var $74=HEAP8[($73)];
      var $75=(($74 << 24) >> 24);
      var $78 = $75;label = 18; break;
    case 17: 
      var $78 = 63;label = 18; break;
    case 18: 
      var $78;
      var $79=$3;
      var $80=(($79+6)|0);
      var $81=HEAP8[($80)];
      var $82=(($81)&255);
      var $83=((5249720+($82<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$3;
      var $86=(($85+96)|0);
      var $87=(($86)|0);
      _file_magwarn($67, ((5264260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$78,HEAP32[(((tempInt)+(4))>>2)]=$84,HEAP32[(((tempInt)+(8))>>2)]=$87,tempInt));
      $1=-1;
      label = 26; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $90=$ptr;
      var $91=HEAP8[($90)];
      var $92=(($91 << 24) >> 24)!=0;
      if ($92) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $94=$ptr;
      var $95=HEAP8[($94)];
      var $96=(($95 << 24) >> 24);
      var $97=(($96)|0)==37;
      if ($97) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $99=$2;
      var $100=$3;
      var $101=(($100+6)|0);
      var $102=HEAP8[($101)];
      var $103=(($102)&255);
      var $104=((5249720+($103<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$3;
      var $107=(($106+96)|0);
      var $108=(($107)|0);
      _file_magwarn($99, ((5264136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$105,HEAP32[(((tempInt)+(4))>>2)]=$108,tempInt));
      $1=-1;
      label = 26; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $111=$ptr;
      var $112=(($111+1)|0);
      $ptr=$112;
      label = 20; break;
    case 25: 
      $1=0;
      label = 26; break;
    case 26: 
      var $115=$1;
      STACKTOP = __stackBase__;
      return $115;
    default: assert(0, "bad label: " + label);
  }
}
_check_format["X"]=1;

function _check_format_type($ptr, $type) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $quad_t;
      $2=$ptr;
      $3=$type;
      $quad_t=0;
      var $4=$2;
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|0)==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 65; break;
    case 4: 
      var $10=$3;
      if ((($10)|0) == 3) {
        label = 5; break;
      }
      else if ((($10)|0) == 1) {
        label = 6; break;
      }
      else if ((($10)|0) == 4 || (($10)|0) == 5) {
        label = 36; break;
      }
      else if ((($10)|0) == 2) {
        label = 51; break;
      }
      else {
      label = 64; break;
      }
      
    case 5: 
      $quad_t=1;
      label = 6; break;
    case 6: 
      var $13=$2;
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $16=(($15)|0)==45;
      if ($16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$2;
      var $19=(($18+1)|0);
      $2=$19;
      label = 8; break;
    case 8: 
      var $21=$2;
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24);
      var $24=(($23)|0)==46;
      if ($24) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $26=$2;
      var $27=(($26+1)|0);
      $2=$27;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $30=$2;
      var $31=HEAP8[($30)];
      var $32=(($31)&255);
      var $33=_isdigit($32);
      var $34=(($33)|0)!=0;
      if ($34) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $36=$2;
      var $37=(($36+1)|0);
      $2=$37;
      label = 11; break;
    case 13: 
      var $39=$2;
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=(($41)|0)==46;
      if ($42) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $44=$2;
      var $45=(($44+1)|0);
      $2=$45;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $48=$2;
      var $49=HEAP8[($48)];
      var $50=(($49)&255);
      var $51=_isdigit($50);
      var $52=(($51)|0)!=0;
      if ($52) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $54=$2;
      var $55=(($54+1)|0);
      $2=$55;
      label = 16; break;
    case 18: 
      var $57=$quad_t;
      var $58=(($57)|0)!=0;
      if ($58) { label = 19; break; } else { label = 24; break; }
    case 19: 
      var $60=$2;
      var $61=(($60+1)|0);
      $2=$61;
      var $62=HEAP8[($60)];
      var $63=(($62 << 24) >> 24);
      var $64=(($63)|0)!=108;
      if ($64) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=-1;
      label = 65; break;
    case 21: 
      var $67=$2;
      var $68=(($67+1)|0);
      $2=$68;
      var $69=HEAP8[($67)];
      var $70=(($69 << 24) >> 24);
      var $71=(($70)|0)!=108;
      if ($71) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=-1;
      label = 65; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $75=$2;
      var $76=(($75+1)|0);
      $2=$76;
      var $77=HEAP8[($75)];
      var $78=(($77 << 24) >> 24);
      if ((($78)|0) == 108) {
        label = 25; break;
      }
      else if ((($78)|0) == 104) {
        label = 28; break;
      }
      else if ((($78)|0) == 105 || (($78)|0) == 99 || (($78)|0) == 100 || (($78)|0) == 117 || (($78)|0) == 120 || (($78)|0) == 88) {
        label = 34; break;
      }
      else {
      label = 35; break;
      }
      
    case 25: 
      var $80=$2;
      var $81=(($80+1)|0);
      $2=$81;
      var $82=HEAP8[($80)];
      var $83=(($82 << 24) >> 24);
      if ((($83)|0) == 105 || (($83)|0) == 100 || (($83)|0) == 117 || (($83)|0) == 120 || (($83)|0) == 88) {
        label = 26; break;
      }
      else {
      label = 27; break;
      }
      
    case 26: 
      $1=0;
      label = 65; break;
    case 27: 
      $1=-1;
      label = 65; break;
    case 28: 
      var $87=$2;
      var $88=(($87+1)|0);
      $2=$88;
      var $89=HEAP8[($87)];
      var $90=(($89 << 24) >> 24);
      if ((($90)|0) == 104) {
        label = 29; break;
      }
      else if ((($90)|0) == 100) {
        label = 32; break;
      }
      else {
      label = 33; break;
      }
      
    case 29: 
      var $92=$2;
      var $93=(($92+1)|0);
      $2=$93;
      var $94=HEAP8[($92)];
      var $95=(($94 << 24) >> 24);
      if ((($95)|0) == 105 || (($95)|0) == 100 || (($95)|0) == 117 || (($95)|0) == 120 || (($95)|0) == 88) {
        label = 30; break;
      }
      else {
      label = 31; break;
      }
      
    case 30: 
      $1=0;
      label = 65; break;
    case 31: 
      $1=-1;
      label = 65; break;
    case 32: 
      $1=0;
      label = 65; break;
    case 33: 
      $1=-1;
      label = 65; break;
    case 34: 
      $1=0;
      label = 65; break;
    case 35: 
      $1=-1;
      label = 65; break;
    case 36: 
      var $103=$2;
      var $104=HEAP8[($103)];
      var $105=(($104 << 24) >> 24);
      var $106=(($105)|0)==45;
      if ($106) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $108=$2;
      var $109=(($108+1)|0);
      $2=$109;
      label = 38; break;
    case 38: 
      var $111=$2;
      var $112=HEAP8[($111)];
      var $113=(($112 << 24) >> 24);
      var $114=(($113)|0)==46;
      if ($114) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $116=$2;
      var $117=(($116+1)|0);
      $2=$117;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $120=$2;
      var $121=HEAP8[($120)];
      var $122=(($121)&255);
      var $123=_isdigit($122);
      var $124=(($123)|0)!=0;
      if ($124) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $126=$2;
      var $127=(($126+1)|0);
      $2=$127;
      label = 41; break;
    case 43: 
      var $129=$2;
      var $130=HEAP8[($129)];
      var $131=(($130 << 24) >> 24);
      var $132=(($131)|0)==46;
      if ($132) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $134=$2;
      var $135=(($134+1)|0);
      $2=$135;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $138=$2;
      var $139=HEAP8[($138)];
      var $140=(($139)&255);
      var $141=_isdigit($140);
      var $142=(($141)|0)!=0;
      if ($142) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $144=$2;
      var $145=(($144+1)|0);
      $2=$145;
      label = 46; break;
    case 48: 
      var $147=$2;
      var $148=(($147+1)|0);
      $2=$148;
      var $149=HEAP8[($147)];
      var $150=(($149 << 24) >> 24);
      if ((($150)|0) == 101 || (($150)|0) == 69 || (($150)|0) == 102 || (($150)|0) == 70 || (($150)|0) == 103 || (($150)|0) == 71) {
        label = 49; break;
      }
      else {
      label = 50; break;
      }
      
    case 49: 
      $1=0;
      label = 65; break;
    case 50: 
      $1=-1;
      label = 65; break;
    case 51: 
      var $154=$2;
      var $155=HEAP8[($154)];
      var $156=(($155 << 24) >> 24);
      var $157=(($156)|0)==45;
      if ($157) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $159=$2;
      var $160=(($159+1)|0);
      $2=$160;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $163=$2;
      var $164=HEAP8[($163)];
      var $165=(($164)&255);
      var $166=_isdigit($165);
      var $167=(($166)|0)!=0;
      if ($167) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $169=$2;
      var $170=(($169+1)|0);
      $2=$170;
      label = 54; break;
    case 56: 
      var $172=$2;
      var $173=HEAP8[($172)];
      var $174=(($173 << 24) >> 24);
      var $175=(($174)|0)==46;
      if ($175) { label = 57; break; } else { label = 61; break; }
    case 57: 
      var $177=$2;
      var $178=(($177+1)|0);
      $2=$178;
      label = 58; break;
    case 58: 
      var $180=$2;
      var $181=HEAP8[($180)];
      var $182=(($181)&255);
      var $183=_isdigit($182);
      var $184=(($183)|0)!=0;
      if ($184) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $186=$2;
      var $187=(($186+1)|0);
      $2=$187;
      label = 58; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $190=$2;
      var $191=(($190+1)|0);
      $2=$191;
      var $192=HEAP8[($190)];
      var $193=(($192 << 24) >> 24);
      if ((($193)|0) == 115) {
        label = 62; break;
      }
      else {
      label = 63; break;
      }
      
    case 62: 
      $1=0;
      label = 65; break;
    case 63: 
      $1=-1;
      label = 65; break;
    case 64: 
      _abort();
      throw "Reached an unreachable!"
    case 65: 
      var $198=$1;

      return $198;
    default: assert(0, "bad label: " + label);
  }
}
_check_format_type["X"]=1;

function _getstr($ms, $m, $s, $warn) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $origs;
      var $p;
      var $plen;
      var $origp;
      var $pmax;
      var $c;
      var $val;
      $2=$ms;
      $3=$m;
      $4=$s;
      $5=$warn;
      var $6=$4;
      $origs=$6;
      var $7=$3;
      var $8=(($7+32)|0);
      var $9=$8;
      var $10=(($9)|0);
      $p=$10;
      $plen=64;
      var $11=$p;
      $origp=$11;
      var $12=$p;
      var $13=$plen;
      var $14=(($12+$13)|0);
      var $15=((($14)-(1))|0);
      $pmax=$15;
      label = 3; break;
    case 3: 
      var $17=$4;
      var $18=(($17+1)|0);
      $4=$18;
      var $19=HEAP8[($17)];
      var $20=(($19 << 24) >> 24);
      $c=$20;
      var $21=(($20)|0)!=0;
      if ($21) { label = 4; break; } else { label = 53; break; }
    case 4: 
      var $23=$c;
      var $24=(($23) & 255);
      var $25=(($24)&255);
      var $26=_isspace($25);
      var $27=(($26)|0)!=0;
      if ($27) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 53; break;
    case 6: 
      var $30=$p;
      var $31=$pmax;
      var $32=(($30)>>>0) >= (($31)>>>0);
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $34=$2;
      var $35=$origs;
      _file_error($34, 0, ((5263964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$35,tempInt));
      $1=0;
      label = 57; break;
    case 8: 
      var $37=$c;
      var $38=(($37)|0)==92;
      if ($38) { label = 9; break; } else { label = 51; break; }
    case 9: 
      var $40=$4;
      var $41=(($40+1)|0);
      $4=$41;
      var $42=HEAP8[($40)];
      var $43=(($42 << 24) >> 24);
      $c=$43;
      if ((($43)|0) == 0) {
        label = 10; break;
      }
      else if ((($43)|0) == 9) {
        label = 13; break;
      }
      else if ((($43)|0) == 32 || (($43)|0) == 62 || (($43)|0) == 60 || (($43)|0) == 38 || (($43)|0) == 94 || (($43)|0) == 61 || (($43)|0) == 33 || (($43)|0) == 92) {
        label = 26; break;
      }
      else if ((($43)|0) == 97) {
        label = 27; break;
      }
      else if ((($43)|0) == 98) {
        label = 28; break;
      }
      else if ((($43)|0) == 102) {
        label = 29; break;
      }
      else if ((($43)|0) == 110) {
        label = 30; break;
      }
      else if ((($43)|0) == 114) {
        label = 31; break;
      }
      else if ((($43)|0) == 116) {
        label = 32; break;
      }
      else if ((($43)|0) == 118) {
        label = 33; break;
      }
      else if ((($43)|0) == 48 || (($43)|0) == 49 || (($43)|0) == 50 || (($43)|0) == 51 || (($43)|0) == 52 || (($43)|0) == 53 || (($43)|0) == 54 || (($43)|0) == 55) {
        label = 34; break;
      }
      else if ((($43)|0) == 120) {
        label = 43; break;
      }
      else {
      label = 16; break;
      }
      
    case 10: 
      var $45=$5;
      var $46=(($45)|0)!=0;
      if ($46) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $48=$2;
      _file_magwarn($48, ((5263924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 12; break;
    case 12: 
      label = 54; break;
    case 13: 
      var $51=$5;
      var $52=(($51)|0)!=0;
      if ($52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $54=$2;
      _file_magwarn($54, ((5263844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $5=0;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $57=$5;
      var $58=(($57)|0)!=0;
      if ($58) { label = 17; break; } else { label = 25; break; }
    case 17: 
      var $60=$c;
      var $61=(($60) & 255);
      var $62=(($61)&255);
      var $63=_isprint($62);
      var $64=(($63)|0)!=0;
      if ($64) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $66=$c;
      var $67=_strchr(((5263796)|0), $66);
      var $68=(($67)|0)==0;
      if ($68) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $70=$3;
      var $71=(($70+6)|0);
      var $72=HEAP8[($71)];
      var $73=(($72)&255);
      var $74=(($73)|0)!=17;
      if ($74) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $76=$c;
      var $77=_strchr(((5263628)|0), $76);
      var $78=(($77)|0)==0;
      if ($78) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $80=$2;
      var $81=$c;
      _file_magwarn($80, ((5263528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$81,tempInt));
      label = 22; break;
    case 22: 
      label = 24; break;
    case 23: 
      var $84=$2;
      var $85=$c;
      _file_magwarn($84, ((5263424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$85,tempInt));
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $89=$c;
      var $90=(($89) & 255);
      var $91=$p;
      var $92=(($91+1)|0);
      $p=$92;
      HEAP8[($91)]=$90;
      label = 50; break;
    case 27: 
      var $94=$p;
      var $95=(($94+1)|0);
      $p=$95;
      HEAP8[($94)]=7;
      label = 50; break;
    case 28: 
      var $97=$p;
      var $98=(($97+1)|0);
      $p=$98;
      HEAP8[($97)]=8;
      label = 50; break;
    case 29: 
      var $100=$p;
      var $101=(($100+1)|0);
      $p=$101;
      HEAP8[($100)]=12;
      label = 50; break;
    case 30: 
      var $103=$p;
      var $104=(($103+1)|0);
      $p=$104;
      HEAP8[($103)]=10;
      label = 50; break;
    case 31: 
      var $106=$p;
      var $107=(($106+1)|0);
      $p=$107;
      HEAP8[($106)]=13;
      label = 50; break;
    case 32: 
      var $109=$p;
      var $110=(($109+1)|0);
      $p=$110;
      HEAP8[($109)]=9;
      label = 50; break;
    case 33: 
      var $112=$p;
      var $113=(($112+1)|0);
      $p=$113;
      HEAP8[($112)]=11;
      label = 50; break;
    case 34: 
      var $115=$c;
      var $116=((($115)-(48))|0);
      $val=$116;
      var $117=$4;
      var $118=(($117+1)|0);
      $4=$118;
      var $119=HEAP8[($117)];
      var $120=(($119 << 24) >> 24);
      $c=$120;
      var $121=$c;
      var $122=(($121)|0) >= 48;
      if ($122) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $124=$c;
      var $125=(($124)|0) <= 55;
      if ($125) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $127=$val;
      var $128=$127 << 3;
      var $129=$c;
      var $130=((($129)-(48))|0);
      var $131=$128 | $130;
      $val=$131;
      var $132=$4;
      var $133=(($132+1)|0);
      $4=$133;
      var $134=HEAP8[($132)];
      var $135=(($134 << 24) >> 24);
      $c=$135;
      var $136=$c;
      var $137=(($136)|0) >= 48;
      if ($137) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $139=$c;
      var $140=(($139)|0) <= 55;
      if ($140) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $142=$val;
      var $143=$142 << 3;
      var $144=$c;
      var $145=((($144)-(48))|0);
      var $146=$143 | $145;
      $val=$146;
      label = 40; break;
    case 39: 
      var $148=$4;
      var $149=((($148)-(1))|0);
      $4=$149;
      label = 40; break;
    case 40: 
      label = 42; break;
    case 41: 
      var $152=$4;
      var $153=((($152)-(1))|0);
      $4=$153;
      label = 42; break;
    case 42: 
      var $155=$val;
      var $156=(($155) & 255);
      var $157=$p;
      var $158=(($157+1)|0);
      $p=$158;
      HEAP8[($157)]=$156;
      label = 50; break;
    case 43: 
      $val=120;
      var $160=$4;
      var $161=(($160+1)|0);
      $4=$161;
      var $162=HEAP8[($160)];
      var $163=(($162 << 24) >> 24);
      var $164=_hextoint($163);
      $c=$164;
      var $165=$c;
      var $166=(($165)|0) >= 0;
      if ($166) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $168=$c;
      $val=$168;
      var $169=$4;
      var $170=(($169+1)|0);
      $4=$170;
      var $171=HEAP8[($169)];
      var $172=(($171 << 24) >> 24);
      var $173=_hextoint($172);
      $c=$173;
      var $174=$c;
      var $175=(($174)|0) >= 0;
      if ($175) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $177=$val;
      var $178=$177 << 4;
      var $179=$c;
      var $180=((($178)+($179))|0);
      $val=$180;
      label = 47; break;
    case 46: 
      var $182=$4;
      var $183=((($182)-(1))|0);
      $4=$183;
      label = 47; break;
    case 47: 
      label = 49; break;
    case 48: 
      var $186=$4;
      var $187=((($186)-(1))|0);
      $4=$187;
      label = 49; break;
    case 49: 
      var $189=$val;
      var $190=(($189) & 255);
      var $191=$p;
      var $192=(($191+1)|0);
      $p=$192;
      HEAP8[($191)]=$190;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      var $195=$c;
      var $196=(($195) & 255);
      var $197=$p;
      var $198=(($197+1)|0);
      $p=$198;
      HEAP8[($197)]=$196;
      label = 52; break;
    case 52: 
      label = 3; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $202=$p;
      HEAP8[($202)]=0;
      var $203=$p;
      var $204=$origp;
      var $205=$203;
      var $206=$204;
      var $207=((($205)-($206))|0);
      var $208=(($207) & 255);
      var $209=$3;
      var $210=(($209+5)|0);
      HEAP8[($210)]=$208;
      var $211=$3;
      var $212=(($211+6)|0);
      var $213=HEAP8[($212)];
      var $214=(($213)&255);
      var $215=(($214)|0)==13;
      if ($215) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $217=$3;
      var $218=_file_pstring_length_size($217);
      var $219=(($218) & 255);
      var $220=(($219)&255);
      var $221=$3;
      var $222=(($221+5)|0);
      var $223=HEAP8[($222)];
      var $224=(($223)&255);
      var $225=((($224)+($220))|0);
      var $226=(($225) & 255);
      HEAP8[($222)]=$226;
      label = 56; break;
    case 56: 
      var $228=$4;
      $1=$228;
      label = 57; break;
    case 57: 
      var $230=$1;
      STACKTOP = __stackBase__;
      return $230;
    default: assert(0, "bad label: " + label);
  }
}
_getstr["X"]=1;

function _hextoint($c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $2=$c;
      var $3=$2;
      var $4=(($3) & 255);
      var $5=(($4)&255);
      var $6=(($5)>>>0) <= 127;
      if ($6) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=-1;
      label = 13; break;
    case 4: 
      var $9=$2;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      var $12=_isdigit($11);
      var $13=(($12)|0)!=0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$2;
      var $16=((($15)-(48))|0);
      $1=$16;
      label = 13; break;
    case 6: 
      var $18=$2;
      var $19=(($18)|0) >= 97;
      if ($19) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $21=$2;
      var $22=(($21)|0) <= 102;
      if ($22) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $24=$2;
      var $25=((($24)+(10))|0);
      var $26=((($25)-(97))|0);
      $1=$26;
      label = 13; break;
    case 9: 
      var $28=$2;
      var $29=(($28)|0) >= 65;
      if ($29) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $31=$2;
      var $32=(($31)|0) <= 70;
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $34=$2;
      var $35=((($34)+(10))|0);
      var $36=((($35)-(65))|0);
      $1=$36;
      label = 13; break;
    case 12: 
      $1=-1;
      label = 13; break;
    case 13: 
      var $39=$1;

      return $39;
    default: assert(0, "bad label: " + label);
  }
}


function _parse_mime($ms, $me, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $l;
      var $m;
      $2=$ms;
      $3=$me;
      $4=$line;
      var $5=$4;
      $l=$5;
      var $6=$3;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17 = 0;label = 5; break;
    case 4: 
      var $12=$3;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      var $17 = $15;label = 5; break;
    case 5: 
      var $17;
      var $18=$3;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17)*(232))|0);
      $m=$21;
      var $22=$m;
      var $23=(($22+160)|0);
      var $24=(($23)|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $27=(($26)|0)!=0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$2;
      var $30=$m;
      var $31=(($30+160)|0);
      var $32=(($31)|0);
      var $33=$l;
      _file_magwarn($29, ((5261336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$32,HEAP32[(((tempInt)+(4))>>2)]=$33,tempInt));
      $1=-1;
      label = 29; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $36=$l;
      var $37=HEAP8[($36)];
      var $38=(($37)&255);
      var $39=(($38)>>>0) <= 127;
      if ($39) { label = 9; break; } else { var $47 = 0;label = 10; break; }
    case 9: 
      var $41=$l;
      var $42=HEAP8[($41)];
      var $43=(($42)&255);
      var $44=_isspace($43);
      var $45=(($44)|0)!=0;
      var $47 = $45;label = 10; break;
    case 10: 
      var $47;
      if ($47) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $49=$l;
      var $50=(($49+1)|0);
      $l=$50;
      label = 8; break;
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $53=$l;
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=(($55)|0)!=0;
      if ($56) { label = 14; break; } else { var $78 = 0;label = 18; break; }
    case 14: 
      var $58=$l;
      var $59=HEAP8[($58)];
      var $60=(($59)&255);
      var $61=(($60)>>>0) <= 127;
      if ($61) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $63=$l;
      var $64=HEAP8[($63)];
      var $65=(($64)&255);
      var $66=_isalnum($65);
      var $67=(($66)|0)!=0;
      if ($67) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $69=$l;
      var $70=HEAP8[($69)];
      var $71=(($70 << 24) >> 24);
      var $72=_strchr(((5261580)|0), $71);
      var $73=(($72)|0)!=0;
      if ($73) { label = 17; break; } else { var $78 = 0;label = 18; break; }
    case 17: 
      var $75=$i;
      var $76=(($75)>>>0) < 64;
      var $78 = $76;label = 18; break;
    case 18: 
      var $78;
      if ($78) { label = 19; break; } else { label = 21; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $81=$l;
      var $82=(($81+1)|0);
      $l=$82;
      var $83=HEAP8[($81)];
      var $84=$i;
      var $85=((($84)+(1))|0);
      $i=$85;
      var $86=$m;
      var $87=(($86+160)|0);
      var $88=(($87+$84)|0);
      HEAP8[($88)]=$83;
      label = 13; break;
    case 21: 
      var $90=$i;
      var $91=(($90)|0)==64;
      if ($91) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $93=$m;
      var $94=(($93+160)|0);
      var $95=(($94+63)|0);
      HEAP8[($95)]=0;
      var $96=$2;
      var $97=(($96+32)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$98 & 64;
      var $100=(($99)|0)!=0;
      if ($100) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $102=$2;
      var $103=$m;
      var $104=(($103+160)|0);
      var $105=(($104)|0);
      var $106=$i;
      _file_magwarn($102, ((5261268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$105,HEAP32[(((tempInt)+(4))>>2)]=$106,tempInt));
      label = 24; break;
    case 24: 
      label = 26; break;
    case 25: 
      var $109=$i;
      var $110=$m;
      var $111=(($110+160)|0);
      var $112=(($111+$109)|0);
      HEAP8[($112)]=0;
      label = 26; break;
    case 26: 
      var $114=$i;
      var $115=(($114)>>>0) > 0;
      if ($115) { label = 27; break; } else { label = 28; break; }
    case 27: 
      $1=0;
      label = 29; break;
    case 28: 
      $1=-1;
      label = 29; break;
    case 29: 
      var $119=$1;
      STACKTOP = __stackBase__;
      return $119;
    default: assert(0, "bad label: " + label);
  }
}
_parse_mime["X"]=1;

function _parse_apple($ms, $me, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $l;
      var $m;
      $2=$ms;
      $3=$me;
      $4=$line;
      var $5=$4;
      $l=$5;
      var $6=$3;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17 = 0;label = 5; break;
    case 4: 
      var $12=$3;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      var $17 = $15;label = 5; break;
    case 5: 
      var $17;
      var $18=$3;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17)*(232))|0);
      $m=$21;
      var $22=$m;
      var $23=(($22+224)|0);
      var $24=(($23)|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $27=(($26)|0)!=0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$2;
      var $30=$m;
      var $31=(($30+160)|0);
      var $32=(($31)|0);
      var $33=$l;
      _file_magwarn($29, ((5261708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$32,HEAP32[(((tempInt)+(4))>>2)]=$33,tempInt));
      $1=-1;
      label = 29; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $36=$l;
      var $37=HEAP8[($36)];
      var $38=(($37)&255);
      var $39=(($38)>>>0) <= 127;
      if ($39) { label = 9; break; } else { var $47 = 0;label = 10; break; }
    case 9: 
      var $41=$l;
      var $42=HEAP8[($41)];
      var $43=(($42)&255);
      var $44=_isspace($43);
      var $45=(($44)|0)!=0;
      var $47 = $45;label = 10; break;
    case 10: 
      var $47;
      if ($47) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $49=$l;
      var $50=(($49+1)|0);
      $l=$50;
      label = 8; break;
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $53=$l;
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=(($55)|0)!=0;
      if ($56) { label = 14; break; } else { var $78 = 0;label = 18; break; }
    case 14: 
      var $58=$l;
      var $59=HEAP8[($58)];
      var $60=(($59)&255);
      var $61=(($60)>>>0) <= 127;
      if ($61) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $63=$l;
      var $64=HEAP8[($63)];
      var $65=(($64)&255);
      var $66=_isalnum($65);
      var $67=(($66)|0)!=0;
      if ($67) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $69=$l;
      var $70=HEAP8[($69)];
      var $71=(($70 << 24) >> 24);
      var $72=_strchr(((5261580)|0), $71);
      var $73=(($72)|0)!=0;
      if ($73) { label = 17; break; } else { var $78 = 0;label = 18; break; }
    case 17: 
      var $75=$i;
      var $76=(($75)>>>0) < 8;
      var $78 = $76;label = 18; break;
    case 18: 
      var $78;
      if ($78) { label = 19; break; } else { label = 21; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $81=$l;
      var $82=(($81+1)|0);
      $l=$82;
      var $83=HEAP8[($81)];
      var $84=$i;
      var $85=((($84)+(1))|0);
      $i=$85;
      var $86=$m;
      var $87=(($86+224)|0);
      var $88=(($87+$84)|0);
      HEAP8[($88)]=$83;
      label = 13; break;
    case 21: 
      var $90=$i;
      var $91=(($90)|0)==8;
      if ($91) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $93=$l;
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=(($95)|0)!=0;
      if ($96) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $98=$2;
      var $99=(($98+32)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$100 & 64;
      var $102=(($101)|0)!=0;
      if ($102) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $104=$2;
      var $105=$4;
      var $106=$i;
      _file_magwarn($104, ((5261468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$105,HEAP32[(((tempInt)+(4))>>2)]=$106,tempInt));
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $109=$i;
      var $110=(($109)>>>0) > 0;
      if ($110) { label = 27; break; } else { label = 28; break; }
    case 27: 
      $1=0;
      label = 29; break;
    case 28: 
      $1=-1;
      label = 29; break;
    case 29: 
      var $114=$1;
      STACKTOP = __stackBase__;
      return $114;
    default: assert(0, "bad label: " + label);
  }
}
_parse_apple["X"]=1;

function _parse_strength($ms, $me, $line) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l;
      var $el=__stackBase__;
      var $factor;
      var $m;
      $2=$ms;
      $3=$me;
      $4=$line;
      var $5=$4;
      $l=$5;
      var $6=$3;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0);
      $m=$9;
      var $10=$m;
      var $11=(($10+11)|0);
      var $12=HEAP8[($11)];
      var $13=(($12)&255);
      var $14=(($13)|0)!=0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$2;
      var $17=$m;
      var $18=(($17+11)|0);
      var $19=HEAP8[($18)];
      var $20=(($19)&255);
      var $21=$m;
      var $22=(($21+3)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&255);
      _file_magwarn($16, ((5262176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$20,HEAP32[(((tempInt)+(4))>>2)]=$24,tempInt));
      $1=-1;
      label = 27; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $27=$l;
      var $28=HEAP8[($27)];
      var $29=(($28)&255);
      var $30=(($29)>>>0) <= 127;
      if ($30) { label = 6; break; } else { var $38 = 0;label = 7; break; }
    case 6: 
      var $32=$l;
      var $33=HEAP8[($32)];
      var $34=(($33)&255);
      var $35=_isspace($34);
      var $36=(($35)|0)!=0;
      var $38 = $36;label = 7; break;
    case 7: 
      var $38;
      if ($38) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $40=$l;
      var $41=(($40+1)|0);
      $l=$41;
      label = 5; break;
    case 9: 
      var $43=$l;
      var $44=HEAP8[($43)];
      var $45=(($44 << 24) >> 24);
      if ((($45)|0) == 0 || (($45)|0) == 43 || (($45)|0) == 45 || (($45)|0) == 42 || (($45)|0) == 47) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
      
    case 10: 
      var $47=$l;
      var $48=(($47+1)|0);
      $l=$48;
      var $49=HEAP8[($47)];
      var $50=$m;
      var $51=(($50+11)|0);
      HEAP8[($51)]=$49;
      label = 12; break;
    case 11: 
      var $53=$2;
      var $54=$l;
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      _file_magwarn($53, ((5262132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$56,tempInt));
      $1=-1;
      label = 27; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $59=$l;
      var $60=HEAP8[($59)];
      var $61=(($60)&255);
      var $62=(($61)>>>0) <= 127;
      if ($62) { label = 14; break; } else { var $70 = 0;label = 15; break; }
    case 14: 
      var $64=$l;
      var $65=HEAP8[($64)];
      var $66=(($65)&255);
      var $67=_isspace($66);
      var $68=(($67)|0)!=0;
      var $70 = $68;label = 15; break;
    case 15: 
      var $70;
      if ($70) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $72=$l;
      var $73=(($72+1)|0);
      $l=$73;
      label = 13; break;
    case 17: 
      var $75=$l;
      var $76=_strtoul($75, $el, 0);
      $factor=$76;
      var $77=$factor;
      var $78=(($77)>>>0) > 255;
      if ($78) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $80=$2;
      var $81=$factor;
      _file_magwarn($80, ((5262068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$81,tempInt));
      label = 26; break;
    case 19: 
      var $83=HEAP32[(($el)>>2)];
      var $84=HEAP8[($83)];
      var $85=(($84 << 24) >> 24);
      var $86=(($85)|0)!=0;
      if ($86) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $88=HEAP32[(($el)>>2)];
      var $89=HEAP8[($88)];
      var $90=(($89)&255);
      var $91=_isspace($90);
      var $92=(($91)|0)!=0;
      if ($92) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $94=$2;
      var $95=$l;
      _file_magwarn($94, ((5261992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$95,tempInt));
      label = 26; break;
    case 22: 
      var $97=$factor;
      var $98=(($97) & 255);
      var $99=$m;
      var $100=(($99+3)|0);
      HEAP8[($100)]=$98;
      var $101=$m;
      var $102=(($101+3)|0);
      var $103=HEAP8[($102)];
      var $104=(($103)&255);
      var $105=(($104)|0)==0;
      if ($105) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $107=$m;
      var $108=(($107+11)|0);
      var $109=HEAP8[($108)];
      var $110=(($109)&255);
      var $111=(($110)|0)==47;
      if ($111) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $113=$2;
      var $114=$m;
      var $115=(($114+11)|0);
      var $116=HEAP8[($115)];
      var $117=(($116)&255);
      var $118=$m;
      var $119=(($118+3)|0);
      var $120=HEAP8[($119)];
      var $121=(($120)&255);
      _file_magwarn($113, ((5261892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$117,HEAP32[(((tempInt)+(4))>>2)]=$121,tempInt));
      label = 26; break;
    case 25: 
      $1=0;
      label = 27; break;
    case 26: 
      var $124=$m;
      var $125=(($124+11)|0);
      HEAP8[($125)]=0;
      var $126=$m;
      var $127=(($126+3)|0);
      HEAP8[($127)]=0;
      $1=-1;
      label = 27; break;
    case 27: 
      var $129=$1;
      STACKTOP = __stackBase__;
      return $129;
    default: assert(0, "bad label: " + label);
  }
}
_parse_strength["X"]=1;

function _file_softmagic($ms, $buf, $nbytes, $mode, $text) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $ml;
      var $rv;
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      $5=$mode;
      $6=$text;
      var $7=$2;
      var $8=(($7)|0);
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      $ml=$12;
      label = 3; break;
    case 3: 
      var $14=$ml;
      var $15=$2;
      var $16=(($15)|0);
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($14)|0)!=(($18)|0);
      if ($19) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $21=$2;
      var $22=$ml;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$ml;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$3;
      var $29=$4;
      var $30=$5;
      var $31=$6;
      var $32=_match($21, $24, $27, $28, $29, 0, $30, $31, 0);
      $rv=$32;
      var $33=(($32)|0)!=0;
      if ($33) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $35=$rv;
      $1=$35;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $38=$ml;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      $ml=$40;
      label = 3; break;
    case 8: 
      $1=0;
      label = 9; break;
    case 9: 
      var $43=$1;

      return $43;
    default: assert(0, "bad label: " + label);
  }
}
_file_softmagic["X"]=1;

function _match($ms, $magic, $nmagic, $s, $nbytes, $offset, $mode, $text, $flip) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $magindex;
      var $cont_level;
      var $need_separator;
      var $returnval;
      var $e;
      var $firstline;
      var $printed_something;
      var $print;
      var $flush;
      var $m;
      $2=$ms;
      $3=$magic;
      $4=$nmagic;
      $5=$s;
      $6=$nbytes;
      $7=$offset;
      $8=$mode;
      $9=$text;
      $10=$flip;
      $magindex=0;
      $cont_level=0;
      $need_separator=0;
      $returnval=0;
      $firstline=1;
      $printed_something=0;
      var $11=$2;
      var $12=(($11+32)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 3088;
      var $15=(($14)|0)==0;
      var $16=(($15)&1);
      $print=$16;
      var $17=$2;
      var $18=$cont_level;
      var $19=_file_check_mem($17, $18);
      var $20=(($19)|0)==-1;
      if ($20) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 125; break;
    case 4: 
      $magindex=0;
      label = 5; break;
    case 5: 
      var $24=$magindex;
      var $25=$4;
      var $26=(($24)>>>0) < (($25)>>>0);
      if ($26) { label = 6; break; } else { label = 124; break; }
    case 6: 
      $flush=0;
      var $28=$magindex;
      var $29=$3;
      var $30=(($29+($28)*(232))|0);
      $m=$30;
      var $31=$m;
      var $32=(($31+6)|0);
      var $33=HEAP8[($32)];
      var $34=(($33)&255);
      var $35=(($34)|0)!=45;
      if ($35) { label = 7; break; } else { label = 29; break; }
    case 7: 
      var $37=$m;
      var $38=(($37+6)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&255);
      var $41=(($40)|0)==5;
      if ($41) { label = 16; break; } else { label = 8; break; }
    case 8: 
      var $43=$m;
      var $44=(($43+6)|0);
      var $45=HEAP8[($44)];
      var $46=(($45)&255);
      var $47=(($46)|0)==13;
      if ($47) { label = 16; break; } else { label = 9; break; }
    case 9: 
      var $49=$m;
      var $50=(($49+6)|0);
      var $51=HEAP8[($50)];
      var $52=(($51)&255);
      var $53=(($52)|0)==18;
      if ($53) { label = 16; break; } else { label = 10; break; }
    case 10: 
      var $55=$m;
      var $56=(($55+6)|0);
      var $57=HEAP8[($56)];
      var $58=(($57)&255);
      var $59=(($58)|0)==19;
      if ($59) { label = 16; break; } else { label = 11; break; }
    case 11: 
      var $61=$m;
      var $62=(($61+6)|0);
      var $63=HEAP8[($62)];
      var $64=(($63)&255);
      var $65=(($64)|0)==17;
      if ($65) { label = 16; break; } else { label = 12; break; }
    case 12: 
      var $67=$m;
      var $68=(($67+6)|0);
      var $69=HEAP8[($68)];
      var $70=(($69)&255);
      var $71=(($70)|0)==20;
      if ($71) { label = 16; break; } else { label = 13; break; }
    case 13: 
      var $73=$m;
      var $74=(($73+6)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=(($76)|0)==45;
      if ($77) { label = 16; break; } else { label = 14; break; }
    case 14: 
      var $79=$m;
      var $80=(($79+6)|0);
      var $81=HEAP8[($80)];
      var $82=(($81)&255);
      var $83=(($82)|0)==46;
      if ($83) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $85=$m;
      var $86=(($85+6)|0);
      var $87=HEAP8[($86)];
      var $88=(($87)&255);
      var $89=(($88)|0)==3;
      if ($89) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $91=$9;
      var $92=(($91)|0)!=0;
      if ($92) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $94=$m;
      var $95=(($94+24)|0);
      var $96=$95;
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$98 & 96;
      var $100=(($99)|0)==64;
      if ($100) { label = 21; break; } else { label = 18; break; }
    case 18: 
      var $102=$9;
      var $103=(($102)|0)!=0;
      if ($103) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $105=$m;
      var $106=(($105+24)|0);
      var $107=$106;
      var $108=(($107+4)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109 & 96;
      var $111=(($110)|0)==32;
      if ($111) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $113=$m;
      var $114=(($113+2)|0);
      var $115=HEAP8[($114)];
      var $116=(($115)&255);
      var $117=$8;
      var $118=$116 & $117;
      var $119=$8;
      var $120=(($118)|0)!=(($119)|0);
      if ($120) { label = 21; break; } else { label = 28; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $123=$magindex;
      var $124=((($123)+(1))|0);
      var $125=$4;
      var $126=(($124)>>>0) < (($125)>>>0);
      if ($126) { label = 23; break; } else { var $141 = 0;label = 25; break; }
    case 23: 
      var $128=$magindex;
      var $129=((($128)+(1))|0);
      var $130=$3;
      var $131=(($130+($129)*(232))|0);
      var $132=(($131)|0);
      var $133=HEAP16[(($132)>>1)];
      var $134=(($133)&65535);
      var $135=(($134)|0)!=0;
      if ($135) { label = 24; break; } else { var $141 = 0;label = 25; break; }
    case 24: 
      var $137=$magindex;
      var $138=((($137)+(1))|0);
      $magindex=$138;
      var $139=(($138)|0)!=0;
      var $141 = $139;label = 25; break;
    case 25: 
      var $141;
      if ($141) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 22; break;
    case 27: 
      label = 123; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $146=$m;
      var $147=(($146+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$2;
      var $150=(($149+24)|0);
      HEAP32[(($150)>>2)]=$148;
      var $151=$m;
      var $152=(($151+20)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$2;
      var $155=(($154+44)|0);
      HEAP32[(($155)>>2)]=$153;
      var $156=$2;
      var $157=$5;
      var $158=$m;
      var $159=$6;
      var $160=$7;
      var $161=$cont_level;
      var $162=$8;
      var $163=$9;
      var $164=$10;
      var $165=_mget($156, $157, $158, $159, $160, $161, $162, $163, $164);
      if ((($165)|0) == -1) {
        label = 30; break;
      }
      else if ((($165)|0) == 0) {
        label = 31; break;
      }
      else {
      label = 32; break;
      }
      
    case 30: 
      $1=-1;
      label = 125; break;
    case 31: 
      var $168=$m;
      var $169=(($168+4)|0);
      var $170=HEAP8[($169)];
      var $171=(($170)&255);
      var $172=(($171)|0)!=33;
      var $173=(($172)&1);
      $flush=$173;
      label = 39; break;
    case 32: 
      var $175=$m;
      var $176=(($175+6)|0);
      var $177=HEAP8[($176)];
      var $178=(($177)&255);
      var $179=(($178)|0)==41;
      if ($179) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $returnval=1;
      label = 34; break;
    case 34: 
      var $182=$2;
      var $183=$m;
      var $184=_magiccheck($182, $183);
      if ((($184)|0) == -1) {
        label = 35; break;
      }
      else if ((($184)|0) == 0) {
        label = 36; break;
      }
      else {
      label = 37; break;
      }
      
    case 35: 
      $1=-1;
      label = 125; break;
    case 36: 
      var $187=$flush;
      var $188=((($187)+(1))|0);
      $flush=$188;
      label = 38; break;
    case 37: 
      $flush=0;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $192=$flush;
      var $193=(($192)|0)!=0;
      if ($193) { label = 40; break; } else { label = 46; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $196=$magindex;
      var $197=$4;
      var $198=((($197)-(1))|0);
      var $199=(($196)>>>0) < (($198)>>>0);
      if ($199) { label = 42; break; } else { var $210 = 0;label = 43; break; }
    case 42: 
      var $201=$magindex;
      var $202=((($201)+(1))|0);
      var $203=$3;
      var $204=(($203+($202)*(232))|0);
      var $205=(($204)|0);
      var $206=HEAP16[(($205)>>1)];
      var $207=(($206)&65535);
      var $208=(($207)|0)!=0;
      var $210 = $208;label = 43; break;
    case 43: 
      var $210;
      if ($210) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $212=$magindex;
      var $213=((($212)+(1))|0);
      $magindex=$213;
      label = 41; break;
    case 45: 
      label = 123; break;
    case 46: 
      var $216=$2;
      var $217=$m;
      var $218=_handle_annotation($216, $217);
      $e=$218;
      var $219=(($218)|0)!=0;
      if ($219) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $221=$e;
      $1=$221;
      label = 125; break;
    case 48: 
      var $223=$m;
      var $224=(($223+96)|0);
      var $225=(($224)|0);
      var $226=HEAP8[($225)];
      var $227=(($226 << 24) >> 24)!=0;
      if ($227) { label = 49; break; } else { label = 52; break; }
    case 49: 
      $need_separator=1;
      $printed_something=1;
      var $229=$2;
      var $230=$firstline;
      var $231=_print_sep($229, $230);
      var $232=(($231)|0)==-1;
      if ($232) { label = 50; break; } else { label = 51; break; }
    case 50: 
      $1=-1;
      label = 125; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $236=$print;
      var $237=(($236)|0)!=0;
      if ($237) { label = 53; break; } else { label = 55; break; }
    case 53: 
      var $239=$2;
      var $240=$m;
      var $241=_mprint($239, $240);
      var $242=(($241)|0)==-1;
      if ($242) { label = 54; break; } else { label = 55; break; }
    case 54: 
      $1=-1;
      label = 125; break;
    case 55: 
      var $245=$2;
      var $246=$m;
      var $247=_moffset($245, $246);
      var $248=$cont_level;
      var $249=$2;
      var $250=(($249+8)|0);
      var $251=(($250+4)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=(($252+($248<<4))|0);
      var $254=(($253)|0);
      HEAP32[(($254)>>2)]=$247;
      var $255=$2;
      var $256=$cont_level;
      var $257=((($256)+(1))|0);
      $cont_level=$257;
      var $258=_file_check_mem($255, $257);
      var $259=(($258)|0)==-1;
      if ($259) { label = 56; break; } else { label = 57; break; }
    case 56: 
      $1=-1;
      label = 125; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $263=$magindex;
      var $264=((($263)+(1))|0);
      var $265=$3;
      var $266=(($265+($264)*(232))|0);
      var $267=(($266)|0);
      var $268=HEAP16[(($267)>>1)];
      var $269=(($268)&65535);
      var $270=(($269)|0)!=0;
      if ($270) { label = 59; break; } else { var $277 = 0;label = 60; break; }
    case 59: 
      var $272=$magindex;
      var $273=((($272)+(1))|0);
      $magindex=$273;
      var $274=$4;
      var $275=(($273)>>>0) < (($274)>>>0);
      var $277 = $275;label = 60; break;
    case 60: 
      var $277;
      if ($277) { label = 61; break; } else { label = 115; break; }
    case 61: 
      var $279=$magindex;
      var $280=$3;
      var $281=(($280+($279)*(232))|0);
      $m=$281;
      var $282=$m;
      var $283=(($282+20)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$2;
      var $286=(($285+44)|0);
      HEAP32[(($286)>>2)]=$284;
      var $287=$cont_level;
      var $288=$m;
      var $289=(($288)|0);
      var $290=HEAP16[(($289)>>1)];
      var $291=(($290)&65535);
      var $292=(($287)>>>0) < (($291)>>>0);
      if ($292) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 58; break;
    case 63: 
      var $295=$cont_level;
      var $296=$m;
      var $297=(($296)|0);
      var $298=HEAP16[(($297)>>1)];
      var $299=(($298)&65535);
      var $300=(($295)>>>0) > (($299)>>>0);
      if ($300) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $302=$m;
      var $303=(($302)|0);
      var $304=HEAP16[(($303)>>1)];
      var $305=(($304)&65535);
      $cont_level=$305;
      label = 65; break;
    case 65: 
      var $307=$m;
      var $308=(($307+12)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=$2;
      var $311=(($310+24)|0);
      HEAP32[(($311)>>2)]=$309;
      var $312=$m;
      var $313=(($312+2)|0);
      var $314=HEAP8[($313)];
      var $315=(($314)&255);
      var $316=$315 & 2;
      var $317=(($316)|0)!=0;
      if ($317) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $319=$cont_level;
      var $320=((($319)-(1))|0);
      var $321=$2;
      var $322=(($321+8)|0);
      var $323=(($322+4)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324+($320<<4))|0);
      var $326=(($325)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=$2;
      var $329=(($328+24)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=((($330)+($327))|0);
      HEAP32[(($329)>>2)]=$331;
      label = 67; break;
    case 67: 
      var $333=$m;
      var $334=(($333+10)|0);
      var $335=HEAP8[($334)];
      var $336=(($335)&255);
      var $337=(($336)|0)==3;
      if ($337) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $339=$m;
      var $340=(($339+10)|0);
      var $341=HEAP8[($340)];
      var $342=(($341)&255);
      var $343=(($342)|0)==2;
      if ($343) { label = 69; break; } else { label = 72; break; }
    case 69: 
      var $345=$cont_level;
      var $346=$2;
      var $347=(($346+8)|0);
      var $348=(($347+4)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($349+($345<<4))|0);
      var $351=(($350+8)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=(($352)|0)==1;
      if ($353) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 58; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $357=$2;
      var $358=$5;
      var $359=$m;
      var $360=$6;
      var $361=$7;
      var $362=$cont_level;
      var $363=$8;
      var $364=$9;
      var $365=$10;
      var $366=_mget($357, $358, $359, $360, $361, $362, $363, $364, $365);
      if ((($366)|0) == -1) {
        label = 73; break;
      }
      else if ((($366)|0) == 0) {
        label = 74; break;
      }
      else {
      label = 77; break;
      }
      
    case 73: 
      $1=-1;
      label = 125; break;
    case 74: 
      var $369=$m;
      var $370=(($369+4)|0);
      var $371=HEAP8[($370)];
      var $372=(($371)&255);
      var $373=(($372)|0)!=33;
      if ($373) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 58; break;
    case 76: 
      $flush=1;
      label = 80; break;
    case 77: 
      var $377=$m;
      var $378=(($377+6)|0);
      var $379=HEAP8[($378)];
      var $380=(($379)&255);
      var $381=(($380)|0)==41;
      if ($381) { label = 78; break; } else { label = 79; break; }
    case 78: 
      $returnval=1;
      label = 79; break;
    case 79: 
      $flush=0;
      label = 80; break;
    case 80: 
      var $385=$flush;
      var $386=(($385)|0)!=0;
      if ($386) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $393 = 1;label = 83; break;
    case 82: 
      var $389=$2;
      var $390=$m;
      var $391=_magiccheck($389, $390);
      var $393 = $391;label = 83; break;
    case 83: 
      var $393;
      if ((($393)|0) == -1) {
        label = 84; break;
      }
      else if ((($393)|0) == 0) {
        label = 85; break;
      }
      else {
      label = 86; break;
      }
      
    case 84: 
      $1=-1;
      label = 125; break;
    case 85: 
      var $396=$cont_level;
      var $397=$2;
      var $398=(($397+8)|0);
      var $399=(($398+4)|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=(($400+($396<<4))|0);
      var $402=(($401+8)|0);
      HEAP32[(($402)>>2)]=0;
      label = 114; break;
    case 86: 
      var $404=$cont_level;
      var $405=$2;
      var $406=(($405+8)|0);
      var $407=(($406+4)|0);
      var $408=HEAP32[(($407)>>2)];
      var $409=(($408+($404<<4))|0);
      var $410=(($409+8)|0);
      HEAP32[(($410)>>2)]=1;
      var $411=$m;
      var $412=(($411+6)|0);
      var $413=HEAP8[($412)];
      var $414=(($413)&255);
      var $415=(($414)|0)!=3;
      if ($415) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $417=$cont_level;
      var $418=$2;
      var $419=(($418+8)|0);
      var $420=(($419+4)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=(($421+($417<<4))|0);
      var $423=(($422+4)|0);
      HEAP32[(($423)>>2)]=1;
      label = 91; break;
    case 88: 
      var $425=$cont_level;
      var $426=$2;
      var $427=(($426+8)|0);
      var $428=(($427+4)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=(($429+($425<<4))|0);
      var $431=(($430+4)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=(($432)|0)!=0;
      if ($433) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $435=$cont_level;
      var $436=$2;
      var $437=(($436+8)|0);
      var $438=(($437+4)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=(($439+($435<<4))|0);
      var $441=(($440+4)|0);
      HEAP32[(($441)>>2)]=0;
      label = 114; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $444=$2;
      var $445=$m;
      var $446=_handle_annotation($444, $445);
      $e=$446;
      var $447=(($446)|0)!=0;
      if ($447) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $449=$e;
      $1=$449;
      label = 125; break;
    case 93: 
      var $451=$m;
      var $452=(($451+96)|0);
      var $453=(($452)|0);
      var $454=HEAP8[($453)];
      var $455=(($454 << 24) >> 24)!=0;
      if ($455) { label = 94; break; } else { label = 99; break; }
    case 94: 
      var $457=$printed_something;
      var $458=(($457)|0)!=0;
      if ($458) { label = 98; break; } else { label = 95; break; }
    case 95: 
      $printed_something=1;
      var $460=$2;
      var $461=$firstline;
      var $462=_print_sep($460, $461);
      var $463=(($462)|0)==-1;
      if ($463) { label = 96; break; } else { label = 97; break; }
    case 96: 
      $1=-1;
      label = 125; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $468=$need_separator;
      var $469=(($468)|0)!=0;
      if ($469) { label = 100; break; } else { label = 106; break; }
    case 100: 
      var $471=$m;
      var $472=(($471+2)|0);
      var $473=HEAP8[($472)];
      var $474=(($473)&255);
      var $475=$474 & 16;
      var $476=(($475)|0)==0;
      if ($476) { label = 101; break; } else { label = 106; break; }
    case 101: 
      var $478=$m;
      var $479=(($478+96)|0);
      var $480=(($479)|0);
      var $481=HEAP8[($480)];
      var $482=(($481 << 24) >> 24);
      var $483=(($482)|0)!=0;
      if ($483) { label = 102; break; } else { label = 106; break; }
    case 102: 
      var $485=$print;
      var $486=(($485)|0)!=0;
      if ($486) { label = 103; break; } else { label = 105; break; }
    case 103: 
      var $488=$2;
      var $489=_file_printf($488, ((5261152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $490=(($489)|0)==-1;
      if ($490) { label = 104; break; } else { label = 105; break; }
    case 104: 
      $1=-1;
      label = 125; break;
    case 105: 
      $need_separator=0;
      label = 106; break;
    case 106: 
      var $494=$print;
      var $495=(($494)|0)!=0;
      if ($495) { label = 107; break; } else { label = 109; break; }
    case 107: 
      var $497=$2;
      var $498=$m;
      var $499=_mprint($497, $498);
      var $500=(($499)|0)==-1;
      if ($500) { label = 108; break; } else { label = 109; break; }
    case 108: 
      $1=-1;
      label = 125; break;
    case 109: 
      var $503=$2;
      var $504=$m;
      var $505=_moffset($503, $504);
      var $506=$cont_level;
      var $507=$2;
      var $508=(($507+8)|0);
      var $509=(($508+4)|0);
      var $510=HEAP32[(($509)>>2)];
      var $511=(($510+($506<<4))|0);
      var $512=(($511)|0);
      HEAP32[(($512)>>2)]=$505;
      var $513=$m;
      var $514=(($513+96)|0);
      var $515=(($514)|0);
      var $516=HEAP8[($515)];
      var $517=(($516 << 24) >> 24)!=0;
      if ($517) { label = 110; break; } else { label = 111; break; }
    case 110: 
      $need_separator=1;
      label = 111; break;
    case 111: 
      var $520=$2;
      var $521=$cont_level;
      var $522=((($521)+(1))|0);
      $cont_level=$522;
      var $523=_file_check_mem($520, $522);
      var $524=(($523)|0)==-1;
      if ($524) { label = 112; break; } else { label = 113; break; }
    case 112: 
      $1=-1;
      label = 125; break;
    case 113: 
      label = 114; break;
    case 114: 
      label = 58; break;
    case 115: 
      var $529=$printed_something;
      var $530=(($529)|0)!=0;
      if ($530) { label = 116; break; } else { label = 119; break; }
    case 116: 
      $firstline=0;
      var $532=$print;
      var $533=(($532)|0)!=0;
      if ($533) { label = 117; break; } else { label = 118; break; }
    case 117: 
      $returnval=1;
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      var $537=$2;
      var $538=(($537+32)|0);
      var $539=HEAP32[(($538)>>2)];
      var $540=$539 & 32;
      var $541=(($540)|0)==0;
      if ($541) { label = 120; break; } else { label = 122; break; }
    case 120: 
      var $543=$printed_something;
      var $544=(($543)|0)!=0;
      if ($544) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $546=$returnval;
      $1=$546;
      label = 125; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $549=$magindex;
      var $550=((($549)+(1))|0);
      $magindex=$550;
      label = 5; break;
    case 124: 
      var $552=$returnval;
      $1=$552;
      label = 125; break;
    case 125: 
      var $554=$1;
      STACKTOP = __stackBase__;
      return $554;
    default: assert(0, "bad label: " + label);
  }
}
_match["X"]=1;

function _mget($ms, $s, $m, $nbytes, $o, $cont_level, $mode, $text, $flip) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $offset;
      var $count;
      var $rv;
      var $sbuf;
      var $rbuf;
      var $p;
      var $ml=__stackBase__;
      var $off;
      var $q;
      $2=$ms;
      $3=$s;
      $4=$m;
      $5=$nbytes;
      $6=$o;
      $7=$cont_level;
      $8=$mode;
      $9=$text;
      $10=$flip;
      var $11=$2;
      var $12=(($11+24)|0);
      var $13=HEAP32[(($12)>>2)];
      $offset=$13;
      var $14=$4;
      var $15=(($14+24)|0);
      var $16=$15;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      $count=$18;
      var $19=$2;
      var $20=(($19+64)|0);
      $p=$20;
      var $21=$2;
      var $22=$p;
      var $23=$4;
      var $24=(($23+6)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&255);
      var $27=$4;
      var $28=(($27+2)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&255);
      var $31=$30 & 1;
      var $32=$3;
      var $33=$offset;
      var $34=$6;
      var $35=((($33)+($34))|0);
      var $36=$5;
      var $37=$6;
      var $38=((($36)-($37))|0);
      var $39=$count;
      var $40=_mcopy($21, $22, $26, $31, $32, $35, $38, $39);
      var $41=(($40)|0)==-1;
      if ($41) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 217; break;
    case 4: 
      var $44=$2;
      var $45=(($44+32)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & 1;
      var $48=(($47)|0)!=0;
      if ($48) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $50=$offset;
      var $51=$p;
      var $52=$51;
      _mdebug($50, $52, 64);
      var $53=$4;
      _file_mdump($53);
      label = 6; break;
    case 6: 
      var $55=$4;
      var $56=(($55+2)|0);
      var $57=HEAP8[($56)];
      var $58=(($57)&255);
      var $59=$58 & 1;
      var $60=(($59)|0)!=0;
      if ($60) { label = 7; break; } else { label = 169; break; }
    case 7: 
      var $62=$4;
      var $63=(($62+16)|0);
      var $64=HEAP32[(($63)>>2)];
      $off=$64;
      var $65=$4;
      var $66=(($65+8)|0);
      var $67=HEAP8[($66)];
      var $68=(($67)&255);
      var $69=$68 & 128;
      var $70=(($69)|0)!=0;
      if ($70) { label = 8; break; } else { label = 20; break; }
    case 8: 
      var $72=$3;
      var $73=$offset;
      var $74=(($72+$73)|0);
      var $75=$off;
      var $76=(($74+$75)|0);
      var $77=$76;
      $q=$77;
      var $78=$4;
      var $79=(($78+7)|0);
      var $80=HEAP8[($79)];
      var $81=(($80)&255);
      var $82=$10;
      var $83=_cvt_flip($81, $82);
      if ((($83)|0) == 1) {
        label = 9; break;
      }
      else if ((($83)|0) == 2) {
        label = 10; break;
      }
      else if ((($83)|0) == 7) {
        label = 11; break;
      }
      else if ((($83)|0) == 10) {
        label = 12; break;
      }
      else if ((($83)|0) == 4) {
        label = 13; break;
      }
      else if ((($83)|0) == 8 || (($83)|0) == 39) {
        label = 14; break;
      }
      else if ((($83)|0) == 40 || (($83)|0) == 11) {
        label = 15; break;
      }
      else if ((($83)|0) == 23) {
        label = 16; break;
      }
      else {
      label = 17; break;
      }
      
    case 9: 
      var $85=$q;
      var $86=$85;
      var $87=HEAP8[($86)];
      var $88=(($87)&255);
      $off=$88;
      label = 17; break;
    case 10: 
      var $90=$q;
      var $91=$90;
      var $92=HEAP16[(($91)>>1)];
      var $93=(($92)&65535);
      $off=$93;
      label = 17; break;
    case 11: 
      var $95=$q;
      var $96=$95;
      var $97=(($96)|0);
      var $98=HEAP8[($97)];
      var $99=(($98)&255);
      var $100=$99 << 8;
      var $101=$q;
      var $102=$101;
      var $103=(($102+1)|0);
      var $104=HEAP8[($103)];
      var $105=(($104)&255);
      var $106=$100 | $105;
      var $107=(($106) & 65535);
      var $108=(($107 << 16) >> 16);
      $off=$108;
      label = 17; break;
    case 12: 
      var $110=$q;
      var $111=$110;
      var $112=(($111+1)|0);
      var $113=HEAP8[($112)];
      var $114=(($113)&255);
      var $115=$114 << 8;
      var $116=$q;
      var $117=$116;
      var $118=(($117)|0);
      var $119=HEAP8[($118)];
      var $120=(($119)&255);
      var $121=$115 | $120;
      var $122=(($121) & 65535);
      var $123=(($122 << 16) >> 16);
      $off=$123;
      label = 17; break;
    case 13: 
      var $125=$q;
      var $126=$125;
      var $127=HEAP32[(($126)>>2)];
      $off=$127;
      label = 17; break;
    case 14: 
      var $129=$q;
      var $130=$129;
      var $131=(($130)|0);
      var $132=HEAP8[($131)];
      var $133=(($132)&255);
      var $134=$133 << 24;
      var $135=$q;
      var $136=$135;
      var $137=(($136+1)|0);
      var $138=HEAP8[($137)];
      var $139=(($138)&255);
      var $140=$139 << 16;
      var $141=$134 | $140;
      var $142=$q;
      var $143=$142;
      var $144=(($143+2)|0);
      var $145=HEAP8[($144)];
      var $146=(($145)&255);
      var $147=$146 << 8;
      var $148=$141 | $147;
      var $149=$q;
      var $150=$149;
      var $151=(($150+3)|0);
      var $152=HEAP8[($151)];
      var $153=(($152)&255);
      var $154=$148 | $153;
      $off=$154;
      label = 17; break;
    case 15: 
      var $156=$q;
      var $157=$156;
      var $158=(($157+3)|0);
      var $159=HEAP8[($158)];
      var $160=(($159)&255);
      var $161=$160 << 24;
      var $162=$q;
      var $163=$162;
      var $164=(($163+2)|0);
      var $165=HEAP8[($164)];
      var $166=(($165)&255);
      var $167=$166 << 16;
      var $168=$161 | $167;
      var $169=$q;
      var $170=$169;
      var $171=(($170+1)|0);
      var $172=HEAP8[($171)];
      var $173=(($172)&255);
      var $174=$173 << 8;
      var $175=$168 | $174;
      var $176=$q;
      var $177=$176;
      var $178=(($177)|0);
      var $179=HEAP8[($178)];
      var $180=(($179)&255);
      var $181=$175 | $180;
      $off=$181;
      label = 17; break;
    case 16: 
      var $183=$q;
      var $184=$183;
      var $185=(($184+1)|0);
      var $186=HEAP8[($185)];
      var $187=(($186)&255);
      var $188=$187 << 24;
      var $189=$q;
      var $190=$189;
      var $191=(($190)|0);
      var $192=HEAP8[($191)];
      var $193=(($192)&255);
      var $194=$193 << 16;
      var $195=$188 | $194;
      var $196=$q;
      var $197=$196;
      var $198=(($197+3)|0);
      var $199=HEAP8[($198)];
      var $200=(($199)&255);
      var $201=$200 << 8;
      var $202=$195 | $201;
      var $203=$q;
      var $204=$203;
      var $205=(($204+2)|0);
      var $206=HEAP8[($205)];
      var $207=(($206)&255);
      var $208=$202 | $207;
      $off=$208;
      label = 17; break;
    case 17: 
      var $210=$2;
      var $211=(($210+32)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$212 & 1;
      var $214=(($213)|0)!=0;
      if ($214) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $216=HEAP32[((_stderr)>>2)];
      var $217=$off;
      var $218=_fprintf($216, ((5268136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$217,tempInt));
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $221=$4;
      var $222=(($221+7)|0);
      var $223=HEAP8[($222)];
      var $224=(($223)&255);
      var $225=$10;
      var $226=_cvt_flip($224, $225);
      if ((($226)|0) == 1) {
        label = 21; break;
      }
      else if ((($226)|0) == 7) {
        label = 38; break;
      }
      else if ((($226)|0) == 10) {
        label = 55; break;
      }
      else if ((($226)|0) == 2) {
        label = 72; break;
      }
      else if ((($226)|0) == 8 || (($226)|0) == 39) {
        label = 89; break;
      }
      else if ((($226)|0) == 11 || (($226)|0) == 40) {
        label = 106; break;
      }
      else if ((($226)|0) == 23) {
        label = 123; break;
      }
      else if ((($226)|0) == 4) {
        label = 140; break;
      }
      else {
      label = 157; break;
      }
      
    case 21: 
      var $228=$5;
      var $229=$offset;
      var $230=((($229)+(1))|0);
      var $231=(($228)>>>0) < (($230)>>>0);
      if ($231) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=0;
      label = 217; break;
    case 23: 
      var $234=$off;
      var $235=(($234)|0)!=0;
      if ($235) { label = 24; break; } else { label = 34; break; }
    case 24: 
      var $237=$4;
      var $238=(($237+8)|0);
      var $239=HEAP8[($238)];
      var $240=(($239)&255);
      var $241=$240 & 7;
      if ((($241)|0) == 0) {
        label = 25; break;
      }
      else if ((($241)|0) == 1) {
        label = 26; break;
      }
      else if ((($241)|0) == 2) {
        label = 27; break;
      }
      else if ((($241)|0) == 3) {
        label = 28; break;
      }
      else if ((($241)|0) == 4) {
        label = 29; break;
      }
      else if ((($241)|0) == 5) {
        label = 30; break;
      }
      else if ((($241)|0) == 6) {
        label = 31; break;
      }
      else if ((($241)|0) == 7) {
        label = 32; break;
      }
      else {
      label = 33; break;
      }
      
    case 25: 
      var $243=$p;
      var $244=$243;
      var $245=HEAP8[($244)];
      var $246=(($245)&255);
      var $247=$off;
      var $248=$246 & $247;
      $offset=$248;
      label = 33; break;
    case 26: 
      var $250=$p;
      var $251=$250;
      var $252=HEAP8[($251)];
      var $253=(($252)&255);
      var $254=$off;
      var $255=$253 | $254;
      $offset=$255;
      label = 33; break;
    case 27: 
      var $257=$p;
      var $258=$257;
      var $259=HEAP8[($258)];
      var $260=(($259)&255);
      var $261=$off;
      var $262=$260 ^ $261;
      $offset=$262;
      label = 33; break;
    case 28: 
      var $264=$p;
      var $265=$264;
      var $266=HEAP8[($265)];
      var $267=(($266)&255);
      var $268=$off;
      var $269=((($267)+($268))|0);
      $offset=$269;
      label = 33; break;
    case 29: 
      var $271=$p;
      var $272=$271;
      var $273=HEAP8[($272)];
      var $274=(($273)&255);
      var $275=$off;
      var $276=((($274)-($275))|0);
      $offset=$276;
      label = 33; break;
    case 30: 
      var $278=$p;
      var $279=$278;
      var $280=HEAP8[($279)];
      var $281=(($280)&255);
      var $282=$off;
      var $283=((($281)*($282))|0);
      $offset=$283;
      label = 33; break;
    case 31: 
      var $285=$p;
      var $286=$285;
      var $287=HEAP8[($286)];
      var $288=(($287)&255);
      var $289=$off;
      var $290=((((($288)|0))/((($289)|0)))&-1);
      $offset=$290;
      label = 33; break;
    case 32: 
      var $292=$p;
      var $293=$292;
      var $294=HEAP8[($293)];
      var $295=(($294)&255);
      var $296=$off;
      var $297=((($295)|0))%((($296)|0));
      $offset=$297;
      label = 33; break;
    case 33: 
      label = 35; break;
    case 34: 
      var $300=$p;
      var $301=$300;
      var $302=HEAP8[($301)];
      var $303=(($302)&255);
      $offset=$303;
      label = 35; break;
    case 35: 
      var $305=$4;
      var $306=(($305+8)|0);
      var $307=HEAP8[($306)];
      var $308=(($307)&255);
      var $309=$308 & 64;
      var $310=(($309)|0)!=0;
      if ($310) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $312=$offset;
      var $313=$312 ^ -1;
      $offset=$313;
      label = 37; break;
    case 37: 
      label = 157; break;
    case 38: 
      var $316=$5;
      var $317=$offset;
      var $318=((($317)+(2))|0);
      var $319=(($316)>>>0) < (($318)>>>0);
      if ($319) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $1=0;
      label = 217; break;
    case 40: 
      var $322=$off;
      var $323=(($322)|0)!=0;
      if ($323) { label = 41; break; } else { label = 51; break; }
    case 41: 
      var $325=$4;
      var $326=(($325+8)|0);
      var $327=HEAP8[($326)];
      var $328=(($327)&255);
      var $329=$328 & 7;
      if ((($329)|0) == 0) {
        label = 42; break;
      }
      else if ((($329)|0) == 1) {
        label = 43; break;
      }
      else if ((($329)|0) == 2) {
        label = 44; break;
      }
      else if ((($329)|0) == 3) {
        label = 45; break;
      }
      else if ((($329)|0) == 4) {
        label = 46; break;
      }
      else if ((($329)|0) == 5) {
        label = 47; break;
      }
      else if ((($329)|0) == 6) {
        label = 48; break;
      }
      else if ((($329)|0) == 7) {
        label = 49; break;
      }
      else {
      label = 50; break;
      }
      
    case 42: 
      var $331=$p;
      var $332=$331;
      var $333=(($332)|0);
      var $334=HEAP8[($333)];
      var $335=(($334)&255);
      var $336=$335 << 8;
      var $337=$p;
      var $338=$337;
      var $339=(($338+1)|0);
      var $340=HEAP8[($339)];
      var $341=(($340)&255);
      var $342=$336 | $341;
      var $343=(($342) & 65535);
      var $344=(($343 << 16) >> 16);
      var $345=$off;
      var $346=$344 & $345;
      $offset=$346;
      label = 50; break;
    case 43: 
      var $348=$p;
      var $349=$348;
      var $350=(($349)|0);
      var $351=HEAP8[($350)];
      var $352=(($351)&255);
      var $353=$352 << 8;
      var $354=$p;
      var $355=$354;
      var $356=(($355+1)|0);
      var $357=HEAP8[($356)];
      var $358=(($357)&255);
      var $359=$353 | $358;
      var $360=(($359) & 65535);
      var $361=(($360 << 16) >> 16);
      var $362=$off;
      var $363=$361 | $362;
      $offset=$363;
      label = 50; break;
    case 44: 
      var $365=$p;
      var $366=$365;
      var $367=(($366)|0);
      var $368=HEAP8[($367)];
      var $369=(($368)&255);
      var $370=$369 << 8;
      var $371=$p;
      var $372=$371;
      var $373=(($372+1)|0);
      var $374=HEAP8[($373)];
      var $375=(($374)&255);
      var $376=$370 | $375;
      var $377=(($376) & 65535);
      var $378=(($377 << 16) >> 16);
      var $379=$off;
      var $380=$378 ^ $379;
      $offset=$380;
      label = 50; break;
    case 45: 
      var $382=$p;
      var $383=$382;
      var $384=(($383)|0);
      var $385=HEAP8[($384)];
      var $386=(($385)&255);
      var $387=$386 << 8;
      var $388=$p;
      var $389=$388;
      var $390=(($389+1)|0);
      var $391=HEAP8[($390)];
      var $392=(($391)&255);
      var $393=$387 | $392;
      var $394=(($393) & 65535);
      var $395=(($394 << 16) >> 16);
      var $396=$off;
      var $397=((($395)+($396))|0);
      $offset=$397;
      label = 50; break;
    case 46: 
      var $399=$p;
      var $400=$399;
      var $401=(($400)|0);
      var $402=HEAP8[($401)];
      var $403=(($402)&255);
      var $404=$403 << 8;
      var $405=$p;
      var $406=$405;
      var $407=(($406+1)|0);
      var $408=HEAP8[($407)];
      var $409=(($408)&255);
      var $410=$404 | $409;
      var $411=(($410) & 65535);
      var $412=(($411 << 16) >> 16);
      var $413=$off;
      var $414=((($412)-($413))|0);
      $offset=$414;
      label = 50; break;
    case 47: 
      var $416=$p;
      var $417=$416;
      var $418=(($417)|0);
      var $419=HEAP8[($418)];
      var $420=(($419)&255);
      var $421=$420 << 8;
      var $422=$p;
      var $423=$422;
      var $424=(($423+1)|0);
      var $425=HEAP8[($424)];
      var $426=(($425)&255);
      var $427=$421 | $426;
      var $428=(($427) & 65535);
      var $429=(($428 << 16) >> 16);
      var $430=$off;
      var $431=((($429)*($430))|0);
      $offset=$431;
      label = 50; break;
    case 48: 
      var $433=$p;
      var $434=$433;
      var $435=(($434)|0);
      var $436=HEAP8[($435)];
      var $437=(($436)&255);
      var $438=$437 << 8;
      var $439=$p;
      var $440=$439;
      var $441=(($440+1)|0);
      var $442=HEAP8[($441)];
      var $443=(($442)&255);
      var $444=$438 | $443;
      var $445=(($444) & 65535);
      var $446=(($445 << 16) >> 16);
      var $447=$off;
      var $448=((((($446)|0))/((($447)|0)))&-1);
      $offset=$448;
      label = 50; break;
    case 49: 
      var $450=$p;
      var $451=$450;
      var $452=(($451)|0);
      var $453=HEAP8[($452)];
      var $454=(($453)&255);
      var $455=$454 << 8;
      var $456=$p;
      var $457=$456;
      var $458=(($457+1)|0);
      var $459=HEAP8[($458)];
      var $460=(($459)&255);
      var $461=$455 | $460;
      var $462=(($461) & 65535);
      var $463=(($462 << 16) >> 16);
      var $464=$off;
      var $465=((($463)|0))%((($464)|0));
      $offset=$465;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      var $468=$p;
      var $469=$468;
      var $470=(($469)|0);
      var $471=HEAP8[($470)];
      var $472=(($471)&255);
      var $473=$472 << 8;
      var $474=$p;
      var $475=$474;
      var $476=(($475+1)|0);
      var $477=HEAP8[($476)];
      var $478=(($477)&255);
      var $479=$473 | $478;
      var $480=(($479) & 65535);
      var $481=(($480 << 16) >> 16);
      $offset=$481;
      label = 52; break;
    case 52: 
      var $483=$4;
      var $484=(($483+8)|0);
      var $485=HEAP8[($484)];
      var $486=(($485)&255);
      var $487=$486 & 64;
      var $488=(($487)|0)!=0;
      if ($488) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $490=$offset;
      var $491=$490 ^ -1;
      $offset=$491;
      label = 54; break;
    case 54: 
      label = 157; break;
    case 55: 
      var $494=$5;
      var $495=$offset;
      var $496=((($495)+(2))|0);
      var $497=(($494)>>>0) < (($496)>>>0);
      if ($497) { label = 56; break; } else { label = 57; break; }
    case 56: 
      $1=0;
      label = 217; break;
    case 57: 
      var $500=$off;
      var $501=(($500)|0)!=0;
      if ($501) { label = 58; break; } else { label = 68; break; }
    case 58: 
      var $503=$4;
      var $504=(($503+8)|0);
      var $505=HEAP8[($504)];
      var $506=(($505)&255);
      var $507=$506 & 7;
      if ((($507)|0) == 0) {
        label = 59; break;
      }
      else if ((($507)|0) == 1) {
        label = 60; break;
      }
      else if ((($507)|0) == 2) {
        label = 61; break;
      }
      else if ((($507)|0) == 3) {
        label = 62; break;
      }
      else if ((($507)|0) == 4) {
        label = 63; break;
      }
      else if ((($507)|0) == 5) {
        label = 64; break;
      }
      else if ((($507)|0) == 6) {
        label = 65; break;
      }
      else if ((($507)|0) == 7) {
        label = 66; break;
      }
      else {
      label = 67; break;
      }
      
    case 59: 
      var $509=$p;
      var $510=$509;
      var $511=(($510+1)|0);
      var $512=HEAP8[($511)];
      var $513=(($512)&255);
      var $514=$513 << 8;
      var $515=$p;
      var $516=$515;
      var $517=(($516)|0);
      var $518=HEAP8[($517)];
      var $519=(($518)&255);
      var $520=$514 | $519;
      var $521=(($520) & 65535);
      var $522=(($521 << 16) >> 16);
      var $523=$off;
      var $524=$522 & $523;
      $offset=$524;
      label = 67; break;
    case 60: 
      var $526=$p;
      var $527=$526;
      var $528=(($527+1)|0);
      var $529=HEAP8[($528)];
      var $530=(($529)&255);
      var $531=$530 << 8;
      var $532=$p;
      var $533=$532;
      var $534=(($533)|0);
      var $535=HEAP8[($534)];
      var $536=(($535)&255);
      var $537=$531 | $536;
      var $538=(($537) & 65535);
      var $539=(($538 << 16) >> 16);
      var $540=$off;
      var $541=$539 | $540;
      $offset=$541;
      label = 67; break;
    case 61: 
      var $543=$p;
      var $544=$543;
      var $545=(($544+1)|0);
      var $546=HEAP8[($545)];
      var $547=(($546)&255);
      var $548=$547 << 8;
      var $549=$p;
      var $550=$549;
      var $551=(($550)|0);
      var $552=HEAP8[($551)];
      var $553=(($552)&255);
      var $554=$548 | $553;
      var $555=(($554) & 65535);
      var $556=(($555 << 16) >> 16);
      var $557=$off;
      var $558=$556 ^ $557;
      $offset=$558;
      label = 67; break;
    case 62: 
      var $560=$p;
      var $561=$560;
      var $562=(($561+1)|0);
      var $563=HEAP8[($562)];
      var $564=(($563)&255);
      var $565=$564 << 8;
      var $566=$p;
      var $567=$566;
      var $568=(($567)|0);
      var $569=HEAP8[($568)];
      var $570=(($569)&255);
      var $571=$565 | $570;
      var $572=(($571) & 65535);
      var $573=(($572 << 16) >> 16);
      var $574=$off;
      var $575=((($573)+($574))|0);
      $offset=$575;
      label = 67; break;
    case 63: 
      var $577=$p;
      var $578=$577;
      var $579=(($578+1)|0);
      var $580=HEAP8[($579)];
      var $581=(($580)&255);
      var $582=$581 << 8;
      var $583=$p;
      var $584=$583;
      var $585=(($584)|0);
      var $586=HEAP8[($585)];
      var $587=(($586)&255);
      var $588=$582 | $587;
      var $589=(($588) & 65535);
      var $590=(($589 << 16) >> 16);
      var $591=$off;
      var $592=((($590)-($591))|0);
      $offset=$592;
      label = 67; break;
    case 64: 
      var $594=$p;
      var $595=$594;
      var $596=(($595+1)|0);
      var $597=HEAP8[($596)];
      var $598=(($597)&255);
      var $599=$598 << 8;
      var $600=$p;
      var $601=$600;
      var $602=(($601)|0);
      var $603=HEAP8[($602)];
      var $604=(($603)&255);
      var $605=$599 | $604;
      var $606=(($605) & 65535);
      var $607=(($606 << 16) >> 16);
      var $608=$off;
      var $609=((($607)*($608))|0);
      $offset=$609;
      label = 67; break;
    case 65: 
      var $611=$p;
      var $612=$611;
      var $613=(($612+1)|0);
      var $614=HEAP8[($613)];
      var $615=(($614)&255);
      var $616=$615 << 8;
      var $617=$p;
      var $618=$617;
      var $619=(($618)|0);
      var $620=HEAP8[($619)];
      var $621=(($620)&255);
      var $622=$616 | $621;
      var $623=(($622) & 65535);
      var $624=(($623 << 16) >> 16);
      var $625=$off;
      var $626=((((($624)|0))/((($625)|0)))&-1);
      $offset=$626;
      label = 67; break;
    case 66: 
      var $628=$p;
      var $629=$628;
      var $630=(($629+1)|0);
      var $631=HEAP8[($630)];
      var $632=(($631)&255);
      var $633=$632 << 8;
      var $634=$p;
      var $635=$634;
      var $636=(($635)|0);
      var $637=HEAP8[($636)];
      var $638=(($637)&255);
      var $639=$633 | $638;
      var $640=(($639) & 65535);
      var $641=(($640 << 16) >> 16);
      var $642=$off;
      var $643=((($641)|0))%((($642)|0));
      $offset=$643;
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      var $646=$p;
      var $647=$646;
      var $648=(($647+1)|0);
      var $649=HEAP8[($648)];
      var $650=(($649)&255);
      var $651=$650 << 8;
      var $652=$p;
      var $653=$652;
      var $654=(($653)|0);
      var $655=HEAP8[($654)];
      var $656=(($655)&255);
      var $657=$651 | $656;
      var $658=(($657) & 65535);
      var $659=(($658 << 16) >> 16);
      $offset=$659;
      label = 69; break;
    case 69: 
      var $661=$4;
      var $662=(($661+8)|0);
      var $663=HEAP8[($662)];
      var $664=(($663)&255);
      var $665=$664 & 64;
      var $666=(($665)|0)!=0;
      if ($666) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $668=$offset;
      var $669=$668 ^ -1;
      $offset=$669;
      label = 71; break;
    case 71: 
      label = 157; break;
    case 72: 
      var $672=$5;
      var $673=$offset;
      var $674=((($673)+(2))|0);
      var $675=(($672)>>>0) < (($674)>>>0);
      if ($675) { label = 73; break; } else { label = 74; break; }
    case 73: 
      $1=0;
      label = 217; break;
    case 74: 
      var $678=$off;
      var $679=(($678)|0)!=0;
      if ($679) { label = 75; break; } else { label = 85; break; }
    case 75: 
      var $681=$4;
      var $682=(($681+8)|0);
      var $683=HEAP8[($682)];
      var $684=(($683)&255);
      var $685=$684 & 7;
      if ((($685)|0) == 0) {
        label = 76; break;
      }
      else if ((($685)|0) == 1) {
        label = 77; break;
      }
      else if ((($685)|0) == 2) {
        label = 78; break;
      }
      else if ((($685)|0) == 3) {
        label = 79; break;
      }
      else if ((($685)|0) == 4) {
        label = 80; break;
      }
      else if ((($685)|0) == 5) {
        label = 81; break;
      }
      else if ((($685)|0) == 6) {
        label = 82; break;
      }
      else if ((($685)|0) == 7) {
        label = 83; break;
      }
      else {
      label = 84; break;
      }
      
    case 76: 
      var $687=$p;
      var $688=$687;
      var $689=HEAP16[(($688)>>1)];
      var $690=(($689)&65535);
      var $691=$off;
      var $692=$690 & $691;
      $offset=$692;
      label = 84; break;
    case 77: 
      var $694=$p;
      var $695=$694;
      var $696=HEAP16[(($695)>>1)];
      var $697=(($696)&65535);
      var $698=$off;
      var $699=$697 | $698;
      $offset=$699;
      label = 84; break;
    case 78: 
      var $701=$p;
      var $702=$701;
      var $703=HEAP16[(($702)>>1)];
      var $704=(($703)&65535);
      var $705=$off;
      var $706=$704 ^ $705;
      $offset=$706;
      label = 84; break;
    case 79: 
      var $708=$p;
      var $709=$708;
      var $710=HEAP16[(($709)>>1)];
      var $711=(($710)&65535);
      var $712=$off;
      var $713=((($711)+($712))|0);
      $offset=$713;
      label = 84; break;
    case 80: 
      var $715=$p;
      var $716=$715;
      var $717=HEAP16[(($716)>>1)];
      var $718=(($717)&65535);
      var $719=$off;
      var $720=((($718)-($719))|0);
      $offset=$720;
      label = 84; break;
    case 81: 
      var $722=$p;
      var $723=$722;
      var $724=HEAP16[(($723)>>1)];
      var $725=(($724)&65535);
      var $726=$off;
      var $727=((($725)*($726))|0);
      $offset=$727;
      label = 84; break;
    case 82: 
      var $729=$p;
      var $730=$729;
      var $731=HEAP16[(($730)>>1)];
      var $732=(($731)&65535);
      var $733=$off;
      var $734=((((($732)|0))/((($733)|0)))&-1);
      $offset=$734;
      label = 84; break;
    case 83: 
      var $736=$p;
      var $737=$736;
      var $738=HEAP16[(($737)>>1)];
      var $739=(($738)&65535);
      var $740=$off;
      var $741=((($739)|0))%((($740)|0));
      $offset=$741;
      label = 84; break;
    case 84: 
      label = 86; break;
    case 85: 
      var $744=$p;
      var $745=$744;
      var $746=HEAP16[(($745)>>1)];
      var $747=(($746)&65535);
      $offset=$747;
      label = 86; break;
    case 86: 
      var $749=$4;
      var $750=(($749+8)|0);
      var $751=HEAP8[($750)];
      var $752=(($751)&255);
      var $753=$752 & 64;
      var $754=(($753)|0)!=0;
      if ($754) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $756=$offset;
      var $757=$756 ^ -1;
      $offset=$757;
      label = 88; break;
    case 88: 
      label = 157; break;
    case 89: 
      var $760=$5;
      var $761=$offset;
      var $762=((($761)+(4))|0);
      var $763=(($760)>>>0) < (($762)>>>0);
      if ($763) { label = 90; break; } else { label = 91; break; }
    case 90: 
      $1=0;
      label = 217; break;
    case 91: 
      var $766=$off;
      var $767=(($766)|0)!=0;
      if ($767) { label = 92; break; } else { label = 102; break; }
    case 92: 
      var $769=$4;
      var $770=(($769+8)|0);
      var $771=HEAP8[($770)];
      var $772=(($771)&255);
      var $773=$772 & 7;
      if ((($773)|0) == 0) {
        label = 93; break;
      }
      else if ((($773)|0) == 1) {
        label = 94; break;
      }
      else if ((($773)|0) == 2) {
        label = 95; break;
      }
      else if ((($773)|0) == 3) {
        label = 96; break;
      }
      else if ((($773)|0) == 4) {
        label = 97; break;
      }
      else if ((($773)|0) == 5) {
        label = 98; break;
      }
      else if ((($773)|0) == 6) {
        label = 99; break;
      }
      else if ((($773)|0) == 7) {
        label = 100; break;
      }
      else {
      label = 101; break;
      }
      
    case 93: 
      var $775=$p;
      var $776=$775;
      var $777=(($776)|0);
      var $778=HEAP8[($777)];
      var $779=(($778)&255);
      var $780=$779 << 24;
      var $781=$p;
      var $782=$781;
      var $783=(($782+1)|0);
      var $784=HEAP8[($783)];
      var $785=(($784)&255);
      var $786=$785 << 16;
      var $787=$780 | $786;
      var $788=$p;
      var $789=$788;
      var $790=(($789+2)|0);
      var $791=HEAP8[($790)];
      var $792=(($791)&255);
      var $793=$792 << 8;
      var $794=$787 | $793;
      var $795=$p;
      var $796=$795;
      var $797=(($796+3)|0);
      var $798=HEAP8[($797)];
      var $799=(($798)&255);
      var $800=$794 | $799;
      var $801=$off;
      var $802=$800 & $801;
      $offset=$802;
      label = 101; break;
    case 94: 
      var $804=$p;
      var $805=$804;
      var $806=(($805)|0);
      var $807=HEAP8[($806)];
      var $808=(($807)&255);
      var $809=$808 << 24;
      var $810=$p;
      var $811=$810;
      var $812=(($811+1)|0);
      var $813=HEAP8[($812)];
      var $814=(($813)&255);
      var $815=$814 << 16;
      var $816=$809 | $815;
      var $817=$p;
      var $818=$817;
      var $819=(($818+2)|0);
      var $820=HEAP8[($819)];
      var $821=(($820)&255);
      var $822=$821 << 8;
      var $823=$816 | $822;
      var $824=$p;
      var $825=$824;
      var $826=(($825+3)|0);
      var $827=HEAP8[($826)];
      var $828=(($827)&255);
      var $829=$823 | $828;
      var $830=$off;
      var $831=$829 | $830;
      $offset=$831;
      label = 101; break;
    case 95: 
      var $833=$p;
      var $834=$833;
      var $835=(($834)|0);
      var $836=HEAP8[($835)];
      var $837=(($836)&255);
      var $838=$837 << 24;
      var $839=$p;
      var $840=$839;
      var $841=(($840+1)|0);
      var $842=HEAP8[($841)];
      var $843=(($842)&255);
      var $844=$843 << 16;
      var $845=$838 | $844;
      var $846=$p;
      var $847=$846;
      var $848=(($847+2)|0);
      var $849=HEAP8[($848)];
      var $850=(($849)&255);
      var $851=$850 << 8;
      var $852=$845 | $851;
      var $853=$p;
      var $854=$853;
      var $855=(($854+3)|0);
      var $856=HEAP8[($855)];
      var $857=(($856)&255);
      var $858=$852 | $857;
      var $859=$off;
      var $860=$858 ^ $859;
      $offset=$860;
      label = 101; break;
    case 96: 
      var $862=$p;
      var $863=$862;
      var $864=(($863)|0);
      var $865=HEAP8[($864)];
      var $866=(($865)&255);
      var $867=$866 << 24;
      var $868=$p;
      var $869=$868;
      var $870=(($869+1)|0);
      var $871=HEAP8[($870)];
      var $872=(($871)&255);
      var $873=$872 << 16;
      var $874=$867 | $873;
      var $875=$p;
      var $876=$875;
      var $877=(($876+2)|0);
      var $878=HEAP8[($877)];
      var $879=(($878)&255);
      var $880=$879 << 8;
      var $881=$874 | $880;
      var $882=$p;
      var $883=$882;
      var $884=(($883+3)|0);
      var $885=HEAP8[($884)];
      var $886=(($885)&255);
      var $887=$881 | $886;
      var $888=$off;
      var $889=((($887)+($888))|0);
      $offset=$889;
      label = 101; break;
    case 97: 
      var $891=$p;
      var $892=$891;
      var $893=(($892)|0);
      var $894=HEAP8[($893)];
      var $895=(($894)&255);
      var $896=$895 << 24;
      var $897=$p;
      var $898=$897;
      var $899=(($898+1)|0);
      var $900=HEAP8[($899)];
      var $901=(($900)&255);
      var $902=$901 << 16;
      var $903=$896 | $902;
      var $904=$p;
      var $905=$904;
      var $906=(($905+2)|0);
      var $907=HEAP8[($906)];
      var $908=(($907)&255);
      var $909=$908 << 8;
      var $910=$903 | $909;
      var $911=$p;
      var $912=$911;
      var $913=(($912+3)|0);
      var $914=HEAP8[($913)];
      var $915=(($914)&255);
      var $916=$910 | $915;
      var $917=$off;
      var $918=((($916)-($917))|0);
      $offset=$918;
      label = 101; break;
    case 98: 
      var $920=$p;
      var $921=$920;
      var $922=(($921)|0);
      var $923=HEAP8[($922)];
      var $924=(($923)&255);
      var $925=$924 << 24;
      var $926=$p;
      var $927=$926;
      var $928=(($927+1)|0);
      var $929=HEAP8[($928)];
      var $930=(($929)&255);
      var $931=$930 << 16;
      var $932=$925 | $931;
      var $933=$p;
      var $934=$933;
      var $935=(($934+2)|0);
      var $936=HEAP8[($935)];
      var $937=(($936)&255);
      var $938=$937 << 8;
      var $939=$932 | $938;
      var $940=$p;
      var $941=$940;
      var $942=(($941+3)|0);
      var $943=HEAP8[($942)];
      var $944=(($943)&255);
      var $945=$939 | $944;
      var $946=$off;
      var $947=((($945)*($946))|0);
      $offset=$947;
      label = 101; break;
    case 99: 
      var $949=$p;
      var $950=$949;
      var $951=(($950)|0);
      var $952=HEAP8[($951)];
      var $953=(($952)&255);
      var $954=$953 << 24;
      var $955=$p;
      var $956=$955;
      var $957=(($956+1)|0);
      var $958=HEAP8[($957)];
      var $959=(($958)&255);
      var $960=$959 << 16;
      var $961=$954 | $960;
      var $962=$p;
      var $963=$962;
      var $964=(($963+2)|0);
      var $965=HEAP8[($964)];
      var $966=(($965)&255);
      var $967=$966 << 8;
      var $968=$961 | $967;
      var $969=$p;
      var $970=$969;
      var $971=(($970+3)|0);
      var $972=HEAP8[($971)];
      var $973=(($972)&255);
      var $974=$968 | $973;
      var $975=$off;
      var $976=((((($974)|0))/((($975)|0)))&-1);
      $offset=$976;
      label = 101; break;
    case 100: 
      var $978=$p;
      var $979=$978;
      var $980=(($979)|0);
      var $981=HEAP8[($980)];
      var $982=(($981)&255);
      var $983=$982 << 24;
      var $984=$p;
      var $985=$984;
      var $986=(($985+1)|0);
      var $987=HEAP8[($986)];
      var $988=(($987)&255);
      var $989=$988 << 16;
      var $990=$983 | $989;
      var $991=$p;
      var $992=$991;
      var $993=(($992+2)|0);
      var $994=HEAP8[($993)];
      var $995=(($994)&255);
      var $996=$995 << 8;
      var $997=$990 | $996;
      var $998=$p;
      var $999=$998;
      var $1000=(($999+3)|0);
      var $1001=HEAP8[($1000)];
      var $1002=(($1001)&255);
      var $1003=$997 | $1002;
      var $1004=$off;
      var $1005=((($1003)|0))%((($1004)|0));
      $offset=$1005;
      label = 101; break;
    case 101: 
      label = 103; break;
    case 102: 
      var $1008=$p;
      var $1009=$1008;
      var $1010=(($1009)|0);
      var $1011=HEAP8[($1010)];
      var $1012=(($1011)&255);
      var $1013=$1012 << 24;
      var $1014=$p;
      var $1015=$1014;
      var $1016=(($1015+1)|0);
      var $1017=HEAP8[($1016)];
      var $1018=(($1017)&255);
      var $1019=$1018 << 16;
      var $1020=$1013 | $1019;
      var $1021=$p;
      var $1022=$1021;
      var $1023=(($1022+2)|0);
      var $1024=HEAP8[($1023)];
      var $1025=(($1024)&255);
      var $1026=$1025 << 8;
      var $1027=$1020 | $1026;
      var $1028=$p;
      var $1029=$1028;
      var $1030=(($1029+3)|0);
      var $1031=HEAP8[($1030)];
      var $1032=(($1031)&255);
      var $1033=$1027 | $1032;
      $offset=$1033;
      label = 103; break;
    case 103: 
      var $1035=$4;
      var $1036=(($1035+8)|0);
      var $1037=HEAP8[($1036)];
      var $1038=(($1037)&255);
      var $1039=$1038 & 64;
      var $1040=(($1039)|0)!=0;
      if ($1040) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $1042=$offset;
      var $1043=$1042 ^ -1;
      $offset=$1043;
      label = 105; break;
    case 105: 
      label = 157; break;
    case 106: 
      var $1046=$5;
      var $1047=$offset;
      var $1048=((($1047)+(4))|0);
      var $1049=(($1046)>>>0) < (($1048)>>>0);
      if ($1049) { label = 107; break; } else { label = 108; break; }
    case 107: 
      $1=0;
      label = 217; break;
    case 108: 
      var $1052=$off;
      var $1053=(($1052)|0)!=0;
      if ($1053) { label = 109; break; } else { label = 119; break; }
    case 109: 
      var $1055=$4;
      var $1056=(($1055+8)|0);
      var $1057=HEAP8[($1056)];
      var $1058=(($1057)&255);
      var $1059=$1058 & 7;
      if ((($1059)|0) == 0) {
        label = 110; break;
      }
      else if ((($1059)|0) == 1) {
        label = 111; break;
      }
      else if ((($1059)|0) == 2) {
        label = 112; break;
      }
      else if ((($1059)|0) == 3) {
        label = 113; break;
      }
      else if ((($1059)|0) == 4) {
        label = 114; break;
      }
      else if ((($1059)|0) == 5) {
        label = 115; break;
      }
      else if ((($1059)|0) == 6) {
        label = 116; break;
      }
      else if ((($1059)|0) == 7) {
        label = 117; break;
      }
      else {
      label = 118; break;
      }
      
    case 110: 
      var $1061=$p;
      var $1062=$1061;
      var $1063=(($1062+3)|0);
      var $1064=HEAP8[($1063)];
      var $1065=(($1064)&255);
      var $1066=$1065 << 24;
      var $1067=$p;
      var $1068=$1067;
      var $1069=(($1068+2)|0);
      var $1070=HEAP8[($1069)];
      var $1071=(($1070)&255);
      var $1072=$1071 << 16;
      var $1073=$1066 | $1072;
      var $1074=$p;
      var $1075=$1074;
      var $1076=(($1075+1)|0);
      var $1077=HEAP8[($1076)];
      var $1078=(($1077)&255);
      var $1079=$1078 << 8;
      var $1080=$1073 | $1079;
      var $1081=$p;
      var $1082=$1081;
      var $1083=(($1082)|0);
      var $1084=HEAP8[($1083)];
      var $1085=(($1084)&255);
      var $1086=$1080 | $1085;
      var $1087=$off;
      var $1088=$1086 & $1087;
      $offset=$1088;
      label = 118; break;
    case 111: 
      var $1090=$p;
      var $1091=$1090;
      var $1092=(($1091+3)|0);
      var $1093=HEAP8[($1092)];
      var $1094=(($1093)&255);
      var $1095=$1094 << 24;
      var $1096=$p;
      var $1097=$1096;
      var $1098=(($1097+2)|0);
      var $1099=HEAP8[($1098)];
      var $1100=(($1099)&255);
      var $1101=$1100 << 16;
      var $1102=$1095 | $1101;
      var $1103=$p;
      var $1104=$1103;
      var $1105=(($1104+1)|0);
      var $1106=HEAP8[($1105)];
      var $1107=(($1106)&255);
      var $1108=$1107 << 8;
      var $1109=$1102 | $1108;
      var $1110=$p;
      var $1111=$1110;
      var $1112=(($1111)|0);
      var $1113=HEAP8[($1112)];
      var $1114=(($1113)&255);
      var $1115=$1109 | $1114;
      var $1116=$off;
      var $1117=$1115 | $1116;
      $offset=$1117;
      label = 118; break;
    case 112: 
      var $1119=$p;
      var $1120=$1119;
      var $1121=(($1120+3)|0);
      var $1122=HEAP8[($1121)];
      var $1123=(($1122)&255);
      var $1124=$1123 << 24;
      var $1125=$p;
      var $1126=$1125;
      var $1127=(($1126+2)|0);
      var $1128=HEAP8[($1127)];
      var $1129=(($1128)&255);
      var $1130=$1129 << 16;
      var $1131=$1124 | $1130;
      var $1132=$p;
      var $1133=$1132;
      var $1134=(($1133+1)|0);
      var $1135=HEAP8[($1134)];
      var $1136=(($1135)&255);
      var $1137=$1136 << 8;
      var $1138=$1131 | $1137;
      var $1139=$p;
      var $1140=$1139;
      var $1141=(($1140)|0);
      var $1142=HEAP8[($1141)];
      var $1143=(($1142)&255);
      var $1144=$1138 | $1143;
      var $1145=$off;
      var $1146=$1144 ^ $1145;
      $offset=$1146;
      label = 118; break;
    case 113: 
      var $1148=$p;
      var $1149=$1148;
      var $1150=(($1149+3)|0);
      var $1151=HEAP8[($1150)];
      var $1152=(($1151)&255);
      var $1153=$1152 << 24;
      var $1154=$p;
      var $1155=$1154;
      var $1156=(($1155+2)|0);
      var $1157=HEAP8[($1156)];
      var $1158=(($1157)&255);
      var $1159=$1158 << 16;
      var $1160=$1153 | $1159;
      var $1161=$p;
      var $1162=$1161;
      var $1163=(($1162+1)|0);
      var $1164=HEAP8[($1163)];
      var $1165=(($1164)&255);
      var $1166=$1165 << 8;
      var $1167=$1160 | $1166;
      var $1168=$p;
      var $1169=$1168;
      var $1170=(($1169)|0);
      var $1171=HEAP8[($1170)];
      var $1172=(($1171)&255);
      var $1173=$1167 | $1172;
      var $1174=$off;
      var $1175=((($1173)+($1174))|0);
      $offset=$1175;
      label = 118; break;
    case 114: 
      var $1177=$p;
      var $1178=$1177;
      var $1179=(($1178+3)|0);
      var $1180=HEAP8[($1179)];
      var $1181=(($1180)&255);
      var $1182=$1181 << 24;
      var $1183=$p;
      var $1184=$1183;
      var $1185=(($1184+2)|0);
      var $1186=HEAP8[($1185)];
      var $1187=(($1186)&255);
      var $1188=$1187 << 16;
      var $1189=$1182 | $1188;
      var $1190=$p;
      var $1191=$1190;
      var $1192=(($1191+1)|0);
      var $1193=HEAP8[($1192)];
      var $1194=(($1193)&255);
      var $1195=$1194 << 8;
      var $1196=$1189 | $1195;
      var $1197=$p;
      var $1198=$1197;
      var $1199=(($1198)|0);
      var $1200=HEAP8[($1199)];
      var $1201=(($1200)&255);
      var $1202=$1196 | $1201;
      var $1203=$off;
      var $1204=((($1202)-($1203))|0);
      $offset=$1204;
      label = 118; break;
    case 115: 
      var $1206=$p;
      var $1207=$1206;
      var $1208=(($1207+3)|0);
      var $1209=HEAP8[($1208)];
      var $1210=(($1209)&255);
      var $1211=$1210 << 24;
      var $1212=$p;
      var $1213=$1212;
      var $1214=(($1213+2)|0);
      var $1215=HEAP8[($1214)];
      var $1216=(($1215)&255);
      var $1217=$1216 << 16;
      var $1218=$1211 | $1217;
      var $1219=$p;
      var $1220=$1219;
      var $1221=(($1220+1)|0);
      var $1222=HEAP8[($1221)];
      var $1223=(($1222)&255);
      var $1224=$1223 << 8;
      var $1225=$1218 | $1224;
      var $1226=$p;
      var $1227=$1226;
      var $1228=(($1227)|0);
      var $1229=HEAP8[($1228)];
      var $1230=(($1229)&255);
      var $1231=$1225 | $1230;
      var $1232=$off;
      var $1233=((($1231)*($1232))|0);
      $offset=$1233;
      label = 118; break;
    case 116: 
      var $1235=$p;
      var $1236=$1235;
      var $1237=(($1236+3)|0);
      var $1238=HEAP8[($1237)];
      var $1239=(($1238)&255);
      var $1240=$1239 << 24;
      var $1241=$p;
      var $1242=$1241;
      var $1243=(($1242+2)|0);
      var $1244=HEAP8[($1243)];
      var $1245=(($1244)&255);
      var $1246=$1245 << 16;
      var $1247=$1240 | $1246;
      var $1248=$p;
      var $1249=$1248;
      var $1250=(($1249+1)|0);
      var $1251=HEAP8[($1250)];
      var $1252=(($1251)&255);
      var $1253=$1252 << 8;
      var $1254=$1247 | $1253;
      var $1255=$p;
      var $1256=$1255;
      var $1257=(($1256)|0);
      var $1258=HEAP8[($1257)];
      var $1259=(($1258)&255);
      var $1260=$1254 | $1259;
      var $1261=$off;
      var $1262=((((($1260)|0))/((($1261)|0)))&-1);
      $offset=$1262;
      label = 118; break;
    case 117: 
      var $1264=$p;
      var $1265=$1264;
      var $1266=(($1265+3)|0);
      var $1267=HEAP8[($1266)];
      var $1268=(($1267)&255);
      var $1269=$1268 << 24;
      var $1270=$p;
      var $1271=$1270;
      var $1272=(($1271+2)|0);
      var $1273=HEAP8[($1272)];
      var $1274=(($1273)&255);
      var $1275=$1274 << 16;
      var $1276=$1269 | $1275;
      var $1277=$p;
      var $1278=$1277;
      var $1279=(($1278+1)|0);
      var $1280=HEAP8[($1279)];
      var $1281=(($1280)&255);
      var $1282=$1281 << 8;
      var $1283=$1276 | $1282;
      var $1284=$p;
      var $1285=$1284;
      var $1286=(($1285)|0);
      var $1287=HEAP8[($1286)];
      var $1288=(($1287)&255);
      var $1289=$1283 | $1288;
      var $1290=$off;
      var $1291=((($1289)|0))%((($1290)|0));
      $offset=$1291;
      label = 118; break;
    case 118: 
      label = 120; break;
    case 119: 
      var $1294=$p;
      var $1295=$1294;
      var $1296=(($1295+3)|0);
      var $1297=HEAP8[($1296)];
      var $1298=(($1297)&255);
      var $1299=$1298 << 24;
      var $1300=$p;
      var $1301=$1300;
      var $1302=(($1301+2)|0);
      var $1303=HEAP8[($1302)];
      var $1304=(($1303)&255);
      var $1305=$1304 << 16;
      var $1306=$1299 | $1305;
      var $1307=$p;
      var $1308=$1307;
      var $1309=(($1308+1)|0);
      var $1310=HEAP8[($1309)];
      var $1311=(($1310)&255);
      var $1312=$1311 << 8;
      var $1313=$1306 | $1312;
      var $1314=$p;
      var $1315=$1314;
      var $1316=(($1315)|0);
      var $1317=HEAP8[($1316)];
      var $1318=(($1317)&255);
      var $1319=$1313 | $1318;
      $offset=$1319;
      label = 120; break;
    case 120: 
      var $1321=$4;
      var $1322=(($1321+8)|0);
      var $1323=HEAP8[($1322)];
      var $1324=(($1323)&255);
      var $1325=$1324 & 64;
      var $1326=(($1325)|0)!=0;
      if ($1326) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $1328=$offset;
      var $1329=$1328 ^ -1;
      $offset=$1329;
      label = 122; break;
    case 122: 
      label = 157; break;
    case 123: 
      var $1332=$5;
      var $1333=$offset;
      var $1334=((($1333)+(4))|0);
      var $1335=(($1332)>>>0) < (($1334)>>>0);
      if ($1335) { label = 124; break; } else { label = 125; break; }
    case 124: 
      $1=0;
      label = 217; break;
    case 125: 
      var $1338=$off;
      var $1339=(($1338)|0)!=0;
      if ($1339) { label = 126; break; } else { label = 136; break; }
    case 126: 
      var $1341=$4;
      var $1342=(($1341+8)|0);
      var $1343=HEAP8[($1342)];
      var $1344=(($1343)&255);
      var $1345=$1344 & 7;
      if ((($1345)|0) == 0) {
        label = 127; break;
      }
      else if ((($1345)|0) == 1) {
        label = 128; break;
      }
      else if ((($1345)|0) == 2) {
        label = 129; break;
      }
      else if ((($1345)|0) == 3) {
        label = 130; break;
      }
      else if ((($1345)|0) == 4) {
        label = 131; break;
      }
      else if ((($1345)|0) == 5) {
        label = 132; break;
      }
      else if ((($1345)|0) == 6) {
        label = 133; break;
      }
      else if ((($1345)|0) == 7) {
        label = 134; break;
      }
      else {
      label = 135; break;
      }
      
    case 127: 
      var $1347=$p;
      var $1348=$1347;
      var $1349=(($1348+1)|0);
      var $1350=HEAP8[($1349)];
      var $1351=(($1350)&255);
      var $1352=$1351 << 24;
      var $1353=$p;
      var $1354=$1353;
      var $1355=(($1354)|0);
      var $1356=HEAP8[($1355)];
      var $1357=(($1356)&255);
      var $1358=$1357 << 16;
      var $1359=$1352 | $1358;
      var $1360=$p;
      var $1361=$1360;
      var $1362=(($1361+3)|0);
      var $1363=HEAP8[($1362)];
      var $1364=(($1363)&255);
      var $1365=$1364 << 8;
      var $1366=$1359 | $1365;
      var $1367=$p;
      var $1368=$1367;
      var $1369=(($1368+2)|0);
      var $1370=HEAP8[($1369)];
      var $1371=(($1370)&255);
      var $1372=$1366 | $1371;
      var $1373=$off;
      var $1374=$1372 & $1373;
      $offset=$1374;
      label = 135; break;
    case 128: 
      var $1376=$p;
      var $1377=$1376;
      var $1378=(($1377+1)|0);
      var $1379=HEAP8[($1378)];
      var $1380=(($1379)&255);
      var $1381=$1380 << 24;
      var $1382=$p;
      var $1383=$1382;
      var $1384=(($1383)|0);
      var $1385=HEAP8[($1384)];
      var $1386=(($1385)&255);
      var $1387=$1386 << 16;
      var $1388=$1381 | $1387;
      var $1389=$p;
      var $1390=$1389;
      var $1391=(($1390+3)|0);
      var $1392=HEAP8[($1391)];
      var $1393=(($1392)&255);
      var $1394=$1393 << 8;
      var $1395=$1388 | $1394;
      var $1396=$p;
      var $1397=$1396;
      var $1398=(($1397+2)|0);
      var $1399=HEAP8[($1398)];
      var $1400=(($1399)&255);
      var $1401=$1395 | $1400;
      var $1402=$off;
      var $1403=$1401 | $1402;
      $offset=$1403;
      label = 135; break;
    case 129: 
      var $1405=$p;
      var $1406=$1405;
      var $1407=(($1406+1)|0);
      var $1408=HEAP8[($1407)];
      var $1409=(($1408)&255);
      var $1410=$1409 << 24;
      var $1411=$p;
      var $1412=$1411;
      var $1413=(($1412)|0);
      var $1414=HEAP8[($1413)];
      var $1415=(($1414)&255);
      var $1416=$1415 << 16;
      var $1417=$1410 | $1416;
      var $1418=$p;
      var $1419=$1418;
      var $1420=(($1419+3)|0);
      var $1421=HEAP8[($1420)];
      var $1422=(($1421)&255);
      var $1423=$1422 << 8;
      var $1424=$1417 | $1423;
      var $1425=$p;
      var $1426=$1425;
      var $1427=(($1426+2)|0);
      var $1428=HEAP8[($1427)];
      var $1429=(($1428)&255);
      var $1430=$1424 | $1429;
      var $1431=$off;
      var $1432=$1430 ^ $1431;
      $offset=$1432;
      label = 135; break;
    case 130: 
      var $1434=$p;
      var $1435=$1434;
      var $1436=(($1435+1)|0);
      var $1437=HEAP8[($1436)];
      var $1438=(($1437)&255);
      var $1439=$1438 << 24;
      var $1440=$p;
      var $1441=$1440;
      var $1442=(($1441)|0);
      var $1443=HEAP8[($1442)];
      var $1444=(($1443)&255);
      var $1445=$1444 << 16;
      var $1446=$1439 | $1445;
      var $1447=$p;
      var $1448=$1447;
      var $1449=(($1448+3)|0);
      var $1450=HEAP8[($1449)];
      var $1451=(($1450)&255);
      var $1452=$1451 << 8;
      var $1453=$1446 | $1452;
      var $1454=$p;
      var $1455=$1454;
      var $1456=(($1455+2)|0);
      var $1457=HEAP8[($1456)];
      var $1458=(($1457)&255);
      var $1459=$1453 | $1458;
      var $1460=$off;
      var $1461=((($1459)+($1460))|0);
      $offset=$1461;
      label = 135; break;
    case 131: 
      var $1463=$p;
      var $1464=$1463;
      var $1465=(($1464+1)|0);
      var $1466=HEAP8[($1465)];
      var $1467=(($1466)&255);
      var $1468=$1467 << 24;
      var $1469=$p;
      var $1470=$1469;
      var $1471=(($1470)|0);
      var $1472=HEAP8[($1471)];
      var $1473=(($1472)&255);
      var $1474=$1473 << 16;
      var $1475=$1468 | $1474;
      var $1476=$p;
      var $1477=$1476;
      var $1478=(($1477+3)|0);
      var $1479=HEAP8[($1478)];
      var $1480=(($1479)&255);
      var $1481=$1480 << 8;
      var $1482=$1475 | $1481;
      var $1483=$p;
      var $1484=$1483;
      var $1485=(($1484+2)|0);
      var $1486=HEAP8[($1485)];
      var $1487=(($1486)&255);
      var $1488=$1482 | $1487;
      var $1489=$off;
      var $1490=((($1488)-($1489))|0);
      $offset=$1490;
      label = 135; break;
    case 132: 
      var $1492=$p;
      var $1493=$1492;
      var $1494=(($1493+1)|0);
      var $1495=HEAP8[($1494)];
      var $1496=(($1495)&255);
      var $1497=$1496 << 24;
      var $1498=$p;
      var $1499=$1498;
      var $1500=(($1499)|0);
      var $1501=HEAP8[($1500)];
      var $1502=(($1501)&255);
      var $1503=$1502 << 16;
      var $1504=$1497 | $1503;
      var $1505=$p;
      var $1506=$1505;
      var $1507=(($1506+3)|0);
      var $1508=HEAP8[($1507)];
      var $1509=(($1508)&255);
      var $1510=$1509 << 8;
      var $1511=$1504 | $1510;
      var $1512=$p;
      var $1513=$1512;
      var $1514=(($1513+2)|0);
      var $1515=HEAP8[($1514)];
      var $1516=(($1515)&255);
      var $1517=$1511 | $1516;
      var $1518=$off;
      var $1519=((($1517)*($1518))|0);
      $offset=$1519;
      label = 135; break;
    case 133: 
      var $1521=$p;
      var $1522=$1521;
      var $1523=(($1522+1)|0);
      var $1524=HEAP8[($1523)];
      var $1525=(($1524)&255);
      var $1526=$1525 << 24;
      var $1527=$p;
      var $1528=$1527;
      var $1529=(($1528)|0);
      var $1530=HEAP8[($1529)];
      var $1531=(($1530)&255);
      var $1532=$1531 << 16;
      var $1533=$1526 | $1532;
      var $1534=$p;
      var $1535=$1534;
      var $1536=(($1535+3)|0);
      var $1537=HEAP8[($1536)];
      var $1538=(($1537)&255);
      var $1539=$1538 << 8;
      var $1540=$1533 | $1539;
      var $1541=$p;
      var $1542=$1541;
      var $1543=(($1542+2)|0);
      var $1544=HEAP8[($1543)];
      var $1545=(($1544)&255);
      var $1546=$1540 | $1545;
      var $1547=$off;
      var $1548=((((($1546)|0))/((($1547)|0)))&-1);
      $offset=$1548;
      label = 135; break;
    case 134: 
      var $1550=$p;
      var $1551=$1550;
      var $1552=(($1551+1)|0);
      var $1553=HEAP8[($1552)];
      var $1554=(($1553)&255);
      var $1555=$1554 << 24;
      var $1556=$p;
      var $1557=$1556;
      var $1558=(($1557)|0);
      var $1559=HEAP8[($1558)];
      var $1560=(($1559)&255);
      var $1561=$1560 << 16;
      var $1562=$1555 | $1561;
      var $1563=$p;
      var $1564=$1563;
      var $1565=(($1564+3)|0);
      var $1566=HEAP8[($1565)];
      var $1567=(($1566)&255);
      var $1568=$1567 << 8;
      var $1569=$1562 | $1568;
      var $1570=$p;
      var $1571=$1570;
      var $1572=(($1571+2)|0);
      var $1573=HEAP8[($1572)];
      var $1574=(($1573)&255);
      var $1575=$1569 | $1574;
      var $1576=$off;
      var $1577=((($1575)|0))%((($1576)|0));
      $offset=$1577;
      label = 135; break;
    case 135: 
      label = 137; break;
    case 136: 
      var $1580=$p;
      var $1581=$1580;
      var $1582=(($1581+1)|0);
      var $1583=HEAP8[($1582)];
      var $1584=(($1583)&255);
      var $1585=$1584 << 24;
      var $1586=$p;
      var $1587=$1586;
      var $1588=(($1587)|0);
      var $1589=HEAP8[($1588)];
      var $1590=(($1589)&255);
      var $1591=$1590 << 16;
      var $1592=$1585 | $1591;
      var $1593=$p;
      var $1594=$1593;
      var $1595=(($1594+3)|0);
      var $1596=HEAP8[($1595)];
      var $1597=(($1596)&255);
      var $1598=$1597 << 8;
      var $1599=$1592 | $1598;
      var $1600=$p;
      var $1601=$1600;
      var $1602=(($1601+2)|0);
      var $1603=HEAP8[($1602)];
      var $1604=(($1603)&255);
      var $1605=$1599 | $1604;
      $offset=$1605;
      label = 137; break;
    case 137: 
      var $1607=$4;
      var $1608=(($1607+8)|0);
      var $1609=HEAP8[($1608)];
      var $1610=(($1609)&255);
      var $1611=$1610 & 64;
      var $1612=(($1611)|0)!=0;
      if ($1612) { label = 138; break; } else { label = 139; break; }
    case 138: 
      var $1614=$offset;
      var $1615=$1614 ^ -1;
      $offset=$1615;
      label = 139; break;
    case 139: 
      label = 157; break;
    case 140: 
      var $1618=$5;
      var $1619=$offset;
      var $1620=((($1619)+(4))|0);
      var $1621=(($1618)>>>0) < (($1620)>>>0);
      if ($1621) { label = 141; break; } else { label = 142; break; }
    case 141: 
      $1=0;
      label = 217; break;
    case 142: 
      var $1624=$off;
      var $1625=(($1624)|0)!=0;
      if ($1625) { label = 143; break; } else { label = 153; break; }
    case 143: 
      var $1627=$4;
      var $1628=(($1627+8)|0);
      var $1629=HEAP8[($1628)];
      var $1630=(($1629)&255);
      var $1631=$1630 & 7;
      if ((($1631)|0) == 0) {
        label = 144; break;
      }
      else if ((($1631)|0) == 1) {
        label = 145; break;
      }
      else if ((($1631)|0) == 2) {
        label = 146; break;
      }
      else if ((($1631)|0) == 3) {
        label = 147; break;
      }
      else if ((($1631)|0) == 4) {
        label = 148; break;
      }
      else if ((($1631)|0) == 5) {
        label = 149; break;
      }
      else if ((($1631)|0) == 6) {
        label = 150; break;
      }
      else if ((($1631)|0) == 7) {
        label = 151; break;
      }
      else {
      label = 152; break;
      }
      
    case 144: 
      var $1633=$p;
      var $1634=$1633;
      var $1635=HEAP32[(($1634)>>2)];
      var $1636=$off;
      var $1637=$1635 & $1636;
      $offset=$1637;
      label = 152; break;
    case 145: 
      var $1639=$p;
      var $1640=$1639;
      var $1641=HEAP32[(($1640)>>2)];
      var $1642=$off;
      var $1643=$1641 | $1642;
      $offset=$1643;
      label = 152; break;
    case 146: 
      var $1645=$p;
      var $1646=$1645;
      var $1647=HEAP32[(($1646)>>2)];
      var $1648=$off;
      var $1649=$1647 ^ $1648;
      $offset=$1649;
      label = 152; break;
    case 147: 
      var $1651=$p;
      var $1652=$1651;
      var $1653=HEAP32[(($1652)>>2)];
      var $1654=$off;
      var $1655=((($1653)+($1654))|0);
      $offset=$1655;
      label = 152; break;
    case 148: 
      var $1657=$p;
      var $1658=$1657;
      var $1659=HEAP32[(($1658)>>2)];
      var $1660=$off;
      var $1661=((($1659)-($1660))|0);
      $offset=$1661;
      label = 152; break;
    case 149: 
      var $1663=$p;
      var $1664=$1663;
      var $1665=HEAP32[(($1664)>>2)];
      var $1666=$off;
      var $1667=((($1665)*($1666))|0);
      $offset=$1667;
      label = 152; break;
    case 150: 
      var $1669=$p;
      var $1670=$1669;
      var $1671=HEAP32[(($1670)>>2)];
      var $1672=$off;
      var $1673=Math.floor(((($1671)>>>0))/((($1672)>>>0)));
      $offset=$1673;
      label = 152; break;
    case 151: 
      var $1675=$p;
      var $1676=$1675;
      var $1677=HEAP32[(($1676)>>2)];
      var $1678=$off;
      var $1679=((($1677)>>>0))%((($1678)>>>0));
      $offset=$1679;
      label = 152; break;
    case 152: 
      label = 154; break;
    case 153: 
      var $1682=$p;
      var $1683=$1682;
      var $1684=HEAP32[(($1683)>>2)];
      $offset=$1684;
      label = 154; break;
    case 154: 
      var $1686=$4;
      var $1687=(($1686+8)|0);
      var $1688=HEAP8[($1687)];
      var $1689=(($1688)&255);
      var $1690=$1689 & 64;
      var $1691=(($1690)|0)!=0;
      if ($1691) { label = 155; break; } else { label = 156; break; }
    case 155: 
      var $1693=$offset;
      var $1694=$1693 ^ -1;
      $offset=$1694;
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      var $1697=$4;
      var $1698=(($1697+7)|0);
      var $1699=HEAP8[($1698)];
      var $1700=(($1699)&255);
      var $1701=$10;
      var $1702=_cvt_flip($1700, $1701);
      if ((($1702)|0) == 40 || (($1702)|0) == 39) {
        label = 158; break;
      }
      else {
      label = 159; break;
      }
      
    case 158: 
      var $1704=$offset;
      var $1705=$1704 >>> 0;
      var $1706=$1705 & 127;
      var $1707=$1706 << 0;
      var $1708=$offset;
      var $1709=$1708 >>> 8;
      var $1710=$1709 & 127;
      var $1711=$1710 << 7;
      var $1712=$1707 | $1711;
      var $1713=$offset;
      var $1714=$1713 >>> 16;
      var $1715=$1714 & 127;
      var $1716=$1715 << 14;
      var $1717=$1712 | $1716;
      var $1718=$offset;
      var $1719=$1718 >>> 24;
      var $1720=$1719 & 127;
      var $1721=$1720 << 21;
      var $1722=$1717 | $1721;
      var $1723=((($1722)+(10))|0);
      $offset=$1723;
      label = 160; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $1726=$4;
      var $1727=(($1726+2)|0);
      var $1728=HEAP8[($1727)];
      var $1729=(($1728)&255);
      var $1730=$1729 & 4;
      var $1731=(($1730)|0)!=0;
      if ($1731) { label = 161; break; } else { label = 164; break; }
    case 161: 
      var $1733=$7;
      var $1734=((($1733)-(1))|0);
      var $1735=$2;
      var $1736=(($1735+8)|0);
      var $1737=(($1736+4)|0);
      var $1738=HEAP32[(($1737)>>2)];
      var $1739=(($1738+($1734<<4))|0);
      var $1740=(($1739)|0);
      var $1741=HEAP32[(($1740)>>2)];
      var $1742=$offset;
      var $1743=((($1742)+($1741))|0);
      $offset=$1743;
      var $1744=$2;
      var $1745=(($1744+32)|0);
      var $1746=HEAP32[(($1745)>>2)];
      var $1747=$1746 & 1;
      var $1748=(($1747)|0)!=0;
      if ($1748) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $1750=HEAP32[((_stderr)>>2)];
      var $1751=$offset;
      var $1752=_fprintf($1750, ((5267908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1751,tempInt));
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      var $1755=$2;
      var $1756=$p;
      var $1757=$4;
      var $1758=(($1757+6)|0);
      var $1759=HEAP8[($1758)];
      var $1760=(($1759)&255);
      var $1761=$3;
      var $1762=$offset;
      var $1763=$5;
      var $1764=$count;
      var $1765=_mcopy($1755, $1756, $1760, 0, $1761, $1762, $1763, $1764);
      var $1766=(($1765)|0)==-1;
      if ($1766) { label = 165; break; } else { label = 166; break; }
    case 165: 
      $1=-1;
      label = 217; break;
    case 166: 
      var $1769=$offset;
      var $1770=$2;
      var $1771=(($1770+24)|0);
      HEAP32[(($1771)>>2)]=$1769;
      var $1772=$2;
      var $1773=(($1772+32)|0);
      var $1774=HEAP32[(($1773)>>2)];
      var $1775=$1774 & 1;
      var $1776=(($1775)|0)!=0;
      if ($1776) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $1778=$offset;
      var $1779=$p;
      var $1780=$1779;
      _mdebug($1778, $1780, 64);
      var $1781=$4;
      _file_mdump($1781);
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $1784=$4;
      var $1785=(($1784+6)|0);
      var $1786=HEAP8[($1785)];
      var $1787=(($1786)&255);
      if ((($1787)|0) == 1) {
        label = 170; break;
      }
      else if ((($1787)|0) == 2 || (($1787)|0) == 7 || (($1787)|0) == 10) {
        label = 173; break;
      }
      else if ((($1787)|0) == 4 || (($1787)|0) == 8 || (($1787)|0) == 11 || (($1787)|0) == 23 || (($1787)|0) == 6 || (($1787)|0) == 9 || (($1787)|0) == 12 || (($1787)|0) == 21 || (($1787)|0) == 14 || (($1787)|0) == 15 || (($1787)|0) == 16 || (($1787)|0) == 22 || (($1787)|0) == 33 || (($1787)|0) == 34 || (($1787)|0) == 35) {
        label = 176; break;
      }
      else if ((($1787)|0) == 36 || (($1787)|0) == 37 || (($1787)|0) == 38) {
        label = 179; break;
      }
      else if ((($1787)|0) == 5 || (($1787)|0) == 13 || (($1787)|0) == 20) {
        label = 182; break;
      }
      else if ((($1787)|0) == 17) {
        label = 185; break;
      }
      else if ((($1787)|0) == 41) {
        label = 188; break;
      }
      else if ((($1787)|0) == 46) {
        label = 201; break;
      }
      else if ((($1787)|0) == 45) {
        label = 209; break;
      }
      else if ((($1787)|0) == 3) {
        label = 212; break;
      }
      else {
      label = 213; break;
      }
      
    case 170: 
      var $1789=$5;
      var $1790=$offset;
      var $1791=((($1790)+(1))|0);
      var $1792=(($1789)>>>0) < (($1791)>>>0);
      if ($1792) { label = 171; break; } else { label = 172; break; }
    case 171: 
      $1=0;
      label = 217; break;
    case 172: 
      label = 214; break;
    case 173: 
      var $1796=$5;
      var $1797=$offset;
      var $1798=((($1797)+(2))|0);
      var $1799=(($1796)>>>0) < (($1798)>>>0);
      if ($1799) { label = 174; break; } else { label = 175; break; }
    case 174: 
      $1=0;
      label = 217; break;
    case 175: 
      label = 214; break;
    case 176: 
      var $1803=$5;
      var $1804=$offset;
      var $1805=((($1804)+(4))|0);
      var $1806=(($1803)>>>0) < (($1805)>>>0);
      if ($1806) { label = 177; break; } else { label = 178; break; }
    case 177: 
      $1=0;
      label = 217; break;
    case 178: 
      label = 214; break;
    case 179: 
      var $1810=$5;
      var $1811=$offset;
      var $1812=((($1811)+(8))|0);
      var $1813=(($1810)>>>0) < (($1812)>>>0);
      if ($1813) { label = 180; break; } else { label = 181; break; }
    case 180: 
      $1=0;
      label = 217; break;
    case 181: 
      label = 214; break;
    case 182: 
      var $1817=$5;
      var $1818=$offset;
      var $1819=$4;
      var $1820=(($1819+5)|0);
      var $1821=HEAP8[($1820)];
      var $1822=(($1821)&255);
      var $1823=((($1818)+($1822))|0);
      var $1824=(($1817)>>>0) < (($1823)>>>0);
      if ($1824) { label = 183; break; } else { label = 184; break; }
    case 183: 
      $1=0;
      label = 217; break;
    case 184: 
      label = 214; break;
    case 185: 
      var $1828=$5;
      var $1829=$offset;
      var $1830=(($1828)>>>0) < (($1829)>>>0);
      if ($1830) { label = 186; break; } else { label = 187; break; }
    case 186: 
      $1=0;
      label = 217; break;
    case 187: 
      label = 214; break;
    case 188: 
      var $1834=$5;
      var $1835=$offset;
      var $1836=(($1834)>>>0) < (($1835)>>>0);
      if ($1836) { label = 189; break; } else { label = 190; break; }
    case 189: 
      $1=0;
      label = 217; break;
    case 190: 
      var $1839=$2;
      var $1840=(($1839+16)|0);
      var $1841=(($1840)|0);
      var $1842=HEAP32[(($1841)>>2)];
      $sbuf=$1842;
      var $1843=$2;
      var $1844=(($1843+16)|0);
      var $1845=(($1844)|0);
      HEAP32[(($1845)>>2)]=0;
      var $1846=$2;
      var $1847=(($1846+24)|0);
      HEAP32[(($1847)>>2)]=0;
      var $1848=$2;
      var $1849=$3;
      var $1850=$offset;
      var $1851=(($1849+$1850)|0);
      var $1852=$5;
      var $1853=$offset;
      var $1854=((($1852)-($1853))|0);
      var $1855=$9;
      var $1856=_file_softmagic($1848, $1851, $1854, 32, $1855);
      $rv=$1856;
      var $1857=$2;
      var $1858=(($1857+32)|0);
      var $1859=HEAP32[(($1858)>>2)];
      var $1860=$1859 & 1;
      var $1861=(($1860)|0)!=0;
      if ($1861) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $1863=HEAP32[((_stderr)>>2)];
      var $1864=$offset;
      var $1865=$rv;
      var $1866=_fprintf($1863, ((5267800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1864,HEAP32[(((tempInt)+(4))>>2)]=$1865,tempInt));
      label = 192; break;
    case 192: 
      var $1868=$rv;
      var $1869=(($1868)|0)==1;
      if ($1869) { label = 193; break; } else { label = 199; break; }
    case 193: 
      var $1871=$2;
      var $1872=(($1871+16)|0);
      var $1873=(($1872)|0);
      var $1874=HEAP32[(($1873)>>2)];
      $rbuf=$1874;
      var $1875=$sbuf;
      var $1876=$2;
      var $1877=(($1876+16)|0);
      var $1878=(($1877)|0);
      HEAP32[(($1878)>>2)]=$1875;
      var $1879=$2;
      var $1880=(($1879+32)|0);
      var $1881=HEAP32[(($1880)>>2)];
      var $1882=$1881 & 3088;
      var $1883=(($1882)|0)==0;
      if ($1883) { label = 194; break; } else { label = 196; break; }
    case 194: 
      var $1885=$2;
      var $1886=$4;
      var $1887=(($1886+96)|0);
      var $1888=(($1887)|0);
      var $1889=$offset;
      var $1890=_file_printf($1885, $1888, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1889,tempInt));
      var $1891=(($1890)|0)==-1;
      if ($1891) { label = 195; break; } else { label = 196; break; }
    case 195: 
      $1=-1;
      label = 217; break;
    case 196: 
      var $1894=$2;
      var $1895=$rbuf;
      var $1896=_file_printf($1894, ((5272248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1895,tempInt));
      var $1897=(($1896)|0)==-1;
      if ($1897) { label = 197; break; } else { label = 198; break; }
    case 197: 
      $1=-1;
      label = 217; break;
    case 198: 
      var $1900=$rbuf;
      _free($1900);
      label = 200; break;
    case 199: 
      var $1902=$sbuf;
      var $1903=$2;
      var $1904=(($1903+16)|0);
      var $1905=(($1904)|0);
      HEAP32[(($1905)>>2)]=$1902;
      label = 200; break;
    case 200: 
      var $1907=$rv;
      $1=$1907;
      label = 217; break;
    case 201: 
      var $1909=$5;
      var $1910=$offset;
      var $1911=(($1909)>>>0) < (($1910)>>>0);
      if ($1911) { label = 202; break; } else { label = 203; break; }
    case 202: 
      $1=0;
      label = 217; break;
    case 203: 
      var $1914=$4;
      var $1915=(($1914+32)|0);
      var $1916=$1915;
      var $1917=(($1916)|0);
      $sbuf=$1917;
      var $1918=$sbuf;
      var $1919=HEAP8[($1918)];
      var $1920=(($1919 << 24) >> 24);
      var $1921=(($1920)|0)==94;
      if ($1921) { label = 204; break; } else { label = 205; break; }
    case 204: 
      var $1923=$sbuf;
      var $1924=(($1923+1)|0);
      $sbuf=$1924;
      $10=1;
      label = 206; break;
    case 205: 
      $10=0;
      label = 206; break;
    case 206: 
      var $1927=$2;
      var $1928=$sbuf;
      var $1929=_file_magicfind($1927, $1928, $ml);
      var $1930=(($1929)|0)==-1;
      if ($1930) { label = 207; break; } else { label = 208; break; }
    case 207: 
      var $1932=$2;
      var $1933=$sbuf;
      _file_error($1932, 0, ((5267600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1933,tempInt));
      $1=-1;
      label = 217; break;
    case 208: 
      var $1935=$2;
      var $1936=(($ml)|0);
      var $1937=HEAP32[(($1936)>>2)];
      var $1938=(($ml+4)|0);
      var $1939=HEAP32[(($1938)>>2)];
      var $1940=$3;
      var $1941=$5;
      var $1942=$offset;
      var $1943=$8;
      var $1944=$9;
      var $1945=$10;
      var $1946=_match($1935, $1937, $1939, $1940, $1941, $1942, $1943, $1944, $1945);
      $1=$1946;
      label = 217; break;
    case 209: 
      var $1948=$2;
      var $1949=$4;
      var $1950=(($1949+96)|0);
      var $1951=(($1950)|0);
      var $1952=_file_printf($1948, ((5272248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1951,tempInt));
      var $1953=(($1952)|0)==-1;
      if ($1953) { label = 210; break; } else { label = 211; break; }
    case 210: 
      $1=-1;
      label = 217; break;
    case 211: 
      $1=1;
      label = 217; break;
    case 212: 
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      var $1959=$2;
      var $1960=$4;
      var $1961=$10;
      var $1962=_mconvert($1959, $1960, $1961);
      var $1963=(($1962)|0)!=0;
      if ($1963) { label = 216; break; } else { label = 215; break; }
    case 215: 
      $1=0;
      label = 217; break;
    case 216: 
      $1=1;
      label = 217; break;
    case 217: 
      var $1967=$1;
      STACKTOP = __stackBase__;
      return $1967;
    default: assert(0, "bad label: " + label);
  }
}
_mget["X"]=1;

function _magiccheck($ms, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 552)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l=__stackBase__;
      var $v=(__stackBase__)+(8);
      var $fl;
      var $fv;
      var $dl;
      var $dv;
      var $matched;
      var $p;
      var $slen;
      var $idx;
      var $rc;
      var $rx=(__stackBase__)+(16);
      var $errmsg=(__stackBase__)+(32);
      var $pmatch=(__stackBase__)+(544);
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+32)|0);
      var $6=$5;
      var $st$22$0=(($6)|0);
      var $7$0=HEAP32[(($st$22$0)>>2)];
      var $st$22$1=(($6+4)|0);
      var $7$1=HEAP32[(($st$22$1)>>2)];
      var $st$26$0=(($l)|0);
      HEAP32[(($st$26$0)>>2)]=$7$0;
      var $st$26$1=(($l+4)|0);
      HEAP32[(($st$26$1)>>2)]=$7$1;
      var $8=$2;
      var $9=(($8+64)|0);
      $p=$9;
      var $10=$3;
      var $11=(($10+6)|0);
      var $12=HEAP8[($11)];
      var $13=(($12)&255);
      if ((($13)|0) == 1) {
        label = 3; break;
      }
      else if ((($13)|0) == 2 || (($13)|0) == 7 || (($13)|0) == 10) {
        label = 4; break;
      }
      else if ((($13)|0) == 4 || (($13)|0) == 8 || (($13)|0) == 11 || (($13)|0) == 23 || (($13)|0) == 6 || (($13)|0) == 9 || (($13)|0) == 12 || (($13)|0) == 21 || (($13)|0) == 14 || (($13)|0) == 15 || (($13)|0) == 16 || (($13)|0) == 22) {
        label = 5; break;
      }
      else if ((($13)|0) == 24 || (($13)|0) == 25 || (($13)|0) == 26 || (($13)|0) == 27 || (($13)|0) == 29 || (($13)|0) == 28 || (($13)|0) == 30 || (($13)|0) == 32 || (($13)|0) == 31 || (($13)|0) == 42 || (($13)|0) == 44 || (($13)|0) == 43) {
        label = 6; break;
      }
      else if ((($13)|0) == 33 || (($13)|0) == 34 || (($13)|0) == 35) {
        label = 7; break;
      }
      else if ((($13)|0) == 36 || (($13)|0) == 37 || (($13)|0) == 38) {
        label = 15; break;
      }
      else if ((($13)|0) == 3) {
        label = 23; break;
      }
      else if ((($13)|0) == 5 || (($13)|0) == 13) {
        label = 24; break;
      }
      else if ((($13)|0) == 18 || (($13)|0) == 19) {
        label = 25; break;
      }
      else if ((($13)|0) == 20) {
        label = 26; break;
      }
      else if ((($13)|0) == 17) {
        label = 42; break;
      }
      else if ((($13)|0) == 41 || (($13)|0) == 46 || (($13)|0) == 45) {
        label = 54; break;
      }
      else {
      label = 55; break;
      }
      
    case 3: 
      var $15=$p;
      var $16=$15;
      var $17=HEAP8[($16)];
      var $18$0=(($17)&255);
      var $18$1=0;
      var $st$5$0=(($v)|0);
      HEAP32[(($st$5$0)>>2)]=$18$0;
      var $st$5$1=(($v+4)|0);
      HEAP32[(($st$5$1)>>2)]=$18$1;
      label = 56; break;
    case 4: 
      var $20=$p;
      var $21=$20;
      var $22=HEAP16[(($21)>>1)];
      var $23$0=(($22)&65535);
      var $23$1=0;
      var $st$5$0=(($v)|0);
      HEAP32[(($st$5$0)>>2)]=$23$0;
      var $st$5$1=(($v+4)|0);
      HEAP32[(($st$5$1)>>2)]=$23$1;
      label = 56; break;
    case 5: 
      var $25=$p;
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28$0=$27;
      var $28$1=0;
      var $st$5$0=(($v)|0);
      HEAP32[(($st$5$0)>>2)]=$28$0;
      var $st$5$1=(($v+4)|0);
      HEAP32[(($st$5$1)>>2)]=$28$1;
      label = 56; break;
    case 6: 
      var $30=$p;
      var $31=$30;
      var $st$2$0=(($31)|0);
      var $32$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($31+4)|0);
      var $32$1=HEAP32[(($st$2$1)>>2)];
      var $st$6$0=(($v)|0);
      HEAP32[(($st$6$0)>>2)]=$32$0;
      var $st$6$1=(($v+4)|0);
      HEAP32[(($st$6$1)>>2)]=$32$1;
      label = 56; break;
    case 7: 
      var $34=$3;
      var $35=(($34+32)|0);
      var $36=$35;
      var $37=HEAPF32[(($36)>>2)];
      $fl=$37;
      var $38=$p;
      var $39=$38;
      var $40=HEAPF32[(($39)>>2)];
      $fv=$40;
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=HEAP8[($42)];
      var $44=(($43)&255);
      if ((($44)|0) == 120) {
        label = 8; break;
      }
      else if ((($44)|0) == 33) {
        label = 9; break;
      }
      else if ((($44)|0) == 61) {
        label = 10; break;
      }
      else if ((($44)|0) == 62) {
        label = 11; break;
      }
      else if ((($44)|0) == 60) {
        label = 12; break;
      }
      else {
      label = 13; break;
      }
      
    case 8: 
      $matched=1;
      label = 14; break;
    case 9: 
      var $47=$fv;
      var $48=$fl;
      var $49=$47 != $48;
      var $50=(($49)&1);
      $matched=$50;
      label = 14; break;
    case 10: 
      var $52=$fv;
      var $53=$fl;
      var $54=$52 == $53;
      var $55=(($54)&1);
      $matched=$55;
      label = 14; break;
    case 11: 
      var $57=$fv;
      var $58=$fl;
      var $59=$57 > $58;
      var $60=(($59)&1);
      $matched=$60;
      label = 14; break;
    case 12: 
      var $62=$fv;
      var $63=$fl;
      var $64=$62 < $63;
      var $65=(($64)&1);
      $matched=$65;
      label = 14; break;
    case 13: 
      $matched=0;
      var $67=$2;
      var $68=$3;
      var $69=(($68+4)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      _file_magerror($67, ((5272124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$71,tempInt));
      $1=-1;
      label = 90; break;
    case 14: 
      var $73=$matched;
      $1=$73;
      label = 90; break;
    case 15: 
      var $75=$3;
      var $76=(($75+32)|0);
      var $77=$76;
      var $78=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($77)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($77)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $dl=$78;
      var $79=$p;
      var $80=$79;
      var $81=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($80)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($80)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $dv=$81;
      var $82=$3;
      var $83=(($82+4)|0);
      var $84=HEAP8[($83)];
      var $85=(($84)&255);
      if ((($85)|0) == 120) {
        label = 16; break;
      }
      else if ((($85)|0) == 33) {
        label = 17; break;
      }
      else if ((($85)|0) == 61) {
        label = 18; break;
      }
      else if ((($85)|0) == 62) {
        label = 19; break;
      }
      else if ((($85)|0) == 60) {
        label = 20; break;
      }
      else {
      label = 21; break;
      }
      
    case 16: 
      $matched=1;
      label = 22; break;
    case 17: 
      var $88=$dv;
      var $89=$dl;
      var $90=$88 != $89;
      var $91=(($90)&1);
      $matched=$91;
      label = 22; break;
    case 18: 
      var $93=$dv;
      var $94=$dl;
      var $95=$93 == $94;
      var $96=(($95)&1);
      $matched=$96;
      label = 22; break;
    case 19: 
      var $98=$dv;
      var $99=$dl;
      var $100=$98 > $99;
      var $101=(($100)&1);
      $matched=$101;
      label = 22; break;
    case 20: 
      var $103=$dv;
      var $104=$dl;
      var $105=$103 < $104;
      var $106=(($105)&1);
      $matched=$106;
      label = 22; break;
    case 21: 
      $matched=0;
      var $108=$2;
      var $109=$3;
      var $110=(($109+4)|0);
      var $111=HEAP8[($110)];
      var $112=(($111)&255);
      _file_magerror($108, ((5271700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$112,tempInt));
      $1=-1;
      label = 90; break;
    case 22: 
      var $114=$matched;
      $1=$114;
      label = 90; break;
    case 23: 
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$etemp$0$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
      var $$etemp$1$0=0;
      var $$etemp$1$1=0;
      var $st$8$0=(($v)|0);
      HEAP32[(($st$8$0)>>2)]=$$etemp$1$0;
      var $st$8$1=(($v+4)|0);
      HEAP32[(($st$8$1)>>2)]=$$etemp$1$1;
      label = 56; break;
    case 24: 
      var $$etemp$2$0=0;
      var $$etemp$2$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$etemp$2$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$2$1;
      var $117=$3;
      var $118=(($117+32)|0);
      var $119=$118;
      var $120=(($119)|0);
      var $121=$p;
      var $122=$121;
      var $123=(($122)|0);
      var $124=$3;
      var $125=(($124+5)|0);
      var $126=HEAP8[($125)];
      var $127=(($126)&255);
      var $128=$3;
      var $129=(($128+24)|0);
      var $130=$129;
      var $131=(($130+4)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133$0=_file_strncmp($120, $123, $127, $132);
      var $133$1=tempRet0;
      var $st$24$0=(($v)|0);
      HEAP32[(($st$24$0)>>2)]=$133$0;
      var $st$24$1=(($v+4)|0);
      HEAP32[(($st$24$1)>>2)]=$133$1;
      label = 56; break;
    case 25: 
      var $$etemp$3$0=0;
      var $$etemp$3$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$etemp$3$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$3$1;
      var $135=$3;
      var $136=(($135+32)|0);
      var $137=$136;
      var $138=(($137)|0);
      var $139=$p;
      var $140=$139;
      var $141=(($140)|0);
      var $142=$3;
      var $143=(($142+5)|0);
      var $144=HEAP8[($143)];
      var $145=(($144)&255);
      var $146=$3;
      var $147=(($146+24)|0);
      var $148=$147;
      var $149=(($148+4)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151$0=_file_strncmp16($138, $141, $145, $150);
      var $151$1=tempRet0;
      var $st$24$0=(($v)|0);
      HEAP32[(($st$24$0)>>2)]=$151$0;
      var $st$24$1=(($v+4)|0);
      HEAP32[(($st$24$1)>>2)]=$151$1;
      label = 56; break;
    case 26: 
      var $153=$2;
      var $154=(($153+48)|0);
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156)|0)==0;
      if ($157) { label = 27; break; } else { label = 28; break; }
    case 27: 
      $1=0;
      label = 90; break;
    case 28: 
      var $160=$3;
      var $161=(($160+5)|0);
      var $162=HEAP8[($161)];
      var $163=(($162)&255);
      var $164=(($163)>>>0) < 64;
      if ($164) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $166=$3;
      var $167=(($166+5)|0);
      var $168=HEAP8[($167)];
      var $169=(($168)&255);
      var $172 = $169;label = 31; break;
    case 30: 
      var $172 = 64;label = 31; break;
    case 31: 
      var $172;
      $slen=$172;
      var $$etemp$4$0=0;
      var $$etemp$4$1=0;
      var $st$4$0=(($l)|0);
      HEAP32[(($st$4$0)>>2)]=$$etemp$4$0;
      var $st$4$1=(($l+4)|0);
      HEAP32[(($st$4$1)>>2)]=$$etemp$4$1;
      var $$etemp$5$0=0;
      var $$etemp$5$1=0;
      var $st$10$0=(($v)|0);
      HEAP32[(($st$10$0)>>2)]=$$etemp$5$0;
      var $st$10$1=(($v+4)|0);
      HEAP32[(($st$10$1)>>2)]=$$etemp$5$1;
      $idx=0;
      label = 32; break;
    case 32: 
      var $174=$3;
      var $175=(($174+24)|0);
      var $176=$175;
      var $177=(($176)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=(($178)|0)==0;
      if ($179) { var $189 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $181=$idx;
      var $182=$3;
      var $183=(($182+24)|0);
      var $184=$183;
      var $185=(($184)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($181)>>>0) < (($186)>>>0);
      var $189 = $187;label = 34; break;
    case 34: 
      var $189;
      if ($189) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $191=$slen;
      var $192=$idx;
      var $193=((($191)+($192))|0);
      var $194=$2;
      var $195=(($194+48)|0);
      var $196=(($195+4)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($193)>>>0) > (($197)>>>0);
      if ($198) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 41; break;
    case 37: 
      var $201=$3;
      var $202=(($201+32)|0);
      var $203=$202;
      var $204=(($203)|0);
      var $205=$2;
      var $206=(($205+48)|0);
      var $207=(($206)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$idx;
      var $210=(($208+$209)|0);
      var $211=$slen;
      var $212=$3;
      var $213=(($212+24)|0);
      var $214=$213;
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217$0=_file_strncmp($204, $210, $211, $216);
      var $217$1=tempRet0;
      var $st$18$0=(($v)|0);
      HEAP32[(($st$18$0)>>2)]=$217$0;
      var $st$18$1=(($v+4)|0);
      HEAP32[(($st$18$1)>>2)]=$217$1;
      var $st$22$0=(($v)|0);
      var $218$0=HEAP32[(($st$22$0)>>2)];
      var $st$22$1=(($v+4)|0);
      var $218$1=HEAP32[(($st$22$1)>>2)];
      var $$etemp$6$0=0;
      var $$etemp$6$1=0;
      var $219=$218$0 == $$etemp$6$0 && $218$1 == $$etemp$6$1;
      if ($219) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $221=$idx;
      var $222=$2;
      var $223=(($222+48)|0);
      var $224=(($223+8)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=((($225)+($221))|0);
      HEAP32[(($224)>>2)]=$226;
      label = 41; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $229=$idx;
      var $230=((($229)+(1))|0);
      $idx=$230;
      label = 32; break;
    case 41: 
      label = 56; break;
    case 42: 
      var $233=$2;
      var $234=(($233+48)|0);
      var $235=(($234)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236)|0)==0;
      if ($237) { label = 43; break; } else { label = 44; break; }
    case 43: 
      $1=0;
      label = 90; break;
    case 44: 
      var $$etemp$7$0=0;
      var $$etemp$7$1=0;
      var $st$2$0=(($l)|0);
      HEAP32[(($st$2$0)>>2)]=$$etemp$7$0;
      var $st$2$1=(($l+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$7$1;
      var $240=$3;
      var $241=(($240+32)|0);
      var $242=$241;
      var $243=(($242)|0);
      var $244=$3;
      var $245=(($244+24)|0);
      var $246=$245;
      var $247=(($246+4)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=$248 & 12;
      var $250=(($249)|0)!=0;
      var $251=$250 ? 2 : 0;
      var $252=9 | $251;
      var $253=_regcomp($rx, $243, $252);
      $rc=$253;
      var $254=$rc;
      var $255=(($254)|0)!=0;
      if ($255) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $257=$rc;
      var $258=(($errmsg)|0);
      var $259=_regerror($257, $rx, $258, 512);
      var $260=$2;
      var $261=$rc;
      var $262=(($errmsg)|0);
      _file_magerror($260, ((5261060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$261,HEAP32[(((tempInt)+(4))>>2)]=$262,tempInt));
      var $$etemp$8$0=-1;
      var $$etemp$8$1=-1;
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$$etemp$8$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$$etemp$8$1;
      label = 51; break;
    case 46: 
      var $264=(($pmatch)|0);
      var $265=(($264)|0);
      HEAP32[(($265)>>2)]=0;
      var $266=$2;
      var $267=(($266+48)|0);
      var $268=(($267+4)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($pmatch)|0);
      var $271=(($270+4)|0);
      HEAP32[(($271)>>2)]=$269;
      var $272=$2;
      var $273=(($272+48)|0);
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($pmatch)|0);
      var $277=_regexec($rx, $275, 1, $276, 4);
      $rc=$277;
      var $278=$rc;
      if ((($278)|0) == 0) {
        label = 47; break;
      }
      else if ((($278)|0) == 1) {
        label = 48; break;
      }
      else {
      label = 49; break;
      }
      
    case 47: 
      var $280=(($pmatch)|0);
      var $281=(($280)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$2;
      var $284=(($283+48)|0);
      var $285=(($284)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=(($286+$282)|0);
      HEAP32[(($285)>>2)]=$287;
      var $288=(($pmatch)|0);
      var $289=(($288)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=$2;
      var $292=(($291+48)|0);
      var $293=(($292+8)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=((($294)+($290))|0);
      HEAP32[(($293)>>2)]=$295;
      var $296=(($pmatch)|0);
      var $297=(($296+4)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=(($pmatch)|0);
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=((($298)-($301))|0);
      var $303=$2;
      var $304=(($303+48)|0);
      var $305=(($304+12)|0);
      HEAP32[(($305)>>2)]=$302;
      var $$etemp$9$0=0;
      var $$etemp$9$1=0;
      var $st$31$0=(($v)|0);
      HEAP32[(($st$31$0)>>2)]=$$etemp$9$0;
      var $st$31$1=(($v+4)|0);
      HEAP32[(($st$31$1)>>2)]=$$etemp$9$1;
      label = 50; break;
    case 48: 
      var $$etemp$10$0=1;
      var $$etemp$10$1=0;
      var $st$2$0=(($v)|0);
      HEAP32[(($st$2$0)>>2)]=$$etemp$10$0;
      var $st$2$1=(($v+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$10$1;
      label = 50; break;
    case 49: 
      var $308=$rc;
      var $309=(($errmsg)|0);
      var $310=_regerror($308, $rx, $309, 512);
      var $311=$2;
      var $312=$rc;
      var $313=(($errmsg)|0);
      _file_magerror($311, ((5271368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$312,HEAP32[(((tempInt)+(4))>>2)]=$313,tempInt));
      var $$etemp$11$0=-1;
      var $$etemp$11$1=-1;
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$$etemp$11$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$$etemp$11$1;
      label = 50; break;
    case 50: 
      _regfree($rx);
      label = 51; break;
    case 51: 
      var $st$0$0=(($v)|0);
      var $316$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $316$1=HEAP32[(($st$0$1)>>2)];
      var $$etemp$12$0=-1;
      var $$etemp$12$1=-1;
      var $317=$316$0 == $$etemp$12$0 && $316$1 == $$etemp$12$1;
      if ($317) { label = 52; break; } else { label = 53; break; }
    case 52: 
      $1=-1;
      label = 90; break;
    case 53: 
      label = 56; break;
    case 54: 
      $1=1;
      label = 90; break;
    case 55: 
      var $322=$2;
      var $323=$3;
      var $324=(($323+6)|0);
      var $325=HEAP8[($324)];
      var $326=(($325)&255);
      _file_magerror($322, ((5271088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$326,tempInt));
      $1=-1;
      label = 90; break;
    case 56: 
      var $328=$2;
      var $329=$3;
      var $st$2$0=(($v)|0);
      var $330$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($v+4)|0);
      var $330$1=HEAP32[(($st$2$1)>>2)];
      var $331$0=_file_signextend($328, $329, $330$0, $330$1);
      var $331$1=tempRet0;
      var $st$8$0=(($v)|0);
      HEAP32[(($st$8$0)>>2)]=$331$0;
      var $st$8$1=(($v+4)|0);
      HEAP32[(($st$8$1)>>2)]=$331$1;
      var $332=$3;
      var $333=(($332+4)|0);
      var $334=HEAP8[($333)];
      var $335=(($334)&255);
      if ((($335)|0) == 120) {
        label = 57; break;
      }
      else if ((($335)|0) == 33) {
        label = 60; break;
      }
      else if ((($335)|0) == 61) {
        label = 63; break;
      }
      else if ((($335)|0) == 62) {
        label = 66; break;
      }
      else if ((($335)|0) == 60) {
        label = 74; break;
      }
      else if ((($335)|0) == 38) {
        label = 82; break;
      }
      else if ((($335)|0) == 94) {
        label = 85; break;
      }
      else {
      label = 88; break;
      }
      
    case 57: 
      var $337=$2;
      var $338=(($337+32)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=$339 & 1;
      var $341=(($340)|0)!=0;
      if ($341) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $343=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $344$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $344$1=HEAP32[(($st$1$1)>>2)];
      var $$etemp$13=((5270824)|0);
      var $345=_fprintf($343, $$etemp$13, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$344$0,HEAP32[(((tempInt)+(4))>>2)]=$344$1,tempInt));
      label = 59; break;
    case 59: 
      $matched=1;
      label = 89; break;
    case 60: 
      var $st$0$0=(($v)|0);
      var $348$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $348$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $349$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $349$1=HEAP32[(($st$4$1)>>2)];
      var $350=$348$0 != $349$0 || $348$1 != $349$1;
      var $351=(($350)&1);
      $matched=$351;
      var $352=$2;
      var $353=(($352+32)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=$354 & 1;
      var $356=(($355)|0)!=0;
      if ($356) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $358=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $359$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $359$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $360$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $360$1=HEAP32[(($st$5$1)>>2)];
      var $361=$matched;
      var $$etemp$14=((5270528)|0);
      var $362=_fprintf($358, $$etemp$14, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$359$0,HEAP32[(((tempInt)+(4))>>2)]=$359$1,HEAP32[(((tempInt)+(8))>>2)]=$360$0,HEAP32[(((tempInt)+(12))>>2)]=$360$1,HEAP32[(((tempInt)+(16))>>2)]=$361,tempInt));
      label = 62; break;
    case 62: 
      label = 89; break;
    case 63: 
      var $st$0$0=(($v)|0);
      var $365$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $365$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $366$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $366$1=HEAP32[(($st$4$1)>>2)];
      var $367=$365$0 == $366$0 && $365$1 == $366$1;
      var $368=(($367)&1);
      $matched=$368;
      var $369=$2;
      var $370=(($369+32)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$371 & 1;
      var $373=(($372)|0)!=0;
      if ($373) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $375=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $376$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $376$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $377$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $377$1=HEAP32[(($st$5$1)>>2)];
      var $378=$matched;
      var $$etemp$15=((5270260)|0);
      var $379=_fprintf($375, $$etemp$15, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$376$0,HEAP32[(((tempInt)+(4))>>2)]=$376$1,HEAP32[(((tempInt)+(8))>>2)]=$377$0,HEAP32[(((tempInt)+(12))>>2)]=$377$1,HEAP32[(((tempInt)+(16))>>2)]=$378,tempInt));
      label = 65; break;
    case 65: 
      label = 89; break;
    case 66: 
      var $382=$3;
      var $383=(($382+2)|0);
      var $384=HEAP8[($383)];
      var $385=(($384)&255);
      var $386=$385 & 8;
      var $387=(($386)|0)!=0;
      if ($387) { label = 67; break; } else { label = 70; break; }
    case 67: 
      var $st$0$0=(($v)|0);
      var $389$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $389$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $390$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $390$1=HEAP32[(($st$4$1)>>2)];
      var $391=($389$1>>>0) > ($390$1>>>0) || (($389$1>>>0) == ($390$1>>>0) && ($389$0>>>0) >  ($390$0>>>0));
      var $392=(($391)&1);
      $matched=$392;
      var $393=$2;
      var $394=(($393+32)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=$395 & 1;
      var $397=(($396)|0)!=0;
      if ($397) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $399=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $400$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $400$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $401$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $401$1=HEAP32[(($st$5$1)>>2)];
      var $402=$matched;
      var $$etemp$16=((5269828)|0);
      var $403=_fprintf($399, $$etemp$16, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$400$0,HEAP32[(((tempInt)+(4))>>2)]=$400$1,HEAP32[(((tempInt)+(8))>>2)]=$401$0,HEAP32[(((tempInt)+(12))>>2)]=$401$1,HEAP32[(((tempInt)+(16))>>2)]=$402,tempInt));
      label = 69; break;
    case 69: 
      label = 73; break;
    case 70: 
      var $st$0$0=(($v)|0);
      var $406$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $406$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $407$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $407$1=HEAP32[(($st$4$1)>>2)];
      var $408=($406$1|0) > ($407$1|0) || (($406$1|0) == ($407$1|0) && ($406$0>>>0) >  ($407$0>>>0));
      var $409=(($408)&1);
      $matched=$409;
      var $410=$2;
      var $411=(($410+32)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$412 & 1;
      var $414=(($413)|0)!=0;
      if ($414) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $416=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $417$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $417$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $418$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $418$1=HEAP32[(($st$5$1)>>2)];
      var $419=$matched;
      var $$etemp$17=((5269648)|0);
      var $420=_fprintf($416, $$etemp$17, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$417$0,HEAP32[(((tempInt)+(4))>>2)]=$417$1,HEAP32[(((tempInt)+(8))>>2)]=$418$0,HEAP32[(((tempInt)+(12))>>2)]=$418$1,HEAP32[(((tempInt)+(16))>>2)]=$419,tempInt));
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 89; break;
    case 74: 
      var $424=$3;
      var $425=(($424+2)|0);
      var $426=HEAP8[($425)];
      var $427=(($426)&255);
      var $428=$427 & 8;
      var $429=(($428)|0)!=0;
      if ($429) { label = 75; break; } else { label = 78; break; }
    case 75: 
      var $st$0$0=(($v)|0);
      var $431$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $431$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $432$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $432$1=HEAP32[(($st$4$1)>>2)];
      var $433=($431$1>>>0) < ($432$1>>>0) || (($431$1>>>0) == ($432$1>>>0) && ($431$0>>>0) <  ($432$0>>>0));
      var $434=(($433)&1);
      $matched=$434;
      var $435=$2;
      var $436=(($435+32)|0);
      var $437=HEAP32[(($436)>>2)];
      var $438=$437 & 1;
      var $439=(($438)|0)!=0;
      if ($439) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $441=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $442$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $442$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $443$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $443$1=HEAP32[(($st$5$1)>>2)];
      var $444=$matched;
      var $$etemp$18=((5269328)|0);
      var $445=_fprintf($441, $$etemp$18, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$442$0,HEAP32[(((tempInt)+(4))>>2)]=$442$1,HEAP32[(((tempInt)+(8))>>2)]=$443$0,HEAP32[(((tempInt)+(12))>>2)]=$443$1,HEAP32[(((tempInt)+(16))>>2)]=$444,tempInt));
      label = 77; break;
    case 77: 
      label = 81; break;
    case 78: 
      var $st$0$0=(($v)|0);
      var $448$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $448$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $449$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $449$1=HEAP32[(($st$4$1)>>2)];
      var $450=($448$1|0) < ($449$1|0) || (($448$1|0) == ($449$1|0) && ($448$0>>>0) <  ($449$0>>>0));
      var $451=(($450)&1);
      $matched=$451;
      var $452=$2;
      var $453=(($452+32)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=$454 & 1;
      var $456=(($455)|0)!=0;
      if ($456) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $458=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $459$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $459$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $460$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $460$1=HEAP32[(($st$5$1)>>2)];
      var $461=$matched;
      var $$etemp$19=((5269004)|0);
      var $462=_fprintf($458, $$etemp$19, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$459$0,HEAP32[(((tempInt)+(4))>>2)]=$459$1,HEAP32[(((tempInt)+(8))>>2)]=$460$0,HEAP32[(((tempInt)+(12))>>2)]=$460$1,HEAP32[(((tempInt)+(16))>>2)]=$461,tempInt));
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 89; break;
    case 82: 
      var $st$0$0=(($v)|0);
      var $466$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $466$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $467$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $467$1=HEAP32[(($st$4$1)>>2)];
      var $468$0=$466$0 & $467$0;
      var $468$1=$466$1 & $467$1;
      var $st$10$0=(($l)|0);
      var $469$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($l+4)|0);
      var $469$1=HEAP32[(($st$10$1)>>2)];
      var $470=$468$0 == $469$0 && $468$1 == $469$1;
      var $471=(($470)&1);
      $matched=$471;
      var $472=$2;
      var $473=(($472+32)|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=$474 & 1;
      var $476=(($475)|0)!=0;
      if ($476) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $478=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $479$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $479$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $480$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $480$1=HEAP32[(($st$5$1)>>2)];
      var $st$9$0=(($l)|0);
      var $481$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($l+4)|0);
      var $481$1=HEAP32[(($st$9$1)>>2)];
      var $482=$matched;
      var $$etemp$20=((5268744)|0);
      var $483=_fprintf($478, $$etemp$20, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$479$0,HEAP32[(((tempInt)+(4))>>2)]=$479$1,HEAP32[(((tempInt)+(8))>>2)]=$480$0,HEAP32[(((tempInt)+(12))>>2)]=$480$1,HEAP32[(((tempInt)+(16))>>2)]=$481$0,HEAP32[(((tempInt)+(20))>>2)]=$481$1,HEAP32[(((tempInt)+(24))>>2)]=$482,tempInt));
      label = 84; break;
    case 84: 
      label = 89; break;
    case 85: 
      var $st$0$0=(($v)|0);
      var $486$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $486$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($l)|0);
      var $487$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($l+4)|0);
      var $487$1=HEAP32[(($st$4$1)>>2)];
      var $488$0=$486$0 & $487$0;
      var $488$1=$486$1 & $487$1;
      var $st$10$0=(($l)|0);
      var $489$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($l+4)|0);
      var $489$1=HEAP32[(($st$10$1)>>2)];
      var $490=$488$0 != $489$0 || $488$1 != $489$1;
      var $491=(($490)&1);
      $matched=$491;
      var $492=$2;
      var $493=(($492+32)|0);
      var $494=HEAP32[(($493)>>2)];
      var $495=$494 & 1;
      var $496=(($495)|0)!=0;
      if ($496) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $498=HEAP32[((_stderr)>>2)];
      var $st$1$0=(($v)|0);
      var $499$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $499$1=HEAP32[(($st$1$1)>>2)];
      var $st$5$0=(($l)|0);
      var $500$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($l+4)|0);
      var $500$1=HEAP32[(($st$5$1)>>2)];
      var $st$9$0=(($l)|0);
      var $501$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($l+4)|0);
      var $501$1=HEAP32[(($st$9$1)>>2)];
      var $502=$matched;
      var $$etemp$21=((5268500)|0);
      var $503=_fprintf($498, $$etemp$21, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$499$0,HEAP32[(((tempInt)+(4))>>2)]=$499$1,HEAP32[(((tempInt)+(8))>>2)]=$500$0,HEAP32[(((tempInt)+(12))>>2)]=$500$1,HEAP32[(((tempInt)+(16))>>2)]=$501$0,HEAP32[(((tempInt)+(20))>>2)]=$501$1,HEAP32[(((tempInt)+(24))>>2)]=$502,tempInt));
      label = 87; break;
    case 87: 
      label = 89; break;
    case 88: 
      $matched=0;
      var $506=$2;
      var $507=$3;
      var $508=(($507+4)|0);
      var $509=HEAP8[($508)];
      var $510=(($509)&255);
      _file_magerror($506, ((5268276)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$510,tempInt));
      $1=-1;
      label = 90; break;
    case 89: 
      var $512=$matched;
      $1=$512;
      label = 90; break;
    case 90: 
      var $514=$1;
      STACKTOP = __stackBase__;
      return $514;
    default: assert(0, "bad label: " + label);
  }
}
_magiccheck["X"]=1;

function _handle_annotation($ms, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$m;
      var $4=$2;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & 2048;
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $10=$2;
      var $11=$3;
      var $12=(($11+224)|0);
      var $13=(($12)|0);
      var $14=_file_printf($10, ((5272876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $15=(($14)|0)==-1;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 12; break;
    case 5: 
      $1=1;
      label = 12; break;
    case 6: 
      var $19=$2;
      var $20=(($19+32)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & 16;
      var $23=(($22)|0)!=0;
      if ($23) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $25=$3;
      var $26=(($25+160)|0);
      var $27=(($26)|0);
      var $28=HEAP8[($27)];
      var $29=(($28 << 24) >> 24);
      var $30=(($29)|0)!=0;
      if ($30) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $32=$2;
      var $33=$3;
      var $34=(($33+160)|0);
      var $35=(($34)|0);
      var $36=_file_printf($32, ((5272248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$35,tempInt));
      var $37=(($36)|0)==-1;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=-1;
      label = 12; break;
    case 10: 
      $1=1;
      label = 12; break;
    case 11: 
      $1=0;
      label = 12; break;
    case 12: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
_handle_annotation["X"]=1;

function _print_sep($ms, $firstline) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$firstline;
      var $4=$2;
      var $5=(($4+32)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & 1040;
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 7; break;
    case 4: 
      var $11=$3;
      var $12=(($11)|0)!=0;
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $15=$2;
      var $16=_file_printf($15, ((5260380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$16;
      label = 7; break;
    case 7: 
      var $18=$1;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}


function _mprint($ms, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 172)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $v=__stackBase__;
      var $vf;
      var $vd;
      var $t=(__stackBase__)+(8);
      var $buf=(__stackBase__)+(16);
      var $tbuf=(__stackBase__)+(144);
      var $p;
      var $str;
      var $last;
      var $cp;
      var $rval;
      $2=$ms;
      $3=$m;
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $st$18$0=(($t)|0);
      HEAP32[(($st$18$0)>>2)]=$$etemp$0$0;
      var $st$18$1=(($t+4)|0);
      HEAP32[(($st$18$1)>>2)]=$$etemp$0$1;
      var $4=$2;
      var $5=(($4+64)|0);
      $p=$5;
      var $6=$3;
      var $7=(($6+6)|0);
      var $8=HEAP8[($7)];
      var $9=(($8)&255);
      if ((($9)|0) == 1) {
        label = 3; break;
      }
      else if ((($9)|0) == 2 || (($9)|0) == 7 || (($9)|0) == 10) {
        label = 12; break;
      }
      else if ((($9)|0) == 4 || (($9)|0) == 8 || (($9)|0) == 11 || (($9)|0) == 23) {
        label = 21; break;
      }
      else if ((($9)|0) == 24 || (($9)|0) == 26 || (($9)|0) == 25) {
        label = 30; break;
      }
      else if ((($9)|0) == 5 || (($9)|0) == 13 || (($9)|0) == 18 || (($9)|0) == 19) {
        label = 33; break;
      }
      else if ((($9)|0) == 6 || (($9)|0) == 9 || (($9)|0) == 12 || (($9)|0) == 21) {
        label = 57; break;
      }
      else if ((($9)|0) == 14 || (($9)|0) == 15 || (($9)|0) == 16 || (($9)|0) == 22) {
        label = 60; break;
      }
      else if ((($9)|0) == 27 || (($9)|0) == 29 || (($9)|0) == 28) {
        label = 63; break;
      }
      else if ((($9)|0) == 30 || (($9)|0) == 32 || (($9)|0) == 31) {
        label = 66; break;
      }
      else if ((($9)|0) == 42 || (($9)|0) == 44 || (($9)|0) == 43) {
        label = 69; break;
      }
      else if ((($9)|0) == 33 || (($9)|0) == 34 || (($9)|0) == 35) {
        label = 72; break;
      }
      else if ((($9)|0) == 36 || (($9)|0) == 37 || (($9)|0) == 38) {
        label = 81; break;
      }
      else if ((($9)|0) == 17) {
        label = 90; break;
      }
      else if ((($9)|0) == 20) {
        label = 98; break;
      }
      else if ((($9)|0) == 3) {
        label = 104; break;
      }
      else if ((($9)|0) == 41 || (($9)|0) == 46 || (($9)|0) == 45) {
        label = 107; break;
      }
      else {
      label = 108; break;
      }
      
    case 3: 
      var $11=$2;
      var $12=$3;
      var $13=$p;
      var $14=$13;
      var $15=HEAP8[($14)];
      var $16$0=(($15)&255);
      var $16$1=0;
      var $17$0=_file_signextend($11, $12, $16$0, $16$1);
      var $17$1=tempRet0;
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$17$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$17$1;
      var $18=$2;
      var $19=$3;
      var $20=_check_fmt($18, $19);
      if ((($20)|0) == -1) {
        label = 4; break;
      }
      else if ((($20)|0) == 1) {
        label = 5; break;
      }
      else {
      label = 8; break;
      }
      
    case 4: 
      $1=-1;
      label = 110; break;
    case 5: 
      var $23=(($buf)|0);
      var $st$1$0=(($v)|0);
      var $24$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $24$1=HEAP32[(($st$1$1)>>2)];
      var $25$0=$24$0;
      var $25=$25$0&255;
      var $26=(($25)&255);
      var $27=_snprintf($23, 128, ((5267636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$26,tempInt));
      var $28=$2;
      var $29=$3;
      var $30=(($29+96)|0);
      var $31=(($30)|0);
      var $32=(($buf)|0);
      var $33=_file_printf($28, $31, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$32,tempInt));
      var $34=(($33)|0)==-1;
      if ($34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 110; break;
    case 7: 
      label = 11; break;
    case 8: 
      var $38=$2;
      var $39=$3;
      var $40=(($39+96)|0);
      var $41=(($40)|0);
      var $st$4$0=(($v)|0);
      var $42$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($v+4)|0);
      var $42$1=HEAP32[(($st$4$1)>>2)];
      var $43$0=$42$0;
      var $43=$43$0&255;
      var $44=(($43)&255);
      var $45=_file_printf($38, $41, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$44,tempInt));
      var $46=(($45)|0)==-1;
      if ($46) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=-1;
      label = 110; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $50=$2;
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      var $54$0=$53;
      var $54$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$54$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$54$1;
      label = 109; break;
    case 12: 
      var $56=$2;
      var $57=$3;
      var $58=$p;
      var $59=$58;
      var $60=HEAP16[(($59)>>1)];
      var $61$0=(($60)&65535);
      var $61$1=0;
      var $62$0=_file_signextend($56, $57, $61$0, $61$1);
      var $62$1=tempRet0;
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$62$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$62$1;
      var $63=$2;
      var $64=$3;
      var $65=_check_fmt($63, $64);
      if ((($65)|0) == -1) {
        label = 13; break;
      }
      else if ((($65)|0) == 1) {
        label = 14; break;
      }
      else {
      label = 17; break;
      }
      
    case 13: 
      $1=-1;
      label = 110; break;
    case 14: 
      var $68=(($buf)|0);
      var $st$1$0=(($v)|0);
      var $69$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $69$1=HEAP32[(($st$1$1)>>2)];
      var $70$0=$69$0;
      var $70=$70$0&65535;
      var $71=(($70)&65535);
      var $72=_snprintf($68, 128, ((5266296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$71,tempInt));
      var $73=$2;
      var $74=$3;
      var $75=(($74+96)|0);
      var $76=(($75)|0);
      var $77=(($buf)|0);
      var $78=_file_printf($73, $76, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$77,tempInt));
      var $79=(($78)|0)==-1;
      if ($79) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=-1;
      label = 110; break;
    case 16: 
      label = 20; break;
    case 17: 
      var $83=$2;
      var $84=$3;
      var $85=(($84+96)|0);
      var $86=(($85)|0);
      var $st$4$0=(($v)|0);
      var $87$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($v+4)|0);
      var $87$1=HEAP32[(($st$4$1)>>2)];
      var $88$0=$87$0;
      var $88=$88$0&65535;
      var $89=(($88)&65535);
      var $90=_file_printf($83, $86, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$89,tempInt));
      var $91=(($90)|0)==-1;
      if ($91) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=-1;
      label = 110; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $95=$2;
      var $96=(($95+24)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=((($97)+(2))|0);
      var $99$0=$98;
      var $99$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$99$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$99$1;
      label = 109; break;
    case 21: 
      var $101=$2;
      var $102=$3;
      var $103=$p;
      var $104=$103;
      var $105=HEAP32[(($104)>>2)];
      var $106$0=$105;
      var $106$1=0;
      var $107$0=_file_signextend($101, $102, $106$0, $106$1);
      var $107$1=tempRet0;
      var $st$9$0=(($v)|0);
      HEAP32[(($st$9$0)>>2)]=$107$0;
      var $st$9$1=(($v+4)|0);
      HEAP32[(($st$9$1)>>2)]=$107$1;
      var $108=$2;
      var $109=$3;
      var $110=_check_fmt($108, $109);
      if ((($110)|0) == -1) {
        label = 22; break;
      }
      else if ((($110)|0) == 1) {
        label = 23; break;
      }
      else {
      label = 26; break;
      }
      
    case 22: 
      $1=-1;
      label = 110; break;
    case 23: 
      var $113=(($buf)|0);
      var $st$1$0=(($v)|0);
      var $114$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($v+4)|0);
      var $114$1=HEAP32[(($st$1$1)>>2)];
      var $115$0=$114$0;
      var $115=$115$0;
      var $116=_snprintf($113, 128, ((5265260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$115,tempInt));
      var $117=$2;
      var $118=$3;
      var $119=(($118+96)|0);
      var $120=(($119)|0);
      var $121=(($buf)|0);
      var $122=_file_printf($117, $120, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$121,tempInt));
      var $123=(($122)|0)==-1;
      if ($123) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=-1;
      label = 110; break;
    case 25: 
      label = 29; break;
    case 26: 
      var $127=$2;
      var $128=$3;
      var $129=(($128+96)|0);
      var $130=(($129)|0);
      var $st$4$0=(($v)|0);
      var $131$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($v+4)|0);
      var $131$1=HEAP32[(($st$4$1)>>2)];
      var $132$0=$131$0;
      var $132=$132$0;
      var $133=_file_printf($127, $130, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$132,tempInt));
      var $134=(($133)|0)==-1;
      if ($134) { label = 27; break; } else { label = 28; break; }
    case 27: 
      $1=-1;
      label = 110; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $138=$2;
      var $139=(($138+24)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)+(4))|0);
      var $142$0=$141;
      var $142$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$142$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$142$1;
      label = 109; break;
    case 30: 
      var $144=$2;
      var $145=$3;
      var $146=$p;
      var $147=$146;
      var $st$4$0=(($147)|0);
      var $148$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($147+4)|0);
      var $148$1=HEAP32[(($st$4$1)>>2)];
      var $149$0=_file_signextend($144, $145, $148$0, $148$1);
      var $149$1=tempRet0;
      var $st$10$0=(($v)|0);
      HEAP32[(($st$10$0)>>2)]=$149$0;
      var $st$10$1=(($v+4)|0);
      HEAP32[(($st$10$1)>>2)]=$149$1;
      var $150=$2;
      var $151=$3;
      var $152=(($151+96)|0);
      var $153=(($152)|0);
      var $st$18$0=(($v)|0);
      var $154$0=HEAP32[(($st$18$0)>>2)];
      var $st$18$1=(($v+4)|0);
      var $154$1=HEAP32[(($st$18$1)>>2)];
      var $155=_file_printf($150, $153, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$154$0,HEAP32[(((tempInt)+(4))>>2)]=$154$1,tempInt));
      var $156=(($155)|0)==-1;
      if ($156) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $1=-1;
      label = 110; break;
    case 32: 
      var $159=$2;
      var $160=(($159+24)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)+(8))|0);
      var $163$0=$162;
      var $163$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$163$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$163$1;
      label = 109; break;
    case 33: 
      var $165=$3;
      var $166=(($165+4)|0);
      var $167=HEAP8[($166)];
      var $168=(($167)&255);
      var $169=(($168)|0)==61;
      if ($169) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $171=$3;
      var $172=(($171+4)|0);
      var $173=HEAP8[($172)];
      var $174=(($173)&255);
      var $175=(($174)|0)==33;
      if ($175) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $177=$2;
      var $178=$3;
      var $179=(($178+96)|0);
      var $180=(($179)|0);
      var $181=$3;
      var $182=(($181+32)|0);
      var $183=$182;
      var $184=(($183)|0);
      var $185=_file_printf($177, $180, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$184,tempInt));
      var $186=(($185)|0)==-1;
      if ($186) { label = 36; break; } else { label = 37; break; }
    case 36: 
      $1=-1;
      label = 110; break;
    case 37: 
      var $189=$2;
      var $190=(($189+24)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$3;
      var $193=(($192+5)|0);
      var $194=HEAP8[($193)];
      var $195=(($194)&255);
      var $196=((($191)+($195))|0);
      var $197$0=$196;
      var $197$1=0;
      var $st$10$0=(($t)|0);
      HEAP32[(($st$10$0)>>2)]=$197$0;
      var $st$10$1=(($t+4)|0);
      HEAP32[(($st$10$1)>>2)]=$197$1;
      label = 56; break;
    case 38: 
      var $199=$p;
      var $200=$199;
      var $201=(($200)|0);
      $str=$201;
      var $202=$2;
      var $203=(($202+24)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$str;
      var $206=_strlen($205);
      var $207=((($204)+($206))|0);
      var $208$0=$207;
      var $208$1=0;
      var $st$12$0=(($t)|0);
      HEAP32[(($st$12$0)>>2)]=$208$0;
      var $st$12$1=(($t+4)|0);
      HEAP32[(($st$12$1)>>2)]=$208$1;
      var $209=$3;
      var $210=(($209+32)|0);
      var $211=$210;
      var $212=(($211)|0);
      var $213=HEAP8[($212)];
      var $214=(($213 << 24) >> 24);
      var $215=(($214)|0)==0;
      if ($215) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $217=$str;
      var $218=_strcspn($217, ((5270032)|0));
      var $219=$str;
      var $220=(($219+$218)|0);
      HEAP8[($220)]=0;
      label = 40; break;
    case 40: 
      var $222=$3;
      var $223=(($222+24)|0);
      var $224=$223;
      var $225=(($224+4)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$226 & 8192;
      var $228=(($227)|0)!=0;
      if ($228) { label = 41; break; } else { label = 51; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $231=$str;
      var $232=HEAP8[($231)];
      var $233=(($232)&255);
      var $234=_isspace($233);
      var $235=(($234)|0)!=0;
      if ($235) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $237=$str;
      var $238=(($237+1)|0);
      $str=$238;
      label = 42; break;
    case 44: 
      var $240=$str;
      $last=$240;
      label = 45; break;
    case 45: 
      var $242=$last;
      var $243=HEAP8[($242)];
      var $244=(($243 << 24) >> 24)!=0;
      if ($244) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $246=$last;
      var $247=(($246+1)|0);
      $last=$247;
      label = 45; break;
    case 47: 
      var $249=$last;
      var $250=((($249)-(1))|0);
      $last=$250;
      label = 48; break;
    case 48: 
      var $252=$last;
      var $253=HEAP8[($252)];
      var $254=(($253)&255);
      var $255=_isspace($254);
      var $256=(($255)|0)!=0;
      if ($256) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $258=$last;
      var $259=((($258)-(1))|0);
      $last=$259;
      label = 48; break;
    case 50: 
      var $261=$last;
      var $262=(($261+1)|0);
      $last=$262;
      HEAP8[($262)]=0;
      label = 51; break;
    case 51: 
      var $264=$2;
      var $265=$3;
      var $266=(($265+96)|0);
      var $267=(($266)|0);
      var $268=$str;
      var $269=_file_printf($264, $267, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$268,tempInt));
      var $270=(($269)|0)==-1;
      if ($270) { label = 52; break; } else { label = 53; break; }
    case 52: 
      $1=-1;
      label = 110; break;
    case 53: 
      var $273=$3;
      var $274=(($273+6)|0);
      var $275=HEAP8[($274)];
      var $276=(($275)&255);
      var $277=(($276)|0)==13;
      if ($277) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $279=$3;
      var $280=_file_pstring_length_size($279);
      var $281$0=$280;
      var $281$1=0;
      var $st$4$0=(($t)|0);
      var $282$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t+4)|0);
      var $282$1=HEAP32[(($st$4$1)>>2)];
      var $283$0 = (i64Math.add($282$0,$282$1,$281$0,$281$1),HEAP32[((tempDoublePtr)>>2)]); var $283$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$9$0=(($t)|0);
      HEAP32[(($st$9$0)>>2)]=$283$0;
      var $st$9$1=(($t+4)|0);
      HEAP32[(($st$9$1)>>2)]=$283$1;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 109; break;
    case 57: 
      var $287=$2;
      var $288=$3;
      var $289=(($288+96)|0);
      var $290=(($289)|0);
      var $291=$p;
      var $292=$291;
      var $293=HEAP32[(($292)>>2)];
      var $294$0=$293;
      var $294$1=0;
      var $295=(($tbuf)|0);
      var $296=_file_fmttime($294$0, $294$1, 1, $295);
      var $297=_file_printf($287, $290, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$296,tempInt));
      var $298=(($297)|0)==-1;
      if ($298) { label = 58; break; } else { label = 59; break; }
    case 58: 
      $1=-1;
      label = 110; break;
    case 59: 
      var $301=$2;
      var $302=(($301+24)|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=((($303)+(4))|0);
      var $305$0=$304;
      var $305$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$305$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$305$1;
      label = 109; break;
    case 60: 
      var $307=$2;
      var $308=$3;
      var $309=(($308+96)|0);
      var $310=(($309)|0);
      var $311=$p;
      var $312=$311;
      var $313=HEAP32[(($312)>>2)];
      var $314$0=$313;
      var $314$1=0;
      var $315=(($tbuf)|0);
      var $316=_file_fmttime($314$0, $314$1, 0, $315);
      var $317=_file_printf($307, $310, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$316,tempInt));
      var $318=(($317)|0)==-1;
      if ($318) { label = 61; break; } else { label = 62; break; }
    case 61: 
      $1=-1;
      label = 110; break;
    case 62: 
      var $321=$2;
      var $322=(($321+24)|0);
      var $323=HEAP32[(($322)>>2)];
      var $324=((($323)+(4))|0);
      var $325$0=$324;
      var $325$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$325$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$325$1;
      label = 109; break;
    case 63: 
      var $327=$2;
      var $328=$3;
      var $329=(($328+96)|0);
      var $330=(($329)|0);
      var $331=$p;
      var $332=$331;
      var $st$6$0=(($332)|0);
      var $333$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($332+4)|0);
      var $333$1=HEAP32[(($st$6$1)>>2)];
      var $334=(($tbuf)|0);
      var $335=_file_fmttime($333$0, $333$1, 1, $334);
      var $336=_file_printf($327, $330, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$335,tempInt));
      var $337=(($336)|0)==-1;
      if ($337) { label = 64; break; } else { label = 65; break; }
    case 64: 
      $1=-1;
      label = 110; break;
    case 65: 
      var $340=$2;
      var $341=(($340+24)|0);
      var $342=HEAP32[(($341)>>2)];
      var $343=((($342)+(8))|0);
      var $344$0=$343;
      var $344$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$344$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$344$1;
      label = 109; break;
    case 66: 
      var $346=$2;
      var $347=$3;
      var $348=(($347+96)|0);
      var $349=(($348)|0);
      var $350=$p;
      var $351=$350;
      var $st$6$0=(($351)|0);
      var $352$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($351+4)|0);
      var $352$1=HEAP32[(($st$6$1)>>2)];
      var $353=(($tbuf)|0);
      var $354=_file_fmttime($352$0, $352$1, 0, $353);
      var $355=_file_printf($346, $349, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$354,tempInt));
      var $356=(($355)|0)==-1;
      if ($356) { label = 67; break; } else { label = 68; break; }
    case 67: 
      $1=-1;
      label = 110; break;
    case 68: 
      var $359=$2;
      var $360=(($359+24)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=((($361)+(8))|0);
      var $363$0=$362;
      var $363$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$363$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$363$1;
      label = 109; break;
    case 69: 
      var $365=$2;
      var $366=$3;
      var $367=(($366+96)|0);
      var $368=(($367)|0);
      var $369=$p;
      var $370=$369;
      var $st$6$0=(($370)|0);
      var $371$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($370+4)|0);
      var $371$1=HEAP32[(($st$6$1)>>2)];
      var $372=(($tbuf)|0);
      var $373=_file_fmttime($371$0, $371$1, 2, $372);
      var $374=_file_printf($365, $368, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$373,tempInt));
      var $375=(($374)|0)==-1;
      if ($375) { label = 70; break; } else { label = 71; break; }
    case 70: 
      $1=-1;
      label = 110; break;
    case 71: 
      var $378=$2;
      var $379=(($378+24)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=((($380)+(8))|0);
      var $382$0=$381;
      var $382$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$382$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$382$1;
      label = 109; break;
    case 72: 
      var $384=$p;
      var $385=$384;
      var $386=HEAPF32[(($385)>>2)];
      $vf=$386;
      var $387=$2;
      var $388=$3;
      var $389=_check_fmt($387, $388);
      if ((($389)|0) == -1) {
        label = 73; break;
      }
      else if ((($389)|0) == 1) {
        label = 74; break;
      }
      else {
      label = 77; break;
      }
      
    case 73: 
      $1=-1;
      label = 110; break;
    case 74: 
      var $392=(($buf)|0);
      var $393=$vf;
      var $394=$393;
      var $395=_snprintf($392, 128, ((5263892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$394,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $396=$2;
      var $397=$3;
      var $398=(($397+96)|0);
      var $399=(($398)|0);
      var $400=(($buf)|0);
      var $401=_file_printf($396, $399, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$400,tempInt));
      var $402=(($401)|0)==-1;
      if ($402) { label = 75; break; } else { label = 76; break; }
    case 75: 
      $1=-1;
      label = 110; break;
    case 76: 
      label = 80; break;
    case 77: 
      var $406=$2;
      var $407=$3;
      var $408=(($407+96)|0);
      var $409=(($408)|0);
      var $410=$vf;
      var $411=$410;
      var $412=_file_printf($406, $409, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$411,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $413=(($412)|0)==-1;
      if ($413) { label = 78; break; } else { label = 79; break; }
    case 78: 
      $1=-1;
      label = 110; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $417=$2;
      var $418=(($417+24)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=((($419)+(4))|0);
      var $421$0=$420;
      var $421$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$421$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$421$1;
      label = 109; break;
    case 81: 
      var $423=$p;
      var $424=$423;
      var $425=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($424)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($424)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $vd=$425;
      var $426=$2;
      var $427=$3;
      var $428=_check_fmt($426, $427);
      if ((($428)|0) == -1) {
        label = 82; break;
      }
      else if ((($428)|0) == 1) {
        label = 83; break;
      }
      else {
      label = 86; break;
      }
      
    case 82: 
      $1=-1;
      label = 110; break;
    case 83: 
      var $431=(($buf)|0);
      var $432=$vd;
      var $433=_snprintf($431, 128, ((5263892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$432,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $434=$2;
      var $435=$3;
      var $436=(($435+96)|0);
      var $437=(($436)|0);
      var $438=(($buf)|0);
      var $439=_file_printf($434, $437, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$438,tempInt));
      var $440=(($439)|0)==-1;
      if ($440) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $1=-1;
      label = 110; break;
    case 85: 
      label = 89; break;
    case 86: 
      var $444=$2;
      var $445=$3;
      var $446=(($445+96)|0);
      var $447=(($446)|0);
      var $448=$vd;
      var $449=_file_printf($444, $447, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$448,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $450=(($449)|0)==-1;
      if ($450) { label = 87; break; } else { label = 88; break; }
    case 87: 
      $1=-1;
      label = 110; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $454=$2;
      var $455=(($454+24)|0);
      var $456=HEAP32[(($455)>>2)];
      var $457=((($456)+(8))|0);
      var $458$0=$457;
      var $458$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$458$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$458$1;
      label = 109; break;
    case 90: 
      var $460=$2;
      var $461=(($460+48)|0);
      var $462=(($461)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=$2;
      var $465=(($464+48)|0);
      var $466=(($465+12)|0);
      var $467=HEAP32[(($466)>>2)];
      var $468=_strndup($463, $467);
      $cp=$468;
      var $469=$cp;
      var $470=(($469)|0)==0;
      if ($470) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $472=$2;
      var $473=$2;
      var $474=(($473+48)|0);
      var $475=(($474+12)|0);
      var $476=HEAP32[(($475)>>2)];
      _file_oomem($472, $476);
      $1=-1;
      label = 110; break;
    case 92: 
      var $478=$2;
      var $479=$3;
      var $480=(($479+96)|0);
      var $481=(($480)|0);
      var $482=$cp;
      var $483=_file_printf($478, $481, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$482,tempInt));
      $rval=$483;
      var $484=$cp;
      _free($484);
      var $485=$rval;
      var $486=(($485)|0)==-1;
      if ($486) { label = 93; break; } else { label = 94; break; }
    case 93: 
      $1=-1;
      label = 110; break;
    case 94: 
      var $489=$3;
      var $490=(($489+24)|0);
      var $491=$490;
      var $492=(($491+4)|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=$493 & 16;
      var $495=(($494)|0)!=0;
      if ($495) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $497=$2;
      var $498=(($497+48)|0);
      var $499=(($498+8)|0);
      var $500=HEAP32[(($499)>>2)];
      var $501$0=$500;
      var $501$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$501$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$501$1;
      label = 97; break;
    case 96: 
      var $503=$2;
      var $504=(($503+48)|0);
      var $505=(($504+8)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=$2;
      var $508=(($507+48)|0);
      var $509=(($508+12)|0);
      var $510=HEAP32[(($509)>>2)];
      var $511=((($506)+($510))|0);
      var $512$0=$511;
      var $512$1=0;
      var $st$11$0=(($t)|0);
      HEAP32[(($st$11$0)>>2)]=$512$0;
      var $st$11$1=(($t+4)|0);
      HEAP32[(($st$11$1)>>2)]=$512$1;
      label = 97; break;
    case 97: 
      label = 109; break;
    case 98: 
      var $515=$2;
      var $516=$3;
      var $517=(($516+96)|0);
      var $518=(($517)|0);
      var $519=$3;
      var $520=(($519+32)|0);
      var $521=$520;
      var $522=(($521)|0);
      var $523=_file_printf($515, $518, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$522,tempInt));
      var $524=(($523)|0)==-1;
      if ($524) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $1=-1;
      label = 110; break;
    case 100: 
      var $527=$3;
      var $528=(($527+24)|0);
      var $529=$528;
      var $530=(($529+4)|0);
      var $531=HEAP32[(($530)>>2)];
      var $532=$531 & 16;
      var $533=(($532)|0)!=0;
      if ($533) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $535=$2;
      var $536=(($535+48)|0);
      var $537=(($536+8)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539$0=$538;
      var $539$1=0;
      var $st$6$0=(($t)|0);
      HEAP32[(($st$6$0)>>2)]=$539$0;
      var $st$6$1=(($t+4)|0);
      HEAP32[(($st$6$1)>>2)]=$539$1;
      label = 103; break;
    case 102: 
      var $541=$2;
      var $542=(($541+48)|0);
      var $543=(($542+8)|0);
      var $544=HEAP32[(($543)>>2)];
      var $545=$3;
      var $546=(($545+5)|0);
      var $547=HEAP8[($546)];
      var $548=(($547)&255);
      var $549=((($544)+($548))|0);
      var $550$0=$549;
      var $550$1=0;
      var $st$11$0=(($t)|0);
      HEAP32[(($st$11$0)>>2)]=$550$0;
      var $st$11$1=(($t+4)|0);
      HEAP32[(($st$11$1)>>2)]=$550$1;
      label = 103; break;
    case 103: 
      label = 109; break;
    case 104: 
      var $553=$2;
      var $554=$3;
      var $555=(($554+96)|0);
      var $556=(($555)|0);
      var $557=$3;
      var $558=(($557+32)|0);
      var $559=$558;
      var $560=(($559)|0);
      var $561=_file_printf($553, $556, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$560,tempInt));
      var $562=(($561)|0)==-1;
      if ($562) { label = 105; break; } else { label = 106; break; }
    case 105: 
      $1=-1;
      label = 110; break;
    case 106: 
      var $565=$2;
      var $566=(($565+24)|0);
      var $567=HEAP32[(($566)>>2)];
      var $568$0=$567;
      var $568$1=0;
      var $st$5$0=(($t)|0);
      HEAP32[(($st$5$0)>>2)]=$568$0;
      var $st$5$1=(($t+4)|0);
      HEAP32[(($st$5$1)>>2)]=$568$1;
      label = 109; break;
    case 107: 
      var $570=$2;
      var $571=(($570+24)|0);
      var $572=HEAP32[(($571)>>2)];
      var $573$0=$572;
      var $573$1=0;
      var $st$5$0=(($t)|0);
      HEAP32[(($st$5$0)>>2)]=$573$0;
      var $st$5$1=(($t+4)|0);
      HEAP32[(($st$5$1)>>2)]=$573$1;
      label = 109; break;
    case 108: 
      var $575=$2;
      var $576=$3;
      var $577=(($576+6)|0);
      var $578=HEAP8[($577)];
      var $579=(($578)&255);
      _file_magerror($575, ((5262832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$579,tempInt));
      $1=-1;
      label = 110; break;
    case 109: 
      var $st$0$0=(($t)|0);
      var $581$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t+4)|0);
      var $581$1=HEAP32[(($st$0$1)>>2)];
      var $582$0=$581$0;
      var $582=$582$0;
      $1=$582;
      label = 110; break;
    case 110: 
      var $584=$1;
      STACKTOP = __stackBase__;
      return $584;
    default: assert(0, "bad label: " + label);
  }
}
_mprint["X"]=1;

function _moffset($ms, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $p;
      var $t;
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+6)|0);
      var $6=HEAP8[($5)];
      var $7=(($6)&255);
      if ((($7)|0) == 1) {
        label = 3; break;
      }
      else if ((($7)|0) == 2 || (($7)|0) == 7 || (($7)|0) == 10) {
        label = 4; break;
      }
      else if ((($7)|0) == 4 || (($7)|0) == 8 || (($7)|0) == 11 || (($7)|0) == 23) {
        label = 5; break;
      }
      else if ((($7)|0) == 24 || (($7)|0) == 26 || (($7)|0) == 25) {
        label = 6; break;
      }
      else if ((($7)|0) == 5 || (($7)|0) == 13 || (($7)|0) == 18 || (($7)|0) == 19) {
        label = 7; break;
      }
      else if ((($7)|0) == 6 || (($7)|0) == 9 || (($7)|0) == 12 || (($7)|0) == 21) {
        label = 15; break;
      }
      else if ((($7)|0) == 14 || (($7)|0) == 15 || (($7)|0) == 16 || (($7)|0) == 22) {
        label = 16; break;
      }
      else if ((($7)|0) == 27 || (($7)|0) == 29 || (($7)|0) == 28) {
        label = 17; break;
      }
      else if ((($7)|0) == 30 || (($7)|0) == 32 || (($7)|0) == 31) {
        label = 18; break;
      }
      else if ((($7)|0) == 33 || (($7)|0) == 34 || (($7)|0) == 35) {
        label = 19; break;
      }
      else if ((($7)|0) == 36 || (($7)|0) == 37 || (($7)|0) == 38) {
        label = 20; break;
      }
      else if ((($7)|0) == 17) {
        label = 21; break;
      }
      else if ((($7)|0) == 20) {
        label = 24; break;
      }
      else if ((($7)|0) == 3) {
        label = 27; break;
      }
      else if ((($7)|0) == 41) {
        label = 28; break;
      }
      else {
      label = 29; break;
      }
      
    case 3: 
      var $9=$2;
      var $10=(($9+24)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)+(1))|0);
      $1=$12;
      label = 30; break;
    case 4: 
      var $14=$2;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($16)+(2))|0);
      $1=$17;
      label = 30; break;
    case 5: 
      var $19=$2;
      var $20=(($19+24)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)+(4))|0);
      $1=$22;
      label = 30; break;
    case 6: 
      var $24=$2;
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)+(8))|0);
      $1=$27;
      label = 30; break;
    case 7: 
      var $29=$3;
      var $30=(($29+4)|0);
      var $31=HEAP8[($30)];
      var $32=(($31)&255);
      var $33=(($32)|0)==61;
      if ($33) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $35=$3;
      var $36=(($35+4)|0);
      var $37=HEAP8[($36)];
      var $38=(($37)&255);
      var $39=(($38)|0)==33;
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $41=$2;
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$3;
      var $45=(($44+5)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&255);
      var $48=((($43)+($47))|0);
      $1=$48;
      label = 30; break;
    case 10: 
      var $50=$2;
      var $51=(($50+64)|0);
      $p=$51;
      var $52=$3;
      var $53=(($52+32)|0);
      var $54=$53;
      var $55=(($54)|0);
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $58=(($57)|0)==0;
      if ($58) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $60=$p;
      var $61=$60;
      var $62=(($61)|0);
      var $63=_strcspn($62, ((5270032)|0));
      var $64=$p;
      var $65=$64;
      var $66=(($65+$63)|0);
      HEAP8[($66)]=0;
      label = 12; break;
    case 12: 
      var $68=$2;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$p;
      var $72=$71;
      var $73=(($72)|0);
      var $74=_strlen($73);
      var $75=((($70)+($74))|0);
      $t=$75;
      var $76=$3;
      var $77=(($76+6)|0);
      var $78=HEAP8[($77)];
      var $79=(($78)&255);
      var $80=(($79)|0)==13;
      if ($80) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $82=$3;
      var $83=_file_pstring_length_size($82);
      var $84=$t;
      var $85=((($84)+($83))|0);
      $t=$85;
      label = 14; break;
    case 14: 
      var $87=$t;
      $1=$87;
      label = 30; break;
    case 15: 
      var $89=$2;
      var $90=(($89+24)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=((($91)+(4))|0);
      $1=$92;
      label = 30; break;
    case 16: 
      var $94=$2;
      var $95=(($94+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96)+(4))|0);
      $1=$97;
      label = 30; break;
    case 17: 
      var $99=$2;
      var $100=(($99+24)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=((($101)+(8))|0);
      $1=$102;
      label = 30; break;
    case 18: 
      var $104=$2;
      var $105=(($104+24)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=((($106)+(8))|0);
      $1=$107;
      label = 30; break;
    case 19: 
      var $109=$2;
      var $110=(($109+24)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)+(4))|0);
      $1=$112;
      label = 30; break;
    case 20: 
      var $114=$2;
      var $115=(($114+24)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)+(8))|0);
      $1=$117;
      label = 30; break;
    case 21: 
      var $119=$3;
      var $120=(($119+24)|0);
      var $121=$120;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$123 & 16;
      var $125=(($124)|0)!=0;
      if ($125) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $127=$2;
      var $128=(($127+48)|0);
      var $129=(($128+8)|0);
      var $130=HEAP32[(($129)>>2)];
      $1=$130;
      label = 30; break;
    case 23: 
      var $132=$2;
      var $133=(($132+48)|0);
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$2;
      var $137=(($136+48)|0);
      var $138=(($137+12)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=((($135)+($139))|0);
      $1=$140;
      label = 30; break;
    case 24: 
      var $142=$3;
      var $143=(($142+24)|0);
      var $144=$143;
      var $145=(($144+4)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$146 & 16;
      var $148=(($147)|0)!=0;
      if ($148) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $150=$2;
      var $151=(($150+48)|0);
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      $1=$153;
      label = 30; break;
    case 26: 
      var $155=$2;
      var $156=(($155+48)|0);
      var $157=(($156+8)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$3;
      var $160=(($159+5)|0);
      var $161=HEAP8[($160)];
      var $162=(($161)&255);
      var $163=((($158)+($162))|0);
      $1=$163;
      label = 30; break;
    case 27: 
      var $165=$2;
      var $166=(($165+24)|0);
      var $167=HEAP32[(($166)>>2)];
      $1=$167;
      label = 30; break;
    case 28: 
      var $169=$2;
      var $170=(($169+24)|0);
      var $171=HEAP32[(($170)>>2)];
      $1=$171;
      label = 30; break;
    case 29: 
      $1=0;
      label = 30; break;
    case 30: 
      var $174=$1;

      return $174;
    default: assert(0, "bad label: " + label);
  }
}
_moffset["X"]=1;

function _check_fmt($ms, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 528)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $rx=__stackBase__;
      var $rc;
      var $errmsg=(__stackBase__)+(16);
      $2=$ms;
      $3=$m;
      var $4=$3;
      var $5=(($4+96)|0);
      var $6=(($5)|0);
      var $7=_strchr($6, 37);
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 7; break;
    case 4: 
      var $11=_regcomp($rx, ((5262032)|0), 5);
      $rc=$11;
      var $12=$rc;
      var $13=(($12)|0)!=0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$rc;
      var $16=(($errmsg)|0);
      var $17=_regerror($15, $rx, $16, 512);
      var $18=$2;
      var $19=$rc;
      var $20=(($errmsg)|0);
      _file_magerror($18, ((5261060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,HEAP32[(((tempInt)+(4))>>2)]=$20,tempInt));
      $1=-1;
      label = 7; break;
    case 6: 
      var $22=$3;
      var $23=(($22+96)|0);
      var $24=(($23)|0);
      var $25=_regexec($rx, $24, 0, 0, 0);
      $rc=$25;
      _regfree($rx);
      var $26=$rc;
      var $27=(($26)|0)!=0;
      var $28=$27 ^ 1;
      var $29=(($28)&1);
      $1=$29;
      label = 7; break;
    case 7: 
      var $31=$1;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}


function _file_strncmp($s1, $s2, $len, $flags) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $a;
      var $b;
      var $v=__stackBase__;
      $1=$s1;
      $2=$s2;
      $3=$len;
      $4=$flags;
      var $5=$1;
      $a=$5;
      var $6=$2;
      $b=$6;
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $st$17$0=(($v)|0);
      HEAP32[(($st$17$0)>>2)]=$$etemp$0$0;
      var $st$17$1=(($v+4)|0);
      HEAP32[(($st$17$1)>>2)]=$$etemp$0$1;
      var $7=$4;
      var $8=0==(($7)|0);
      if ($8) { label = 3; break; } else { label = 9; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$3;
      var $12=((($11)-(1))|0);
      $3=$12;
      var $13=(($11)>>>0) > 0;
      if ($13) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $15=$b;
      var $16=(($15+1)|0);
      $b=$16;
      var $17=HEAP8[($15)];
      var $18=(($17)&255);
      var $19=$a;
      var $20=(($19+1)|0);
      $a=$20;
      var $21=HEAP8[($19)];
      var $22=(($21)&255);
      var $23=((($18)-($22))|0);
      var $24$0=$23;
      var $24$1=((($23)|0) < 0 ? -1 : 0);
      var $st$13$0=(($v)|0);
      HEAP32[(($st$13$0)>>2)]=$24$0;
      var $st$13$1=(($v+4)|0);
      HEAP32[(($st$13$1)>>2)]=$24$1;
      var $$etemp$1$0=0;
      var $$etemp$1$1=0;
      var $25=$24$0 != $$etemp$1$0 || $24$1 != $$etemp$1$1;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 46; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $31=$3;
      var $32=((($31)-(1))|0);
      $3=$32;
      var $33=(($31)>>>0) > 0;
      if ($33) { label = 11; break; } else { label = 45; break; }
    case 11: 
      var $35=$4;
      var $36=$35 & 4;
      var $37=(($36)|0)!=0;
      if ($37) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $39=$a;
      var $40=HEAP8[($39)];
      var $41=(($40)&255);
      var $42=_islower($41);
      var $43=(($42)|0)!=0;
      if ($43) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $45=$b;
      var $46=(($45+1)|0);
      $b=$46;
      var $47=HEAP8[($45)];
      var $48=(($47)&255);
      var $49=_tolower($48);
      var $50=$a;
      var $51=(($50+1)|0);
      $a=$51;
      var $52=HEAP8[($50)];
      var $53=(($52)&255);
      var $54=((($49)-($53))|0);
      var $55$0=$54;
      var $55$1=((($54)|0) < 0 ? -1 : 0);
      var $st$14$0=(($v)|0);
      HEAP32[(($st$14$0)>>2)]=$55$0;
      var $st$14$1=(($v+4)|0);
      HEAP32[(($st$14$1)>>2)]=$55$1;
      var $$etemp$2$0=0;
      var $$etemp$2$1=0;
      var $56=$55$0 != $$etemp$2$0 || $55$1 != $$etemp$2$1;
      if ($56) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 45; break;
    case 15: 
      label = 44; break;
    case 16: 
      var $60=$4;
      var $61=$60 & 8;
      var $62=(($61)|0)!=0;
      if ($62) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $64=$a;
      var $65=HEAP8[($64)];
      var $66=(($65)&255);
      var $67=_isupper($66);
      var $68=(($67)|0)!=0;
      if ($68) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $70=$b;
      var $71=(($70+1)|0);
      $b=$71;
      var $72=HEAP8[($70)];
      var $73=(($72)&255);
      var $74=_toupper($73);
      var $75=$a;
      var $76=(($75+1)|0);
      $a=$76;
      var $77=HEAP8[($75)];
      var $78=(($77)&255);
      var $79=((($74)-($78))|0);
      var $80$0=$79;
      var $80$1=((($79)|0) < 0 ? -1 : 0);
      var $st$14$0=(($v)|0);
      HEAP32[(($st$14$0)>>2)]=$80$0;
      var $st$14$1=(($v+4)|0);
      HEAP32[(($st$14$1)>>2)]=$80$1;
      var $$etemp$3$0=0;
      var $$etemp$3$1=0;
      var $81=$80$0 != $$etemp$3$0 || $80$1 != $$etemp$3$1;
      if ($81) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 45; break;
    case 20: 
      label = 43; break;
    case 21: 
      var $85=$4;
      var $86=$85 & 1;
      var $87=(($86)|0)!=0;
      if ($87) { label = 22; break; } else { label = 32; break; }
    case 22: 
      var $89=$a;
      var $90=HEAP8[($89)];
      var $91=(($90)&255);
      var $92=_isspace($91);
      var $93=(($92)|0)!=0;
      if ($93) { label = 23; break; } else { label = 32; break; }
    case 23: 
      var $95=$a;
      var $96=(($95+1)|0);
      $a=$96;
      var $97=$b;
      var $98=(($97+1)|0);
      $b=$98;
      var $99=HEAP8[($97)];
      var $100=(($99)&255);
      var $101=_isspace($100);
      var $102=(($101)|0)!=0;
      if ($102) { label = 24; break; } else { label = 30; break; }
    case 24: 
      var $104=$a;
      var $105=HEAP8[($104)];
      var $106=(($105)&255);
      var $107=_isspace($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 29; break; } else { label = 25; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $111=$b;
      var $112=HEAP8[($111)];
      var $113=(($112)&255);
      var $114=_isspace($113);
      var $115=(($114)|0)!=0;
      if ($115) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $117=$b;
      var $118=(($117+1)|0);
      $b=$118;
      label = 26; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 31; break;
    case 30: 
      var $$etemp$4$0=1;
      var $$etemp$4$1=0;
      var $st$2$0=(($v)|0);
      HEAP32[(($st$2$0)>>2)]=$$etemp$4$0;
      var $st$2$1=(($v+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$etemp$4$1;
      label = 45; break;
    case 31: 
      label = 42; break;
    case 32: 
      var $124=$4;
      var $125=$124 & 2;
      var $126=(($125)|0)!=0;
      if ($126) { label = 33; break; } else { label = 38; break; }
    case 33: 
      var $128=$a;
      var $129=HEAP8[($128)];
      var $130=(($129)&255);
      var $131=_isspace($130);
      var $132=(($131)|0)!=0;
      if ($132) { label = 34; break; } else { label = 38; break; }
    case 34: 
      var $134=$a;
      var $135=(($134+1)|0);
      $a=$135;
      label = 35; break;
    case 35: 
      var $137=$b;
      var $138=HEAP8[($137)];
      var $139=(($138)&255);
      var $140=_isspace($139);
      var $141=(($140)|0)!=0;
      if ($141) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $143=$b;
      var $144=(($143+1)|0);
      $b=$144;
      label = 35; break;
    case 37: 
      label = 41; break;
    case 38: 
      var $147=$b;
      var $148=(($147+1)|0);
      $b=$148;
      var $149=HEAP8[($147)];
      var $150=(($149)&255);
      var $151=$a;
      var $152=(($151+1)|0);
      $a=$152;
      var $153=HEAP8[($151)];
      var $154=(($153)&255);
      var $155=((($150)-($154))|0);
      var $156$0=$155;
      var $156$1=((($155)|0) < 0 ? -1 : 0);
      var $st$13$0=(($v)|0);
      HEAP32[(($st$13$0)>>2)]=$156$0;
      var $st$13$1=(($v+4)|0);
      HEAP32[(($st$13$1)>>2)]=$156$1;
      var $$etemp$5$0=0;
      var $$etemp$5$1=0;
      var $157=$156$0 != $$etemp$5$0 || $156$1 != $$etemp$5$1;
      if ($157) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 45; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 10; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $st$0$0=(($v)|0);
      var $166$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($v+4)|0);
      var $166$1=HEAP32[(($st$0$1)>>2)];
      STACKTOP = __stackBase__;
      return (tempRet0=$166$1,$166$0);
    default: assert(0, "bad label: " + label);
  }
}
_file_strncmp["X"]=1;

function _file_strncmp16($a, $b, $len, $flags) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  $1=$a;
  $2=$b;
  $3=$len;
  $4=$flags;
  $4=0;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9$0=_file_strncmp($5, $6, $7, $8);
  var $9$1=tempRet0;

  return (tempRet0=$9$1,$9$0);
}


function _cvt_flip($type, $flip) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$type;
      $3=$flip;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$2;
      $1=$7;
      label = 26; break;
    case 4: 
      var $9=$2;
      if ((($9)|0) == 7) {
        label = 5; break;
      }
      else if ((($9)|0) == 8) {
        label = 6; break;
      }
      else if ((($9)|0) == 9) {
        label = 7; break;
      }
      else if ((($9)|0) == 15) {
        label = 8; break;
      }
      else if ((($9)|0) == 26) {
        label = 9; break;
      }
      else if ((($9)|0) == 29) {
        label = 10; break;
      }
      else if ((($9)|0) == 32) {
        label = 11; break;
      }
      else if ((($9)|0) == 44) {
        label = 12; break;
      }
      else if ((($9)|0) == 10) {
        label = 13; break;
      }
      else if ((($9)|0) == 11) {
        label = 14; break;
      }
      else if ((($9)|0) == 12) {
        label = 15; break;
      }
      else if ((($9)|0) == 16) {
        label = 16; break;
      }
      else if ((($9)|0) == 25) {
        label = 17; break;
      }
      else if ((($9)|0) == 28) {
        label = 18; break;
      }
      else if ((($9)|0) == 31) {
        label = 19; break;
      }
      else if ((($9)|0) == 43) {
        label = 20; break;
      }
      else if ((($9)|0) == 34) {
        label = 21; break;
      }
      else if ((($9)|0) == 35) {
        label = 22; break;
      }
      else if ((($9)|0) == 37) {
        label = 23; break;
      }
      else if ((($9)|0) == 38) {
        label = 24; break;
      }
      else {
      label = 25; break;
      }
      
    case 5: 
      $1=10;
      label = 26; break;
    case 6: 
      $1=11;
      label = 26; break;
    case 7: 
      $1=12;
      label = 26; break;
    case 8: 
      $1=16;
      label = 26; break;
    case 9: 
      $1=25;
      label = 26; break;
    case 10: 
      $1=28;
      label = 26; break;
    case 11: 
      $1=31;
      label = 26; break;
    case 12: 
      $1=43;
      label = 26; break;
    case 13: 
      $1=7;
      label = 26; break;
    case 14: 
      $1=8;
      label = 26; break;
    case 15: 
      $1=9;
      label = 26; break;
    case 16: 
      $1=15;
      label = 26; break;
    case 17: 
      $1=26;
      label = 26; break;
    case 18: 
      $1=29;
      label = 26; break;
    case 19: 
      $1=32;
      label = 26; break;
    case 20: 
      $1=44;
      label = 26; break;
    case 21: 
      $1=35;
      label = 26; break;
    case 22: 
      $1=34;
      label = 26; break;
    case 23: 
      $1=38;
      label = 26; break;
    case 24: 
      $1=37;
      label = 26; break;
    case 25: 
      var $31=$2;
      $1=$31;
      label = 26; break;
    case 26: 
      var $33=$1;

      return $33;
    default: assert(0, "bad label: " + label);
  }
}
_cvt_flip["X"]=1;

function _mcopy($ms, $p, $type, $indir, $s, $offset, $nbytes, $linecnt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $b;
      var $c;
      var $last;
      var $buf;
      var $end;
      var $lines;
      var $src;
      var $esrc;
      var $dst;
      var $edst;
      $2=$ms;
      $3=$p;
      $4=$type;
      $5=$indir;
      $6=$s;
      $7=$offset;
      $8=$nbytes;
      $9=$linecnt;
      var $10=$5;
      var $11=(($10)|0)==0;
      if ($11) { label = 3; break; } else { label = 43; break; }
    case 3: 
      var $13=$4;
      if ((($13)|0) == 20) {
        label = 4; break;
      }
      else if ((($13)|0) == 17) {
        label = 5; break;
      }
      else if ((($13)|0) == 18 || (($13)|0) == 19) {
        label = 22; break;
      }
      else if ((($13)|0) == 5 || (($13)|0) == 13) {
        label = 40; break;
      }
      else {
      label = 41; break;
      }
      
    case 4: 
      var $15=$6;
      var $16=$7;
      var $17=(($15+$16)|0);
      var $18=$2;
      var $19=(($18+48)|0);
      var $20=(($19)|0);
      HEAP32[(($20)>>2)]=$17;
      var $21=$8;
      var $22=$7;
      var $23=((($21)-($22))|0);
      var $24=$2;
      var $25=(($24+48)|0);
      var $26=(($25+4)|0);
      HEAP32[(($26)>>2)]=$23;
      var $27=$7;
      var $28=$2;
      var $29=(($28+48)|0);
      var $30=(($29+8)|0);
      HEAP32[(($30)>>2)]=$27;
      $1=0;
      label = 51; break;
    case 5: 
      var $32=$6;
      var $33=(($32)|0)==0;
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $35=$2;
      var $36=(($35+48)|0);
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=0;
      var $38=$2;
      var $39=(($38+48)|0);
      var $40=(($39)|0);
      HEAP32[(($40)>>2)]=0;
      $1=0;
      label = 51; break;
    case 7: 
      var $42=$6;
      var $43=$7;
      var $44=(($42+$43)|0);
      $buf=$44;
      var $45=$6;
      var $46=$8;
      var $47=(($45+$46)|0);
      $last=$47;
      $end=$47;
      var $48=$9;
      $lines=$48;
      var $49=$buf;
      $b=$49;
      label = 8; break;
    case 8: 
      var $51=$lines;
      var $52=(($51)|0)!=0;
      if ($52) { label = 9; break; } else { var $78 = 0;label = 13; break; }
    case 9: 
      var $54=$b;
      var $55=$end;
      var $56=(($54)>>>0) < (($55)>>>0);
      if ($56) { label = 10; break; } else { var $78 = 0;label = 13; break; }
    case 10: 
      var $58=$b;
      $c=$58;
      var $59=$end;
      var $60=$b;
      var $61=$59;
      var $62=$60;
      var $63=((($61)-($62))|0);
      var $64=_memchr($58, 10, $63);
      $b=$64;
      var $65=(($64)|0)!=0;
      if ($65) { var $76 = 1;label = 12; break; } else { label = 11; break; }
    case 11: 
      var $67=$c;
      var $68=$end;
      var $69=$c;
      var $70=$68;
      var $71=$69;
      var $72=((($70)-($71))|0);
      var $73=_memchr($67, 13, $72);
      $b=$73;
      var $74=(($73)|0)!=0;
      var $76 = $74;label = 12; break;
    case 12: 
      var $76;
      var $78 = $76;label = 13; break;
    case 13: 
      var $78;
      if ($78) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $80=$b;
      $last=$80;
      var $81=$b;
      var $82=(($81)|0);
      var $83=HEAP8[($82)];
      var $84=(($83 << 24) >> 24);
      var $85=(($84)|0)==13;
      if ($85) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $87=$b;
      var $88=(($87+1)|0);
      var $89=HEAP8[($88)];
      var $90=(($89 << 24) >> 24);
      var $91=(($90)|0)==10;
      if ($91) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $93=$b;
      var $94=(($93+1)|0);
      $b=$94;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $97=$lines;
      var $98=((($97)-(1))|0);
      $lines=$98;
      var $99=$b;
      var $100=(($99+1)|0);
      $b=$100;
      label = 8; break;
    case 19: 
      var $102=$lines;
      var $103=(($102)|0)!=0;
      if ($103) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $105=$6;
      var $106=$8;
      var $107=(($105+$106)|0);
      $last=$107;
      label = 21; break;
    case 21: 
      var $109=$buf;
      var $110=$2;
      var $111=(($110+48)|0);
      var $112=(($111)|0);
      HEAP32[(($112)>>2)]=$109;
      var $113=$last;
      var $114=$buf;
      var $115=$113;
      var $116=$114;
      var $117=((($115)-($116))|0);
      var $118=$2;
      var $119=(($118+48)|0);
      var $120=(($119+4)|0);
      HEAP32[(($120)>>2)]=$117;
      var $121=$7;
      var $122=$2;
      var $123=(($122+48)|0);
      var $124=(($123+8)|0);
      HEAP32[(($124)>>2)]=$121;
      var $125=$2;
      var $126=(($125+48)|0);
      var $127=(($126+12)|0);
      HEAP32[(($127)>>2)]=0;
      $1=0;
      label = 51; break;
    case 22: 
      var $129=$6;
      var $130=$7;
      var $131=(($129+$130)|0);
      $src=$131;
      var $132=$6;
      var $133=$8;
      var $134=(($132+$133)|0);
      $esrc=$134;
      var $135=$3;
      var $136=$135;
      var $137=(($136)|0);
      $dst=$137;
      var $138=$3;
      var $139=$138;
      var $140=(($139+63)|0);
      $edst=$140;
      var $141=$4;
      var $142=(($141)|0)==18;
      if ($142) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $144=$src;
      var $145=(($144+1)|0);
      $src=$145;
      label = 24; break;
    case 24: 
      var $147=$src;
      var $148=$6;
      var $149=(($147)>>>0) < (($148)>>>0);
      if ($149) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $151=$2;
      var $152=$7;
      _file_magerror($151, ((5267040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$152,tempInt));
      $1=-1;
      label = 51; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $155=$src;
      var $156=$esrc;
      var $157=(($155)>>>0) < (($156)>>>0);
      if ($157) { label = 28; break; } else { label = 39; break; }
    case 28: 
      var $159=$dst;
      var $160=$edst;
      var $161=(($159)>>>0) < (($160)>>>0);
      if ($161) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $163=$src;
      var $164=HEAP8[($163)];
      var $165=$dst;
      HEAP8[($165)]=$164;
      label = 31; break;
    case 30: 
      label = 39; break;
    case 31: 
      var $168=$dst;
      var $169=HEAP8[($168)];
      var $170=(($169 << 24) >> 24);
      var $171=(($170)|0)==0;
      if ($171) { label = 32; break; } else { label = 37; break; }
    case 32: 
      var $173=$4;
      var $174=(($173)|0)==18;
      if ($174) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $176=$src;
      var $177=((($176)-(1))|0);
      var $178=HEAP8[($177)];
      var $179=(($178)&255);
      var $180=(($179)|0)!=0;
      if ($180) { label = 35; break; } else { label = 36; break; }
    case 34: 
      var $182=$src;
      var $183=(($182+1)|0);
      var $184=HEAP8[($183)];
      var $185=(($184)&255);
      var $186=(($185)|0)!=0;
      if ($186) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $188=$dst;
      HEAP8[($188)]=32;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $192=$src;
      var $193=(($192+2)|0);
      $src=$193;
      var $194=$dst;
      var $195=(($194+1)|0);
      $dst=$195;
      label = 27; break;
    case 39: 
      var $197=$edst;
      HEAP8[($197)]=0;
      $1=0;
      label = 51; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $202=$7;
      var $203=$8;
      var $204=(($202)>>>0) >= (($203)>>>0);
      if ($204) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $206=$3;
      var $207=$206;
      for (var $$dest = $207>>2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      $1=0;
      label = 51; break;
    case 45: 
      var $209=$8;
      var $210=$7;
      var $211=((($209)-($210))|0);
      var $212=(($211)>>>0) < 64;
      if ($212) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $214=$8;
      var $215=$7;
      var $216=((($214)-($215))|0);
      $8=$216;
      label = 48; break;
    case 47: 
      $8=64;
      label = 48; break;
    case 48: 
      var $219=$3;
      var $220=$219;
      var $221=$6;
      var $222=$7;
      var $223=(($221+$222)|0);
      var $224=$8;
      assert($224 % 1 === 0);_memcpy($220, $223, $224);
      var $225=$8;
      var $226=(($225)>>>0) < 64;
      if ($226) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $228=$3;
      var $229=$228;
      var $230=$8;
      var $231=(($229+$230)|0);
      var $232=$8;
      var $233=(((64)-($232))|0);
      _memset($231, 0, $233, 1);
      label = 50; break;
    case 50: 
      $1=0;
      label = 51; break;
    case 51: 
      var $236=$1;
      STACKTOP = __stackBase__;
      return $236;
    default: assert(0, "bad label: " + label);
  }
}
_mcopy["X"]=1;

function _mdebug($offset, $str, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $3;
  $1=$offset;
  $2=$str;
  $3=$len;
  var $4=HEAP32[((_stderr)>>2)];
  var $5=$1;
  var $6=_fprintf($4, ((5267340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
  var $7=HEAP32[((_stderr)>>2)];
  var $8=$2;
  var $9=$3;
  _file_showstr($7, $8, $9);
  var $10=HEAP32[((_stderr)>>2)];
  var $11=_fputc(10, $10);
  var $12=HEAP32[((_stderr)>>2)];
  var $13=_fputc(10, $12);
  STACKTOP = __stackBase__;
  return;
}


function _cvt_8($p, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $7=$6$0 != $$etemp$0$0 || $6$1 != $$etemp$0$1;
      if ($7) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        label = 4; break;
      }
      else if ((($13)|0) == 1) {
        label = 5; break;
      }
      else if ((($13)|0) == 2) {
        label = 6; break;
      }
      else if ((($13)|0) == 3) {
        label = 7; break;
      }
      else if ((($13)|0) == 4) {
        label = 8; break;
      }
      else if ((($13)|0) == 5) {
        label = 9; break;
      }
      else if ((($13)|0) == 6) {
        label = 10; break;
      }
      else if ((($13)|0) == 7) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19$0=$18$0;
      var $19=$19$0&255;
      var $20=(($19)&255);
      var $21=$1;
      var $22=$21;
      var $23=HEAP8[($22)];
      var $24=(($23)&255);
      var $25=$24 & $20;
      var $26=(($25) & 255);
      HEAP8[($22)]=$26;
      label = 12; break;
    case 5: 
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=$29;
      var $st$3$0=(($30)|0);
      var $31$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($30+4)|0);
      var $31$1=HEAP32[(($st$3$1)>>2)];
      var $32$0=$31$0;
      var $32=$32$0&255;
      var $33=(($32)&255);
      var $34=$1;
      var $35=$34;
      var $36=HEAP8[($35)];
      var $37=(($36)&255);
      var $38=$37 | $33;
      var $39=(($38) & 255);
      HEAP8[($35)]=$39;
      label = 12; break;
    case 6: 
      var $41=$2;
      var $42=(($41+24)|0);
      var $43=$42;
      var $st$3$0=(($43)|0);
      var $44$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($43+4)|0);
      var $44$1=HEAP32[(($st$3$1)>>2)];
      var $45$0=$44$0;
      var $45=$45$0&255;
      var $46=(($45)&255);
      var $47=$1;
      var $48=$47;
      var $49=HEAP8[($48)];
      var $50=(($49)&255);
      var $51=$50 ^ $46;
      var $52=(($51) & 255);
      HEAP8[($48)]=$52;
      label = 12; break;
    case 7: 
      var $54=$2;
      var $55=(($54+24)|0);
      var $56=$55;
      var $st$3$0=(($56)|0);
      var $57$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($56+4)|0);
      var $57$1=HEAP32[(($st$3$1)>>2)];
      var $58$0=$57$0;
      var $58=$58$0&255;
      var $59=(($58)&255);
      var $60=$1;
      var $61=$60;
      var $62=HEAP8[($61)];
      var $63=(($62)&255);
      var $64=((($63)+($59))|0);
      var $65=(($64) & 255);
      HEAP8[($61)]=$65;
      label = 12; break;
    case 8: 
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=$68;
      var $st$3$0=(($69)|0);
      var $70$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($69+4)|0);
      var $70$1=HEAP32[(($st$3$1)>>2)];
      var $71$0=$70$0;
      var $71=$71$0&255;
      var $72=(($71)&255);
      var $73=$1;
      var $74=$73;
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=((($76)-($72))|0);
      var $78=(($77) & 255);
      HEAP8[($74)]=$78;
      label = 12; break;
    case 9: 
      var $80=$2;
      var $81=(($80+24)|0);
      var $82=$81;
      var $st$3$0=(($82)|0);
      var $83$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($82+4)|0);
      var $83$1=HEAP32[(($st$3$1)>>2)];
      var $84$0=$83$0;
      var $84=$84$0&255;
      var $85=(($84)&255);
      var $86=$1;
      var $87=$86;
      var $88=HEAP8[($87)];
      var $89=(($88)&255);
      var $90=((($89)*($85))|0);
      var $91=(($90) & 255);
      HEAP8[($87)]=$91;
      label = 12; break;
    case 10: 
      var $93=$2;
      var $94=(($93+24)|0);
      var $95=$94;
      var $st$3$0=(($95)|0);
      var $96$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($95+4)|0);
      var $96$1=HEAP32[(($st$3$1)>>2)];
      var $97$0=$96$0;
      var $97=$97$0&255;
      var $98=(($97)&255);
      var $99=$1;
      var $100=$99;
      var $101=HEAP8[($100)];
      var $102=(($101)&255);
      var $103=((((($102)|0))/((($98)|0)))&-1);
      var $104=(($103) & 255);
      HEAP8[($100)]=$104;
      label = 12; break;
    case 11: 
      var $106=$2;
      var $107=(($106+24)|0);
      var $108=$107;
      var $st$3$0=(($108)|0);
      var $109$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($108+4)|0);
      var $109$1=HEAP32[(($st$3$1)>>2)];
      var $110$0=$109$0;
      var $110=$110$0&255;
      var $111=(($110)&255);
      var $112=$1;
      var $113=$112;
      var $114=HEAP8[($113)];
      var $115=(($114)&255);
      var $116=((($115)|0))%((($111)|0));
      var $117=(($116) & 255);
      HEAP8[($113)]=$117;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $120=$2;
      var $121=(($120+9)|0);
      var $122=HEAP8[($121)];
      var $123=(($122)&255);
      var $124=$123 & 64;
      var $125=(($124)|0)!=0;
      if ($125) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $127=$1;
      var $128=$127;
      var $129=HEAP8[($128)];
      var $130=(($129)&255);
      var $131=$130 ^ -1;
      var $132=(($131) & 255);
      var $133=$1;
      var $134=$133;
      HEAP8[($134)]=$132;
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cvt_8["X"]=1;

function _mconvert($ms, $m, $flip) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $ptr1;
      var $ptr2;
      var $len;
      $2=$ms;
      $3=$m;
      $4=$flip;
      var $5=$2;
      var $6=(($5+64)|0);
      $p=$6;
      var $7=$3;
      var $8=(($7+6)|0);
      var $9=HEAP8[($8)];
      var $10=(($9)&255);
      var $11=$4;
      var $12=_cvt_flip($10, $11);
      if ((($12)|0) == 1) {
        label = 3; break;
      }
      else if ((($12)|0) == 2) {
        label = 4; break;
      }
      else if ((($12)|0) == 4 || (($12)|0) == 6 || (($12)|0) == 14) {
        label = 5; break;
      }
      else if ((($12)|0) == 24 || (($12)|0) == 27 || (($12)|0) == 30 || (($12)|0) == 42) {
        label = 6; break;
      }
      else if ((($12)|0) == 5 || (($12)|0) == 18 || (($12)|0) == 19) {
        label = 7; break;
      }
      else if ((($12)|0) == 13) {
        label = 8; break;
      }
      else if ((($12)|0) == 7) {
        label = 14; break;
      }
      else if ((($12)|0) == 8 || (($12)|0) == 9 || (($12)|0) == 15) {
        label = 15; break;
      }
      else if ((($12)|0) == 26 || (($12)|0) == 29 || (($12)|0) == 32 || (($12)|0) == 44) {
        label = 16; break;
      }
      else if ((($12)|0) == 10) {
        label = 17; break;
      }
      else if ((($12)|0) == 11 || (($12)|0) == 12 || (($12)|0) == 16) {
        label = 18; break;
      }
      else if ((($12)|0) == 25 || (($12)|0) == 28 || (($12)|0) == 31 || (($12)|0) == 43) {
        label = 19; break;
      }
      else if ((($12)|0) == 23 || (($12)|0) == 21 || (($12)|0) == 22) {
        label = 20; break;
      }
      else if ((($12)|0) == 33) {
        label = 21; break;
      }
      else if ((($12)|0) == 34) {
        label = 22; break;
      }
      else if ((($12)|0) == 35) {
        label = 23; break;
      }
      else if ((($12)|0) == 36) {
        label = 24; break;
      }
      else if ((($12)|0) == 37) {
        label = 25; break;
      }
      else if ((($12)|0) == 38) {
        label = 26; break;
      }
      else if ((($12)|0) == 17 || (($12)|0) == 20 || (($12)|0) == 3 || (($12)|0) == 45 || (($12)|0) == 46) {
        label = 27; break;
      }
      else {
      label = 28; break;
      }
      
    case 3: 
      var $14=$p;
      var $15=$3;
      _cvt_8($14, $15);
      $1=1;
      label = 29; break;
    case 4: 
      var $17=$p;
      var $18=$3;
      _cvt_16($17, $18);
      $1=1;
      label = 29; break;
    case 5: 
      var $20=$p;
      var $21=$3;
      _cvt_32($20, $21);
      $1=1;
      label = 29; break;
    case 6: 
      var $23=$p;
      var $24=$3;
      _cvt_64($23, $24);
      $1=1;
      label = 29; break;
    case 7: 
      var $26=$p;
      var $27=$26;
      var $28=(($27+63)|0);
      HEAP8[($28)]=0;
      $1=1;
      label = 29; break;
    case 8: 
      var $30=$p;
      var $31=$30;
      var $32=(($31)|0);
      $ptr1=$32;
      var $33=$ptr1;
      var $34=$3;
      var $35=_file_pstring_length_size($34);
      var $36=(($33+$35)|0);
      $ptr2=$36;
      var $37=$3;
      var $38=$ptr1;
      var $39=_file_pstring_get_length($37, $38);
      $len=$39;
      var $40=$len;
      var $41=(($40)>>>0) >= 64;
      if ($41) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $len=63;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $45=$len;
      var $46=((($45)-(1))|0);
      $len=$46;
      var $47=(($45)|0)!=0;
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $49=$ptr2;
      var $50=(($49+1)|0);
      $ptr2=$50;
      var $51=HEAP8[($49)];
      var $52=$ptr1;
      var $53=(($52+1)|0);
      $ptr1=$53;
      HEAP8[($52)]=$51;
      label = 11; break;
    case 13: 
      var $55=$ptr1;
      HEAP8[($55)]=0;
      $1=1;
      label = 29; break;
    case 14: 
      var $57=$p;
      var $58=$57;
      var $59=(($58)|0);
      var $60=HEAP8[($59)];
      var $61=(($60)&255);
      var $62=$61 << 8;
      var $63=$p;
      var $64=$63;
      var $65=(($64+1)|0);
      var $66=HEAP8[($65)];
      var $67=(($66)&255);
      var $68=$62 | $67;
      var $69=(($68) & 65535);
      var $70=$p;
      var $71=$70;
      HEAP16[(($71)>>1)]=$69;
      var $72=$p;
      var $73=$3;
      _cvt_16($72, $73);
      $1=1;
      label = 29; break;
    case 15: 
      var $75=$p;
      var $76=$75;
      var $77=(($76)|0);
      var $78=HEAP8[($77)];
      var $79=(($78)&255);
      var $80=$79 << 24;
      var $81=$p;
      var $82=$81;
      var $83=(($82+1)|0);
      var $84=HEAP8[($83)];
      var $85=(($84)&255);
      var $86=$85 << 16;
      var $87=$80 | $86;
      var $88=$p;
      var $89=$88;
      var $90=(($89+2)|0);
      var $91=HEAP8[($90)];
      var $92=(($91)&255);
      var $93=$92 << 8;
      var $94=$87 | $93;
      var $95=$p;
      var $96=$95;
      var $97=(($96+3)|0);
      var $98=HEAP8[($97)];
      var $99=(($98)&255);
      var $100=$94 | $99;
      var $101=$p;
      var $102=$101;
      HEAP32[(($102)>>2)]=$100;
      var $103=$p;
      var $104=$3;
      _cvt_32($103, $104);
      $1=1;
      label = 29; break;
    case 16: 
      var $106=$p;
      var $107=$106;
      var $108=(($107)|0);
      var $109=HEAP8[($108)];
      var $110$0=(($109)&255);
      var $110$1=0;
      var $111$0=(0 << 24) | (0 >>> 8);
      var $111$1=($110$0 << 24) | (0 >>> 8);
      var $112=$p;
      var $113=$112;
      var $114=(($113+1)|0);
      var $115=HEAP8[($114)];
      var $116$0=(($115)&255);
      var $116$1=0;
      var $117$0=(0 << 16) | (0 >>> 16);
      var $117$1=($116$0 << 16) | (0 >>> 16);
      var $118$0=$111$0 | $117$0;
      var $118$1=$111$1 | $117$1;
      var $119=$p;
      var $120=$119;
      var $121=(($120+2)|0);
      var $122=HEAP8[($121)];
      var $123$0=(($122)&255);
      var $123$1=0;
      var $124$0=(0 << 8) | (0 >>> 24);
      var $124$1=($123$0 << 8) | (0 >>> 24);
      var $125$0=$118$0 | $124$0;
      var $125$1=$118$1 | $124$1;
      var $126=$p;
      var $127=$126;
      var $128=(($127+3)|0);
      var $129=HEAP8[($128)];
      var $130$0=(($129)&255);
      var $130$1=0;
      var $131$0=0;
      var $131$1=$130$0;
      var $132$0=$125$0 | $131$0;
      var $132$1=$125$1 | $131$1;
      var $133=$p;
      var $134=$133;
      var $135=(($134+4)|0);
      var $136=HEAP8[($135)];
      var $137$0=(($136)&255);
      var $137$1=0;
      var $138$0=($137$0 << 24) | (0 >>> 8);
      var $138$1=($137$1 << 24) | ($137$0 >>> 8);
      var $139$0=$132$0 | $138$0;
      var $139$1=$132$1 | $138$1;
      var $140=$p;
      var $141=$140;
      var $142=(($141+5)|0);
      var $143=HEAP8[($142)];
      var $144$0=(($143)&255);
      var $144$1=0;
      var $145$0=($144$0 << 16) | (0 >>> 16);
      var $145$1=($144$1 << 16) | ($144$0 >>> 16);
      var $146$0=$139$0 | $145$0;
      var $146$1=$139$1 | $145$1;
      var $147=$p;
      var $148=$147;
      var $149=(($148+6)|0);
      var $150=HEAP8[($149)];
      var $151$0=(($150)&255);
      var $151$1=0;
      var $152$0=($151$0 << 8) | (0 >>> 24);
      var $152$1=($151$1 << 8) | ($151$0 >>> 24);
      var $153$0=$146$0 | $152$0;
      var $153$1=$146$1 | $152$1;
      var $154=$p;
      var $155=$154;
      var $156=(($155+7)|0);
      var $157=HEAP8[($156)];
      var $158$0=(($157)&255);
      var $158$1=0;
      var $159$0=$153$0 | $158$0;
      var $159$1=$153$1 | $158$1;
      var $160=$p;
      var $161=$160;
      var $st$78$0=(($161)|0);
      HEAP32[(($st$78$0)>>2)]=$159$0;
      var $st$78$1=(($161+4)|0);
      HEAP32[(($st$78$1)>>2)]=$159$1;
      var $162=$p;
      var $163=$3;
      _cvt_64($162, $163);
      $1=1;
      label = 29; break;
    case 17: 
      var $165=$p;
      var $166=$165;
      var $167=(($166+1)|0);
      var $168=HEAP8[($167)];
      var $169=(($168)&255);
      var $170=$169 << 8;
      var $171=$p;
      var $172=$171;
      var $173=(($172)|0);
      var $174=HEAP8[($173)];
      var $175=(($174)&255);
      var $176=$170 | $175;
      var $177=(($176) & 65535);
      var $178=$p;
      var $179=$178;
      HEAP16[(($179)>>1)]=$177;
      var $180=$p;
      var $181=$3;
      _cvt_16($180, $181);
      $1=1;
      label = 29; break;
    case 18: 
      var $183=$p;
      var $184=$183;
      var $185=(($184+3)|0);
      var $186=HEAP8[($185)];
      var $187=(($186)&255);
      var $188=$187 << 24;
      var $189=$p;
      var $190=$189;
      var $191=(($190+2)|0);
      var $192=HEAP8[($191)];
      var $193=(($192)&255);
      var $194=$193 << 16;
      var $195=$188 | $194;
      var $196=$p;
      var $197=$196;
      var $198=(($197+1)|0);
      var $199=HEAP8[($198)];
      var $200=(($199)&255);
      var $201=$200 << 8;
      var $202=$195 | $201;
      var $203=$p;
      var $204=$203;
      var $205=(($204)|0);
      var $206=HEAP8[($205)];
      var $207=(($206)&255);
      var $208=$202 | $207;
      var $209=$p;
      var $210=$209;
      HEAP32[(($210)>>2)]=$208;
      var $211=$p;
      var $212=$3;
      _cvt_32($211, $212);
      $1=1;
      label = 29; break;
    case 19: 
      var $214=$p;
      var $215=$214;
      var $216=(($215+7)|0);
      var $217=HEAP8[($216)];
      var $218$0=(($217)&255);
      var $218$1=0;
      var $219$0=(0 << 24) | (0 >>> 8);
      var $219$1=($218$0 << 24) | (0 >>> 8);
      var $220=$p;
      var $221=$220;
      var $222=(($221+6)|0);
      var $223=HEAP8[($222)];
      var $224$0=(($223)&255);
      var $224$1=0;
      var $225$0=(0 << 16) | (0 >>> 16);
      var $225$1=($224$0 << 16) | (0 >>> 16);
      var $226$0=$219$0 | $225$0;
      var $226$1=$219$1 | $225$1;
      var $227=$p;
      var $228=$227;
      var $229=(($228+5)|0);
      var $230=HEAP8[($229)];
      var $231$0=(($230)&255);
      var $231$1=0;
      var $232$0=(0 << 8) | (0 >>> 24);
      var $232$1=($231$0 << 8) | (0 >>> 24);
      var $233$0=$226$0 | $232$0;
      var $233$1=$226$1 | $232$1;
      var $234=$p;
      var $235=$234;
      var $236=(($235+4)|0);
      var $237=HEAP8[($236)];
      var $238$0=(($237)&255);
      var $238$1=0;
      var $239$0=0;
      var $239$1=$238$0;
      var $240$0=$233$0 | $239$0;
      var $240$1=$233$1 | $239$1;
      var $241=$p;
      var $242=$241;
      var $243=(($242+3)|0);
      var $244=HEAP8[($243)];
      var $245$0=(($244)&255);
      var $245$1=0;
      var $246$0=($245$0 << 24) | (0 >>> 8);
      var $246$1=($245$1 << 24) | ($245$0 >>> 8);
      var $247$0=$240$0 | $246$0;
      var $247$1=$240$1 | $246$1;
      var $248=$p;
      var $249=$248;
      var $250=(($249+2)|0);
      var $251=HEAP8[($250)];
      var $252$0=(($251)&255);
      var $252$1=0;
      var $253$0=($252$0 << 16) | (0 >>> 16);
      var $253$1=($252$1 << 16) | ($252$0 >>> 16);
      var $254$0=$247$0 | $253$0;
      var $254$1=$247$1 | $253$1;
      var $255=$p;
      var $256=$255;
      var $257=(($256+1)|0);
      var $258=HEAP8[($257)];
      var $259$0=(($258)&255);
      var $259$1=0;
      var $260$0=($259$0 << 8) | (0 >>> 24);
      var $260$1=($259$1 << 8) | ($259$0 >>> 24);
      var $261$0=$254$0 | $260$0;
      var $261$1=$254$1 | $260$1;
      var $262=$p;
      var $263=$262;
      var $264=(($263)|0);
      var $265=HEAP8[($264)];
      var $266$0=(($265)&255);
      var $266$1=0;
      var $267$0=$261$0 | $266$0;
      var $267$1=$261$1 | $266$1;
      var $268=$p;
      var $269=$268;
      var $st$78$0=(($269)|0);
      HEAP32[(($st$78$0)>>2)]=$267$0;
      var $st$78$1=(($269+4)|0);
      HEAP32[(($st$78$1)>>2)]=$267$1;
      var $270=$p;
      var $271=$3;
      _cvt_64($270, $271);
      $1=1;
      label = 29; break;
    case 20: 
      var $273=$p;
      var $274=$273;
      var $275=(($274+1)|0);
      var $276=HEAP8[($275)];
      var $277=(($276)&255);
      var $278=$277 << 24;
      var $279=$p;
      var $280=$279;
      var $281=(($280)|0);
      var $282=HEAP8[($281)];
      var $283=(($282)&255);
      var $284=$283 << 16;
      var $285=$278 | $284;
      var $286=$p;
      var $287=$286;
      var $288=(($287+3)|0);
      var $289=HEAP8[($288)];
      var $290=(($289)&255);
      var $291=$290 << 8;
      var $292=$285 | $291;
      var $293=$p;
      var $294=$293;
      var $295=(($294+2)|0);
      var $296=HEAP8[($295)];
      var $297=(($296)&255);
      var $298=$292 | $297;
      var $299=$p;
      var $300=$299;
      HEAP32[(($300)>>2)]=$298;
      var $301=$p;
      var $302=$3;
      _cvt_32($301, $302);
      $1=1;
      label = 29; break;
    case 21: 
      var $304=$p;
      var $305=$3;
      _cvt_float($304, $305);
      $1=1;
      label = 29; break;
    case 22: 
      var $307=$p;
      var $308=$307;
      var $309=(($308)|0);
      var $310=HEAP8[($309)];
      var $311=(($310)&255);
      var $312=$311 << 24;
      var $313=$p;
      var $314=$313;
      var $315=(($314+1)|0);
      var $316=HEAP8[($315)];
      var $317=(($316)&255);
      var $318=$317 << 16;
      var $319=$312 | $318;
      var $320=$p;
      var $321=$320;
      var $322=(($321+2)|0);
      var $323=HEAP8[($322)];
      var $324=(($323)&255);
      var $325=$324 << 8;
      var $326=$319 | $325;
      var $327=$p;
      var $328=$327;
      var $329=(($328+3)|0);
      var $330=HEAP8[($329)];
      var $331=(($330)&255);
      var $332=$326 | $331;
      var $333=$p;
      var $334=$333;
      HEAP32[(($334)>>2)]=$332;
      var $335=$p;
      var $336=$3;
      _cvt_float($335, $336);
      $1=1;
      label = 29; break;
    case 23: 
      var $338=$p;
      var $339=$338;
      var $340=(($339+3)|0);
      var $341=HEAP8[($340)];
      var $342=(($341)&255);
      var $343=$342 << 24;
      var $344=$p;
      var $345=$344;
      var $346=(($345+2)|0);
      var $347=HEAP8[($346)];
      var $348=(($347)&255);
      var $349=$348 << 16;
      var $350=$343 | $349;
      var $351=$p;
      var $352=$351;
      var $353=(($352+1)|0);
      var $354=HEAP8[($353)];
      var $355=(($354)&255);
      var $356=$355 << 8;
      var $357=$350 | $356;
      var $358=$p;
      var $359=$358;
      var $360=(($359)|0);
      var $361=HEAP8[($360)];
      var $362=(($361)&255);
      var $363=$357 | $362;
      var $364=$p;
      var $365=$364;
      HEAP32[(($365)>>2)]=$363;
      var $366=$p;
      var $367=$3;
      _cvt_float($366, $367);
      $1=1;
      label = 29; break;
    case 24: 
      var $369=$p;
      var $370=$3;
      _cvt_double($369, $370);
      $1=1;
      label = 29; break;
    case 25: 
      var $372=$p;
      var $373=$372;
      var $374=(($373)|0);
      var $375=HEAP8[($374)];
      var $376$0=(($375)&255);
      var $376$1=0;
      var $377$0=(0 << 24) | (0 >>> 8);
      var $377$1=($376$0 << 24) | (0 >>> 8);
      var $378=$p;
      var $379=$378;
      var $380=(($379+1)|0);
      var $381=HEAP8[($380)];
      var $382$0=(($381)&255);
      var $382$1=0;
      var $383$0=(0 << 16) | (0 >>> 16);
      var $383$1=($382$0 << 16) | (0 >>> 16);
      var $384$0=$377$0 | $383$0;
      var $384$1=$377$1 | $383$1;
      var $385=$p;
      var $386=$385;
      var $387=(($386+2)|0);
      var $388=HEAP8[($387)];
      var $389$0=(($388)&255);
      var $389$1=0;
      var $390$0=(0 << 8) | (0 >>> 24);
      var $390$1=($389$0 << 8) | (0 >>> 24);
      var $391$0=$384$0 | $390$0;
      var $391$1=$384$1 | $390$1;
      var $392=$p;
      var $393=$392;
      var $394=(($393+3)|0);
      var $395=HEAP8[($394)];
      var $396$0=(($395)&255);
      var $396$1=0;
      var $397$0=0;
      var $397$1=$396$0;
      var $398$0=$391$0 | $397$0;
      var $398$1=$391$1 | $397$1;
      var $399=$p;
      var $400=$399;
      var $401=(($400+4)|0);
      var $402=HEAP8[($401)];
      var $403$0=(($402)&255);
      var $403$1=0;
      var $404$0=($403$0 << 24) | (0 >>> 8);
      var $404$1=($403$1 << 24) | ($403$0 >>> 8);
      var $405$0=$398$0 | $404$0;
      var $405$1=$398$1 | $404$1;
      var $406=$p;
      var $407=$406;
      var $408=(($407+5)|0);
      var $409=HEAP8[($408)];
      var $410$0=(($409)&255);
      var $410$1=0;
      var $411$0=($410$0 << 16) | (0 >>> 16);
      var $411$1=($410$1 << 16) | ($410$0 >>> 16);
      var $412$0=$405$0 | $411$0;
      var $412$1=$405$1 | $411$1;
      var $413=$p;
      var $414=$413;
      var $415=(($414+6)|0);
      var $416=HEAP8[($415)];
      var $417$0=(($416)&255);
      var $417$1=0;
      var $418$0=($417$0 << 8) | (0 >>> 24);
      var $418$1=($417$1 << 8) | ($417$0 >>> 24);
      var $419$0=$412$0 | $418$0;
      var $419$1=$412$1 | $418$1;
      var $420=$p;
      var $421=$420;
      var $422=(($421+7)|0);
      var $423=HEAP8[($422)];
      var $424$0=(($423)&255);
      var $424$1=0;
      var $425$0=$419$0 | $424$0;
      var $425$1=$419$1 | $424$1;
      var $426=$p;
      var $427=$426;
      var $st$78$0=(($427)|0);
      HEAP32[(($st$78$0)>>2)]=$425$0;
      var $st$78$1=(($427+4)|0);
      HEAP32[(($st$78$1)>>2)]=$425$1;
      var $428=$p;
      var $429=$3;
      _cvt_double($428, $429);
      $1=1;
      label = 29; break;
    case 26: 
      var $431=$p;
      var $432=$431;
      var $433=(($432+7)|0);
      var $434=HEAP8[($433)];
      var $435$0=(($434)&255);
      var $435$1=0;
      var $436$0=(0 << 24) | (0 >>> 8);
      var $436$1=($435$0 << 24) | (0 >>> 8);
      var $437=$p;
      var $438=$437;
      var $439=(($438+6)|0);
      var $440=HEAP8[($439)];
      var $441$0=(($440)&255);
      var $441$1=0;
      var $442$0=(0 << 16) | (0 >>> 16);
      var $442$1=($441$0 << 16) | (0 >>> 16);
      var $443$0=$436$0 | $442$0;
      var $443$1=$436$1 | $442$1;
      var $444=$p;
      var $445=$444;
      var $446=(($445+5)|0);
      var $447=HEAP8[($446)];
      var $448$0=(($447)&255);
      var $448$1=0;
      var $449$0=(0 << 8) | (0 >>> 24);
      var $449$1=($448$0 << 8) | (0 >>> 24);
      var $450$0=$443$0 | $449$0;
      var $450$1=$443$1 | $449$1;
      var $451=$p;
      var $452=$451;
      var $453=(($452+4)|0);
      var $454=HEAP8[($453)];
      var $455$0=(($454)&255);
      var $455$1=0;
      var $456$0=0;
      var $456$1=$455$0;
      var $457$0=$450$0 | $456$0;
      var $457$1=$450$1 | $456$1;
      var $458=$p;
      var $459=$458;
      var $460=(($459+3)|0);
      var $461=HEAP8[($460)];
      var $462$0=(($461)&255);
      var $462$1=0;
      var $463$0=($462$0 << 24) | (0 >>> 8);
      var $463$1=($462$1 << 24) | ($462$0 >>> 8);
      var $464$0=$457$0 | $463$0;
      var $464$1=$457$1 | $463$1;
      var $465=$p;
      var $466=$465;
      var $467=(($466+2)|0);
      var $468=HEAP8[($467)];
      var $469$0=(($468)&255);
      var $469$1=0;
      var $470$0=($469$0 << 16) | (0 >>> 16);
      var $470$1=($469$1 << 16) | ($469$0 >>> 16);
      var $471$0=$464$0 | $470$0;
      var $471$1=$464$1 | $470$1;
      var $472=$p;
      var $473=$472;
      var $474=(($473+1)|0);
      var $475=HEAP8[($474)];
      var $476$0=(($475)&255);
      var $476$1=0;
      var $477$0=($476$0 << 8) | (0 >>> 24);
      var $477$1=($476$1 << 8) | ($476$0 >>> 24);
      var $478$0=$471$0 | $477$0;
      var $478$1=$471$1 | $477$1;
      var $479=$p;
      var $480=$479;
      var $481=(($480)|0);
      var $482=HEAP8[($481)];
      var $483$0=(($482)&255);
      var $483$1=0;
      var $484$0=$478$0 | $483$0;
      var $484$1=$478$1 | $483$1;
      var $485=$p;
      var $486=$485;
      var $st$78$0=(($486)|0);
      HEAP32[(($st$78$0)>>2)]=$484$0;
      var $st$78$1=(($486+4)|0);
      HEAP32[(($st$78$1)>>2)]=$484$1;
      var $487=$p;
      var $488=$3;
      _cvt_double($487, $488);
      $1=1;
      label = 29; break;
    case 27: 
      $1=1;
      label = 29; break;
    case 28: 
      var $491=$2;
      var $492=$3;
      var $493=(($492+6)|0);
      var $494=HEAP8[($493)];
      var $495=(($494)&255);
      _file_magerror($491, ((5267456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$495,tempInt));
      $1=0;
      label = 29; break;
    case 29: 
      var $497=$1;
      STACKTOP = __stackBase__;
      return $497;
    default: assert(0, "bad label: " + label);
  }
}
_mconvert["X"]=1;

function _cvt_16($p, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $7=$6$0 != $$etemp$0$0 || $6$1 != $$etemp$0$1;
      if ($7) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        label = 4; break;
      }
      else if ((($13)|0) == 1) {
        label = 5; break;
      }
      else if ((($13)|0) == 2) {
        label = 6; break;
      }
      else if ((($13)|0) == 3) {
        label = 7; break;
      }
      else if ((($13)|0) == 4) {
        label = 8; break;
      }
      else if ((($13)|0) == 5) {
        label = 9; break;
      }
      else if ((($13)|0) == 6) {
        label = 10; break;
      }
      else if ((($13)|0) == 7) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19$0=$18$0;
      var $19=$19$0&65535;
      var $20=(($19)&65535);
      var $21=$1;
      var $22=$21;
      var $23=HEAP16[(($22)>>1)];
      var $24=(($23)&65535);
      var $25=$24 & $20;
      var $26=(($25) & 65535);
      HEAP16[(($22)>>1)]=$26;
      label = 12; break;
    case 5: 
      var $28=$2;
      var $29=(($28+24)|0);
      var $30=$29;
      var $st$3$0=(($30)|0);
      var $31$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($30+4)|0);
      var $31$1=HEAP32[(($st$3$1)>>2)];
      var $32$0=$31$0;
      var $32=$32$0&65535;
      var $33=(($32)&65535);
      var $34=$1;
      var $35=$34;
      var $36=HEAP16[(($35)>>1)];
      var $37=(($36)&65535);
      var $38=$37 | $33;
      var $39=(($38) & 65535);
      HEAP16[(($35)>>1)]=$39;
      label = 12; break;
    case 6: 
      var $41=$2;
      var $42=(($41+24)|0);
      var $43=$42;
      var $st$3$0=(($43)|0);
      var $44$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($43+4)|0);
      var $44$1=HEAP32[(($st$3$1)>>2)];
      var $45$0=$44$0;
      var $45=$45$0&65535;
      var $46=(($45)&65535);
      var $47=$1;
      var $48=$47;
      var $49=HEAP16[(($48)>>1)];
      var $50=(($49)&65535);
      var $51=$50 ^ $46;
      var $52=(($51) & 65535);
      HEAP16[(($48)>>1)]=$52;
      label = 12; break;
    case 7: 
      var $54=$2;
      var $55=(($54+24)|0);
      var $56=$55;
      var $st$3$0=(($56)|0);
      var $57$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($56+4)|0);
      var $57$1=HEAP32[(($st$3$1)>>2)];
      var $58$0=$57$0;
      var $58=$58$0&65535;
      var $59=(($58)&65535);
      var $60=$1;
      var $61=$60;
      var $62=HEAP16[(($61)>>1)];
      var $63=(($62)&65535);
      var $64=((($63)+($59))|0);
      var $65=(($64) & 65535);
      HEAP16[(($61)>>1)]=$65;
      label = 12; break;
    case 8: 
      var $67=$2;
      var $68=(($67+24)|0);
      var $69=$68;
      var $st$3$0=(($69)|0);
      var $70$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($69+4)|0);
      var $70$1=HEAP32[(($st$3$1)>>2)];
      var $71$0=$70$0;
      var $71=$71$0&65535;
      var $72=(($71)&65535);
      var $73=$1;
      var $74=$73;
      var $75=HEAP16[(($74)>>1)];
      var $76=(($75)&65535);
      var $77=((($76)-($72))|0);
      var $78=(($77) & 65535);
      HEAP16[(($74)>>1)]=$78;
      label = 12; break;
    case 9: 
      var $80=$2;
      var $81=(($80+24)|0);
      var $82=$81;
      var $st$3$0=(($82)|0);
      var $83$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($82+4)|0);
      var $83$1=HEAP32[(($st$3$1)>>2)];
      var $84$0=$83$0;
      var $84=$84$0&65535;
      var $85=(($84)&65535);
      var $86=$1;
      var $87=$86;
      var $88=HEAP16[(($87)>>1)];
      var $89=(($88)&65535);
      var $90=((($89)*($85))|0);
      var $91=(($90) & 65535);
      HEAP16[(($87)>>1)]=$91;
      label = 12; break;
    case 10: 
      var $93=$2;
      var $94=(($93+24)|0);
      var $95=$94;
      var $st$3$0=(($95)|0);
      var $96$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($95+4)|0);
      var $96$1=HEAP32[(($st$3$1)>>2)];
      var $97$0=$96$0;
      var $97=$97$0&65535;
      var $98=(($97)&65535);
      var $99=$1;
      var $100=$99;
      var $101=HEAP16[(($100)>>1)];
      var $102=(($101)&65535);
      var $103=((((($102)|0))/((($98)|0)))&-1);
      var $104=(($103) & 65535);
      HEAP16[(($100)>>1)]=$104;
      label = 12; break;
    case 11: 
      var $106=$2;
      var $107=(($106+24)|0);
      var $108=$107;
      var $st$3$0=(($108)|0);
      var $109$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($108+4)|0);
      var $109$1=HEAP32[(($st$3$1)>>2)];
      var $110$0=$109$0;
      var $110=$110$0&65535;
      var $111=(($110)&65535);
      var $112=$1;
      var $113=$112;
      var $114=HEAP16[(($113)>>1)];
      var $115=(($114)&65535);
      var $116=((($115)|0))%((($111)|0));
      var $117=(($116) & 65535);
      HEAP16[(($113)>>1)]=$117;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $120=$2;
      var $121=(($120+9)|0);
      var $122=HEAP8[($121)];
      var $123=(($122)&255);
      var $124=$123 & 64;
      var $125=(($124)|0)!=0;
      if ($125) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $127=$1;
      var $128=$127;
      var $129=HEAP16[(($128)>>1)];
      var $130=(($129)&65535);
      var $131=$130 ^ -1;
      var $132=(($131) & 65535);
      var $133=$1;
      var $134=$133;
      HEAP16[(($134)>>1)]=$132;
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cvt_16["X"]=1;

function _cvt_32($p, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $7=$6$0 != $$etemp$0$0 || $6$1 != $$etemp$0$1;
      if ($7) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        label = 4; break;
      }
      else if ((($13)|0) == 1) {
        label = 5; break;
      }
      else if ((($13)|0) == 2) {
        label = 6; break;
      }
      else if ((($13)|0) == 3) {
        label = 7; break;
      }
      else if ((($13)|0) == 4) {
        label = 8; break;
      }
      else if ((($13)|0) == 5) {
        label = 9; break;
      }
      else if ((($13)|0) == 6) {
        label = 10; break;
      }
      else if ((($13)|0) == 7) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19$0=$18$0;
      var $19=$19$0;
      var $20=$1;
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & $19;
      HEAP32[(($21)>>2)]=$23;
      label = 12; break;
    case 5: 
      var $25=$2;
      var $26=(($25+24)|0);
      var $27=$26;
      var $st$3$0=(($27)|0);
      var $28$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($27+4)|0);
      var $28$1=HEAP32[(($st$3$1)>>2)];
      var $29$0=$28$0;
      var $29=$29$0;
      var $30=$1;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 | $29;
      HEAP32[(($31)>>2)]=$33;
      label = 12; break;
    case 6: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=$36;
      var $st$3$0=(($37)|0);
      var $38$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($37+4)|0);
      var $38$1=HEAP32[(($st$3$1)>>2)];
      var $39$0=$38$0;
      var $39=$39$0;
      var $40=$1;
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42 ^ $39;
      HEAP32[(($41)>>2)]=$43;
      label = 12; break;
    case 7: 
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=$46;
      var $st$3$0=(($47)|0);
      var $48$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$3$1)>>2)];
      var $49$0=$48$0;
      var $49=$49$0;
      var $50=$1;
      var $51=$50;
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+($49))|0);
      HEAP32[(($51)>>2)]=$53;
      label = 12; break;
    case 8: 
      var $55=$2;
      var $56=(($55+24)|0);
      var $57=$56;
      var $st$3$0=(($57)|0);
      var $58$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($57+4)|0);
      var $58$1=HEAP32[(($st$3$1)>>2)];
      var $59$0=$58$0;
      var $59=$59$0;
      var $60=$1;
      var $61=$60;
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)-($59))|0);
      HEAP32[(($61)>>2)]=$63;
      label = 12; break;
    case 9: 
      var $65=$2;
      var $66=(($65+24)|0);
      var $67=$66;
      var $st$3$0=(($67)|0);
      var $68$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($67+4)|0);
      var $68$1=HEAP32[(($st$3$1)>>2)];
      var $69$0=$68$0;
      var $69=$69$0;
      var $70=$1;
      var $71=$70;
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)*($69))|0);
      HEAP32[(($71)>>2)]=$73;
      label = 12; break;
    case 10: 
      var $75=$2;
      var $76=(($75+24)|0);
      var $77=$76;
      var $st$3$0=(($77)|0);
      var $78$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($77+4)|0);
      var $78$1=HEAP32[(($st$3$1)>>2)];
      var $79$0=$78$0;
      var $79=$79$0;
      var $80=$1;
      var $81=$80;
      var $82=HEAP32[(($81)>>2)];
      var $83=Math.floor(((($82)>>>0))/((($79)>>>0)));
      HEAP32[(($81)>>2)]=$83;
      label = 12; break;
    case 11: 
      var $85=$2;
      var $86=(($85+24)|0);
      var $87=$86;
      var $st$3$0=(($87)|0);
      var $88$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($87+4)|0);
      var $88$1=HEAP32[(($st$3$1)>>2)];
      var $89$0=$88$0;
      var $89=$89$0;
      var $90=$1;
      var $91=$90;
      var $92=HEAP32[(($91)>>2)];
      var $93=((($92)>>>0))%((($89)>>>0));
      HEAP32[(($91)>>2)]=$93;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $96=$2;
      var $97=(($96+9)|0);
      var $98=HEAP8[($97)];
      var $99=(($98)&255);
      var $100=$99 & 64;
      var $101=(($100)|0)!=0;
      if ($101) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $103=$1;
      var $104=$103;
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 ^ -1;
      var $107=$1;
      var $108=$107;
      HEAP32[(($108)>>2)]=$106;
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cvt_32["X"]=1;

function _cvt_64($p, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $7=$6$0 != $$etemp$0$0 || $6$1 != $$etemp$0$1;
      if ($7) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 0) {
        label = 4; break;
      }
      else if ((($13)|0) == 1) {
        label = 5; break;
      }
      else if ((($13)|0) == 2) {
        label = 6; break;
      }
      else if ((($13)|0) == 3) {
        label = 7; break;
      }
      else if ((($13)|0) == 4) {
        label = 8; break;
      }
      else if ((($13)|0) == 5) {
        label = 9; break;
      }
      else if ((($13)|0) == 6) {
        label = 10; break;
      }
      else if ((($13)|0) == 7) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19=$1;
      var $20=$19;
      var $st$9$0=(($20)|0);
      var $21$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($20+4)|0);
      var $21$1=HEAP32[(($st$9$1)>>2)];
      var $22$0=$21$0 & $18$0;
      var $22$1=$21$1 & $18$1;
      var $st$15$0=(($20)|0);
      HEAP32[(($st$15$0)>>2)]=$22$0;
      var $st$15$1=(($20+4)|0);
      HEAP32[(($st$15$1)>>2)]=$22$1;
      label = 12; break;
    case 5: 
      var $24=$2;
      var $25=(($24+24)|0);
      var $26=$25;
      var $st$3$0=(($26)|0);
      var $27$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($26+4)|0);
      var $27$1=HEAP32[(($st$3$1)>>2)];
      var $28=$1;
      var $29=$28;
      var $st$9$0=(($29)|0);
      var $30$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($29+4)|0);
      var $30$1=HEAP32[(($st$9$1)>>2)];
      var $31$0=$30$0 | $27$0;
      var $31$1=$30$1 | $27$1;
      var $st$15$0=(($29)|0);
      HEAP32[(($st$15$0)>>2)]=$31$0;
      var $st$15$1=(($29+4)|0);
      HEAP32[(($st$15$1)>>2)]=$31$1;
      label = 12; break;
    case 6: 
      var $33=$2;
      var $34=(($33+24)|0);
      var $35=$34;
      var $st$3$0=(($35)|0);
      var $36$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($35+4)|0);
      var $36$1=HEAP32[(($st$3$1)>>2)];
      var $37=$1;
      var $38=$37;
      var $st$9$0=(($38)|0);
      var $39$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($38+4)|0);
      var $39$1=HEAP32[(($st$9$1)>>2)];
      var $40$0=$39$0 ^ $36$0;
      var $40$1=$39$1 ^ $36$1;
      var $st$15$0=(($38)|0);
      HEAP32[(($st$15$0)>>2)]=$40$0;
      var $st$15$1=(($38+4)|0);
      HEAP32[(($st$15$1)>>2)]=$40$1;
      label = 12; break;
    case 7: 
      var $42=$2;
      var $43=(($42+24)|0);
      var $44=$43;
      var $st$3$0=(($44)|0);
      var $45$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($44+4)|0);
      var $45$1=HEAP32[(($st$3$1)>>2)];
      var $46=$1;
      var $47=$46;
      var $st$9$0=(($47)|0);
      var $48$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$9$1)>>2)];
      var $49$0 = (i64Math.add($48$0,$48$1,$45$0,$45$1),HEAP32[((tempDoublePtr)>>2)]); var $49$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$14$0=(($47)|0);
      HEAP32[(($st$14$0)>>2)]=$49$0;
      var $st$14$1=(($47+4)|0);
      HEAP32[(($st$14$1)>>2)]=$49$1;
      label = 12; break;
    case 8: 
      var $51=$2;
      var $52=(($51+24)|0);
      var $53=$52;
      var $st$3$0=(($53)|0);
      var $54$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($53+4)|0);
      var $54$1=HEAP32[(($st$3$1)>>2)];
      var $55=$1;
      var $56=$55;
      var $st$9$0=(($56)|0);
      var $57$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($56+4)|0);
      var $57$1=HEAP32[(($st$9$1)>>2)];
      var $58$0 = (i64Math.subtract($57$0,$57$1,$54$0,$54$1),HEAP32[((tempDoublePtr)>>2)]); var $58$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$14$0=(($56)|0);
      HEAP32[(($st$14$0)>>2)]=$58$0;
      var $st$14$1=(($56+4)|0);
      HEAP32[(($st$14$1)>>2)]=$58$1;
      label = 12; break;
    case 9: 
      var $60=$2;
      var $61=(($60+24)|0);
      var $62=$61;
      var $st$3$0=(($62)|0);
      var $63$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($62+4)|0);
      var $63$1=HEAP32[(($st$3$1)>>2)];
      var $64=$1;
      var $65=$64;
      var $st$9$0=(($65)|0);
      var $66$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($65+4)|0);
      var $66$1=HEAP32[(($st$9$1)>>2)];
      var $67$0 = (i64Math.multiply($66$0,$66$1,$63$0,$63$1),HEAP32[((tempDoublePtr)>>2)]); var $67$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$14$0=(($65)|0);
      HEAP32[(($st$14$0)>>2)]=$67$0;
      var $st$14$1=(($65+4)|0);
      HEAP32[(($st$14$1)>>2)]=$67$1;
      label = 12; break;
    case 10: 
      var $69=$2;
      var $70=(($69+24)|0);
      var $71=$70;
      var $st$3$0=(($71)|0);
      var $72$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($71+4)|0);
      var $72$1=HEAP32[(($st$3$1)>>2)];
      var $73=$1;
      var $74=$73;
      var $st$9$0=(($74)|0);
      var $75$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($74+4)|0);
      var $75$1=HEAP32[(($st$9$1)>>2)];
      var $76$0 = (i64Math.divide($75$0,$75$1,$72$0,$72$1,true),HEAP32[((tempDoublePtr)>>2)]); var $76$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$14$0=(($74)|0);
      HEAP32[(($st$14$0)>>2)]=$76$0;
      var $st$14$1=(($74+4)|0);
      HEAP32[(($st$14$1)>>2)]=$76$1;
      label = 12; break;
    case 11: 
      var $78=$2;
      var $79=(($78+24)|0);
      var $80=$79;
      var $st$3$0=(($80)|0);
      var $81$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($80+4)|0);
      var $81$1=HEAP32[(($st$3$1)>>2)];
      var $82=$1;
      var $83=$82;
      var $st$9$0=(($83)|0);
      var $84$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($83+4)|0);
      var $84$1=HEAP32[(($st$9$1)>>2)];
      var $85$0 = (i64Math.modulo($84$0,$84$1,$81$0,$81$1,true),HEAP32[((tempDoublePtr)>>2)]); var $85$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$14$0=(($83)|0);
      HEAP32[(($st$14$0)>>2)]=$85$0;
      var $st$14$1=(($83+4)|0);
      HEAP32[(($st$14$1)>>2)]=$85$1;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $88=$2;
      var $89=(($88+9)|0);
      var $90=HEAP8[($89)];
      var $91=(($90)&255);
      var $92=$91 & 64;
      var $93=(($92)|0)!=0;
      if ($93) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $95=$1;
      var $96=$95;
      var $st$2$0=(($96)|0);
      var $97$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($96+4)|0);
      var $97$1=HEAP32[(($st$2$1)>>2)];
      var $$etemp$1$0=-1;
      var $$etemp$1$1=-1;
      var $98$0=$97$0 ^ $$etemp$1$0;
      var $98$1=$97$1 ^ $$etemp$1$1;
      var $99=$1;
      var $100=$99;
      var $st$12$0=(($100)|0);
      HEAP32[(($st$12$0)>>2)]=$98$0;
      var $st$12$1=(($100+4)|0);
      HEAP32[(($st$12$1)>>2)]=$98$1;
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cvt_64["X"]=1;

function _cvt_float($p, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $7=$6$0 != $$etemp$0$0 || $6$1 != $$etemp$0$1;
      if ($7) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 3) {
        label = 4; break;
      }
      else if ((($13)|0) == 4) {
        label = 5; break;
      }
      else if ((($13)|0) == 5) {
        label = 6; break;
      }
      else if ((($13)|0) == 6) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19=((($18$0)>>>0)+((($18$1)>>>0)*4294967296));
      var $20=$1;
      var $21=$20;
      var $22=HEAPF32[(($21)>>2)];
      var $23=($22)+($19);
      HEAPF32[(($21)>>2)]=$23;
      label = 8; break;
    case 5: 
      var $25=$2;
      var $26=(($25+24)|0);
      var $27=$26;
      var $st$3$0=(($27)|0);
      var $28$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($27+4)|0);
      var $28$1=HEAP32[(($st$3$1)>>2)];
      var $29=((($28$0)>>>0)+((($28$1)>>>0)*4294967296));
      var $30=$1;
      var $31=$30;
      var $32=HEAPF32[(($31)>>2)];
      var $33=($32)-($29);
      HEAPF32[(($31)>>2)]=$33;
      label = 8; break;
    case 6: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=$36;
      var $st$3$0=(($37)|0);
      var $38$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($37+4)|0);
      var $38$1=HEAP32[(($st$3$1)>>2)];
      var $39=((($38$0)>>>0)+((($38$1)>>>0)*4294967296));
      var $40=$1;
      var $41=$40;
      var $42=HEAPF32[(($41)>>2)];
      var $43=($42)*($39);
      HEAPF32[(($41)>>2)]=$43;
      label = 8; break;
    case 7: 
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=$46;
      var $st$3$0=(($47)|0);
      var $48$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$3$1)>>2)];
      var $49=((($48$0)>>>0)+((($48$1)>>>0)*4294967296));
      var $50=$1;
      var $51=$50;
      var $52=HEAPF32[(($51)>>2)];
      var $53=($52)/($49);
      HEAPF32[(($51)>>2)]=$53;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cvt_float["X"]=1;

function _cvt_double($p, $m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$m;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=$4;
      var $st$7$0=(($5)|0);
      var $6$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($5+4)|0);
      var $6$1=HEAP32[(($st$7$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $7=$6$0 != $$etemp$0$0 || $6$1 != $$etemp$0$1;
      if ($7) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=$12 & 7;
      if ((($13)|0) == 3) {
        label = 4; break;
      }
      else if ((($13)|0) == 4) {
        label = 5; break;
      }
      else if ((($13)|0) == 5) {
        label = 6; break;
      }
      else if ((($13)|0) == 6) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
      
    case 4: 
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=$16;
      var $st$3$0=(($17)|0);
      var $18$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($17+4)|0);
      var $18$1=HEAP32[(($st$3$1)>>2)];
      var $19=((($18$0)>>>0)+((($18$1)>>>0)*4294967296));
      var $20=$1;
      var $21=$20;
      var $22=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($21)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($21)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $23=($22)+($19);
      (HEAPF64[(tempDoublePtr)>>3]=$23,HEAP32[(($21)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($21)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 5: 
      var $25=$2;
      var $26=(($25+24)|0);
      var $27=$26;
      var $st$3$0=(($27)|0);
      var $28$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($27+4)|0);
      var $28$1=HEAP32[(($st$3$1)>>2)];
      var $29=((($28$0)>>>0)+((($28$1)>>>0)*4294967296));
      var $30=$1;
      var $31=$30;
      var $32=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($31)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($31)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $33=($32)-($29);
      (HEAPF64[(tempDoublePtr)>>3]=$33,HEAP32[(($31)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($31)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 6: 
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=$36;
      var $st$3$0=(($37)|0);
      var $38$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($37+4)|0);
      var $38$1=HEAP32[(($st$3$1)>>2)];
      var $39=((($38$0)>>>0)+((($38$1)>>>0)*4294967296));
      var $40=$1;
      var $41=$40;
      var $42=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($41)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($41)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $43=($42)*($39);
      (HEAPF64[(tempDoublePtr)>>3]=$43,HEAP32[(($41)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($41)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 7: 
      var $45=$2;
      var $46=(($45+24)|0);
      var $47=$46;
      var $st$3$0=(($47)|0);
      var $48$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($47+4)|0);
      var $48$1=HEAP32[(($st$3$1)>>2)];
      var $49=((($48$0)>>>0)+((($48$1)>>>0)*4294967296));
      var $50=$1;
      var $51=$50;
      var $52=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($51)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($51)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $53=($52)/($49);
      (HEAPF64[(tempDoublePtr)>>3]=$53,HEAP32[(($51)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($51)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cvt_double["X"]=1;

function _trim_nuls($buf, $nbytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$buf;
      $2=$nbytes;
      label = 3; break;
    case 3: 
      var $4=$2;
      var $5=(($4)>>>0) > 1;
      if ($5) { label = 4; break; } else { var $15 = 0;label = 5; break; }
    case 4: 
      var $7=$2;
      var $8=((($7)-(1))|0);
      var $9=$1;
      var $10=(($9+$8)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=(($12)|0)==0;
      var $15 = $13;label = 5; break;
    case 5: 
      var $15;
      if ($15) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $17=$2;
      var $18=((($17)-(1))|0);
      $2=$18;
      label = 3; break;
    case 7: 
      var $20=$2;

      return $20;
    default: assert(0, "bad label: " + label);
  }
}


function _file_ascmagic($ms, $buf, $nbytes, $text) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ubuf=__stackBase__;
      var $ulen=(__stackBase__)+(4);
      var $rv;
      var $code=(__stackBase__)+(8);
      var $code_mime=(__stackBase__)+(12);
      var $type=(__stackBase__)+(16);
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      $5=$text;
      HEAP32[(($ubuf)>>2)]=0;
      $rv=1;
      HEAP32[(($code)>>2)]=0;
      HEAP32[(($code_mime)>>2)]=0;
      HEAP32[(($type)>>2)]=0;
      var $6=$2;
      var $7=(($6+32)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 2048;
      var $10=(($9)|0)!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 8; break;
    case 4: 
      var $13=$3;
      var $14=$4;
      var $15=_trim_nuls($13, $14);
      $4=$15;
      var $16=$2;
      var $17=$3;
      var $18=$4;
      var $19=_file_encoding($16, $17, $18, $ubuf, $ulen, $code, $code_mime, $type);
      var $20=(($19)|0)==0;
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $rv=0;
      label = 7; break;
    case 6: 
      var $23=$2;
      var $24=$3;
      var $25=$4;
      var $26=HEAP32[(($ubuf)>>2)];
      var $27=HEAP32[(($ulen)>>2)];
      var $28=HEAP32[(($code)>>2)];
      var $29=HEAP32[(($type)>>2)];
      var $30=$5;
      var $31=_file_ascmagic_with_encoding($23, $24, $25, $26, $27, $28, $29, $30);
      $rv=$31;
      label = 7; break;
    case 7: 
      var $33=HEAP32[(($ubuf)>>2)];
      var $34=$33;
      _free($34);
      var $35=$rv;
      $1=$35;
      label = 8; break;
    case 8: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
_file_ascmagic["X"]=1;

function _file_ascmagic_with_encoding($ms, $buf, $nbytes, $ubuf, $ulen, $code, $type, $text) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $utf8_buf;
      var $utf8_end;
      var $mlen;
      var $i;
      var $rv;
      var $mime;
      var $subtype;
      var $subtype_mime;
      var $has_escapes;
      var $has_backspace;
      var $seen_cr;
      var $n_crlf;
      var $n_lf;
      var $n_cr;
      var $n_nel;
      var $executable;
      var $last_line_end;
      var $has_long_lines;
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      $5=$ubuf;
      $6=$ulen;
      $7=$code;
      $8=$type;
      $9=$text;
      $utf8_buf=0;
      $rv=-1;
      var $10=$2;
      var $11=(($10+32)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & 1040;
      $mime=$13;
      $subtype=0;
      $subtype_mime=0;
      $has_escapes=0;
      $has_backspace=0;
      $seen_cr=0;
      $n_crlf=0;
      $n_lf=0;
      $n_cr=0;
      $n_nel=0;
      $executable=0;
      $last_line_end=-1;
      $has_long_lines=0;
      var $14=$2;
      var $15=(($14+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 2048;
      var $18=(($17)|0)!=0;
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 144; break;
    case 4: 
      var $21=$3;
      var $22=$4;
      var $23=_trim_nuls($21, $22);
      $4=$23;
      var $24=$4;
      var $25=(($24)>>>0) <= 1;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $rv=0;
      label = 143; break;
    case 6: 
      var $28=$6;
      var $29=(($28)>>>0) > 0;
      if ($29) { label = 7; break; } else { label = 15; break; }
    case 7: 
      var $31=$2;
      var $32=(($31+32)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 & 16384;
      var $35=(($34)|0)==0;
      if ($35) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $37=$6;
      var $38=((($37)*(6))|0);
      $mlen=$38;
      var $39=$mlen;
      var $40=_malloc($39);
      $utf8_buf=$40;
      var $41=(($40)|0)==0;
      if ($41) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $43=$2;
      var $44=$mlen;
      _file_oomem($43, $44);
      label = 143; break;
    case 10: 
      var $46=$utf8_buf;
      var $47=$mlen;
      var $48=$5;
      var $49=$6;
      var $50=_encode_utf8($46, $47, $48, $49);
      $utf8_end=$50;
      var $51=(($50)|0)==0;
      if ($51) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 143; break;
    case 12: 
      var $54=$2;
      var $55=$utf8_buf;
      var $56=$utf8_end;
      var $57=$utf8_buf;
      var $58=$56;
      var $59=$57;
      var $60=((($58)-($59))|0);
      var $61=$9;
      var $62=_file_softmagic($54, $55, $60, 64, $61);
      $rv=$62;
      var $63=(($62)|0)==0;
      if ($63) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $rv=-1;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $68=$i;
      var $69=$6;
      var $70=(($68)>>>0) < (($69)>>>0);
      if ($70) { label = 17; break; } else { label = 37; break; }
    case 17: 
      var $72=$i;
      var $73=$5;
      var $74=(($73+($72<<2))|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75)|0)==10;
      if ($76) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $78=$seen_cr;
      var $79=(($78)|0)!=0;
      if ($79) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $81=$n_crlf;
      var $82=((($81)+(1))|0);
      $n_crlf=$82;
      label = 21; break;
    case 20: 
      var $84=$n_lf;
      var $85=((($84)+(1))|0);
      $n_lf=$85;
      label = 21; break;
    case 21: 
      var $87=$i;
      $last_line_end=$87;
      label = 25; break;
    case 22: 
      var $89=$seen_cr;
      var $90=(($89)|0)!=0;
      if ($90) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $92=$n_cr;
      var $93=((($92)+(1))|0);
      $n_cr=$93;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $96=$i;
      var $97=$5;
      var $98=(($97+($96<<2))|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99)|0)==13;
      var $101=(($100)&1);
      $seen_cr=$101;
      var $102=$seen_cr;
      var $103=(($102)|0)!=0;
      if ($103) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $105=$i;
      $last_line_end=$105;
      label = 27; break;
    case 27: 
      var $107=$i;
      var $108=$5;
      var $109=(($108+($107<<2))|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|0)==133;
      if ($111) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $113=$n_nel;
      var $114=((($113)+(1))|0);
      $n_nel=$114;
      var $115=$i;
      $last_line_end=$115;
      label = 29; break;
    case 29: 
      var $117=$i;
      var $118=$last_line_end;
      var $119=((($118)+(300))|0);
      var $120=(($117)>>>0) > (($119)>>>0);
      if ($120) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $has_long_lines=1;
      label = 31; break;
    case 31: 
      var $123=$i;
      var $124=$5;
      var $125=(($124+($123<<2))|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126)|0)==27;
      if ($127) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $has_escapes=1;
      label = 33; break;
    case 33: 
      var $130=$i;
      var $131=$5;
      var $132=(($131+($130<<2))|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133)|0)==8;
      if ($134) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $has_backspace=1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $138=$i;
      var $139=((($138)+(1))|0);
      $i=$139;
      label = 16; break;
    case 37: 
      var $141=$seen_cr;
      var $142=(($141)|0)!=0;
      if ($142) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $144=$4;
      var $145=(($144)>>>0) < 262144;
      if ($145) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $147=$n_cr;
      var $148=((($147)+(1))|0);
      $n_cr=$148;
      label = 40; break;
    case 40: 
      var $150=$8;
      var $151=_strcmp($150, ((5271980)|0));
      var $152=(($151)|0)==0;
      if ($152) { label = 41; break; } else { label = 42; break; }
    case 41: 
      $rv=0;
      label = 143; break;
    case 42: 
      var $155=$mime;
      var $156=(($155)|0)!=0;
      if ($156) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $158=$2;
      var $159=_file_printedlen($158);
      var $160=(($159)|0)!=0;
      if ($160) { label = 53; break; } else { label = 44; break; }
    case 44: 
      var $162=$mime;
      var $163=$162 & 16;
      var $164=(($163)|0)!=0;
      if ($164) { label = 45; break; } else { label = 53; break; }
    case 45: 
      var $166=$subtype_mime;
      var $167=(($166)|0)!=0;
      if ($167) { label = 46; break; } else { label = 49; break; }
    case 46: 
      var $169=$2;
      var $170=$subtype_mime;
      var $171=_file_printf($169, ((5272644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$170,tempInt));
      var $172=(($171)|0)==-1;
      if ($172) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 143; break;
    case 48: 
      label = 52; break;
    case 49: 
      var $176=$2;
      var $177=_file_printf($176, ((5269244)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $178=(($177)|0)==-1;
      if ($178) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 143; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 142; break;
    case 54: 
      var $184=$2;
      var $185=_file_printedlen($184);
      var $186=(($185)|0)!=0;
      if ($186) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $188=$2;
      var $189=_file_replace($188, ((5267292)|0), ((5266076)|0));
      if ((($189)|0) == 0) {
        label = 56; break;
      }
      else if ((($189)|0) == -1) {
        label = 63; break;
      }
      else {
      label = 64; break;
      }
      
    case 56: 
      var $191=$2;
      var $192=_file_replace($191, ((5264972)|0), ((5266076)|0));
      if ((($192)|0) == 0) {
        label = 57; break;
      }
      else if ((($192)|0) == -1) {
        label = 60; break;
      }
      else {
      label = 61; break;
      }
      
    case 57: 
      var $194=$2;
      var $195=_file_printf($194, ((5266076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $196=(($195)|0)==-1;
      if ($196) { label = 58; break; } else { label = 59; break; }
    case 58: 
      label = 143; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 143; break;
    case 61: 
      $executable=1;
      label = 62; break;
    case 62: 
      label = 65; break;
    case 63: 
      label = 143; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $206=$2;
      var $207=$7;
      var $208=_file_printf($206, ((5272644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$207,tempInt));
      var $209=(($208)|0)==-1;
      if ($209) { label = 67; break; } else { label = 68; break; }
    case 67: 
      label = 143; break;
    case 68: 
      var $212=$subtype;
      var $213=(($212)|0)!=0;
      if ($213) { label = 69; break; } else { label = 72; break; }
    case 69: 
      var $215=$2;
      var $216=$subtype;
      var $217=_file_printf($215, ((5263768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$216,tempInt));
      var $218=(($217)|0)==-1;
      if ($218) { label = 70; break; } else { label = 71; break; }
    case 70: 
      label = 143; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $222=$2;
      var $223=$8;
      var $224=_file_printf($222, ((5263768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$223,tempInt));
      var $225=(($224)|0)==-1;
      if ($225) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 143; break;
    case 74: 
      var $228=$executable;
      var $229=(($228)|0)!=0;
      if ($229) { label = 75; break; } else { label = 78; break; }
    case 75: 
      var $231=$2;
      var $232=_file_printf($231, ((5262664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $233=(($232)|0)==-1;
      if ($233) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 143; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $237=$has_long_lines;
      var $238=(($237)|0)!=0;
      if ($238) { label = 79; break; } else { label = 82; break; }
    case 79: 
      var $240=$2;
      var $241=_file_printf($240, ((5261836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $242=(($241)|0)==-1;
      if ($242) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 143; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $246=$n_crlf;
      var $247=(($246)|0)==0;
      if ($247) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $249=$n_cr;
      var $250=(($249)|0)==0;
      if ($250) { label = 84; break; } else { label = 86; break; }
    case 84: 
      var $252=$n_nel;
      var $253=(($252)|0)==0;
      if ($253) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $255=$n_lf;
      var $256=(($255)|0)==0;
      if ($256) { label = 89; break; } else { label = 86; break; }
    case 86: 
      var $258=$n_crlf;
      var $259=(($258)|0)!=0;
      if ($259) { label = 89; break; } else { label = 87; break; }
    case 87: 
      var $261=$n_cr;
      var $262=(($261)|0)!=0;
      if ($262) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $264=$n_nel;
      var $265=(($264)|0)!=0;
      if ($265) { label = 89; break; } else { label = 133; break; }
    case 89: 
      var $267=$2;
      var $268=_file_printf($267, ((5260900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $269=(($268)|0)==-1;
      if ($269) { label = 90; break; } else { label = 91; break; }
    case 90: 
      label = 143; break;
    case 91: 
      var $272=$n_crlf;
      var $273=(($272)|0)==0;
      if ($273) { label = 92; break; } else { label = 98; break; }
    case 92: 
      var $275=$n_cr;
      var $276=(($275)|0)==0;
      if ($276) { label = 93; break; } else { label = 98; break; }
    case 93: 
      var $278=$n_nel;
      var $279=(($278)|0)==0;
      if ($279) { label = 94; break; } else { label = 98; break; }
    case 94: 
      var $281=$n_lf;
      var $282=(($281)|0)==0;
      if ($282) { label = 95; break; } else { label = 98; break; }
    case 95: 
      var $284=$2;
      var $285=_file_printf($284, ((5273324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $286=(($285)|0)==-1;
      if ($286) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 143; break;
    case 97: 
      label = 130; break;
    case 98: 
      var $290=$n_crlf;
      var $291=(($290)|0)!=0;
      if ($291) { label = 99; break; } else { label = 108; break; }
    case 99: 
      var $293=$2;
      var $294=_file_printf($293, ((5272708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $295=(($294)|0)==-1;
      if ($295) { label = 100; break; } else { label = 101; break; }
    case 100: 
      label = 143; break;
    case 101: 
      var $298=$n_cr;
      var $299=(($298)|0)!=0;
      if ($299) { label = 104; break; } else { label = 102; break; }
    case 102: 
      var $301=$n_lf;
      var $302=(($301)|0)!=0;
      if ($302) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $304=$n_nel;
      var $305=(($304)|0)!=0;
      if ($305) { label = 104; break; } else { label = 107; break; }
    case 104: 
      var $307=$2;
      var $308=_file_printf($307, ((5272112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $309=(($308)|0)==-1;
      if ($309) { label = 105; break; } else { label = 106; break; }
    case 105: 
      label = 143; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $314=$n_cr;
      var $315=(($314)|0)!=0;
      if ($315) { label = 109; break; } else { label = 117; break; }
    case 109: 
      var $317=$2;
      var $318=_file_printf($317, ((5271688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $319=(($318)|0)==-1;
      if ($319) { label = 110; break; } else { label = 111; break; }
    case 110: 
      label = 143; break;
    case 111: 
      var $322=$n_lf;
      var $323=(($322)|0)!=0;
      if ($323) { label = 113; break; } else { label = 112; break; }
    case 112: 
      var $325=$n_nel;
      var $326=(($325)|0)!=0;
      if ($326) { label = 113; break; } else { label = 116; break; }
    case 113: 
      var $328=$2;
      var $329=_file_printf($328, ((5272112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $330=(($329)|0)==-1;
      if ($330) { label = 114; break; } else { label = 115; break; }
    case 114: 
      label = 143; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $335=$n_lf;
      var $336=(($335)|0)!=0;
      if ($336) { label = 118; break; } else { label = 125; break; }
    case 118: 
      var $338=$2;
      var $339=_file_printf($338, ((5271356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $340=(($339)|0)==-1;
      if ($340) { label = 119; break; } else { label = 120; break; }
    case 119: 
      label = 143; break;
    case 120: 
      var $343=$n_nel;
      var $344=(($343)|0)!=0;
      if ($344) { label = 121; break; } else { label = 124; break; }
    case 121: 
      var $346=$2;
      var $347=_file_printf($346, ((5272112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $348=(($347)|0)==-1;
      if ($348) { label = 122; break; } else { label = 123; break; }
    case 122: 
      label = 143; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      var $353=$n_nel;
      var $354=(($353)|0)!=0;
      if ($354) { label = 126; break; } else { label = 129; break; }
    case 126: 
      var $356=$2;
      var $357=_file_printf($356, ((5271012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $358=(($357)|0)==-1;
      if ($358) { label = 127; break; } else { label = 128; break; }
    case 127: 
      label = 143; break;
    case 128: 
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      var $363=$2;
      var $364=_file_printf($363, ((5270796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $365=(($364)|0)==-1;
      if ($365) { label = 131; break; } else { label = 132; break; }
    case 131: 
      label = 143; break;
    case 132: 
      label = 133; break;
    case 133: 
      var $369=$has_escapes;
      var $370=(($369)|0)!=0;
      if ($370) { label = 134; break; } else { label = 137; break; }
    case 134: 
      var $372=$2;
      var $373=_file_printf($372, ((5270460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $374=(($373)|0)==-1;
      if ($374) { label = 135; break; } else { label = 136; break; }
    case 135: 
      label = 143; break;
    case 136: 
      label = 137; break;
    case 137: 
      var $378=$has_backspace;
      var $379=(($378)|0)!=0;
      if ($379) { label = 138; break; } else { label = 141; break; }
    case 138: 
      var $381=$2;
      var $382=_file_printf($381, ((5270200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $383=(($382)|0)==-1;
      if ($383) { label = 139; break; } else { label = 140; break; }
    case 139: 
      label = 143; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      $rv=1;
      label = 143; break;
    case 143: 
      var $389=$utf8_buf;
      _free($389);
      var $390=$rv;
      $1=$390;
      label = 144; break;
    case 144: 
      var $392=$1;
      STACKTOP = __stackBase__;
      return $392;
    default: assert(0, "bad label: " + label);
  }
}
_file_ascmagic_with_encoding["X"]=1;

function _encode_utf8($buf, $len, $ubuf, $ulen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $end;
      $2=$buf;
      $3=$len;
      $4=$ubuf;
      $5=$ulen;
      var $6=$2;
      var $7=$3;
      var $8=(($6+$7)|0);
      $end=$8;
      $i=0;
      label = 3; break;
    case 3: 
      var $10=$i;
      var $11=$5;
      var $12=(($10)>>>0) < (($11)>>>0);
      if ($12) { label = 4; break; } else { label = 36; break; }
    case 4: 
      var $14=$i;
      var $15=$4;
      var $16=(($15+($14<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)>>>0) <= 127;
      if ($18) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $20=$end;
      var $21=$2;
      var $22=$20;
      var $23=$21;
      var $24=((($22)-($23))|0);
      var $25=(($24)|0) < 1;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 37; break;
    case 7: 
      var $28=$i;
      var $29=$4;
      var $30=(($29+($28<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31) & 255);
      var $33=$2;
      var $34=(($33+1)|0);
      $2=$34;
      HEAP8[($33)]=$32;
      label = 34; break;
    case 8: 
      var $36=$i;
      var $37=$4;
      var $38=(($37+($36<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)>>>0) <= 2047;
      if ($40) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $42=$end;
      var $43=$2;
      var $44=$42;
      var $45=$43;
      var $46=((($44)-($45))|0);
      var $47=(($46)|0) < 2;
      if ($47) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 37; break;
    case 11: 
      var $50=$i;
      var $51=$4;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 >>> 6;
      var $55=((($54)+(192))|0);
      var $56=(($55) & 255);
      var $57=$2;
      var $58=(($57+1)|0);
      $2=$58;
      HEAP8[($57)]=$56;
      var $59=$i;
      var $60=$4;
      var $61=(($60+($59<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & 63;
      var $64=((($63)+(128))|0);
      var $65=(($64) & 255);
      var $66=$2;
      var $67=(($66+1)|0);
      $2=$67;
      HEAP8[($66)]=$65;
      label = 33; break;
    case 12: 
      var $69=$i;
      var $70=$4;
      var $71=(($70+($69<<2))|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)>>>0) <= 65535;
      if ($73) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $75=$end;
      var $76=$2;
      var $77=$75;
      var $78=$76;
      var $79=((($77)-($78))|0);
      var $80=(($79)|0) < 3;
      if ($80) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 37; break;
    case 15: 
      var $83=$i;
      var $84=$4;
      var $85=(($84+($83<<2))|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$86 >>> 12;
      var $88=((($87)+(224))|0);
      var $89=(($88) & 255);
      var $90=$2;
      var $91=(($90+1)|0);
      $2=$91;
      HEAP8[($90)]=$89;
      var $92=$i;
      var $93=$4;
      var $94=(($93+($92<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$95 >>> 6;
      var $97=$96 & 63;
      var $98=((($97)+(128))|0);
      var $99=(($98) & 255);
      var $100=$2;
      var $101=(($100+1)|0);
      $2=$101;
      HEAP8[($100)]=$99;
      var $102=$i;
      var $103=$4;
      var $104=(($103+($102<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 & 63;
      var $107=((($106)+(128))|0);
      var $108=(($107) & 255);
      var $109=$2;
      var $110=(($109+1)|0);
      $2=$110;
      HEAP8[($109)]=$108;
      label = 32; break;
    case 16: 
      var $112=$i;
      var $113=$4;
      var $114=(($113+($112<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115)>>>0) <= 2097151;
      if ($116) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $118=$end;
      var $119=$2;
      var $120=$118;
      var $121=$119;
      var $122=((($120)-($121))|0);
      var $123=(($122)|0) < 4;
      if ($123) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 37; break;
    case 19: 
      var $126=$i;
      var $127=$4;
      var $128=(($127+($126<<2))|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129 >>> 18;
      var $131=((($130)+(240))|0);
      var $132=(($131) & 255);
      var $133=$2;
      var $134=(($133+1)|0);
      $2=$134;
      HEAP8[($133)]=$132;
      var $135=$i;
      var $136=$4;
      var $137=(($136+($135<<2))|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$138 >>> 12;
      var $140=$139 & 63;
      var $141=((($140)+(128))|0);
      var $142=(($141) & 255);
      var $143=$2;
      var $144=(($143+1)|0);
      $2=$144;
      HEAP8[($143)]=$142;
      var $145=$i;
      var $146=$4;
      var $147=(($146+($145<<2))|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148 >>> 6;
      var $150=$149 & 63;
      var $151=((($150)+(128))|0);
      var $152=(($151) & 255);
      var $153=$2;
      var $154=(($153+1)|0);
      $2=$154;
      HEAP8[($153)]=$152;
      var $155=$i;
      var $156=$4;
      var $157=(($156+($155<<2))|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$158 & 63;
      var $160=((($159)+(128))|0);
      var $161=(($160) & 255);
      var $162=$2;
      var $163=(($162+1)|0);
      $2=$163;
      HEAP8[($162)]=$161;
      label = 31; break;
    case 20: 
      var $165=$i;
      var $166=$4;
      var $167=(($166+($165<<2))|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168)>>>0) <= 67108863;
      if ($169) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $171=$end;
      var $172=$2;
      var $173=$171;
      var $174=$172;
      var $175=((($173)-($174))|0);
      var $176=(($175)|0) < 5;
      if ($176) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=0;
      label = 37; break;
    case 23: 
      var $179=$i;
      var $180=$4;
      var $181=(($180+($179<<2))|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$182 >>> 24;
      var $184=((($183)+(248))|0);
      var $185=(($184) & 255);
      var $186=$2;
      var $187=(($186+1)|0);
      $2=$187;
      HEAP8[($186)]=$185;
      var $188=$i;
      var $189=$4;
      var $190=(($189+($188<<2))|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$191 >>> 18;
      var $193=$192 & 63;
      var $194=((($193)+(128))|0);
      var $195=(($194) & 255);
      var $196=$2;
      var $197=(($196+1)|0);
      $2=$197;
      HEAP8[($196)]=$195;
      var $198=$i;
      var $199=$4;
      var $200=(($199+($198<<2))|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=$201 >>> 12;
      var $203=$202 & 63;
      var $204=((($203)+(128))|0);
      var $205=(($204) & 255);
      var $206=$2;
      var $207=(($206+1)|0);
      $2=$207;
      HEAP8[($206)]=$205;
      var $208=$i;
      var $209=$4;
      var $210=(($209+($208<<2))|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$211 >>> 6;
      var $213=$212 & 63;
      var $214=((($213)+(128))|0);
      var $215=(($214) & 255);
      var $216=$2;
      var $217=(($216+1)|0);
      $2=$217;
      HEAP8[($216)]=$215;
      var $218=$i;
      var $219=$4;
      var $220=(($219+($218<<2))|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$221 & 63;
      var $223=((($222)+(128))|0);
      var $224=(($223) & 255);
      var $225=$2;
      var $226=(($225+1)|0);
      $2=$226;
      HEAP8[($225)]=$224;
      label = 30; break;
    case 24: 
      var $228=$i;
      var $229=$4;
      var $230=(($229+($228<<2))|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231)>>>0) <= 2147483647;
      if ($232) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $234=$end;
      var $235=$2;
      var $236=$234;
      var $237=$235;
      var $238=((($236)-($237))|0);
      var $239=(($238)|0) < 6;
      if ($239) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=0;
      label = 37; break;
    case 27: 
      var $242=$i;
      var $243=$4;
      var $244=(($243+($242<<2))|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$245 >>> 30;
      var $247=((($246)+(252))|0);
      var $248=(($247) & 255);
      var $249=$2;
      var $250=(($249+1)|0);
      $2=$250;
      HEAP8[($249)]=$248;
      var $251=$i;
      var $252=$4;
      var $253=(($252+($251<<2))|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=$254 >>> 24;
      var $256=$255 & 63;
      var $257=((($256)+(128))|0);
      var $258=(($257) & 255);
      var $259=$2;
      var $260=(($259+1)|0);
      $2=$260;
      HEAP8[($259)]=$258;
      var $261=$i;
      var $262=$4;
      var $263=(($262+($261<<2))|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=$264 >>> 18;
      var $266=$265 & 63;
      var $267=((($266)+(128))|0);
      var $268=(($267) & 255);
      var $269=$2;
      var $270=(($269+1)|0);
      $2=$270;
      HEAP8[($269)]=$268;
      var $271=$i;
      var $272=$4;
      var $273=(($272+($271<<2))|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=$274 >>> 12;
      var $276=$275 & 63;
      var $277=((($276)+(128))|0);
      var $278=(($277) & 255);
      var $279=$2;
      var $280=(($279+1)|0);
      $2=$280;
      HEAP8[($279)]=$278;
      var $281=$i;
      var $282=$4;
      var $283=(($282+($281<<2))|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$284 >>> 6;
      var $286=$285 & 63;
      var $287=((($286)+(128))|0);
      var $288=(($287) & 255);
      var $289=$2;
      var $290=(($289+1)|0);
      $2=$290;
      HEAP8[($289)]=$288;
      var $291=$i;
      var $292=$4;
      var $293=(($292+($291<<2))|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=$294 & 63;
      var $296=((($295)+(128))|0);
      var $297=(($296) & 255);
      var $298=$2;
      var $299=(($298+1)|0);
      $2=$299;
      HEAP8[($298)]=$297;
      label = 29; break;
    case 28: 
      $1=0;
      label = 37; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $308=$i;
      var $309=((($308)+(1))|0);
      $i=$309;
      label = 3; break;
    case 36: 
      var $311=$2;
      $1=$311;
      label = 37; break;
    case 37: 
      var $313=$1;

      return $313;
    default: assert(0, "bad label: " + label);
  }
}
_encode_utf8["X"]=1;

function _looks_ascii($buf, $nbytes, $ubuf, $ulen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $t;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$5;
      HEAP32[(($6)>>2)]=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$3;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $12=$i;
      var $13=$2;
      var $14=(($13+$12)|0);
      var $15=HEAP8[($14)];
      var $16=(($15)&255);
      var $17=((5244396+$16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      $t=$19;
      var $20=$t;
      var $21=(($20)|0)!=1;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      var $24=$i;
      var $25=$2;
      var $26=(($25+$24)|0);
      var $27=HEAP8[($26)];
      var $28=(($27)&255);
      var $29=$5;
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=$4;
      var $33=(($32+($30<<2))|0);
      HEAP32[(($33)>>2)]=$28;
      label = 7; break;
    case 7: 
      var $35=$i;
      var $36=((($35)+(1))|0);
      $i=$36;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $39=$1;

      return $39;
    default: assert(0, "bad label: " + label);
  }
}
_looks_ascii["X"]=1;

function _file_encoding($ms, $buf, $nbytes, $ubuf, $ulen, $code, $code_mime, $type) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $mlen;
      var $rv;
      var $ucs_type;
      var $nbuf;
      $1=$ms;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      $6=$code;
      $7=$code_mime;
      $8=$type;
      $rv=1;
      $nbuf=0;
      var $9=$8;
      HEAP32[(($9)>>2)]=((5271208)|0);
      var $10=$3;
      var $11=((($10)+(1))|0);
      var $12=(($11)|0);
      $mlen=$12;
      var $13=$mlen;
      var $14=_calloc(1, $13);
      $nbuf=$14;
      var $15=(($14)|0)==0;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$1;
      var $18=$mlen;
      _file_oomem($17, $18);
      label = 34; break;
    case 4: 
      var $20=$3;
      var $21=((($20)+(1))|0);
      var $22=((($21<<2))|0);
      $mlen=$22;
      var $23=$mlen;
      var $24=_calloc(1, $23);
      var $25=$24;
      var $26=$4;
      HEAP32[(($26)>>2)]=$25;
      var $27=(($25)|0)==0;
      if ($27) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $29=$1;
      var $30=$mlen;
      _file_oomem($29, $30);
      label = 34; break;
    case 6: 
      var $32=$2;
      var $33=$3;
      var $34=$4;
      var $35=HEAP32[(($34)>>2)];
      var $36=$5;
      var $37=_looks_ascii($32, $33, $35, $36);
      var $38=(($37)|0)!=0;
      if ($38) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $40=$6;
      HEAP32[(($40)>>2)]=((5272404)|0);
      var $41=$7;
      HEAP32[(($41)>>2)]=((5269140)|0);
      label = 33; break;
    case 8: 
      var $43=$2;
      var $44=$3;
      var $45=$4;
      var $46=HEAP32[(($45)>>2)];
      var $47=$5;
      var $48=_looks_utf8_with_BOM($43, $44, $46, $47);
      var $49=(($48)|0) > 0;
      if ($49) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $51=$6;
      HEAP32[(($51)>>2)]=((5267232)|0);
      var $52=$7;
      HEAP32[(($52)>>2)]=((5266052)|0);
      label = 32; break;
    case 10: 
      var $54=$2;
      var $55=$3;
      var $56=$4;
      var $57=HEAP32[(($56)>>2)];
      var $58=$5;
      var $59=_file_looks_utf8($54, $55, $57, $58);
      var $60=(($59)|0) > 1;
      if ($60) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $62=$6;
      HEAP32[(($62)>>2)]=((5267232)|0);
      var $63=$6;
      HEAP32[(($63)>>2)]=((5264908)|0);
      var $64=$7;
      HEAP32[(($64)>>2)]=((5266052)|0);
      label = 31; break;
    case 12: 
      var $66=$2;
      var $67=$3;
      var $68=$4;
      var $69=HEAP32[(($68)>>2)];
      var $70=$5;
      var $71=_looks_ucs16($66, $67, $69, $70);
      $ucs_type=$71;
      var $72=(($71)|0)!=0;
      if ($72) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $74=$ucs_type;
      var $75=(($74)|0)==1;
      if ($75) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $77=$6;
      HEAP32[(($77)>>2)]=((5263728)|0);
      var $78=$7;
      HEAP32[(($78)>>2)]=((5262648)|0);
      label = 16; break;
    case 15: 
      var $80=$6;
      HEAP32[(($80)>>2)]=((5261804)|0);
      var $81=$7;
      HEAP32[(($81)>>2)]=((5260884)|0);
      label = 16; break;
    case 16: 
      label = 30; break;
    case 17: 
      var $84=$2;
      var $85=$3;
      var $86=$4;
      var $87=HEAP32[(($86)>>2)];
      var $88=$5;
      var $89=_looks_latin1($84, $85, $87, $88);
      var $90=(($89)|0)!=0;
      if ($90) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $92=$6;
      HEAP32[(($92)>>2)]=((5273304)|0);
      var $93=$7;
      HEAP32[(($93)>>2)]=((5272692)|0);
      label = 29; break;
    case 19: 
      var $95=$2;
      var $96=$3;
      var $97=$4;
      var $98=HEAP32[(($97)>>2)];
      var $99=$5;
      var $100=_looks_extended($95, $96, $98, $99);
      var $101=(($100)|0)!=0;
      if ($101) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $103=$6;
      HEAP32[(($103)>>2)]=((5272076)|0);
      var $104=$7;
      HEAP32[(($104)>>2)]=((5271668)|0);
      label = 28; break;
    case 21: 
      var $106=$2;
      var $107=$3;
      var $108=$nbuf;
      _from_ebcdic($106, $107, $108);
      var $109=$nbuf;
      var $110=$3;
      var $111=$4;
      var $112=HEAP32[(($111)>>2)];
      var $113=$5;
      var $114=_looks_ascii($109, $110, $112, $113);
      var $115=(($114)|0)!=0;
      if ($115) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $117=$6;
      HEAP32[(($117)>>2)]=((5271344)|0);
      var $118=$7;
      HEAP32[(($118)>>2)]=((5271000)|0);
      label = 27; break;
    case 23: 
      var $120=$nbuf;
      var $121=$3;
      var $122=$4;
      var $123=HEAP32[(($122)>>2)];
      var $124=$5;
      var $125=_looks_latin1($120, $121, $123, $124);
      var $126=(($125)|0)!=0;
      if ($126) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $128=$6;
      HEAP32[(($128)>>2)]=((5270764)|0);
      var $129=$7;
      HEAP32[(($129)>>2)]=((5271000)|0);
      label = 26; break;
    case 25: 
      $rv=0;
      var $131=$8;
      HEAP32[(($131)>>2)]=((5270448)|0);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $141=$nbuf;
      _free($141);
      var $142=$rv;

      return $142;
    default: assert(0, "bad label: " + label);
  }
}
_file_encoding["X"]=1;

function _looks_utf8_with_BOM($buf, $nbytes, $ubuf, $ulen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$3;
      var $7=(($6)>>>0) > 3;
      if ($7) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&255);
      var $13=(($12)|0)==239;
      if ($13) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $15=$2;
      var $16=(($15+1)|0);
      var $17=HEAP8[($16)];
      var $18=(($17)&255);
      var $19=(($18)|0)==187;
      if ($19) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $21=$2;
      var $22=(($21+2)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&255);
      var $25=(($24)|0)==191;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$2;
      var $28=(($27+3)|0);
      var $29=$3;
      var $30=((($29)-(3))|0);
      var $31=$4;
      var $32=$5;
      var $33=_file_looks_utf8($28, $30, $31, $32);
      $1=$33;
      label = 8; break;
    case 7: 
      $1=-1;
      label = 8; break;
    case 8: 
      var $36=$1;

      return $36;
    default: assert(0, "bad label: " + label);
  }
}


function _file_looks_utf8($buf, $nbytes, $ubuf, $ulen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $n;
      var $c;
      var $gotone;
      var $ctrl;
      var $following;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      $gotone=0;
      $ctrl=0;
      var $6=$4;
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$5;
      HEAP32[(($9)>>2)]=0;
      label = 4; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $12=$i;
      var $13=$3;
      var $14=(($12)>>>0) < (($13)>>>0);
      if ($14) { label = 6; break; } else { label = 44; break; }
    case 6: 
      var $16=$i;
      var $17=$2;
      var $18=(($17+$16)|0);
      var $19=HEAP8[($18)];
      var $20=(($19)&255);
      var $21=$20 & 128;
      var $22=(($21)|0)==0;
      if ($22) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $24=$i;
      var $25=$2;
      var $26=(($25+$24)|0);
      var $27=HEAP8[($26)];
      var $28=(($27)&255);
      var $29=((5244396+$28)|0);
      var $30=HEAP8[($29)];
      var $31=(($30 << 24) >> 24);
      var $32=(($31)|0)!=1;
      if ($32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $ctrl=1;
      label = 9; break;
    case 9: 
      var $35=$4;
      var $36=(($35)|0)!=0;
      if ($36) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $38=$i;
      var $39=$2;
      var $40=(($39+$38)|0);
      var $41=HEAP8[($40)];
      var $42=(($41)&255);
      var $43=$5;
      var $44=HEAP32[(($43)>>2)];
      var $45=((($44)+(1))|0);
      HEAP32[(($43)>>2)]=$45;
      var $46=$4;
      var $47=(($46+($44<<2))|0);
      HEAP32[(($47)>>2)]=$42;
      label = 11; break;
    case 11: 
      label = 42; break;
    case 12: 
      var $50=$i;
      var $51=$2;
      var $52=(($51+$50)|0);
      var $53=HEAP8[($52)];
      var $54=(($53)&255);
      var $55=$54 & 64;
      var $56=(($55)|0)==0;
      if ($56) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=-1;
      label = 49; break;
    case 14: 
      var $59=$i;
      var $60=$2;
      var $61=(($60+$59)|0);
      var $62=HEAP8[($61)];
      var $63=(($62)&255);
      var $64=$63 & 32;
      var $65=(($64)|0)==0;
      if ($65) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $67=$i;
      var $68=$2;
      var $69=(($68+$67)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      var $72=$71 & 31;
      $c=$72;
      $following=1;
      label = 29; break;
    case 16: 
      var $74=$i;
      var $75=$2;
      var $76=(($75+$74)|0);
      var $77=HEAP8[($76)];
      var $78=(($77)&255);
      var $79=$78 & 16;
      var $80=(($79)|0)==0;
      if ($80) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $82=$i;
      var $83=$2;
      var $84=(($83+$82)|0);
      var $85=HEAP8[($84)];
      var $86=(($85)&255);
      var $87=$86 & 15;
      $c=$87;
      $following=2;
      label = 28; break;
    case 18: 
      var $89=$i;
      var $90=$2;
      var $91=(($90+$89)|0);
      var $92=HEAP8[($91)];
      var $93=(($92)&255);
      var $94=$93 & 8;
      var $95=(($94)|0)==0;
      if ($95) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $97=$i;
      var $98=$2;
      var $99=(($98+$97)|0);
      var $100=HEAP8[($99)];
      var $101=(($100)&255);
      var $102=$101 & 7;
      $c=$102;
      $following=3;
      label = 27; break;
    case 20: 
      var $104=$i;
      var $105=$2;
      var $106=(($105+$104)|0);
      var $107=HEAP8[($106)];
      var $108=(($107)&255);
      var $109=$108 & 4;
      var $110=(($109)|0)==0;
      if ($110) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $112=$i;
      var $113=$2;
      var $114=(($113+$112)|0);
      var $115=HEAP8[($114)];
      var $116=(($115)&255);
      var $117=$116 & 3;
      $c=$117;
      $following=4;
      label = 26; break;
    case 22: 
      var $119=$i;
      var $120=$2;
      var $121=(($120+$119)|0);
      var $122=HEAP8[($121)];
      var $123=(($122)&255);
      var $124=$123 & 2;
      var $125=(($124)|0)==0;
      if ($125) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $127=$i;
      var $128=$2;
      var $129=(($128+$127)|0);
      var $130=HEAP8[($129)];
      var $131=(($130)&255);
      var $132=$131 & 1;
      $c=$132;
      $following=5;
      label = 25; break;
    case 24: 
      $1=-1;
      label = 49; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      $n=0;
      label = 30; break;
    case 30: 
      var $140=$n;
      var $141=$following;
      var $142=(($140)|0) < (($141)|0);
      if ($142) { label = 31; break; } else { label = 38; break; }
    case 31: 
      var $144=$i;
      var $145=((($144)+(1))|0);
      $i=$145;
      var $146=$i;
      var $147=$3;
      var $148=(($146)>>>0) >= (($147)>>>0);
      if ($148) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 45; break;
    case 33: 
      var $151=$i;
      var $152=$2;
      var $153=(($152+$151)|0);
      var $154=HEAP8[($153)];
      var $155=(($154)&255);
      var $156=$155 & 128;
      var $157=(($156)|0)==0;
      if ($157) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $159=$i;
      var $160=$2;
      var $161=(($160+$159)|0);
      var $162=HEAP8[($161)];
      var $163=(($162)&255);
      var $164=$163 & 64;
      var $165=(($164)|0)!=0;
      if ($165) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $1=-1;
      label = 49; break;
    case 36: 
      var $168=$c;
      var $169=$168 << 6;
      var $170=$i;
      var $171=$2;
      var $172=(($171+$170)|0);
      var $173=HEAP8[($172)];
      var $174=(($173)&255);
      var $175=$174 & 63;
      var $176=((($169)+($175))|0);
      $c=$176;
      label = 37; break;
    case 37: 
      var $178=$n;
      var $179=((($178)+(1))|0);
      $n=$179;
      label = 30; break;
    case 38: 
      var $181=$4;
      var $182=(($181)|0)!=0;
      if ($182) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $184=$c;
      var $185=$5;
      var $186=HEAP32[(($185)>>2)];
      var $187=((($186)+(1))|0);
      HEAP32[(($185)>>2)]=$187;
      var $188=$4;
      var $189=(($188+($186<<2))|0);
      HEAP32[(($189)>>2)]=$184;
      label = 40; break;
    case 40: 
      $gotone=1;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $194=$i;
      var $195=((($194)+(1))|0);
      $i=$195;
      label = 5; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $198=$ctrl;
      var $199=(($198)|0)!=0;
      if ($199) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $206 = 0;label = 48; break;
    case 47: 
      var $202=$gotone;
      var $203=(($202)|0)!=0;
      var $204=$203 ? 2 : 1;
      var $206 = $204;label = 48; break;
    case 48: 
      var $206;
      $1=$206;
      label = 49; break;
    case 49: 
      var $208=$1;

      return $208;
    default: assert(0, "bad label: " + label);
  }
}
_file_looks_utf8["X"]=1;

function _looks_ucs16($buf, $nbytes, $ubuf, $ulen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $bigend;
      var $i;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$3;
      var $7=(($6)>>>0) < 2;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 25; break;
    case 4: 
      var $10=$2;
      var $11=(($10)|0);
      var $12=HEAP8[($11)];
      var $13=(($12)&255);
      var $14=(($13)|0)==255;
      if ($14) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $16=$2;
      var $17=(($16+1)|0);
      var $18=HEAP8[($17)];
      var $19=(($18)&255);
      var $20=(($19)|0)==254;
      if ($20) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $bigend=0;
      label = 12; break;
    case 7: 
      var $23=$2;
      var $24=(($23)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&255);
      var $27=(($26)|0)==254;
      if ($27) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $29=$2;
      var $30=(($29+1)|0);
      var $31=HEAP8[($30)];
      var $32=(($31)&255);
      var $33=(($32)|0)==255;
      if ($33) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $bigend=1;
      label = 11; break;
    case 10: 
      $1=0;
      label = 25; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $38=$5;
      HEAP32[(($38)>>2)]=0;
      $i=2;
      label = 13; break;
    case 13: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      var $42=$3;
      var $43=(($41)>>>0) < (($42)>>>0);
      if ($43) { label = 14; break; } else { label = 24; break; }
    case 14: 
      var $45=$bigend;
      var $46=(($45)|0)!=0;
      if ($46) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      var $50=$2;
      var $51=(($50+$49)|0);
      var $52=HEAP8[($51)];
      var $53=(($52)&255);
      var $54=$i;
      var $55=$2;
      var $56=(($55+$54)|0);
      var $57=HEAP8[($56)];
      var $58=(($57)&255);
      var $59=((($58<<8))|0);
      var $60=((($53)+($59))|0);
      var $61=$5;
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)+(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=$4;
      var $65=(($64+($62<<2))|0);
      HEAP32[(($65)>>2)]=$60;
      label = 17; break;
    case 16: 
      var $67=$i;
      var $68=$2;
      var $69=(($68+$67)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      var $72=$i;
      var $73=((($72)+(1))|0);
      var $74=$2;
      var $75=(($74+$73)|0);
      var $76=HEAP8[($75)];
      var $77=(($76)&255);
      var $78=((($77<<8))|0);
      var $79=((($71)+($78))|0);
      var $80=$5;
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)+(1))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=$4;
      var $84=(($83+($81<<2))|0);
      HEAP32[(($84)>>2)]=$79;
      label = 17; break;
    case 17: 
      var $86=$5;
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)-(1))|0);
      var $89=$4;
      var $90=(($89+($88<<2))|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91)|0)==65534;
      if ($92) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 25; break;
    case 19: 
      var $95=$5;
      var $96=HEAP32[(($95)>>2)];
      var $97=((($96)-(1))|0);
      var $98=$4;
      var $99=(($98+($97<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100)>>>0) < 128;
      if ($101) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $103=$5;
      var $104=HEAP32[(($103)>>2)];
      var $105=((($104)-(1))|0);
      var $106=$4;
      var $107=(($106+($105<<2))|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((5244396+$108)|0);
      var $110=HEAP8[($109)];
      var $111=(($110 << 24) >> 24);
      var $112=(($111)|0)!=1;
      if ($112) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $1=0;
      label = 25; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $116=$i;
      var $117=((($116)+(2))|0);
      $i=$117;
      label = 13; break;
    case 24: 
      var $119=$bigend;
      var $120=((($119)+(1))|0);
      $1=$120;
      label = 25; break;
    case 25: 
      var $122=$1;

      return $122;
    default: assert(0, "bad label: " + label);
  }
}
_looks_ucs16["X"]=1;

function _looks_latin1($buf, $nbytes, $ubuf, $ulen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $t;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$5;
      HEAP32[(($6)>>2)]=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$3;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $12=$i;
      var $13=$2;
      var $14=(($13+$12)|0);
      var $15=HEAP8[($14)];
      var $16=(($15)&255);
      var $17=((5244396+$16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      $t=$19;
      var $20=$t;
      var $21=(($20)|0)!=1;
      if ($21) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $23=$t;
      var $24=(($23)|0)!=2;
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 10; break;
    case 7: 
      var $27=$i;
      var $28=$2;
      var $29=(($28+$27)|0);
      var $30=HEAP8[($29)];
      var $31=(($30)&255);
      var $32=$5;
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)+(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=$4;
      var $36=(($35+($33<<2))|0);
      HEAP32[(($36)>>2)]=$31;
      label = 8; break;
    case 8: 
      var $38=$i;
      var $39=((($38)+(1))|0);
      $i=$39;
      label = 3; break;
    case 9: 
      $1=1;
      label = 10; break;
    case 10: 
      var $42=$1;

      return $42;
    default: assert(0, "bad label: " + label);
  }
}
_looks_latin1["X"]=1;

function _looks_extended($buf, $nbytes, $ubuf, $ulen) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $t;
      $2=$buf;
      $3=$nbytes;
      $4=$ubuf;
      $5=$ulen;
      var $6=$5;
      HEAP32[(($6)>>2)]=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$3;
      var $10=(($8)>>>0) < (($9)>>>0);
      if ($10) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $12=$i;
      var $13=$2;
      var $14=(($13+$12)|0);
      var $15=HEAP8[($14)];
      var $16=(($15)&255);
      var $17=((5244396+$16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      $t=$19;
      var $20=$t;
      var $21=(($20)|0)!=1;
      if ($21) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $23=$t;
      var $24=(($23)|0)!=2;
      if ($24) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $26=$t;
      var $27=(($26)|0)!=3;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 11; break;
    case 8: 
      var $30=$i;
      var $31=$2;
      var $32=(($31+$30)|0);
      var $33=HEAP8[($32)];
      var $34=(($33)&255);
      var $35=$5;
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)+(1))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=$4;
      var $39=(($38+($36<<2))|0);
      HEAP32[(($39)>>2)]=$34;
      label = 9; break;
    case 9: 
      var $41=$i;
      var $42=((($41)+(1))|0);
      $i=$42;
      label = 3; break;
    case 10: 
      $1=1;
      label = 11; break;
    case 11: 
      var $45=$1;

      return $45;
    default: assert(0, "bad label: " + label);
  }
}
_looks_extended["X"]=1;

function _from_ebcdic($buf, $nbytes, $out) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$buf;
      $2=$nbytes;
      $3=$out;
      $i=0;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $6=$2;
      var $7=(($5)>>>0) < (($6)>>>0);
      if ($7) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $9=$i;
      var $10=$1;
      var $11=(($10+$9)|0);
      var $12=HEAP8[($11)];
      var $13=(($12)&255);
      var $14=((5250124+$13)|0);
      var $15=HEAP8[($14)];
      var $16=$i;
      var $17=$3;
      var $18=(($17+$16)|0);
      HEAP8[($18)]=$15;
      label = 5; break;
    case 5: 
      var $20=$i;
      var $21=((($20)+(1))|0);
      $i=$21;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _file_zmagic($ms, $fd, $name, $buf, $nbytes) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $newbuf=__stackBase__;
      var $i;
      var $nsz;
      var $rv;
      var $mime;
      $2=$ms;
      $3=$fd;
      $4=$name;
      $5=$buf;
      $6=$nbytes;
      HEAP32[(($newbuf)>>2)]=0;
      $rv=0;
      var $7=$2;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 1040;
      $mime=$10;
      var $11=$2;
      var $12=(($11+32)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 4;
      var $15=(($14)|0)==0;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 29; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $20=HEAP32[((5246524)>>2)];
      var $21=(($19)>>>0) < (($20)>>>0);
      if ($21) { label = 6; break; } else { label = 27; break; }
    case 6: 
      var $23=$6;
      var $24=$i;
      var $25=((5258572+($24)*(28))|0);
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($23)>>>0) < (($27)>>>0);
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 26; break;
    case 8: 
      var $31=$5;
      var $32=$i;
      var $33=((5258572+($32)*(28))|0);
      var $34=(($33)|0);
      var $35=(($34)|0);
      var $36=$i;
      var $37=((5258572+($36)*(28))|0);
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=_memcmp($31, $35, $39);
      var $41=(($40)|0)==0;
      if ($41) { label = 9; break; } else { label = 25; break; }
    case 9: 
      var $43=$2;
      var $44=$3;
      var $45=$i;
      var $46=$5;
      var $47=$6;
      var $48=_uncompressbuf($43, $44, $45, $46, $newbuf, $47);
      $nsz=$48;
      var $49=(($48)|0)!=-1;
      if ($49) { label = 10; break; } else { label = 25; break; }
    case 10: 
      var $51=$2;
      var $52=(($51+32)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 & -5;
      HEAP32[(($52)>>2)]=$54;
      $rv=-1;
      var $55=$2;
      var $56=$4;
      var $57=HEAP32[(($newbuf)>>2)];
      var $58=$nsz;
      var $59=_file_buffer($55, -1, $56, $57, $58);
      var $60=(($59)|0)==-1;
      if ($60) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 28; break;
    case 12: 
      var $63=$mime;
      var $64=(($63)|0)==1040;
      if ($64) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $66=$mime;
      var $67=(($66)|0)==0;
      if ($67) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $69=$2;
      var $70=$mime;
      var $71=(($70)|0)!=0;
      var $72=$71 ? (((5270608)|0)) : (((5272316)|0));
      var $73=_file_printf($69, $72, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $74=(($73)|0)==-1;
      if ($74) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 28; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $78=$mime;
      var $79=(($78)|0)==0;
      if ($79) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $81=$mime;
      var $82=$81 & 1024;
      var $83=(($82)|0)!=0;
      if ($83) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $85=$2;
      var $86=$5;
      var $87=$6;
      var $88=_file_buffer($85, -1, 0, $86, $87);
      var $89=(($88)|0)==-1;
      if ($89) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 28; break;
    case 21: 
      var $92=$mime;
      var $93=(($92)|0)!=0;
      if ($93) { label = 24; break; } else { label = 22; break; }
    case 22: 
      var $95=$2;
      var $96=_file_printf($95, ((5269084)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $97=(($96)|0)==-1;
      if ($97) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 28; break;
    case 24: 
      $rv=1;
      label = 27; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $102=$i;
      var $103=((($102)+(1))|0);
      $i=$103;
      label = 5; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $106=HEAP32[(($newbuf)>>2)];
      _free($106);
      var $107=$2;
      var $108=(($107+32)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109 | 4;
      HEAP32[(($108)>>2)]=$110;
      var $111=$rv;
      $1=$111;
      label = 29; break;
    case 29: 
      var $113=$1;
      STACKTOP = __stackBase__;
      return $113;
    default: assert(0, "bad label: " + label);
  }
}
_file_zmagic["X"]=1;

function _sread($fd, $buf, $n, $canbepipe) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $rv;
      var $t=__stackBase__;
      var $rn;
      var $cnt;
      var $check=(__stackBase__)+(4);
      var $tout=(__stackBase__)+(12);
      var $selrv;
      var $__i;
      var $__tmp;
      $2=$fd;
      $3=$buf;
      $4=$n;
      $5=$canbepipe;
      HEAP32[(($t)>>2)]=0;
      var $6=$4;
      $rn=$6;
      var $7=$2;
      var $8=(($7)|0)==1;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 28; break;
    case 4: 
      var $11=$5;
      var $12=(($11)|0)!=0;
      if ($12) { label = 5; break; } else { label = 24; break; }
    case 5: 
      var $14=$2;
      var $15=_ioctl($14, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$t,tempInt));
      var $16=(($15)|0)==-1;
      if ($16) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $18=HEAP32[(($t)>>2)];
      var $19=(($18)|0)==0;
      if ($19) { label = 7; break; } else { label = 24; break; }
    case 7: 
      $cnt=0;
      label = 8; break;
    case 8: 
      var $22=$tout;
      assert(8 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[((5244748)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((5244752)>>2)];
      var $23=$check;
      $__tmp=$23;
      $__i=0;
      label = 9; break;
    case 9: 
      var $25=$__i;
      var $26=(($25)>>>0) < 8;
      if ($26) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $28=$__tmp;
      var $29=(($28+1)|0);
      $__tmp=$29;
      HEAP8[($28)]=0;
      label = 11; break;
    case 11: 
      var $31=$__i;
      var $32=((($31)+(1))|0);
      $__i=$32;
      label = 9; break;
    case 12: 
      var $34=$2;
      var $35=((($34)>>>0))%(32);
      var $36=1 << $35;
      var $37=$2;
      var $38=Math.floor(((($37)>>>0))/(32));
      var $39=(($check)|0);
      var $40=(($39+($38<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 | $36;
      HEAP32[(($40)>>2)]=$42;
      var $43=$2;
      var $44=((($43)+(1))|0);
      var $45=_select($44, $check, 0, 0, $tout);
      $selrv=$45;
      var $46=$selrv;
      var $47=(($46)|0)==-1;
      if ($47) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $49=___errno_location();
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0)==4;
      if ($51) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $53=___errno_location();
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54)|0)==11;
      if ($55) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 22; break;
    case 16: 
      label = 21; break;
    case 17: 
      var $59=$selrv;
      var $60=(($59)|0)==0;
      if ($60) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $62=$cnt;
      var $63=(($62)|0) >= 5;
      if ($63) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=0;
      label = 38; break;
    case 20: 
      label = 23; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $68=$cnt;
      var $69=((($68)+(1))|0);
      $cnt=$69;
      label = 8; break;
    case 23: 
      var $71=$2;
      var $72=_ioctl($71, 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$t,tempInt));
      label = 24; break;
    case 24: 
      var $74=HEAP32[(($t)>>2)];
      var $75=(($74)|0) > 0;
      if ($75) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $77=HEAP32[(($t)>>2)];
      var $78=$4;
      var $79=(($77)>>>0) < (($78)>>>0);
      if ($79) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $81=HEAP32[(($t)>>2)];
      $4=$81;
      var $82=$4;
      $rn=$82;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $86=$2;
      var $87=$3;
      var $88=$4;
      var $89=_read($86, $87, $88);
      $rv=$89;
      if ((($89)|0) == -1) {
        label = 30; break;
      }
      else if ((($89)|0) == 0) {
        label = 33; break;
      }
      else {
      label = 34; break;
      }
      
    case 30: 
      var $91=___errno_location();
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0)==4;
      if ($93) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 36; break;
    case 32: 
      $1=-1;
      label = 38; break;
    case 33: 
      var $97=$rn;
      var $98=$4;
      var $99=((($97)-($98))|0);
      $1=$99;
      label = 38; break;
    case 34: 
      var $101=$rv;
      var $102=$4;
      var $103=((($102)-($101))|0);
      $4=$103;
      var $104=$3;
      var $105=$rv;
      var $106=(($104+$105)|0);
      $3=$106;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $109=$4;
      var $110=(($109)>>>0) > 0;
      if ($110) { label = 29; break; } else { label = 37; break; }
    case 37: 
      var $112=$rn;
      $1=$112;
      label = 38; break;
    case 38: 
      var $114=$1;
      STACKTOP = __stackBase__;
      return $114;
    default: assert(0, "bad label: " + label);
  }
}
_sread["X"]=1;

function _file_pipe2file($ms, $fd, $startbuf, $nbytes) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4096)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $buf=__stackBase__;
      var $r;
      var $tfd;
      var $te;
      $2=$ms;
      $3=$fd;
      $4=$startbuf;
      $5=$nbytes;
      var $6=(($buf)|0);
      var $7=_strlcpy($6, ((5267168)|0), 4096);
      var $8=(($buf)|0);
      var $9=_mkstemp($8);
      $tfd=$9;
      var $10=___errno_location();
      var $11=HEAP32[(($10)>>2)];
      $te=$11;
      var $12=(($buf)|0);
      var $13=_unlink($12);
      var $14=$te;
      var $15=___errno_location();
      HEAP32[(($15)>>2)]=$14;
      var $16=$tfd;
      var $17=(($16)|0)==-1;
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$2;
      var $20=___errno_location();
      var $21=HEAP32[(($20)>>2)];
      _file_error($19, $21, ((5266008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 21; break;
    case 4: 
      var $23=$tfd;
      var $24=$4;
      var $25=$5;
      var $26=_swrite($23, $24, $25);
      var $27=$5;
      var $28=(($26)|0)!=(($27)|0);
      if ($28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $r=1;
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $32=$3;
      var $33=(($buf)|0);
      var $34=_sread($32, $33, 4096, 1);
      $r=$34;
      var $35=(($34)|0) > 0;
      if ($35) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $37=$tfd;
      var $38=(($buf)|0);
      var $39=$r;
      var $40=_swrite($37, $38, $39);
      var $41=$r;
      var $42=(($40)|0)!=(($41)|0);
      if ($42) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      label = 7; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $47=$r;
      if ((($47)|0) == -1) {
        label = 13; break;
      }
      else if ((($47)|0) == 0) {
        label = 14; break;
      }
      else {
      label = 15; break;
      }
      
    case 13: 
      var $49=$2;
      var $50=___errno_location();
      var $51=HEAP32[(($50)>>2)];
      _file_error($49, $51, ((5264868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 21; break;
    case 14: 
      label = 16; break;
    case 15: 
      var $54=$2;
      var $55=___errno_location();
      var $56=HEAP32[(($55)>>2)];
      _file_error($54, $56, ((5263692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 21; break;
    case 16: 
      var $58=$tfd;
      var $59=$3;
      var $60=_dup2($58, $59);
      $3=$60;
      var $61=(($60)|0)==-1;
      if ($61) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $63=$2;
      var $64=___errno_location();
      var $65=HEAP32[(($64)>>2)];
      _file_error($63, $65, ((5262608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 21; break;
    case 18: 
      var $67=$tfd;
      var $68=_close($67);
      var $69=$3;
      var $70=_lseek($69, 0, 0);
      var $71=(($70)|0)==-1;
      if ($71) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $73=$2;
      _file_badseek($73);
      $1=-1;
      label = 21; break;
    case 20: 
      var $75=$3;
      $1=$75;
      label = 21; break;
    case 21: 
      var $77=$1;
      STACKTOP = __stackBase__;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
_file_pipe2file["X"]=1;

function _swrite($fd, $buf, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rv;
      var $rn;
      $2=$fd;
      $3=$buf;
      $4=$n;
      var $5=$4;
      $rn=$5;
      label = 3; break;
    case 3: 
      var $7=$2;
      var $8=$3;
      var $9=$4;
      var $10=_write($7, $8, $9);
      $rv=$10;
      if ((($10)|0) == -1) {
        label = 4; break;
      }
      else {
      label = 7; break;
      }
      
    case 4: 
      var $12=___errno_location();
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)==4;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 9; break;
    case 6: 
      $1=-1;
      label = 11; break;
    case 7: 
      var $18=$rv;
      var $19=$4;
      var $20=((($19)-($18))|0);
      $4=$20;
      var $21=$3;
      var $22=$rv;
      var $23=(($21+$22)|0);
      $3=$23;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $26=$4;
      var $27=(($26)>>>0) > 0;
      if ($27) { label = 3; break; } else { label = 10; break; }
    case 10: 
      var $29=$rn;
      $1=$29;
      label = 11; break;
    case 11: 
      var $31=$1;

      return $31;
    default: assert(0, "bad label: " + label);
  }
}


function _uncompressgzipped($ms, $old, $newch, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $flg;
      var $data_start;
      var $z=__stackBase__;
      var $rc;
      $2=$ms;
      $3=$old;
      $4=$newch;
      $5=$n;
      var $6=$3;
      var $7=(($6+3)|0);
      var $8=HEAP8[($7)];
      $flg=$8;
      $data_start=10;
      var $9=$flg;
      var $10=(($9)&255);
      var $11=$10 & 4;
      var $12=(($11)|0)!=0;
      if ($12) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $14=$data_start;
      var $15=((($14)+(1))|0);
      var $16=$5;
      var $17=(($15)>>>0) >= (($16)>>>0);
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 32; break;
    case 5: 
      var $20=$data_start;
      var $21=$3;
      var $22=(($21+$20)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&255);
      var $25=((($24)+(2))|0);
      var $26=$data_start;
      var $27=((($26)+(1))|0);
      var $28=$3;
      var $29=(($28+$27)|0);
      var $30=HEAP8[($29)];
      var $31=(($30)&255);
      var $32=((($31<<8))|0);
      var $33=((($25)+($32))|0);
      var $34=$data_start;
      var $35=((($34)+($33))|0);
      $data_start=$35;
      label = 6; break;
    case 6: 
      var $37=$flg;
      var $38=(($37)&255);
      var $39=$38 & 8;
      var $40=(($39)|0)!=0;
      if ($40) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $43=$data_start;
      var $44=$5;
      var $45=(($43)>>>0) < (($44)>>>0);
      if ($45) { label = 9; break; } else { var $54 = 0;label = 10; break; }
    case 9: 
      var $47=$data_start;
      var $48=$3;
      var $49=(($48+$47)|0);
      var $50=HEAP8[($49)];
      var $51=(($50)&255);
      var $52=(($51)|0)!=0;
      var $54 = $52;label = 10; break;
    case 10: 
      var $54;
      if ($54) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $56=$data_start;
      var $57=((($56)+(1))|0);
      $data_start=$57;
      label = 8; break;
    case 12: 
      var $59=$data_start;
      var $60=((($59)+(1))|0);
      $data_start=$60;
      label = 13; break;
    case 13: 
      var $62=$flg;
      var $63=(($62)&255);
      var $64=$63 & 16;
      var $65=(($64)|0)!=0;
      if ($65) { label = 14; break; } else { label = 20; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $68=$data_start;
      var $69=$5;
      var $70=(($68)>>>0) < (($69)>>>0);
      if ($70) { label = 16; break; } else { var $79 = 0;label = 17; break; }
    case 16: 
      var $72=$data_start;
      var $73=$3;
      var $74=(($73+$72)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=(($76)|0)!=0;
      var $79 = $77;label = 17; break;
    case 17: 
      var $79;
      if ($79) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $81=$data_start;
      var $82=((($81)+(1))|0);
      $data_start=$82;
      label = 15; break;
    case 19: 
      var $84=$data_start;
      var $85=((($84)+(1))|0);
      $data_start=$85;
      label = 20; break;
    case 20: 
      var $87=$flg;
      var $88=(($87)&255);
      var $89=$88 & 2;
      var $90=(($89)|0)!=0;
      if ($90) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $92=$data_start;
      var $93=((($92)+(2))|0);
      $data_start=$93;
      label = 22; break;
    case 22: 
      var $95=$data_start;
      var $96=$5;
      var $97=(($95)>>>0) >= (($96)>>>0);
      if ($97) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $1=0;
      label = 32; break;
    case 24: 
      var $100=_malloc(262145);
      var $101=$4;
      HEAP32[(($101)>>2)]=$100;
      var $102=(($100)|0)==0;
      if ($102) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $1=0;
      label = 32; break;
    case 26: 
      var $105=$3;
      var $106=$data_start;
      var $107=(($105+$106)|0);
      var $108=$data_start;
      var $109=$3;
      var $110=(($109+$108)|0);
      var $111=HEAP8[($110)];
      var $112=(($111)&255);
      var $113=_strchr($107, $112);
      var $114=(($z)|0);
      HEAP32[(($114)>>2)]=$113;
      var $115=$5;
      var $116=$data_start;
      var $117=((($115)-($116))|0);
      var $118=(($z+4)|0);
      HEAP32[(($118)>>2)]=$117;
      var $119=$4;
      var $120=HEAP32[(($119)>>2)];
      var $121=(($z+12)|0);
      HEAP32[(($121)>>2)]=$120;
      var $122=(($z+16)|0);
      HEAP32[(($122)>>2)]=262144;
      var $123=(($z+32)|0);
      HEAP32[(($123)>>2)]=0;
      var $124=(($z+36)|0);
      HEAP32[(($124)>>2)]=0;
      var $125=(($z+40)|0);
      HEAP32[(($125)>>2)]=0;
      var $126=_inflateInit2_($z, -15, ((5273296)|0), 56);
      $rc=$126;
      var $127=$rc;
      var $128=(($127)|0)!=0;
      if ($128) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $130=$2;
      var $131=(($z+24)|0);
      var $132=HEAP32[(($131)>>2)];
      _file_error($130, 0, ((5272680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$132,tempInt));
      $1=0;
      label = 32; break;
    case 28: 
      var $134=_inflate($z, 2);
      $rc=$134;
      var $135=$rc;
      var $136=(($135)|0)!=0;
      if ($136) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $138=$rc;
      var $139=(($138)|0)!=1;
      if ($139) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $141=$2;
      var $142=(($z+24)|0);
      var $143=HEAP32[(($142)>>2)];
      _file_error($141, 0, ((5272680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$143,tempInt));
      $1=0;
      label = 32; break;
    case 31: 
      var $145=(($z+20)|0);
      var $146=HEAP32[(($145)>>2)];
      $5=$146;
      var $147=_inflateEnd($z);
      var $148=$5;
      var $149=$4;
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+$148)|0);
      HEAP8[($151)]=0;
      var $152=$5;
      $1=$152;
      label = 32; break;
    case 32: 
      var $154=$1;
      STACKTOP = __stackBase__;
      return $154;
    default: assert(0, "bad label: " + label);
  }
}
_uncompressgzipped["X"]=1;

function _uncompressbuf($ms, $fd, $method, $old, $newch, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $fdin=__stackBase__;
      var $fdout=(__stackBase__)+(8);
      var $r;
      var $pid;
      $2=$ms;
      $3=$fd;
      $4=$method;
      $5=$old;
      $6=$newch;
      $7=$n;
      var $8=$4;
      var $9=(($8)|0)==2;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$2;
      var $12=$5;
      var $13=$6;
      var $14=$7;
      var $15=_uncompressgzipped($11, $12, $13, $14);
      $1=$15;
      label = 42; break;
    case 4: 
      var $17=HEAP32[((_stdout)>>2)];
      var $18=_fflush($17);
      var $19=HEAP32[((_stderr)>>2)];
      var $20=_fflush($19);
      var $21=$3;
      var $22=(($21)|0)!=-1;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $24=(($fdin)|0);
      var $25=_pipe($24);
      var $26=(($25)|0)==-1;
      if ($26) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $28=(($fdout)|0);
      var $29=_pipe($28);
      var $30=(($29)|0)==-1;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$2;
      var $33=___errno_location();
      var $34=HEAP32[(($33)>>2)];
      _file_error($32, $34, ((5261784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 42; break;
    case 8: 
      var $36=_fork();
      $pid=$36;
      if ((($36)|0) == 0) {
        label = 9; break;
      }
      else if ((($36)|0) == -1) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
      
    case 9: 
      var $38=_close(0);
      var $39=$3;
      var $40=(($39)|0)!=-1;
      if ($40) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $42=$3;
      var $43=_dup($42);
      var $44=(($43)|0)==-1;
      if ($44) { label = 11; break; } else { label = 12; break; }
    case 11: 
      __exit(1);
      throw "Reached an unreachable!"
    case 12: 
      var $47=_lseek(0, 0, 0);
      label = 16; break;
    case 13: 
      var $49=(($fdin)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=_dup($50);
      var $52=(($51)|0)==-1;
      if ($52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      __exit(1);
      throw "Reached an unreachable!"
    case 15: 
      var $55=(($fdin)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=_close($56);
      var $58=(($fdin+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=_close($59);
      label = 16; break;
    case 16: 
      var $62=_close(1);
      var $63=(($fdout+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=_dup($64);
      var $66=(($65)|0)==-1;
      if ($66) { label = 17; break; } else { label = 18; break; }
    case 17: 
      __exit(1);
      throw "Reached an unreachable!"
    case 18: 
      var $69=(($fdout)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=_close($70);
      var $72=(($fdout+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=_close($73);
      var $75=$4;
      var $76=((5258572+($75)*(28))|0);
      var $77=(($76+24)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|0)!=0;
      if ($79) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $81=_close(2);
      label = 20; break;
    case 20: 
      var $83=$4;
      var $84=((5258572+($83)*(28))|0);
      var $85=(($84+12)|0);
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$4;
      var $89=((5258572+($88)*(28))|0);
      var $90=(($89+12)|0);
      var $91=(($90)|0);
      var $92=$91;
      var $93=$92;
      var $94=_execl($87, $93);
      _exit(1);
      throw "Reached an unreachable!"
    case 21: 
      var $96=$2;
      var $97=___errno_location();
      var $98=HEAP32[(($97)>>2)];
      _file_error($96, $98, ((5260868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 42; break;
    case 22: 
      var $100=(($fdout+4)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=_close($101);
      var $103=$3;
      var $104=(($103)|0)==-1;
      if ($104) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $106=(($fdin)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=_close($107);
      var $109=_fork();
      if ((($109)|0) == 0) {
        label = 24; break;
      }
      else if ((($109)|0) == -1) {
        label = 27; break;
      }
      else {
      label = 28; break;
      }
      
    case 24: 
      var $111=(($fdout)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=_close($112);
      var $114=(($fdin+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$5;
      var $117=$7;
      var $118=_swrite($115, $116, $117);
      var $119=$7;
      var $120=(($118)|0)!=(($119)|0);
      if ($120) { label = 25; break; } else { label = 26; break; }
    case 25: 
      _exit(1);
      throw "Reached an unreachable!"
    case 26: 
      _exit(0);
      throw "Reached an unreachable!"
    case 27: 
      _exit(1);
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      var $126=(($fdin+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=_close($127);
      var $129=(($fdin+4)|0);
      HEAP32[(($129)>>2)]=-1;
      label = 30; break;
    case 30: 
      var $131=_malloc(262145);
      var $132=$6;
      HEAP32[(($132)>>2)]=$131;
      var $133=(($131)|0)==0;
      if ($133) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $7=0;
      label = 36; break;
    case 32: 
      var $136=(($fdout)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$6;
      var $139=HEAP32[(($138)>>2)];
      var $140=_sread($137, $139, 262144, 0);
      $r=$140;
      var $141=(($140)|0) <= 0;
      if ($141) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $143=$6;
      var $144=HEAP32[(($143)>>2)];
      _free($144);
      $7=0;
      var $145=$6;
      var $146=(($145)|0);
      HEAP32[(($146)>>2)]=0;
      label = 36; break;
    case 34: 
      var $148=$r;
      $7=$148;
      label = 35; break;
    case 35: 
      var $150=$7;
      var $151=$6;
      var $152=HEAP32[(($151)>>2)];
      var $153=(($152+$150)|0);
      HEAP8[($153)]=0;
      label = 36; break;
    case 36: 
      var $155=(($fdin+4)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156)|0)!=-1;
      if ($157) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $159=(($fdin+4)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=_close($160);
      label = 38; break;
    case 38: 
      var $163=(($fdout)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=_close($164);
      label = 39; break;
    case 39: 
      var $167=$pid;
      var $168=_wait($167, 0, 1);
      var $169=(($168)|0)!=-1;
      if ($169) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 39; break;
    case 41: 
      var $172=(($fdin)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=_close($173);
      var $175=$7;
      $1=$175;
      label = 42; break;
    case 42: 
      var $177=$1;
      STACKTOP = __stackBase__;
      return $177;
    default: assert(0, "bad label: " + label);
  }
}
_uncompressbuf["X"]=1;

function _getu16($swap, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $retval=__stackBase__;
      var $tmpval=(__stackBase__)+(4);
      $2=$swap;
      $3=$value;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$3;
      var $8=$tmpval;
      HEAP16[(($8)>>1)]=$7;
      var $9=$tmpval;
      var $10=(($9+1)|0);
      var $11=HEAP8[($10)];
      var $12=$retval;
      var $13=(($12)|0);
      HEAP8[($13)]=$11;
      var $14=$tmpval;
      var $15=(($14)|0);
      var $16=HEAP8[($15)];
      var $17=$retval;
      var $18=(($17+1)|0);
      HEAP8[($18)]=$16;
      var $19=$retval;
      var $20=HEAP16[(($19)>>1)];
      $1=$20;
      label = 5; break;
    case 4: 
      var $22=$3;
      $1=$22;
      label = 5; break;
    case 5: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}


function _file_is_tar($ms, $buf, $nbytes) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tar;
      var $mime;
      $2=$ms;
      $3=$buf;
      $4=$nbytes;
      var $5=$2;
      var $6=(($5+32)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1040;
      $mime=$8;
      var $9=$2;
      var $10=(($9+32)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 2048;
      var $13=(($12)|0)!=0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 13; break;
    case 4: 
      var $16=$3;
      var $17=$4;
      var $18=_is_tar($16, $17);
      $tar=$18;
      var $19=$tar;
      var $20=(($19)|0) < 1;
      if ($20) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $22=$tar;
      var $23=(($22)|0) > 3;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 13; break;
    case 7: 
      var $26=$2;
      var $27=$mime;
      var $28=(($27)|0)!=0;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $36 = ((5272252)|0);label = 10; break;
    case 9: 
      var $31=$tar;
      var $32=((($31)-(1))|0);
      var $33=((5244652+($32<<5))|0);
      var $34=(($33)|0);
      var $36 = $34;label = 10; break;
    case 10: 
      var $36;
      var $37=_file_printf($26, ((5269760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$36,tempInt));
      var $38=(($37)|0)==-1;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=-1;
      label = 13; break;
    case 12: 
      $1=1;
      label = 13; break;
    case 13: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
_file_is_tar["X"]=1;

function _is_tar($buf, $nbytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $header;
      var $i;
      var $sum;
      var $recsum;
      var $p;
      $2=$buf;
      $3=$nbytes;
      var $4=$2;
      var $5=$4;
      $header=$5;
      var $6=$3;
      var $7=(($6)>>>0) < 512;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 17; break;
    case 4: 
      var $10=$header;
      var $11=$10;
      var $12=(($11+148)|0);
      var $13=(($12)|0);
      var $14=_from_oct(8, $13);
      $recsum=$14;
      $sum=0;
      var $15=$header;
      var $16=$15;
      var $17=(($16)|0);
      $p=$17;
      $i=512;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $20=((($19)-(1))|0);
      $i=$20;
      var $21=(($20)|0) >= 0;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$p;
      var $24=(($23+1)|0);
      $p=$24;
      var $25=HEAP8[($23)];
      var $26=(($25)&255);
      var $27=$sum;
      var $28=((($27)+($26))|0);
      $sum=$28;
      label = 5; break;
    case 7: 
      $i=8;
      label = 8; break;
    case 8: 
      var $31=$i;
      var $32=((($31)-(1))|0);
      $i=$32;
      var $33=(($32)|0) >= 0;
      if ($33) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $35=$i;
      var $36=$header;
      var $37=$36;
      var $38=(($37+148)|0);
      var $39=(($38+$35)|0);
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=$sum;
      var $43=((($42)-($41))|0);
      $sum=$43;
      label = 8; break;
    case 10: 
      var $45=$sum;
      var $46=((($45)+(256))|0);
      $sum=$46;
      var $47=$sum;
      var $48=$recsum;
      var $49=(($47)|0)!=(($48)|0);
      if ($49) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=0;
      label = 17; break;
    case 12: 
      var $52=$header;
      var $53=$52;
      var $54=(($53+257)|0);
      var $55=(($54)|0);
      var $56=_strcmp($55, ((5269076)|0));
      var $57=(($56)|0)==0;
      if ($57) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=3;
      label = 17; break;
    case 14: 
      var $60=$header;
      var $61=$60;
      var $62=(($61+257)|0);
      var $63=(($62)|0);
      var $64=_strcmp($63, ((5267160)|0));
      var $65=(($64)|0)==0;
      if ($65) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=2;
      label = 17; break;
    case 16: 
      $1=1;
      label = 17; break;
    case 17: 
      var $69=$1;

      return $69;
    default: assert(0, "bad label: " + label);
  }
}
_is_tar["X"]=1;

function _from_oct($digs, $where) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $value;
      $2=$digs;
      $3=$where;
      label = 3; break;
    case 3: 
      var $5=$3;
      var $6=HEAP8[($5)];
      var $7=(($6)&255);
      var $8=_isspace($7);
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $11=$3;
      var $12=(($11+1)|0);
      $3=$12;
      var $13=$2;
      var $14=((($13)-(1))|0);
      $2=$14;
      var $15=(($14)|0) <= 0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 19; break;
    case 6: 
      label = 3; break;
    case 7: 
      $value=0;
      label = 8; break;
    case 8: 
      var $20=$2;
      var $21=(($20)|0) > 0;
      if ($21) { label = 9; break; } else { var $35 = 0;label = 12; break; }
    case 9: 
      var $23=$3;
      var $24=HEAP8[($23)];
      var $25=(($24 << 24) >> 24);
      var $26=(($25)|0) >= 48;
      if ($26) { label = 10; break; } else { var $33 = 0;label = 11; break; }
    case 10: 
      var $28=$3;
      var $29=HEAP8[($28)];
      var $30=(($29 << 24) >> 24);
      var $31=(($30)|0) <= 55;
      var $33 = $31;label = 11; break;
    case 11: 
      var $33;
      var $35 = $33;label = 12; break;
    case 12: 
      var $35;
      if ($35) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $37=$value;
      var $38=$37 << 3;
      var $39=$3;
      var $40=(($39+1)|0);
      $3=$40;
      var $41=HEAP8[($39)];
      var $42=(($41 << 24) >> 24);
      var $43=((($42)-(48))|0);
      var $44=$38 | $43;
      $value=$44;
      var $45=$2;
      var $46=((($45)-(1))|0);
      $2=$46;
      label = 8; break;
    case 14: 
      var $48=$2;
      var $49=(($48)|0) > 0;
      if ($49) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $51=$3;
      var $52=HEAP8[($51)];
      var $53=(($52 << 24) >> 24);
      var $54=(($53)|0)!=0;
      if ($54) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $56=$3;
      var $57=HEAP8[($56)];
      var $58=(($57)&255);
      var $59=_isspace($58);
      var $60=(($59)|0)!=0;
      if ($60) { label = 18; break; } else { label = 17; break; }
    case 17: 
      $1=-1;
      label = 19; break;
    case 18: 
      var $63=$value;
      $1=$63;
      label = 19; break;
    case 19: 
      var $65=$1;

      return $65;
    default: assert(0, "bad label: " + label);
  }
}
_from_oct["X"]=1;

function _file_tryelf($ms, $fd, $buf, $nbytes) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 196)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $u=__stackBase__;
      var $clazz;
      var $swap;
      var $st=(__stackBase__)+(4);
      var $fsize;
      var $flags=(__stackBase__)+(76);
      var $elf32hdr=(__stackBase__)+(80);
      var $elf64hdr=(__stackBase__)+(132);
      var $type;
      $2=$ms;
      $3=$fd;
      $4=$buf;
      $5=$nbytes;
      HEAP32[(($flags)>>2)]=0;
      var $6=$2;
      var $7=(($6+32)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 3088;
      var $10=(($9)|0)!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 66; break;
    case 4: 
      var $13=$4;
      var $14=(($13)|0);
      var $15=HEAP8[($14)];
      var $16=(($15)&255);
      var $17=(($16)|0)!=127;
      if ($17) { label = 9; break; } else { label = 5; break; }
    case 5: 
      var $19=$4;
      var $20=(($19+1)|0);
      var $21=HEAP8[($20)];
      var $22=(($21)&255);
      var $23=(($22)|0)!=69;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$4;
      var $26=(($25+1)|0);
      var $27=HEAP8[($26)];
      var $28=(($27)&255);
      var $29=(($28)|0)!=79;
      if ($29) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $31=$4;
      var $32=(($31+2)|0);
      var $33=HEAP8[($32)];
      var $34=(($33)&255);
      var $35=(($34)|0)!=76;
      if ($35) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $37=$4;
      var $38=(($37+3)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&255);
      var $41=(($40)|0)!=70;
      if ($41) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 66; break;
    case 10: 
      var $44=$3;
      var $45=_lseek($44, 0, 0);
      var $46=(($45)|0)==-1;
      if ($46) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $48=___errno_location();
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|0)==29;
      if ($50) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $52=$2;
      var $53=$3;
      var $54=$4;
      var $55=$5;
      var $56=_file_pipe2file($52, $53, $54, $55);
      $3=$56;
      label = 13; break;
    case 13: 
      var $58=$3;
      var $59=_fstat($58, $st);
      var $60=(($59)|0)==-1;
      if ($60) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $62=$2;
      _file_badread($62);
      $1=-1;
      label = 66; break;
    case 15: 
      var $64=(($st+28)|0);
      var $65=HEAP32[(($64)>>2)];
      $fsize=$65;
      var $66=$4;
      var $67=(($66+4)|0);
      var $68=HEAP8[($67)];
      var $69=(($68)&255);
      $clazz=$69;
      var $70=$clazz;
      if ((($70)|0) == 1) {
        label = 16; break;
      }
      else if ((($70)|0) == 2) {
        label = 30; break;
      }
      else {
      label = 62; break;
      }
      
    case 16: 
      var $72=$5;
      var $73=(($72)>>>0) <= 52;
      if ($73) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $1=0;
      label = 66; break;
    case 18: 
      var $76=$u;
      HEAP32[(($76)>>2)]=1;
      var $77=$elf32hdr;
      var $78=$4;
      assert(52 % 1 === 0);_memcpy($77, $78, 52);
      var $79=$u;
      var $80=(($79+3)|0);
      var $81=HEAP8[($80)];
      var $82=(($81 << 24) >> 24);
      var $83=((($82)+(1))|0);
      var $84=(($elf32hdr)|0);
      var $85=(($84+5)|0);
      var $86=HEAP8[($85)];
      var $87=(($86)&255);
      var $88=(($83)|0)!=(($87)|0);
      var $89=(($88)&1);
      $swap=$89;
      var $90=$swap;
      var $91=(($elf32hdr+16)|0);
      var $92=HEAP16[(($91)>>1)];
      var $93=_getu16($90, $92);
      $type=$93;
      var $94=$type;
      var $95=(($94)&65535);
      if ((($95)|0) == 4) {
        label = 19; break;
      }
      else if ((($95)|0) == 2 || (($95)|0) == 3) {
        label = 22; break;
      }
      else if ((($95)|0) == 1) {
        label = 25; break;
      }
      else {
      label = 28; break;
      }
      
    case 19: 
      var $97=HEAP32[(($flags)>>2)];
      var $98=$97 | 16;
      HEAP32[(($flags)>>2)]=$98;
      var $99=$2;
      var $100=$clazz;
      var $101=$swap;
      var $102=$3;
      var $103=$swap;
      var $104=(($elf32hdr+28)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=_getu32($103, $105);
      var $107=$swap;
      var $108=(($elf32hdr+44)|0);
      var $109=HEAP16[(($108)>>1)];
      var $110=_getu16($107, $109);
      var $111=(($110)&65535);
      var $112=$swap;
      var $113=(($elf32hdr+42)|0);
      var $114=HEAP16[(($113)>>1)];
      var $115=_getu16($112, $114);
      var $116=(($115)&65535);
      var $117=$fsize;
      var $118=_dophn_core($99, $100, $101, $102, $106, $111, $116, $117, $flags);
      var $119=(($118)|0)==-1;
      if ($119) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=-1;
      label = 66; break;
    case 21: 
      label = 29; break;
    case 22: 
      var $123=$2;
      var $124=$clazz;
      var $125=$swap;
      var $126=$3;
      var $127=$swap;
      var $128=(($elf32hdr+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=_getu32($127, $129);
      var $131=$swap;
      var $132=(($elf32hdr+44)|0);
      var $133=HEAP16[(($132)>>1)];
      var $134=_getu16($131, $133);
      var $135=(($134)&65535);
      var $136=$swap;
      var $137=(($elf32hdr+42)|0);
      var $138=HEAP16[(($137)>>1)];
      var $139=_getu16($136, $138);
      var $140=(($139)&65535);
      var $141=$fsize;
      var $142=$swap;
      var $143=(($elf32hdr+48)|0);
      var $144=HEAP16[(($143)>>1)];
      var $145=_getu16($142, $144);
      var $146=(($145)&65535);
      var $147=_dophn_exec($123, $124, $125, $126, $130, $135, $140, $141, $flags, $146);
      var $148=(($147)|0)==-1;
      if ($148) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $1=-1;
      label = 66; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $152=$2;
      var $153=$clazz;
      var $154=$swap;
      var $155=$3;
      var $156=$swap;
      var $157=(($elf32hdr+32)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=_getu32($156, $158);
      var $160=$swap;
      var $161=(($elf32hdr+48)|0);
      var $162=HEAP16[(($161)>>1)];
      var $163=_getu16($160, $162);
      var $164=(($163)&65535);
      var $165=$swap;
      var $166=(($elf32hdr+46)|0);
      var $167=HEAP16[(($166)>>1)];
      var $168=_getu16($165, $167);
      var $169=(($168)&65535);
      var $170=$fsize;
      var $171=$swap;
      var $172=(($elf32hdr+18)|0);
      var $173=HEAP16[(($172)>>1)];
      var $174=_getu16($171, $173);
      var $175=(($174)&65535);
      var $176=_doshn($152, $153, $154, $155, $159, $164, $169, $170, $flags, $175);
      var $177=(($176)|0)==-1;
      if ($177) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=-1;
      label = 66; break;
    case 27: 
      label = 29; break;
    case 28: 
      label = 29; break;
    case 29: 
      $1=1;
      label = 66; break;
    case 30: 
      var $183=$5;
      var $184=(($183)>>>0) <= 64;
      if ($184) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $1=0;
      label = 66; break;
    case 32: 
      var $187=$u;
      HEAP32[(($187)>>2)]=1;
      var $188=$elf64hdr;
      var $189=$4;
      assert(64 % 1 === 0);_memcpy($188, $189, 64);
      var $190=$u;
      var $191=(($190+3)|0);
      var $192=HEAP8[($191)];
      var $193=(($192 << 24) >> 24);
      var $194=((($193)+(1))|0);
      var $195=(($elf64hdr)|0);
      var $196=(($195+5)|0);
      var $197=HEAP8[($196)];
      var $198=(($197)&255);
      var $199=(($194)|0)!=(($198)|0);
      var $200=(($199)&1);
      $swap=$200;
      var $201=$swap;
      var $202=(($elf64hdr+16)|0);
      var $203=HEAP16[(($202)>>1)];
      var $204=_getu16($201, $203);
      $type=$204;
      var $205=$type;
      var $206=(($205)&65535);
      if ((($206)|0) == 4) {
        label = 33; break;
      }
      else if ((($206)|0) == 2 || (($206)|0) == 3) {
        label = 42; break;
      }
      else if ((($206)|0) == 1) {
        label = 51; break;
      }
      else {
      label = 60; break;
      }
      
    case 33: 
      var $208=HEAP32[(($flags)>>2)];
      var $209=$208 | 16;
      HEAP32[(($flags)>>2)]=$209;
      var $210=$2;
      var $211=$clazz;
      var $212=$swap;
      var $213=$3;
      var $214=$swap;
      var $215=(($214)|0)!=0;
      if ($215) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $217=$swap;
      var $218=(($elf64hdr+32)|0);
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=_getu32($217, $220);
      var $222$0=$221;
      var $222$1=0;
      var $223$0=0;
      var $223$1=$222$0;
      var $232$1 = $223$1;var $232$0 = $223$0;label = 36; break;
    case 35: 
      var $225=$swap;
      var $226=(($elf64hdr+32)|0);
      var $227=(($226)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=_getu32($225, $228);
      var $230$0=$229;
      var $230$1=0;
      var $232$1 = $230$1;var $232$0 = $230$0;label = 36; break;
    case 36: 
      var $232$0;
      var $232$1;
      var $233=$swap;
      var $234=(($233)|0)!=0;
      if ($234) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $236=$swap;
      var $237=(($elf64hdr+32)|0);
      var $238=(($237+4)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=_getu32($236, $239);
      var $241$0=$240;
      var $241$1=0;
      var $251$1 = $241$1;var $251$0 = $241$0;label = 39; break;
    case 38: 
      var $243=$swap;
      var $244=(($elf64hdr+32)|0);
      var $245=(($244+4)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=_getu32($243, $246);
      var $248$0=$247;
      var $248$1=0;
      var $249$0=0;
      var $249$1=$248$0;
      var $251$1 = $249$1;var $251$0 = $249$0;label = 39; break;
    case 39: 
      var $251$0;
      var $251$1;
      var $252$0 = (i64Math.add($232$0,$232$1,$251$0,$251$1),HEAP32[((tempDoublePtr)>>2)]); var $252$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $253$0=$252$0;
      var $253=$253$0;
      var $254=$swap;
      var $255=(($elf64hdr+56)|0);
      var $256=HEAP16[(($255)>>1)];
      var $257=_getu16($254, $256);
      var $258=(($257)&65535);
      var $259=$swap;
      var $260=(($elf64hdr+54)|0);
      var $261=HEAP16[(($260)>>1)];
      var $262=_getu16($259, $261);
      var $263=(($262)&65535);
      var $264=$fsize;
      var $265=_dophn_core($210, $211, $212, $213, $253, $258, $263, $264, $flags);
      var $266=(($265)|0)==-1;
      if ($266) { label = 40; break; } else { label = 41; break; }
    case 40: 
      $1=-1;
      label = 66; break;
    case 41: 
      label = 61; break;
    case 42: 
      var $270=$2;
      var $271=$clazz;
      var $272=$swap;
      var $273=$3;
      var $274=$swap;
      var $275=(($274)|0)!=0;
      if ($275) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $277=$swap;
      var $278=(($elf64hdr+32)|0);
      var $279=(($278)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=_getu32($277, $280);
      var $282$0=$281;
      var $282$1=0;
      var $283$0=0;
      var $283$1=$282$0;
      var $292$1 = $283$1;var $292$0 = $283$0;label = 45; break;
    case 44: 
      var $285=$swap;
      var $286=(($elf64hdr+32)|0);
      var $287=(($286)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=_getu32($285, $288);
      var $290$0=$289;
      var $290$1=0;
      var $292$1 = $290$1;var $292$0 = $290$0;label = 45; break;
    case 45: 
      var $292$0;
      var $292$1;
      var $293=$swap;
      var $294=(($293)|0)!=0;
      if ($294) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $296=$swap;
      var $297=(($elf64hdr+32)|0);
      var $298=(($297+4)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=_getu32($296, $299);
      var $301$0=$300;
      var $301$1=0;
      var $311$1 = $301$1;var $311$0 = $301$0;label = 48; break;
    case 47: 
      var $303=$swap;
      var $304=(($elf64hdr+32)|0);
      var $305=(($304+4)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=_getu32($303, $306);
      var $308$0=$307;
      var $308$1=0;
      var $309$0=0;
      var $309$1=$308$0;
      var $311$1 = $309$1;var $311$0 = $309$0;label = 48; break;
    case 48: 
      var $311$0;
      var $311$1;
      var $312$0 = (i64Math.add($292$0,$292$1,$311$0,$311$1),HEAP32[((tempDoublePtr)>>2)]); var $312$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $313$0=$312$0;
      var $313=$313$0;
      var $314=$swap;
      var $315=(($elf64hdr+56)|0);
      var $316=HEAP16[(($315)>>1)];
      var $317=_getu16($314, $316);
      var $318=(($317)&65535);
      var $319=$swap;
      var $320=(($elf64hdr+54)|0);
      var $321=HEAP16[(($320)>>1)];
      var $322=_getu16($319, $321);
      var $323=(($322)&65535);
      var $324=$fsize;
      var $325=$swap;
      var $326=(($elf64hdr+60)|0);
      var $327=HEAP16[(($326)>>1)];
      var $328=_getu16($325, $327);
      var $329=(($328)&65535);
      var $330=_dophn_exec($270, $271, $272, $273, $313, $318, $323, $324, $flags, $329);
      var $331=(($330)|0)==-1;
      if ($331) { label = 49; break; } else { label = 50; break; }
    case 49: 
      $1=-1;
      label = 66; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $335=$2;
      var $336=$clazz;
      var $337=$swap;
      var $338=$3;
      var $339=$swap;
      var $340=(($339)|0)!=0;
      if ($340) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $342=$swap;
      var $343=(($elf64hdr+40)|0);
      var $344=(($343)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=_getu32($342, $345);
      var $347$0=$346;
      var $347$1=0;
      var $348$0=0;
      var $348$1=$347$0;
      var $357$1 = $348$1;var $357$0 = $348$0;label = 54; break;
    case 53: 
      var $350=$swap;
      var $351=(($elf64hdr+40)|0);
      var $352=(($351)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=_getu32($350, $353);
      var $355$0=$354;
      var $355$1=0;
      var $357$1 = $355$1;var $357$0 = $355$0;label = 54; break;
    case 54: 
      var $357$0;
      var $357$1;
      var $358=$swap;
      var $359=(($358)|0)!=0;
      if ($359) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $361=$swap;
      var $362=(($elf64hdr+40)|0);
      var $363=(($362+4)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=_getu32($361, $364);
      var $366$0=$365;
      var $366$1=0;
      var $376$1 = $366$1;var $376$0 = $366$0;label = 57; break;
    case 56: 
      var $368=$swap;
      var $369=(($elf64hdr+40)|0);
      var $370=(($369+4)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=_getu32($368, $371);
      var $373$0=$372;
      var $373$1=0;
      var $374$0=0;
      var $374$1=$373$0;
      var $376$1 = $374$1;var $376$0 = $374$0;label = 57; break;
    case 57: 
      var $376$0;
      var $376$1;
      var $377$0 = (i64Math.add($357$0,$357$1,$376$0,$376$1),HEAP32[((tempDoublePtr)>>2)]); var $377$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $378$0=$377$0;
      var $378=$378$0;
      var $379=$swap;
      var $380=(($elf64hdr+60)|0);
      var $381=HEAP16[(($380)>>1)];
      var $382=_getu16($379, $381);
      var $383=(($382)&65535);
      var $384=$swap;
      var $385=(($elf64hdr+58)|0);
      var $386=HEAP16[(($385)>>1)];
      var $387=_getu16($384, $386);
      var $388=(($387)&65535);
      var $389=$fsize;
      var $390=$swap;
      var $391=(($elf64hdr+18)|0);
      var $392=HEAP16[(($391)>>1)];
      var $393=_getu16($390, $392);
      var $394=(($393)&65535);
      var $395=_doshn($335, $336, $337, $338, $378, $383, $388, $389, $flags, $394);
      var $396=(($395)|0)==-1;
      if ($396) { label = 58; break; } else { label = 59; break; }
    case 58: 
      $1=-1;
      label = 66; break;
    case 59: 
      label = 61; break;
    case 60: 
      label = 61; break;
    case 61: 
      $1=1;
      label = 66; break;
    case 62: 
      var $402=$2;
      var $403=$clazz;
      var $404=_file_printf($402, ((5269668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$403,tempInt));
      var $405=(($404)|0)==-1;
      if ($405) { label = 63; break; } else { label = 64; break; }
    case 63: 
      $1=-1;
      label = 66; break;
    case 64: 
      label = 65; break;
    case 65: 
      $1=0;
      label = 66; break;
    case 66: 
      var $410=$1;
      STACKTOP = __stackBase__;
      return $410;
    default: assert(0, "bad label: " + label);
  }
}
_file_tryelf["X"]=1;

function _getu32($swap, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $retval=__stackBase__;
      var $tmpval=(__stackBase__)+(4);
      $2=$swap;
      $3=$value;
      var $4=$2;
      var $5=(($4)|0)!=0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$3;
      var $8=$tmpval;
      HEAP32[(($8)>>2)]=$7;
      var $9=$tmpval;
      var $10=(($9+3)|0);
      var $11=HEAP8[($10)];
      var $12=$retval;
      var $13=(($12)|0);
      HEAP8[($13)]=$11;
      var $14=$tmpval;
      var $15=(($14+2)|0);
      var $16=HEAP8[($15)];
      var $17=$retval;
      var $18=(($17+1)|0);
      HEAP8[($18)]=$16;
      var $19=$tmpval;
      var $20=(($19+1)|0);
      var $21=HEAP8[($20)];
      var $22=$retval;
      var $23=(($22+2)|0);
      HEAP8[($23)]=$21;
      var $24=$tmpval;
      var $25=(($24)|0);
      var $26=HEAP8[($25)];
      var $27=$retval;
      var $28=(($27+3)|0);
      HEAP8[($28)]=$26;
      var $29=$retval;
      var $30=HEAP32[(($29)>>2)];
      $1=$30;
      label = 5; break;
    case 4: 
      var $32=$3;
      $1=$32;
      label = 5; break;
    case 5: 
      var $34=$1;
      STACKTOP = __stackBase__;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}


function _dophn_core($ms, $clazz, $swap, $fd, $off, $num, $size, $fsize, $flags) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1112)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $ph32=__stackBase__;
      var $ph64=(__stackBase__)+(32);
      var $offset;
      var $nbuf=(__stackBase__)+(88);
      var $bufsize;
      $2=$ms;
      $3=$clazz;
      $4=$swap;
      $5=$fd;
      $6=$off;
      $7=$num;
      $8=$size;
      $9=$fsize;
      $10=$flags;
      var $11=$8;
      var $12=$3;
      var $13=(($12)|0)==1;
      var $14=$13 ? 32 : 56;
      var $15=(($11)|0)!=(($14)|0);
      if ($15) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $17=$2;
      var $18=_file_printf($17, ((5260928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $19=(($18)|0)==-1;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 74; break;
    case 5: 
      $1=0;
      label = 74; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=$7;
      var $25=(($24)|0)!=0;
      if ($25) { label = 8; break; } else { label = 73; break; }
    case 8: 
      var $27=$5;
      var $28=$6;
      var $29=_lseek($27, $28, 0);
      var $30=(($29)|0)==-1;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$2;
      _file_badseek($32);
      $1=-1;
      label = 74; break;
    case 10: 
      var $34=$5;
      var $35=$3;
      var $36=(($35)|0)==1;
      if ($36) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $38=$ph32;
      var $42 = $38;label = 13; break;
    case 12: 
      var $40=$ph64;
      var $42 = $40;label = 13; break;
    case 13: 
      var $42;
      var $43=$3;
      var $44=(($43)|0)==1;
      var $45=$44 ? 32 : 56;
      var $46=_read($34, $42, $45);
      var $47=(($46)|0)==-1;
      if ($47) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $49=$2;
      _file_badread($49);
      $1=-1;
      label = 74; break;
    case 15: 
      var $51=$8;
      var $52=$6;
      var $53=((($52)+($51))|0);
      $6=$53;
      var $54=$3;
      var $55=(($54)|0)==1;
      if ($55) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $57=$4;
      var $58=(($ph32+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=_getu32($57, $59);
      var $61$0=$60;
      var $61$1=0;
      var $103$1 = $61$1;var $103$0 = $61$0;label = 24; break;
    case 17: 
      var $63=$4;
      var $64=(($63)|0)!=0;
      if ($64) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $66=$4;
      var $67=(($ph64+8)|0);
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=_getu32($66, $69);
      var $71$0=$70;
      var $71$1=0;
      var $72$0=0;
      var $72$1=$71$0;
      var $81$1 = $72$1;var $81$0 = $72$0;label = 20; break;
    case 19: 
      var $74=$4;
      var $75=(($ph64+8)|0);
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=_getu32($74, $77);
      var $79$0=$78;
      var $79$1=0;
      var $81$1 = $79$1;var $81$0 = $79$0;label = 20; break;
    case 20: 
      var $81$0;
      var $81$1;
      var $82=$4;
      var $83=(($82)|0)!=0;
      if ($83) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $85=$4;
      var $86=(($ph64+8)|0);
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=_getu32($85, $88);
      var $90$0=$89;
      var $90$1=0;
      var $100$1 = $90$1;var $100$0 = $90$0;label = 23; break;
    case 22: 
      var $92=$4;
      var $93=(($ph64+8)|0);
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=_getu32($92, $95);
      var $97$0=$96;
      var $97$1=0;
      var $98$0=0;
      var $98$1=$97$0;
      var $100$1 = $98$1;var $100$0 = $98$0;label = 23; break;
    case 23: 
      var $100$0;
      var $100$1;
      var $101$0 = (i64Math.add($81$0,$81$1,$100$0,$100$1),HEAP32[((tempDoublePtr)>>2)]); var $101$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $103$1 = $101$1;var $103$0 = $101$0;label = 24; break;
    case 24: 
      var $103$0;
      var $103$1;
      var $104$0=$103$0;
      var $104=$104$0;
      var $105=$9;
      var $106=(($104)|0) > (($105)|0);
      if ($106) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 72; break;
    case 26: 
      var $109=$3;
      var $110=(($109)|0)==1;
      if ($110) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $112=$4;
      var $113=(($ph32)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=_getu32($112, $114);
      var $122 = $115;label = 29; break;
    case 28: 
      var $117=$4;
      var $118=(($ph64)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=_getu32($117, $119);
      var $122 = $120;label = 29; break;
    case 29: 
      var $122;
      var $123=(($122)|0)!=4;
      if ($123) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 72; break;
    case 31: 
      var $126=$5;
      var $127=$3;
      var $128=(($127)|0)==1;
      if ($128) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $130=$4;
      var $131=(($ph32+4)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=_getu32($130, $132);
      var $134$0=$133;
      var $134$1=0;
      var $176$1 = $134$1;var $176$0 = $134$0;label = 40; break;
    case 33: 
      var $136=$4;
      var $137=(($136)|0)!=0;
      if ($137) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $139=$4;
      var $140=(($ph64+8)|0);
      var $141=(($140)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=_getu32($139, $142);
      var $144$0=$143;
      var $144$1=0;
      var $145$0=0;
      var $145$1=$144$0;
      var $154$1 = $145$1;var $154$0 = $145$0;label = 36; break;
    case 35: 
      var $147=$4;
      var $148=(($ph64+8)|0);
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=_getu32($147, $150);
      var $152$0=$151;
      var $152$1=0;
      var $154$1 = $152$1;var $154$0 = $152$0;label = 36; break;
    case 36: 
      var $154$0;
      var $154$1;
      var $155=$4;
      var $156=(($155)|0)!=0;
      if ($156) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $158=$4;
      var $159=(($ph64+8)|0);
      var $160=(($159+4)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=_getu32($158, $161);
      var $163$0=$162;
      var $163$1=0;
      var $173$1 = $163$1;var $173$0 = $163$0;label = 39; break;
    case 38: 
      var $165=$4;
      var $166=(($ph64+8)|0);
      var $167=(($166+4)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=_getu32($165, $168);
      var $170$0=$169;
      var $170$1=0;
      var $171$0=0;
      var $171$1=$170$0;
      var $173$1 = $171$1;var $173$0 = $171$0;label = 39; break;
    case 39: 
      var $173$0;
      var $173$1;
      var $174$0 = (i64Math.add($154$0,$154$1,$173$0,$173$1),HEAP32[((tempDoublePtr)>>2)]); var $174$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $176$1 = $174$1;var $176$0 = $174$0;label = 40; break;
    case 40: 
      var $176$0;
      var $176$1;
      var $177$0=$176$0;
      var $177=$177$0;
      var $178=_lseek($126, $177, 0);
      var $179=(($178)|0)==-1;
      if ($179) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $181=$2;
      _file_badseek($181);
      $1=-1;
      label = 74; break;
    case 42: 
      var $183=$5;
      var $184=(($nbuf)|0);
      var $185=$3;
      var $186=(($185)|0)==1;
      if ($186) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $188=$4;
      var $189=(($ph32+16)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=_getu32($188, $190);
      var $192$0=$191;
      var $192$1=0;
      var $234$1 = $192$1;var $234$0 = $192$0;label = 51; break;
    case 44: 
      var $194=$4;
      var $195=(($194)|0)!=0;
      if ($195) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $197=$4;
      var $198=(($ph64+32)|0);
      var $199=(($198)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=_getu32($197, $200);
      var $202$0=$201;
      var $202$1=0;
      var $203$0=0;
      var $203$1=$202$0;
      var $212$1 = $203$1;var $212$0 = $203$0;label = 47; break;
    case 46: 
      var $205=$4;
      var $206=(($ph64+32)|0);
      var $207=(($206)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=_getu32($205, $208);
      var $210$0=$209;
      var $210$1=0;
      var $212$1 = $210$1;var $212$0 = $210$0;label = 47; break;
    case 47: 
      var $212$0;
      var $212$1;
      var $213=$4;
      var $214=(($213)|0)!=0;
      if ($214) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $216=$4;
      var $217=(($ph64+32)|0);
      var $218=(($217+4)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=_getu32($216, $219);
      var $221$0=$220;
      var $221$1=0;
      var $231$1 = $221$1;var $231$0 = $221$0;label = 50; break;
    case 49: 
      var $223=$4;
      var $224=(($ph64+32)|0);
      var $225=(($224+4)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=_getu32($223, $226);
      var $228$0=$227;
      var $228$1=0;
      var $229$0=0;
      var $229$1=$228$0;
      var $231$1 = $229$1;var $231$0 = $229$0;label = 50; break;
    case 50: 
      var $231$0;
      var $231$1;
      var $232$0 = (i64Math.add($212$0,$212$1,$231$0,$231$1),HEAP32[((tempDoublePtr)>>2)]); var $232$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $234$1 = $232$1;var $234$0 = $232$0;label = 51; break;
    case 51: 
      var $234$0;
      var $234$1;
      var $235$0=$234$0;
      var $235=$235$0;
      var $236=(($235)>>>0) < 1024;
      if ($236) { label = 52; break; } else { label = 62; break; }
    case 52: 
      var $238=$3;
      var $239=(($238)|0)==1;
      if ($239) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $241=$4;
      var $242=(($ph32+16)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=_getu32($241, $243);
      var $245$0=$244;
      var $245$1=0;
      var $287$1 = $245$1;var $287$0 = $245$0;label = 61; break;
    case 54: 
      var $247=$4;
      var $248=(($247)|0)!=0;
      if ($248) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $250=$4;
      var $251=(($ph64+32)|0);
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=_getu32($250, $253);
      var $255$0=$254;
      var $255$1=0;
      var $256$0=0;
      var $256$1=$255$0;
      var $265$1 = $256$1;var $265$0 = $256$0;label = 57; break;
    case 56: 
      var $258=$4;
      var $259=(($ph64+32)|0);
      var $260=(($259)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=_getu32($258, $261);
      var $263$0=$262;
      var $263$1=0;
      var $265$1 = $263$1;var $265$0 = $263$0;label = 57; break;
    case 57: 
      var $265$0;
      var $265$1;
      var $266=$4;
      var $267=(($266)|0)!=0;
      if ($267) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $269=$4;
      var $270=(($ph64+32)|0);
      var $271=(($270+4)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=_getu32($269, $272);
      var $274$0=$273;
      var $274$1=0;
      var $284$1 = $274$1;var $284$0 = $274$0;label = 60; break;
    case 59: 
      var $276=$4;
      var $277=(($ph64+32)|0);
      var $278=(($277+4)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=_getu32($276, $279);
      var $281$0=$280;
      var $281$1=0;
      var $282$0=0;
      var $282$1=$281$0;
      var $284$1 = $282$1;var $284$0 = $282$0;label = 60; break;
    case 60: 
      var $284$0;
      var $284$1;
      var $285$0 = (i64Math.add($265$0,$265$1,$284$0,$284$1),HEAP32[((tempDoublePtr)>>2)]); var $285$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $287$1 = $285$1;var $287$0 = $285$0;label = 61; break;
    case 61: 
      var $287$0;
      var $287$1;
      var $288$0=$287$0;
      var $288=$288$0;
      var $291 = $288;label = 63; break;
    case 62: 
      var $291 = 1024;label = 63; break;
    case 63: 
      var $291;
      var $292=_read($183, $184, $291);
      $bufsize=$292;
      var $293=$bufsize;
      var $294=(($293)|0)==-1;
      if ($294) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $296=$2;
      _file_badread($296);
      $1=-1;
      label = 74; break;
    case 65: 
      $offset=0;
      label = 66; break;
    case 66: 
      var $299=$offset;
      var $300=$bufsize;
      var $301=(($299)>>>0) >= (($300)>>>0);
      if ($301) { label = 67; break; } else { label = 68; break; }
    case 67: 
      label = 71; break;
    case 68: 
      var $304=$2;
      var $305=(($nbuf)|0);
      var $306=$offset;
      var $307=$bufsize;
      var $308=$3;
      var $309=$4;
      var $310=$10;
      var $311=_donote($304, $305, $306, $307, $308, $309, 4, $310);
      $offset=$311;
      var $312=$offset;
      var $313=(($312)|0)==0;
      if ($313) { label = 69; break; } else { label = 70; break; }
    case 69: 
      label = 71; break;
    case 70: 
      label = 66; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $318=$7;
      var $319=((($318)-(1))|0);
      $7=$319;
      label = 7; break;
    case 73: 
      $1=0;
      label = 74; break;
    case 74: 
      var $322=$1;
      STACKTOP = __stackBase__;
      return $322;
    default: assert(0, "bad label: " + label);
  }
}
_dophn_core["X"]=1;

function _dophn_exec($ms, $clazz, $swap, $fd, $off, $num, $size, $fsize, $flags, $sh_num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1112)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $11;
      var $ph32=__stackBase__;
      var $ph64=(__stackBase__)+(32);
      var $linking_style;
      var $shared_libraries;
      var $nbuf=(__stackBase__)+(88);
      var $bufsize;
      var $offset;
      var $align;
      $2=$ms;
      $3=$clazz;
      $4=$swap;
      $5=$fd;
      $6=$off;
      $7=$num;
      $8=$size;
      $9=$fsize;
      $10=$flags;
      $11=$sh_num;
      $linking_style=((5260992)|0);
      $shared_libraries=((5264808)|0);
      var $12=$8;
      var $13=$3;
      var $14=(($13)|0)==1;
      var $15=$14 ? 32 : 56;
      var $16=(($12)|0)!=(($15)|0);
      if ($16) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $18=$2;
      var $19=_file_printf($18, ((5260928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=(($19)|0)==-1;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 105; break;
    case 5: 
      $1=0;
      label = 105; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $25=$7;
      var $26=(($25)|0)!=0;
      if ($26) { label = 8; break; } else { label = 102; break; }
    case 8: 
      var $28=$5;
      var $29=$6;
      var $30=_lseek($28, $29, 0);
      var $31=(($30)|0)==-1;
      if ($31) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $33=$2;
      _file_badseek($33);
      $1=-1;
      label = 105; break;
    case 10: 
      var $35=$5;
      var $36=$3;
      var $37=(($36)|0)==1;
      if ($37) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$ph32;
      var $43 = $39;label = 13; break;
    case 12: 
      var $41=$ph64;
      var $43 = $41;label = 13; break;
    case 13: 
      var $43;
      var $44=$3;
      var $45=(($44)|0)==1;
      var $46=$45 ? 32 : 56;
      var $47=_read($35, $43, $46);
      var $48=(($47)|0)==-1;
      if ($48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $50=$2;
      _file_badread($50);
      $1=-1;
      label = 105; break;
    case 15: 
      var $52=$8;
      var $53=$6;
      var $54=((($53)+($52))|0);
      $6=$54;
      var $55=$3;
      var $56=(($55)|0)==1;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$4;
      var $59=(($ph32)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=_getu32($58, $60);
      var $68 = $61;label = 18; break;
    case 17: 
      var $63=$4;
      var $64=(($ph64)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=_getu32($63, $65);
      var $68 = $66;label = 18; break;
    case 18: 
      var $68;
      if ((($68)|0) == 2) {
        label = 19; break;
      }
      else if ((($68)|0) == 3) {
        label = 20; break;
      }
      else {
      label = 21; break;
      }
      
    case 19: 
      $linking_style=((5260808)|0);
      label = 33; break;
    case 20: 
      $shared_libraries=((5260688)|0);
      label = 33; break;
    case 21: 
      var $72=$3;
      var $73=(($72)|0)==1;
      if ($73) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $75=$4;
      var $76=(($ph32+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=_getu32($75, $77);
      var $79$0=$78;
      var $79$1=0;
      var $121$1 = $79$1;var $121$0 = $79$0;label = 30; break;
    case 23: 
      var $81=$4;
      var $82=(($81)|0)!=0;
      if ($82) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $84=$4;
      var $85=(($ph64+8)|0);
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=_getu32($84, $87);
      var $89$0=$88;
      var $89$1=0;
      var $90$0=0;
      var $90$1=$89$0;
      var $99$1 = $90$1;var $99$0 = $90$0;label = 26; break;
    case 25: 
      var $92=$4;
      var $93=(($ph64+8)|0);
      var $94=(($93)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=_getu32($92, $95);
      var $97$0=$96;
      var $97$1=0;
      var $99$1 = $97$1;var $99$0 = $97$0;label = 26; break;
    case 26: 
      var $99$0;
      var $99$1;
      var $100=$4;
      var $101=(($100)|0)!=0;
      if ($101) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $103=$4;
      var $104=(($ph64+8)|0);
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=_getu32($103, $106);
      var $108$0=$107;
      var $108$1=0;
      var $118$1 = $108$1;var $118$0 = $108$0;label = 29; break;
    case 28: 
      var $110=$4;
      var $111=(($ph64+8)|0);
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=_getu32($110, $113);
      var $115$0=$114;
      var $115$1=0;
      var $116$0=0;
      var $116$1=$115$0;
      var $118$1 = $116$1;var $118$0 = $116$0;label = 29; break;
    case 29: 
      var $118$0;
      var $118$1;
      var $119$0 = (i64Math.add($99$0,$99$1,$118$0,$118$1),HEAP32[((tempDoublePtr)>>2)]); var $119$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $121$1 = $119$1;var $121$0 = $119$0;label = 30; break;
    case 30: 
      var $121$0;
      var $121$1;
      var $122$0=$121$0;
      var $122=$122$0;
      var $123=$9;
      var $124=(($122)|0) > (($123)|0);
      if ($124) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 101; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $128=$3;
      var $129=(($128)|0)==1;
      if ($129) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $131=$4;
      var $132=(($ph32)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=_getu32($131, $133);
      var $141 = $134;label = 36; break;
    case 35: 
      var $136=$4;
      var $137=(($ph64)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=_getu32($136, $138);
      var $141 = $139;label = 36; break;
    case 36: 
      var $141;
      if ((($141)|0) == 4) {
        label = 37; break;
      }
      else {
      label = 99; break;
      }
      
    case 37: 
      var $143=$3;
      var $144=(($143)|0)==1;
      if ($144) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $146=(($ph32+28)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147)|0)!=0;
      if ($148) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $150=$4;
      var $151=(($ph32+28)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=_getu32($150, $152);
      var $156 = $153;label = 41; break;
    case 40: 
      var $156 = 4;label = 41; break;
    case 41: 
      var $156;
      var $206 = $156;label = 52; break;
    case 42: 
      var $158=(($ph64+48)|0);
      var $159=(($158)|0);
      var $160=(($159)|0)!=0;
      if ($160) { label = 43; break; } else { label = 50; break; }
    case 43: 
      var $162=$4;
      var $163=(($162)|0)!=0;
      if ($163) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $165=$4;
      var $166=(($ph64+48)|0);
      var $167=(($166)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=_getu32($165, $168);
      var $170$0=$169;
      var $170$1=0;
      var $171$0=0;
      var $171$1=$170$0;
      var $180$1 = $171$1;var $180$0 = $171$0;label = 46; break;
    case 45: 
      var $173=$4;
      var $174=(($ph64+48)|0);
      var $175=(($174)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=_getu32($173, $176);
      var $178$0=$177;
      var $178$1=0;
      var $180$1 = $178$1;var $180$0 = $178$0;label = 46; break;
    case 46: 
      var $180$0;
      var $180$1;
      var $181=$4;
      var $182=(($181)|0)!=0;
      if ($182) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $184=$4;
      var $185=(($ph64+48)|0);
      var $186=(($185+4)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=_getu32($184, $187);
      var $189$0=$188;
      var $189$1=0;
      var $199$1 = $189$1;var $199$0 = $189$0;label = 49; break;
    case 48: 
      var $191=$4;
      var $192=(($ph64+48)|0);
      var $193=(($192+4)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=_getu32($191, $194);
      var $196$0=$195;
      var $196$1=0;
      var $197$0=0;
      var $197$1=$196$0;
      var $199$1 = $197$1;var $199$0 = $197$0;label = 49; break;
    case 49: 
      var $199$0;
      var $199$1;
      var $200$0 = (i64Math.add($180$0,$180$1,$199$0,$199$1),HEAP32[((tempDoublePtr)>>2)]); var $200$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $203$1 = $200$1;var $203$0 = $200$0;label = 51; break;
    case 50: 
      var $203$1 = 0;var $203$0 = 4;label = 51; break;
    case 51: 
      var $203$0;
      var $203$1;
      var $204$0=$203$0;
      var $204=$204$0;
      var $206 = $204;label = 52; break;
    case 52: 
      var $206;
      $align=$206;
      var $207=$206 & -2147483648;
      var $208=(($207)|0)!=0;
      if ($208) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $210=$2;
      var $211=$align;
      var $212=_file_printf($210, ((5260584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$211,tempInt));
      var $213=(($212)|0)==-1;
      if ($213) { label = 54; break; } else { label = 55; break; }
    case 54: 
      $1=-1;
      label = 105; break;
    case 55: 
      $align=4;
      label = 56; break;
    case 56: 
      var $217=$11;
      var $218=(($217)|0)!=0;
      if ($218) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 100; break;
    case 58: 
      var $221=$5;
      var $222=$3;
      var $223=(($222)|0)==1;
      if ($223) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $225=$4;
      var $226=(($ph32+4)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=_getu32($225, $227);
      var $229$0=$228;
      var $229$1=0;
      var $271$1 = $229$1;var $271$0 = $229$0;label = 67; break;
    case 60: 
      var $231=$4;
      var $232=(($231)|0)!=0;
      if ($232) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $234=$4;
      var $235=(($ph64+8)|0);
      var $236=(($235)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=_getu32($234, $237);
      var $239$0=$238;
      var $239$1=0;
      var $240$0=0;
      var $240$1=$239$0;
      var $249$1 = $240$1;var $249$0 = $240$0;label = 63; break;
    case 62: 
      var $242=$4;
      var $243=(($ph64+8)|0);
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=_getu32($242, $245);
      var $247$0=$246;
      var $247$1=0;
      var $249$1 = $247$1;var $249$0 = $247$0;label = 63; break;
    case 63: 
      var $249$0;
      var $249$1;
      var $250=$4;
      var $251=(($250)|0)!=0;
      if ($251) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $253=$4;
      var $254=(($ph64+8)|0);
      var $255=(($254+4)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=_getu32($253, $256);
      var $258$0=$257;
      var $258$1=0;
      var $268$1 = $258$1;var $268$0 = $258$0;label = 66; break;
    case 65: 
      var $260=$4;
      var $261=(($ph64+8)|0);
      var $262=(($261+4)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=_getu32($260, $263);
      var $265$0=$264;
      var $265$1=0;
      var $266$0=0;
      var $266$1=$265$0;
      var $268$1 = $266$1;var $268$0 = $266$0;label = 66; break;
    case 66: 
      var $268$0;
      var $268$1;
      var $269$0 = (i64Math.add($249$0,$249$1,$268$0,$268$1),HEAP32[((tempDoublePtr)>>2)]); var $269$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $271$1 = $269$1;var $271$0 = $269$0;label = 67; break;
    case 67: 
      var $271$0;
      var $271$1;
      var $272$0=$271$0;
      var $272=$272$0;
      var $273=_lseek($221, $272, 0);
      var $274=(($273)|0)==-1;
      if ($274) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $276=$2;
      _file_badseek($276);
      $1=-1;
      label = 105; break;
    case 69: 
      var $278=$5;
      var $279=(($nbuf)|0);
      var $280=$3;
      var $281=(($280)|0)==1;
      if ($281) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $283=$4;
      var $284=(($ph32+16)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=_getu32($283, $285);
      var $287$0=$286;
      var $287$1=0;
      var $329$1 = $287$1;var $329$0 = $287$0;label = 78; break;
    case 71: 
      var $289=$4;
      var $290=(($289)|0)!=0;
      if ($290) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $292=$4;
      var $293=(($ph64+32)|0);
      var $294=(($293)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=_getu32($292, $295);
      var $297$0=$296;
      var $297$1=0;
      var $298$0=0;
      var $298$1=$297$0;
      var $307$1 = $298$1;var $307$0 = $298$0;label = 74; break;
    case 73: 
      var $300=$4;
      var $301=(($ph64+32)|0);
      var $302=(($301)|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=_getu32($300, $303);
      var $305$0=$304;
      var $305$1=0;
      var $307$1 = $305$1;var $307$0 = $305$0;label = 74; break;
    case 74: 
      var $307$0;
      var $307$1;
      var $308=$4;
      var $309=(($308)|0)!=0;
      if ($309) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $311=$4;
      var $312=(($ph64+32)|0);
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=_getu32($311, $314);
      var $316$0=$315;
      var $316$1=0;
      var $326$1 = $316$1;var $326$0 = $316$0;label = 77; break;
    case 76: 
      var $318=$4;
      var $319=(($ph64+32)|0);
      var $320=(($319+4)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=_getu32($318, $321);
      var $323$0=$322;
      var $323$1=0;
      var $324$0=0;
      var $324$1=$323$0;
      var $326$1 = $324$1;var $326$0 = $324$0;label = 77; break;
    case 77: 
      var $326$0;
      var $326$1;
      var $327$0 = (i64Math.add($307$0,$307$1,$326$0,$326$1),HEAP32[((tempDoublePtr)>>2)]); var $327$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $329$1 = $327$1;var $329$0 = $327$0;label = 78; break;
    case 78: 
      var $329$0;
      var $329$1;
      var $330$0=$329$0;
      var $330=$330$0;
      var $331=(($330)>>>0) < 1024;
      if ($331) { label = 79; break; } else { label = 89; break; }
    case 79: 
      var $333=$3;
      var $334=(($333)|0)==1;
      if ($334) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $336=$4;
      var $337=(($ph32+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=_getu32($336, $338);
      var $340$0=$339;
      var $340$1=0;
      var $382$1 = $340$1;var $382$0 = $340$0;label = 88; break;
    case 81: 
      var $342=$4;
      var $343=(($342)|0)!=0;
      if ($343) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $345=$4;
      var $346=(($ph64+32)|0);
      var $347=(($346)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=_getu32($345, $348);
      var $350$0=$349;
      var $350$1=0;
      var $351$0=0;
      var $351$1=$350$0;
      var $360$1 = $351$1;var $360$0 = $351$0;label = 84; break;
    case 83: 
      var $353=$4;
      var $354=(($ph64+32)|0);
      var $355=(($354)|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=_getu32($353, $356);
      var $358$0=$357;
      var $358$1=0;
      var $360$1 = $358$1;var $360$0 = $358$0;label = 84; break;
    case 84: 
      var $360$0;
      var $360$1;
      var $361=$4;
      var $362=(($361)|0)!=0;
      if ($362) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $364=$4;
      var $365=(($ph64+32)|0);
      var $366=(($365+4)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=_getu32($364, $367);
      var $369$0=$368;
      var $369$1=0;
      var $379$1 = $369$1;var $379$0 = $369$0;label = 87; break;
    case 86: 
      var $371=$4;
      var $372=(($ph64+32)|0);
      var $373=(($372+4)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=_getu32($371, $374);
      var $376$0=$375;
      var $376$1=0;
      var $377$0=0;
      var $377$1=$376$0;
      var $379$1 = $377$1;var $379$0 = $377$0;label = 87; break;
    case 87: 
      var $379$0;
      var $379$1;
      var $380$0 = (i64Math.add($360$0,$360$1,$379$0,$379$1),HEAP32[((tempDoublePtr)>>2)]); var $380$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $382$1 = $380$1;var $382$0 = $380$0;label = 88; break;
    case 88: 
      var $382$0;
      var $382$1;
      var $383$0=$382$0;
      var $383=$383$0;
      var $386 = $383;label = 90; break;
    case 89: 
      var $386 = 1024;label = 90; break;
    case 90: 
      var $386;
      var $387=_read($278, $279, $386);
      $bufsize=$387;
      var $388=$bufsize;
      var $389=(($388)|0)==-1;
      if ($389) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $391=$2;
      _file_badread($391);
      $1=-1;
      label = 105; break;
    case 92: 
      $offset=0;
      label = 93; break;
    case 93: 
      var $394=$offset;
      var $395=$bufsize;
      var $396=(($394)>>>0) >= (($395)>>>0);
      if ($396) { label = 94; break; } else { label = 95; break; }
    case 94: 
      label = 98; break;
    case 95: 
      var $399=$2;
      var $400=(($nbuf)|0);
      var $401=$offset;
      var $402=$bufsize;
      var $403=$3;
      var $404=$4;
      var $405=$align;
      var $406=$10;
      var $407=_donote($399, $400, $401, $402, $403, $404, $405, $406);
      $offset=$407;
      var $408=$offset;
      var $409=(($408)|0)==0;
      if ($409) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 98; break;
    case 97: 
      label = 93; break;
    case 98: 
      label = 100; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $416=$7;
      var $417=((($416)-(1))|0);
      $7=$417;
      label = 7; break;
    case 102: 
      var $419=$2;
      var $420=$linking_style;
      var $421=$shared_libraries;
      var $422=_file_printf($419, ((5260520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$420,HEAP32[(((tempInt)+(4))>>2)]=$421,tempInt));
      var $423=(($422)|0)==-1;
      if ($423) { label = 103; break; } else { label = 104; break; }
    case 103: 
      $1=-1;
      label = 105; break;
    case 104: 
      $1=0;
      label = 105; break;
    case 105: 
      var $427=$1;
      STACKTOP = __stackBase__;
      return $427;
    default: assert(0, "bad label: " + label);
  }
}
_dophn_exec["X"]=1;

function _doshn($ms, $clazz, $swap, $fd, $off, $num, $size, $fsize, $flags, $mach) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 160)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $11;
      var $sh32=__stackBase__;
      var $sh64=(__stackBase__)+(40);
      var $stripped;
      var $nbuf;
      var $noff;
      var $coff;
      var $cap_hw1=(__stackBase__)+(104);
      var $cap_sf1=(__stackBase__)+(112);
      var $cap32=(__stackBase__)+(120);
      var $cap64=(__stackBase__)+(128);
      var $cbuf=(__stackBase__)+(144);
      var $cdp;
      $2=$ms;
      $3=$clazz;
      $4=$swap;
      $5=$fd;
      $6=$off;
      $7=$num;
      $8=$size;
      $9=$fsize;
      $10=$flags;
      $11=$mach;
      $stripped=1;
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $st$36$0=(($cap_hw1)|0);
      HEAP32[(($st$36$0)>>2)]=$$etemp$0$0;
      var $st$36$1=(($cap_hw1+4)|0);
      HEAP32[(($st$36$1)>>2)]=$$etemp$0$1;
      var $$etemp$1$0=0;
      var $$etemp$1$1=0;
      var $st$42$0=(($cap_sf1)|0);
      HEAP32[(($st$42$0)>>2)]=$$etemp$1$0;
      var $st$42$1=(($cap_sf1+4)|0);
      HEAP32[(($st$42$1)>>2)]=$$etemp$1$1;
      var $12=$8;
      var $13=$3;
      var $14=(($13)|0)==1;
      var $15=$14 ? 40 : 64;
      var $16=(($12)|0)!=(($15)|0);
      if ($16) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $18=$2;
      var $19=_file_printf($18, ((5272172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=(($19)|0)==-1;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 229; break;
    case 5: 
      $1=0;
      label = 229; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $25=$7;
      var $26=(($25)|0)!=0;
      if ($26) { label = 8; break; } else { label = 192; break; }
    case 8: 
      var $28=$5;
      var $29=$6;
      var $30=_lseek($28, $29, 0);
      var $31=(($30)|0)==-1;
      if ($31) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $33=$2;
      _file_badseek($33);
      $1=-1;
      label = 229; break;
    case 10: 
      var $35=$5;
      var $36=$3;
      var $37=(($36)|0)==1;
      if ($37) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $39=$sh32;
      var $43 = $39;label = 13; break;
    case 12: 
      var $41=$sh64;
      var $43 = $41;label = 13; break;
    case 13: 
      var $43;
      var $44=$3;
      var $45=(($44)|0)==1;
      var $46=$45 ? 40 : 64;
      var $47=_read($35, $43, $46);
      var $48=(($47)|0)==-1;
      if ($48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $50=$2;
      _file_badread($50);
      $1=-1;
      label = 229; break;
    case 15: 
      var $52=$8;
      var $53=$6;
      var $54=((($53)+($52))|0);
      $6=$54;
      var $55=$3;
      var $56=(($55)|0)==1;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$4;
      var $59=(($sh32+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=_getu32($58, $60);
      var $68 = $61;label = 18; break;
    case 17: 
      var $63=$4;
      var $64=(($sh64+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=_getu32($63, $65);
      var $68 = $66;label = 18; break;
    case 18: 
      var $68;
      if ((($68)|0) == 2) {
        label = 19; break;
      }
      else {
      label = 20; break;
      }
      
    case 19: 
      $stripped=0;
      label = 32; break;
    case 20: 
      var $71=$3;
      var $72=(($71)|0)==1;
      if ($72) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $74=$4;
      var $75=(($sh32+16)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=_getu32($74, $76);
      var $78$0=$77;
      var $78$1=0;
      var $120$1 = $78$1;var $120$0 = $78$0;label = 29; break;
    case 22: 
      var $80=$4;
      var $81=(($80)|0)!=0;
      if ($81) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $83=$4;
      var $84=(($sh64+24)|0);
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=_getu32($83, $86);
      var $88$0=$87;
      var $88$1=0;
      var $89$0=0;
      var $89$1=$88$0;
      var $98$1 = $89$1;var $98$0 = $89$0;label = 25; break;
    case 24: 
      var $91=$4;
      var $92=(($sh64+24)|0);
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=_getu32($91, $94);
      var $96$0=$95;
      var $96$1=0;
      var $98$1 = $96$1;var $98$0 = $96$0;label = 25; break;
    case 25: 
      var $98$0;
      var $98$1;
      var $99=$4;
      var $100=(($99)|0)!=0;
      if ($100) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $102=$4;
      var $103=(($sh64+24)|0);
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=_getu32($102, $105);
      var $107$0=$106;
      var $107$1=0;
      var $117$1 = $107$1;var $117$0 = $107$0;label = 28; break;
    case 27: 
      var $109=$4;
      var $110=(($sh64+24)|0);
      var $111=(($110+4)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=_getu32($109, $112);
      var $114$0=$113;
      var $114$1=0;
      var $115$0=0;
      var $115$1=$114$0;
      var $117$1 = $115$1;var $117$0 = $115$0;label = 28; break;
    case 28: 
      var $117$0;
      var $117$1;
      var $118$0 = (i64Math.add($98$0,$98$1,$117$0,$117$1),HEAP32[((tempDoublePtr)>>2)]); var $118$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $120$1 = $118$1;var $120$0 = $118$0;label = 29; break;
    case 29: 
      var $120$0;
      var $120$1;
      var $121$0=$120$0;
      var $121=$121$0;
      var $122=$9;
      var $123=(($121)|0) > (($122)|0);
      if ($123) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 191; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $127=$3;
      var $128=(($127)|0)==1;
      if ($128) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $130=$4;
      var $131=(($sh32+4)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=_getu32($130, $132);
      var $140 = $133;label = 35; break;
    case 34: 
      var $135=$4;
      var $136=(($sh64+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=_getu32($135, $137);
      var $140 = $138;label = 35; break;
    case 35: 
      var $140;
      if ((($140)|0) == 7) {
        label = 36; break;
      }
      else if ((($140)|0) == 1879048181) {
        label = 103; break;
      }
      else {
      label = 189; break;
      }
      
    case 36: 
      var $142=$3;
      var $143=(($142)|0)==1;
      if ($143) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $145=$4;
      var $146=(($sh32+20)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=_getu32($145, $147);
      var $149$0=$148;
      var $149$1=0;
      var $191$1 = $149$1;var $191$0 = $149$0;label = 45; break;
    case 38: 
      var $151=$4;
      var $152=(($151)|0)!=0;
      if ($152) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $154=$4;
      var $155=(($sh64+32)|0);
      var $156=(($155)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=_getu32($154, $157);
      var $159$0=$158;
      var $159$1=0;
      var $160$0=0;
      var $160$1=$159$0;
      var $169$1 = $160$1;var $169$0 = $160$0;label = 41; break;
    case 40: 
      var $162=$4;
      var $163=(($sh64+32)|0);
      var $164=(($163)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=_getu32($162, $165);
      var $167$0=$166;
      var $167$1=0;
      var $169$1 = $167$1;var $169$0 = $167$0;label = 41; break;
    case 41: 
      var $169$0;
      var $169$1;
      var $170=$4;
      var $171=(($170)|0)!=0;
      if ($171) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $173=$4;
      var $174=(($sh64+32)|0);
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=_getu32($173, $176);
      var $178$0=$177;
      var $178$1=0;
      var $188$1 = $178$1;var $188$0 = $178$0;label = 44; break;
    case 43: 
      var $180=$4;
      var $181=(($sh64+32)|0);
      var $182=(($181+4)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=_getu32($180, $183);
      var $185$0=$184;
      var $185$1=0;
      var $186$0=0;
      var $186$1=$185$0;
      var $188$1 = $186$1;var $188$0 = $186$0;label = 44; break;
    case 44: 
      var $188$0;
      var $188$1;
      var $189$0 = (i64Math.add($169$0,$169$1,$188$0,$188$1),HEAP32[((tempDoublePtr)>>2)]); var $189$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $191$1 = $189$1;var $191$0 = $189$0;label = 45; break;
    case 45: 
      var $191$0;
      var $191$1;
      var $192$0=$191$0;
      var $192=$192$0;
      var $193=_malloc($192);
      $nbuf=$193;
      var $194=(($193)|0)==0;
      if ($194) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $196=$2;
      var $197=___errno_location();
      var $198=HEAP32[(($197)>>2)];
      _file_error($196, $198, ((5269024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 229; break;
    case 47: 
      var $200=$5;
      var $201=$3;
      var $202=(($201)|0)==1;
      if ($202) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $204=$4;
      var $205=(($sh32+16)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=_getu32($204, $206);
      var $208$0=$207;
      var $208$1=0;
      var $250$1 = $208$1;var $250$0 = $208$0;label = 56; break;
    case 49: 
      var $210=$4;
      var $211=(($210)|0)!=0;
      if ($211) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $213=$4;
      var $214=(($sh64+24)|0);
      var $215=(($214)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=_getu32($213, $216);
      var $218$0=$217;
      var $218$1=0;
      var $219$0=0;
      var $219$1=$218$0;
      var $228$1 = $219$1;var $228$0 = $219$0;label = 52; break;
    case 51: 
      var $221=$4;
      var $222=(($sh64+24)|0);
      var $223=(($222)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=_getu32($221, $224);
      var $226$0=$225;
      var $226$1=0;
      var $228$1 = $226$1;var $228$0 = $226$0;label = 52; break;
    case 52: 
      var $228$0;
      var $228$1;
      var $229=$4;
      var $230=(($229)|0)!=0;
      if ($230) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $232=$4;
      var $233=(($sh64+24)|0);
      var $234=(($233+4)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=_getu32($232, $235);
      var $237$0=$236;
      var $237$1=0;
      var $247$1 = $237$1;var $247$0 = $237$0;label = 55; break;
    case 54: 
      var $239=$4;
      var $240=(($sh64+24)|0);
      var $241=(($240+4)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=_getu32($239, $242);
      var $244$0=$243;
      var $244$1=0;
      var $245$0=0;
      var $245$1=$244$0;
      var $247$1 = $245$1;var $247$0 = $245$0;label = 55; break;
    case 55: 
      var $247$0;
      var $247$1;
      var $248$0 = (i64Math.add($228$0,$228$1,$247$0,$247$1),HEAP32[((tempDoublePtr)>>2)]); var $248$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $250$1 = $248$1;var $250$0 = $248$0;label = 56; break;
    case 56: 
      var $250$0;
      var $250$1;
      var $251$0=$250$0;
      var $251=$251$0;
      var $252=_lseek($200, $251, 0);
      $noff=$252;
      var $253=(($252)|0)==-1;
      if ($253) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $255=$2;
      _file_badread($255);
      var $256=$nbuf;
      _free($256);
      $1=-1;
      label = 229; break;
    case 58: 
      var $258=$5;
      var $259=$nbuf;
      var $260=$3;
      var $261=(($260)|0)==1;
      if ($261) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $263=$4;
      var $264=(($sh32+20)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=_getu32($263, $265);
      var $267$0=$266;
      var $267$1=0;
      var $309$1 = $267$1;var $309$0 = $267$0;label = 67; break;
    case 60: 
      var $269=$4;
      var $270=(($269)|0)!=0;
      if ($270) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $272=$4;
      var $273=(($sh64+32)|0);
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=_getu32($272, $275);
      var $277$0=$276;
      var $277$1=0;
      var $278$0=0;
      var $278$1=$277$0;
      var $287$1 = $278$1;var $287$0 = $278$0;label = 63; break;
    case 62: 
      var $280=$4;
      var $281=(($sh64+32)|0);
      var $282=(($281)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=_getu32($280, $283);
      var $285$0=$284;
      var $285$1=0;
      var $287$1 = $285$1;var $287$0 = $285$0;label = 63; break;
    case 63: 
      var $287$0;
      var $287$1;
      var $288=$4;
      var $289=(($288)|0)!=0;
      if ($289) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $291=$4;
      var $292=(($sh64+32)|0);
      var $293=(($292+4)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=_getu32($291, $294);
      var $296$0=$295;
      var $296$1=0;
      var $306$1 = $296$1;var $306$0 = $296$0;label = 66; break;
    case 65: 
      var $298=$4;
      var $299=(($sh64+32)|0);
      var $300=(($299+4)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=_getu32($298, $301);
      var $303$0=$302;
      var $303$1=0;
      var $304$0=0;
      var $304$1=$303$0;
      var $306$1 = $304$1;var $306$0 = $304$0;label = 66; break;
    case 66: 
      var $306$0;
      var $306$1;
      var $307$0 = (i64Math.add($287$0,$287$1,$306$0,$306$1),HEAP32[((tempDoublePtr)>>2)]); var $307$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $309$1 = $307$1;var $309$0 = $307$0;label = 67; break;
    case 67: 
      var $309$0;
      var $309$1;
      var $310$0=$309$0;
      var $310=$310$0;
      var $311=_read($258, $259, $310);
      var $312=$3;
      var $313=(($312)|0)==1;
      if ($313) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $315=$4;
      var $316=(($sh32+20)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=_getu32($315, $317);
      var $319$0=$318;
      var $319$1=0;
      var $361$1 = $319$1;var $361$0 = $319$0;label = 76; break;
    case 69: 
      var $321=$4;
      var $322=(($321)|0)!=0;
      if ($322) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $324=$4;
      var $325=(($sh64+32)|0);
      var $326=(($325)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=_getu32($324, $327);
      var $329$0=$328;
      var $329$1=0;
      var $330$0=0;
      var $330$1=$329$0;
      var $339$1 = $330$1;var $339$0 = $330$0;label = 72; break;
    case 71: 
      var $332=$4;
      var $333=(($sh64+32)|0);
      var $334=(($333)|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=_getu32($332, $335);
      var $337$0=$336;
      var $337$1=0;
      var $339$1 = $337$1;var $339$0 = $337$0;label = 72; break;
    case 72: 
      var $339$0;
      var $339$1;
      var $340=$4;
      var $341=(($340)|0)!=0;
      if ($341) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $343=$4;
      var $344=(($sh64+32)|0);
      var $345=(($344+4)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=_getu32($343, $346);
      var $348$0=$347;
      var $348$1=0;
      var $358$1 = $348$1;var $358$0 = $348$0;label = 75; break;
    case 74: 
      var $350=$4;
      var $351=(($sh64+32)|0);
      var $352=(($351+4)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=_getu32($350, $353);
      var $355$0=$354;
      var $355$1=0;
      var $356$0=0;
      var $356$1=$355$0;
      var $358$1 = $356$1;var $358$0 = $356$0;label = 75; break;
    case 75: 
      var $358$0;
      var $358$1;
      var $359$0 = (i64Math.add($339$0,$339$1,$358$0,$358$1),HEAP32[((tempDoublePtr)>>2)]); var $359$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $361$1 = $359$1;var $361$0 = $359$0;label = 76; break;
    case 76: 
      var $361$0;
      var $361$1;
      var $362$0=$361$0;
      var $362=$362$0;
      var $363=(($311)|0)!=(($362)|0);
      if ($363) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $365=$nbuf;
      _free($365);
      var $366=$2;
      _file_badread($366);
      $1=-1;
      label = 229; break;
    case 78: 
      $noff=0;
      label = 79; break;
    case 79: 
      var $369=$noff;
      var $370=$3;
      var $371=(($370)|0)==1;
      if ($371) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $373=$4;
      var $374=(($sh32+20)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=_getu32($373, $375);
      var $377$0=$376;
      var $377$1=0;
      var $419$1 = $377$1;var $419$0 = $377$0;label = 88; break;
    case 81: 
      var $379=$4;
      var $380=(($379)|0)!=0;
      if ($380) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $382=$4;
      var $383=(($sh64+32)|0);
      var $384=(($383)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=_getu32($382, $385);
      var $387$0=$386;
      var $387$1=0;
      var $388$0=0;
      var $388$1=$387$0;
      var $397$1 = $388$1;var $397$0 = $388$0;label = 84; break;
    case 83: 
      var $390=$4;
      var $391=(($sh64+32)|0);
      var $392=(($391)|0);
      var $393=HEAP32[(($392)>>2)];
      var $394=_getu32($390, $393);
      var $395$0=$394;
      var $395$1=0;
      var $397$1 = $395$1;var $397$0 = $395$0;label = 84; break;
    case 84: 
      var $397$0;
      var $397$1;
      var $398=$4;
      var $399=(($398)|0)!=0;
      if ($399) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $401=$4;
      var $402=(($sh64+32)|0);
      var $403=(($402+4)|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=_getu32($401, $404);
      var $406$0=$405;
      var $406$1=0;
      var $416$1 = $406$1;var $416$0 = $406$0;label = 87; break;
    case 86: 
      var $408=$4;
      var $409=(($sh64+32)|0);
      var $410=(($409+4)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=_getu32($408, $411);
      var $413$0=$412;
      var $413$1=0;
      var $414$0=0;
      var $414$1=$413$0;
      var $416$1 = $414$1;var $416$0 = $414$0;label = 87; break;
    case 87: 
      var $416$0;
      var $416$1;
      var $417$0 = (i64Math.add($397$0,$397$1,$416$0,$416$1),HEAP32[((tempDoublePtr)>>2)]); var $417$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $419$1 = $417$1;var $419$0 = $417$0;label = 88; break;
    case 88: 
      var $419$0;
      var $419$1;
      var $420$0=$419$0;
      var $420=$420$0;
      var $421=(($369)|0) >= (($420)|0);
      if ($421) { label = 89; break; } else { label = 90; break; }
    case 89: 
      label = 102; break;
    case 90: 
      var $424=$2;
      var $425=$nbuf;
      var $426=$noff;
      var $427=$3;
      var $428=(($427)|0)==1;
      if ($428) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $430=$4;
      var $431=(($sh32+20)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=_getu32($430, $432);
      var $434$0=$433;
      var $434$1=0;
      var $476$1 = $434$1;var $476$0 = $434$0;label = 99; break;
    case 92: 
      var $436=$4;
      var $437=(($436)|0)!=0;
      if ($437) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $439=$4;
      var $440=(($sh64+32)|0);
      var $441=(($440)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=_getu32($439, $442);
      var $444$0=$443;
      var $444$1=0;
      var $445$0=0;
      var $445$1=$444$0;
      var $454$1 = $445$1;var $454$0 = $445$0;label = 95; break;
    case 94: 
      var $447=$4;
      var $448=(($sh64+32)|0);
      var $449=(($448)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=_getu32($447, $450);
      var $452$0=$451;
      var $452$1=0;
      var $454$1 = $452$1;var $454$0 = $452$0;label = 95; break;
    case 95: 
      var $454$0;
      var $454$1;
      var $455=$4;
      var $456=(($455)|0)!=0;
      if ($456) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $458=$4;
      var $459=(($sh64+32)|0);
      var $460=(($459+4)|0);
      var $461=HEAP32[(($460)>>2)];
      var $462=_getu32($458, $461);
      var $463$0=$462;
      var $463$1=0;
      var $473$1 = $463$1;var $473$0 = $463$0;label = 98; break;
    case 97: 
      var $465=$4;
      var $466=(($sh64+32)|0);
      var $467=(($466+4)|0);
      var $468=HEAP32[(($467)>>2)];
      var $469=_getu32($465, $468);
      var $470$0=$469;
      var $470$1=0;
      var $471$0=0;
      var $471$1=$470$0;
      var $473$1 = $471$1;var $473$0 = $471$0;label = 98; break;
    case 98: 
      var $473$0;
      var $473$1;
      var $474$0 = (i64Math.add($454$0,$454$1,$473$0,$473$1),HEAP32[((tempDoublePtr)>>2)]); var $474$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $476$1 = $474$1;var $476$0 = $474$0;label = 99; break;
    case 99: 
      var $476$0;
      var $476$1;
      var $477$0=$476$0;
      var $477=$477$0;
      var $478=$3;
      var $479=$4;
      var $480=$10;
      var $481=_donote($424, $425, $426, $477, $478, $479, 4, $480);
      $noff=$481;
      var $482=$noff;
      var $483=(($482)|0)==0;
      if ($483) { label = 100; break; } else { label = 101; break; }
    case 100: 
      label = 102; break;
    case 101: 
      label = 79; break;
    case 102: 
      var $487=$nbuf;
      _free($487);
      label = 190; break;
    case 103: 
      var $489=$11;
      if ((($489)|0) == 2 || (($489)|0) == 43 || (($489)|0) == 50 || (($489)|0) == 3 || (($489)|0) == 62) {
        label = 104; break;
      }
      else {
      label = 105; break;
      }
      
    case 104: 
      label = 106; break;
    case 105: 
      label = 188; break;
    case 106: 
      var $493=$5;
      var $494=$3;
      var $495=(($494)|0)==1;
      if ($495) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $497=$4;
      var $498=(($sh32+16)|0);
      var $499=HEAP32[(($498)>>2)];
      var $500=_getu32($497, $499);
      var $501$0=$500;
      var $501$1=0;
      var $543$1 = $501$1;var $543$0 = $501$0;label = 115; break;
    case 108: 
      var $503=$4;
      var $504=(($503)|0)!=0;
      if ($504) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $506=$4;
      var $507=(($sh64+24)|0);
      var $508=(($507)|0);
      var $509=HEAP32[(($508)>>2)];
      var $510=_getu32($506, $509);
      var $511$0=$510;
      var $511$1=0;
      var $512$0=0;
      var $512$1=$511$0;
      var $521$1 = $512$1;var $521$0 = $512$0;label = 111; break;
    case 110: 
      var $514=$4;
      var $515=(($sh64+24)|0);
      var $516=(($515)|0);
      var $517=HEAP32[(($516)>>2)];
      var $518=_getu32($514, $517);
      var $519$0=$518;
      var $519$1=0;
      var $521$1 = $519$1;var $521$0 = $519$0;label = 111; break;
    case 111: 
      var $521$0;
      var $521$1;
      var $522=$4;
      var $523=(($522)|0)!=0;
      if ($523) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $525=$4;
      var $526=(($sh64+24)|0);
      var $527=(($526+4)|0);
      var $528=HEAP32[(($527)>>2)];
      var $529=_getu32($525, $528);
      var $530$0=$529;
      var $530$1=0;
      var $540$1 = $530$1;var $540$0 = $530$0;label = 114; break;
    case 113: 
      var $532=$4;
      var $533=(($sh64+24)|0);
      var $534=(($533+4)|0);
      var $535=HEAP32[(($534)>>2)];
      var $536=_getu32($532, $535);
      var $537$0=$536;
      var $537$1=0;
      var $538$0=0;
      var $538$1=$537$0;
      var $540$1 = $538$1;var $540$0 = $538$0;label = 114; break;
    case 114: 
      var $540$0;
      var $540$1;
      var $541$0 = (i64Math.add($521$0,$521$1,$540$0,$540$1),HEAP32[((tempDoublePtr)>>2)]); var $541$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $543$1 = $541$1;var $543$0 = $541$0;label = 115; break;
    case 115: 
      var $543$0;
      var $543$1;
      var $544$0=$543$0;
      var $544=$544$0;
      var $545=_lseek($493, $544, 0);
      var $546=(($545)|0)==-1;
      if ($546) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $548=$2;
      _file_badseek($548);
      $1=-1;
      label = 229; break;
    case 117: 
      $coff=0;
      label = 118; break;
    case 118: 
      var $551=$3;
      var $552=(($551)|0)==1;
      var $553=$552 ? 8 : 16;
      var $554=$coff;
      var $555=((($554)+($553))|0);
      $coff=$555;
      var $556=$3;
      var $557=(($556)|0)==1;
      if ($557) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $559=$4;
      var $560=(($sh32+20)|0);
      var $561=HEAP32[(($560)>>2)];
      var $562=_getu32($559, $561);
      var $563$0=$562;
      var $563$1=0;
      var $605$1 = $563$1;var $605$0 = $563$0;label = 127; break;
    case 120: 
      var $565=$4;
      var $566=(($565)|0)!=0;
      if ($566) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $568=$4;
      var $569=(($sh64+32)|0);
      var $570=(($569)|0);
      var $571=HEAP32[(($570)>>2)];
      var $572=_getu32($568, $571);
      var $573$0=$572;
      var $573$1=0;
      var $574$0=0;
      var $574$1=$573$0;
      var $583$1 = $574$1;var $583$0 = $574$0;label = 123; break;
    case 122: 
      var $576=$4;
      var $577=(($sh64+32)|0);
      var $578=(($577)|0);
      var $579=HEAP32[(($578)>>2)];
      var $580=_getu32($576, $579);
      var $581$0=$580;
      var $581$1=0;
      var $583$1 = $581$1;var $583$0 = $581$0;label = 123; break;
    case 123: 
      var $583$0;
      var $583$1;
      var $584=$4;
      var $585=(($584)|0)!=0;
      if ($585) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $587=$4;
      var $588=(($sh64+32)|0);
      var $589=(($588+4)|0);
      var $590=HEAP32[(($589)>>2)];
      var $591=_getu32($587, $590);
      var $592$0=$591;
      var $592$1=0;
      var $602$1 = $592$1;var $602$0 = $592$0;label = 126; break;
    case 125: 
      var $594=$4;
      var $595=(($sh64+32)|0);
      var $596=(($595+4)|0);
      var $597=HEAP32[(($596)>>2)];
      var $598=_getu32($594, $597);
      var $599$0=$598;
      var $599$1=0;
      var $600$0=0;
      var $600$1=$599$0;
      var $602$1 = $600$1;var $602$0 = $600$0;label = 126; break;
    case 126: 
      var $602$0;
      var $602$1;
      var $603$0 = (i64Math.add($583$0,$583$1,$602$0,$602$1),HEAP32[((tempDoublePtr)>>2)]); var $603$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $605$1 = $603$1;var $605$0 = $603$0;label = 127; break;
    case 127: 
      var $605$0;
      var $605$1;
      var $606$0=$605$0;
      var $606=$606$0;
      var $607=(($555)|0) > (($606)|0);
      if ($607) { label = 128; break; } else { label = 129; break; }
    case 128: 
      label = 187; break;
    case 129: 
      var $610=$5;
      var $611=(($cbuf)|0);
      var $612=$3;
      var $613=(($612)|0)==1;
      var $614=$613 ? 8 : 16;
      var $615=_read($610, $611, $614);
      var $616=$3;
      var $617=(($616)|0)==1;
      var $618=$617 ? 8 : 16;
      var $619=(($615)|0)!=(($618)|0);
      if ($619) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $621=$2;
      _file_badread($621);
      $1=-1;
      label = 229; break;
    case 131: 
      var $623=$3;
      var $624=(($623)|0)==1;
      if ($624) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $626=$cap32;
      var $630 = $626;label = 134; break;
    case 133: 
      var $628=$cap64;
      var $630 = $628;label = 134; break;
    case 134: 
      var $630;
      var $631=$cbuf;
      var $632=$3;
      var $633=(($632)|0)==1;
      var $634=$633 ? 8 : 16;
      assert($634 % 1 === 0);_memcpy($630, $631, $634);
      var $635=$3;
      var $636=(($635)|0)==1;
      if ($636) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $638=$4;
      var $639=(($cap32)|0);
      var $640=HEAP32[(($639)>>2)];
      var $641=_getu32($638, $640);
      var $642$0=$641;
      var $642$1=0;
      var $684$1 = $642$1;var $684$0 = $642$0;label = 143; break;
    case 136: 
      var $644=$4;
      var $645=(($644)|0)!=0;
      if ($645) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $647=$4;
      var $648=(($cap64)|0);
      var $649=(($648)|0);
      var $650=HEAP32[(($649)>>2)];
      var $651=_getu32($647, $650);
      var $652$0=$651;
      var $652$1=0;
      var $653$0=0;
      var $653$1=$652$0;
      var $662$1 = $653$1;var $662$0 = $653$0;label = 139; break;
    case 138: 
      var $655=$4;
      var $656=(($cap64)|0);
      var $657=(($656)|0);
      var $658=HEAP32[(($657)>>2)];
      var $659=_getu32($655, $658);
      var $660$0=$659;
      var $660$1=0;
      var $662$1 = $660$1;var $662$0 = $660$0;label = 139; break;
    case 139: 
      var $662$0;
      var $662$1;
      var $663=$4;
      var $664=(($663)|0)!=0;
      if ($664) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $666=$4;
      var $667=(($cap64)|0);
      var $668=(($667+4)|0);
      var $669=HEAP32[(($668)>>2)];
      var $670=_getu32($666, $669);
      var $671$0=$670;
      var $671$1=0;
      var $681$1 = $671$1;var $681$0 = $671$0;label = 142; break;
    case 141: 
      var $673=$4;
      var $674=(($cap64)|0);
      var $675=(($674+4)|0);
      var $676=HEAP32[(($675)>>2)];
      var $677=_getu32($673, $676);
      var $678$0=$677;
      var $678$1=0;
      var $679$0=0;
      var $679$1=$678$0;
      var $681$1 = $679$1;var $681$0 = $679$0;label = 142; break;
    case 142: 
      var $681$0;
      var $681$1;
      var $682$0 = (i64Math.add($662$0,$662$1,$681$0,$681$1),HEAP32[((tempDoublePtr)>>2)]); var $682$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $684$1 = $682$1;var $684$0 = $682$0;label = 143; break;
    case 143: 
      var $684$0;
      var $684$1;
      var $$etemp$4$0=2;
      var $$etemp$4$1=0;
      var $$etemp$3$0=1;
      var $$etemp$3$1=0;
      var $$etemp$2$0=0;
      var $$etemp$2$1=0;
      if ($684$0 == $$etemp$2$0 && $684$1 == $$etemp$2$1) {
        label = 144; break;
      }
      else if ($684$0 == $$etemp$3$0 && $684$1 == $$etemp$3$1) {
        label = 145; break;
      }
      else if ($684$0 == $$etemp$4$0 && $684$1 == $$etemp$4$1) {
        label = 155; break;
      }
      else {
      label = 165; break;
      }
      
    case 144: 
      label = 186; break;
    case 145: 
      var $687=$3;
      var $688=(($687)|0)==1;
      if ($688) { label = 146; break; } else { label = 147; break; }
    case 146: 
      var $690=$4;
      var $691=(($cap32+4)|0);
      var $692=$691;
      var $693=HEAP32[(($692)>>2)];
      var $694=_getu32($690, $693);
      var $695$0=$694;
      var $695$1=0;
      var $741$1 = $695$1;var $741$0 = $695$0;label = 154; break;
    case 147: 
      var $697=$4;
      var $698=(($697)|0)!=0;
      if ($698) { label = 148; break; } else { label = 149; break; }
    case 148: 
      var $700=$4;
      var $701=(($cap64+8)|0);
      var $702=$701;
      var $703=(($702)|0);
      var $704=HEAP32[(($703)>>2)];
      var $705=_getu32($700, $704);
      var $706$0=$705;
      var $706$1=0;
      var $707$0=0;
      var $707$1=$706$0;
      var $717$1 = $707$1;var $717$0 = $707$0;label = 150; break;
    case 149: 
      var $709=$4;
      var $710=(($cap64+8)|0);
      var $711=$710;
      var $712=(($711)|0);
      var $713=HEAP32[(($712)>>2)];
      var $714=_getu32($709, $713);
      var $715$0=$714;
      var $715$1=0;
      var $717$1 = $715$1;var $717$0 = $715$0;label = 150; break;
    case 150: 
      var $717$0;
      var $717$1;
      var $718=$4;
      var $719=(($718)|0)!=0;
      if ($719) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $721=$4;
      var $722=(($cap64+8)|0);
      var $723=$722;
      var $724=(($723+4)|0);
      var $725=HEAP32[(($724)>>2)];
      var $726=_getu32($721, $725);
      var $727$0=$726;
      var $727$1=0;
      var $738$1 = $727$1;var $738$0 = $727$0;label = 153; break;
    case 152: 
      var $729=$4;
      var $730=(($cap64+8)|0);
      var $731=$730;
      var $732=(($731+4)|0);
      var $733=HEAP32[(($732)>>2)];
      var $734=_getu32($729, $733);
      var $735$0=$734;
      var $735$1=0;
      var $736$0=0;
      var $736$1=$735$0;
      var $738$1 = $736$1;var $738$0 = $736$0;label = 153; break;
    case 153: 
      var $738$0;
      var $738$1;
      var $739$0 = (i64Math.add($717$0,$717$1,$738$0,$738$1),HEAP32[((tempDoublePtr)>>2)]); var $739$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $741$1 = $739$1;var $741$0 = $739$0;label = 154; break;
    case 154: 
      var $741$0;
      var $741$1;
      var $st$2$0=(($cap_hw1)|0);
      var $742$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($cap_hw1+4)|0);
      var $742$1=HEAP32[(($st$2$1)>>2)];
      var $743$0=$742$0 | $741$0;
      var $743$1=$742$1 | $741$1;
      var $st$8$0=(($cap_hw1)|0);
      HEAP32[(($st$8$0)>>2)]=$743$0;
      var $st$8$1=(($cap_hw1+4)|0);
      HEAP32[(($st$8$1)>>2)]=$743$1;
      label = 186; break;
    case 155: 
      var $745=$3;
      var $746=(($745)|0)==1;
      if ($746) { label = 156; break; } else { label = 157; break; }
    case 156: 
      var $748=$4;
      var $749=(($cap32+4)|0);
      var $750=$749;
      var $751=HEAP32[(($750)>>2)];
      var $752=_getu32($748, $751);
      var $753$0=$752;
      var $753$1=0;
      var $799$1 = $753$1;var $799$0 = $753$0;label = 164; break;
    case 157: 
      var $755=$4;
      var $756=(($755)|0)!=0;
      if ($756) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $758=$4;
      var $759=(($cap64+8)|0);
      var $760=$759;
      var $761=(($760)|0);
      var $762=HEAP32[(($761)>>2)];
      var $763=_getu32($758, $762);
      var $764$0=$763;
      var $764$1=0;
      var $765$0=0;
      var $765$1=$764$0;
      var $775$1 = $765$1;var $775$0 = $765$0;label = 160; break;
    case 159: 
      var $767=$4;
      var $768=(($cap64+8)|0);
      var $769=$768;
      var $770=(($769)|0);
      var $771=HEAP32[(($770)>>2)];
      var $772=_getu32($767, $771);
      var $773$0=$772;
      var $773$1=0;
      var $775$1 = $773$1;var $775$0 = $773$0;label = 160; break;
    case 160: 
      var $775$0;
      var $775$1;
      var $776=$4;
      var $777=(($776)|0)!=0;
      if ($777) { label = 161; break; } else { label = 162; break; }
    case 161: 
      var $779=$4;
      var $780=(($cap64+8)|0);
      var $781=$780;
      var $782=(($781+4)|0);
      var $783=HEAP32[(($782)>>2)];
      var $784=_getu32($779, $783);
      var $785$0=$784;
      var $785$1=0;
      var $796$1 = $785$1;var $796$0 = $785$0;label = 163; break;
    case 162: 
      var $787=$4;
      var $788=(($cap64+8)|0);
      var $789=$788;
      var $790=(($789+4)|0);
      var $791=HEAP32[(($790)>>2)];
      var $792=_getu32($787, $791);
      var $793$0=$792;
      var $793$1=0;
      var $794$0=0;
      var $794$1=$793$0;
      var $796$1 = $794$1;var $796$0 = $794$0;label = 163; break;
    case 163: 
      var $796$0;
      var $796$1;
      var $797$0 = (i64Math.add($775$0,$775$1,$796$0,$796$1),HEAP32[((tempDoublePtr)>>2)]); var $797$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $799$1 = $797$1;var $799$0 = $797$0;label = 164; break;
    case 164: 
      var $799$0;
      var $799$1;
      var $st$2$0=(($cap_sf1)|0);
      var $800$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($cap_sf1+4)|0);
      var $800$1=HEAP32[(($st$2$1)>>2)];
      var $801$0=$800$0 | $799$0;
      var $801$1=$800$1 | $799$1;
      var $st$8$0=(($cap_sf1)|0);
      HEAP32[(($st$8$0)>>2)]=$801$0;
      var $st$8$1=(($cap_sf1+4)|0);
      HEAP32[(($st$8$1)>>2)]=$801$1;
      label = 186; break;
    case 165: 
      var $803=$2;
      var $804=$3;
      var $805=(($804)|0)==1;
      if ($805) { label = 166; break; } else { label = 167; break; }
    case 166: 
      var $807=$4;
      var $808=(($cap32)|0);
      var $809=HEAP32[(($808)>>2)];
      var $810=_getu32($807, $809);
      var $811$0=$810;
      var $811$1=0;
      var $853$1 = $811$1;var $853$0 = $811$0;label = 174; break;
    case 167: 
      var $813=$4;
      var $814=(($813)|0)!=0;
      if ($814) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $816=$4;
      var $817=(($cap64)|0);
      var $818=(($817)|0);
      var $819=HEAP32[(($818)>>2)];
      var $820=_getu32($816, $819);
      var $821$0=$820;
      var $821$1=0;
      var $822$0=0;
      var $822$1=$821$0;
      var $831$1 = $822$1;var $831$0 = $822$0;label = 170; break;
    case 169: 
      var $824=$4;
      var $825=(($cap64)|0);
      var $826=(($825)|0);
      var $827=HEAP32[(($826)>>2)];
      var $828=_getu32($824, $827);
      var $829$0=$828;
      var $829$1=0;
      var $831$1 = $829$1;var $831$0 = $829$0;label = 170; break;
    case 170: 
      var $831$0;
      var $831$1;
      var $832=$4;
      var $833=(($832)|0)!=0;
      if ($833) { label = 171; break; } else { label = 172; break; }
    case 171: 
      var $835=$4;
      var $836=(($cap64)|0);
      var $837=(($836+4)|0);
      var $838=HEAP32[(($837)>>2)];
      var $839=_getu32($835, $838);
      var $840$0=$839;
      var $840$1=0;
      var $850$1 = $840$1;var $850$0 = $840$0;label = 173; break;
    case 172: 
      var $842=$4;
      var $843=(($cap64)|0);
      var $844=(($843+4)|0);
      var $845=HEAP32[(($844)>>2)];
      var $846=_getu32($842, $845);
      var $847$0=$846;
      var $847$1=0;
      var $848$0=0;
      var $848$1=$847$0;
      var $850$1 = $848$1;var $850$0 = $848$0;label = 173; break;
    case 173: 
      var $850$0;
      var $850$1;
      var $851$0 = (i64Math.add($831$0,$831$1,$850$0,$850$1),HEAP32[((tempDoublePtr)>>2)]); var $851$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $853$1 = $851$1;var $853$0 = $851$0;label = 174; break;
    case 174: 
      var $853$0;
      var $853$1;
      var $854=$3;
      var $855=(($854)|0)==1;
      if ($855) { label = 175; break; } else { label = 176; break; }
    case 175: 
      var $857=$4;
      var $858=(($cap32+4)|0);
      var $859=$858;
      var $860=HEAP32[(($859)>>2)];
      var $861=_getu32($857, $860);
      var $862$0=$861;
      var $862$1=0;
      var $908$1 = $862$1;var $908$0 = $862$0;label = 183; break;
    case 176: 
      var $864=$4;
      var $865=(($864)|0)!=0;
      if ($865) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $867=$4;
      var $868=(($cap64+8)|0);
      var $869=$868;
      var $870=(($869)|0);
      var $871=HEAP32[(($870)>>2)];
      var $872=_getu32($867, $871);
      var $873$0=$872;
      var $873$1=0;
      var $874$0=0;
      var $874$1=$873$0;
      var $884$1 = $874$1;var $884$0 = $874$0;label = 179; break;
    case 178: 
      var $876=$4;
      var $877=(($cap64+8)|0);
      var $878=$877;
      var $879=(($878)|0);
      var $880=HEAP32[(($879)>>2)];
      var $881=_getu32($876, $880);
      var $882$0=$881;
      var $882$1=0;
      var $884$1 = $882$1;var $884$0 = $882$0;label = 179; break;
    case 179: 
      var $884$0;
      var $884$1;
      var $885=$4;
      var $886=(($885)|0)!=0;
      if ($886) { label = 180; break; } else { label = 181; break; }
    case 180: 
      var $888=$4;
      var $889=(($cap64+8)|0);
      var $890=$889;
      var $891=(($890+4)|0);
      var $892=HEAP32[(($891)>>2)];
      var $893=_getu32($888, $892);
      var $894$0=$893;
      var $894$1=0;
      var $905$1 = $894$1;var $905$0 = $894$0;label = 182; break;
    case 181: 
      var $896=$4;
      var $897=(($cap64+8)|0);
      var $898=$897;
      var $899=(($898+4)|0);
      var $900=HEAP32[(($899)>>2)];
      var $901=_getu32($896, $900);
      var $902$0=$901;
      var $902$1=0;
      var $903$0=0;
      var $903$1=$902$0;
      var $905$1 = $903$1;var $905$0 = $903$0;label = 182; break;
    case 182: 
      var $905$0;
      var $905$1;
      var $906$0 = (i64Math.add($884$0,$884$1,$905$0,$905$1),HEAP32[((tempDoublePtr)>>2)]); var $906$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $908$1 = $906$1;var $908$0 = $906$0;label = 183; break;
    case 183: 
      var $908$0;
      var $908$1;
      var $$etemp$5=((5267072)|0);
      var $909=_file_printf($803, $$etemp$5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$853$0,HEAP32[(((tempInt)+(4))>>2)]=$853$1,HEAP32[(((tempInt)+(8))>>2)]=$908$0,HEAP32[(((tempInt)+(12))>>2)]=$908$1,tempInt));
      var $910=(($909)|0)==-1;
      if ($910) { label = 184; break; } else { label = 185; break; }
    case 184: 
      $1=-1;
      label = 229; break;
    case 185: 
      label = 186; break;
    case 186: 
      label = 118; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      var $919=$7;
      var $920=((($919)-(1))|0);
      $7=$920;
      label = 7; break;
    case 192: 
      var $922=$2;
      var $923=$stripped;
      var $924=(($923)|0)!=0;
      var $925=$924 ? (((5264808)|0)) : (((5263644)|0));
      var $926=_file_printf($922, ((5265964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$925,tempInt));
      var $927=(($926)|0)==-1;
      if ($927) { label = 193; break; } else { label = 194; break; }
    case 193: 
      $1=-1;
      label = 229; break;
    case 194: 
      var $st$0$0=(($cap_hw1)|0);
      var $930$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($cap_hw1+4)|0);
      var $930$1=HEAP32[(($st$0$1)>>2)];
      var $$etemp$6$0=0;
      var $$etemp$6$1=0;
      var $931=$930$0 != $$etemp$6$0 || $930$1 != $$etemp$6$1;
      if ($931) { label = 195; break; } else { label = 218; break; }
    case 195: 
      var $933=$11;
      if ((($933)|0) == 2 || (($933)|0) == 18 || (($933)|0) == 43) {
        label = 196; break;
      }
      else if ((($933)|0) == 3 || (($933)|0) == 50 || (($933)|0) == 62) {
        label = 197; break;
      }
      else {
      label = 198; break;
      }
      
    case 196: 
      $cdp=((5259832)|0);
      label = 199; break;
    case 197: 
      $cdp=((5259976)|0);
      label = 199; break;
    case 198: 
      $cdp=0;
      label = 199; break;
    case 199: 
      var $938=$2;
      var $939=_file_printf($938, ((5262572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $940=(($939)|0)==-1;
      if ($940) { label = 200; break; } else { label = 201; break; }
    case 200: 
      $1=-1;
      label = 229; break;
    case 201: 
      var $943=$cdp;
      var $944=(($943)|0)!=0;
      if ($944) { label = 202; break; } else { label = 214; break; }
    case 202: 
      label = 203; break;
    case 203: 
      var $947=$cdp;
      var $948=(($947+8)|0);
      var $949=HEAP32[(($948)>>2)];
      var $950=(($949)|0)!=0;
      if ($950) { label = 204; break; } else { label = 209; break; }
    case 204: 
      var $st$0$0=(($cap_hw1)|0);
      var $952$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($cap_hw1+4)|0);
      var $952$1=HEAP32[(($st$0$1)>>2)];
      var $953=$cdp;
      var $954=(($953)|0);
      var $st$6$0=(($954)|0);
      var $955$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($954+4)|0);
      var $955$1=HEAP32[(($st$6$1)>>2)];
      var $956$0=$952$0 & $955$0;
      var $956$1=$952$1 & $955$1;
      var $$etemp$7$0=0;
      var $$etemp$7$1=0;
      var $957=$956$0 != $$etemp$7$0 || $956$1 != $$etemp$7$1;
      if ($957) { label = 205; break; } else { label = 208; break; }
    case 205: 
      var $959=$2;
      var $960=$cdp;
      var $961=(($960+8)|0);
      var $962=HEAP32[(($961)>>2)];
      var $963=_file_printf($959, ((5261772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$962,tempInt));
      var $964=(($963)|0)==-1;
      if ($964) { label = 206; break; } else { label = 207; break; }
    case 206: 
      $1=-1;
      label = 229; break;
    case 207: 
      var $967=$cdp;
      var $968=(($967)|0);
      var $st$2$0=(($968)|0);
      var $969$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($968+4)|0);
      var $969$1=HEAP32[(($st$2$1)>>2)];
      var $$etemp$8$0=-1;
      var $$etemp$8$1=-1;
      var $970$0=$969$0 ^ $$etemp$8$0;
      var $970$1=$969$1 ^ $$etemp$8$1;
      var $st$10$0=(($cap_hw1)|0);
      var $971$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($cap_hw1+4)|0);
      var $971$1=HEAP32[(($st$10$1)>>2)];
      var $972$0=$971$0 & $970$0;
      var $972$1=$971$1 & $970$1;
      var $st$16$0=(($cap_hw1)|0);
      HEAP32[(($st$16$0)>>2)]=$972$0;
      var $st$16$1=(($cap_hw1+4)|0);
      HEAP32[(($st$16$1)>>2)]=$972$1;
      label = 208; break;
    case 208: 
      var $974=$cdp;
      var $975=(($974+12)|0);
      $cdp=$975;
      label = 203; break;
    case 209: 
      var $st$0$0=(($cap_hw1)|0);
      var $977$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($cap_hw1+4)|0);
      var $977$1=HEAP32[(($st$0$1)>>2)];
      var $$etemp$9$0=0;
      var $$etemp$9$1=0;
      var $978=$977$0 != $$etemp$9$0 || $977$1 != $$etemp$9$1;
      if ($978) { label = 210; break; } else { label = 213; break; }
    case 210: 
      var $980=$2;
      var $st$1$0=(($cap_hw1)|0);
      var $981$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($cap_hw1+4)|0);
      var $981$1=HEAP32[(($st$1$1)>>2)];
      var $$etemp$10=((5260820)|0);
      var $982=_file_printf($980, $$etemp$10, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$981$0,HEAP32[(((tempInt)+(4))>>2)]=$981$1,tempInt));
      var $983=(($982)|0)==-1;
      if ($983) { label = 211; break; } else { label = 212; break; }
    case 211: 
      $1=-1;
      label = 229; break;
    case 212: 
      label = 213; break;
    case 213: 
      label = 217; break;
    case 214: 
      var $988=$2;
      var $st$1$0=(($cap_hw1)|0);
      var $989$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($cap_hw1+4)|0);
      var $989$1=HEAP32[(($st$1$1)>>2)];
      var $$etemp$11=((5273260)|0);
      var $990=_file_printf($988, $$etemp$11, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$989$0,HEAP32[(((tempInt)+(4))>>2)]=$989$1,tempInt));
      var $991=(($990)|0)==-1;
      if ($991) { label = 215; break; } else { label = 216; break; }
    case 215: 
      $1=-1;
      label = 229; break;
    case 216: 
      label = 217; break;
    case 217: 
      label = 218; break;
    case 218: 
      var $st$0$0=(($cap_sf1)|0);
      var $996$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($cap_sf1+4)|0);
      var $996$1=HEAP32[(($st$0$1)>>2)];
      var $$etemp$12$0=0;
      var $$etemp$12$1=0;
      var $997=$996$0 != $$etemp$12$0 || $996$1 != $$etemp$12$1;
      if ($997) { label = 219; break; } else { label = 228; break; }
    case 219: 
      var $st$0$0=(($cap_sf1)|0);
      var $999$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($cap_sf1+4)|0);
      var $999$1=HEAP32[(($st$0$1)>>2)];
      var $$etemp$13$0=2;
      var $$etemp$13$1=0;
      var $1000$0=$999$0 & $$etemp$13$0;
      var $1000$1=$999$1 & $$etemp$13$1;
      var $$etemp$14$0=0;
      var $$etemp$14$1=0;
      var $1001=$1000$0 != $$etemp$14$0 || $1000$1 != $$etemp$14$1;
      if ($1001) { label = 220; break; } else { label = 223; break; }
    case 220: 
      var $1003=$2;
      var $st$1$0=(($cap_sf1)|0);
      var $1004$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($cap_sf1+4)|0);
      var $1004$1=HEAP32[(($st$1$1)>>2)];
      var $$etemp$15$0=1;
      var $$etemp$15$1=0;
      var $1005$0=$1004$0 & $$etemp$15$0;
      var $1005$1=$1004$1 & $$etemp$15$1;
      var $$etemp$16$0=0;
      var $$etemp$16$1=0;
      var $1006=$1005$0 != $$etemp$16$0 || $1005$1 != $$etemp$16$1;
      var $1007=$1006 ? (((5272648)|0)) : (((5272032)|0));
      var $1008=_file_printf($1003, $1007, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1009=(($1008)|0)==-1;
      if ($1009) { label = 221; break; } else { label = 222; break; }
    case 221: 
      $1=-1;
      label = 229; break;
    case 222: 
      label = 223; break;
    case 223: 
      var $st$0$0=(($cap_sf1)|0);
      var $1013$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($cap_sf1+4)|0);
      var $1013$1=HEAP32[(($st$0$1)>>2)];
      var $$etemp$17$0=-4;
      var $$etemp$17$1=-1;
      var $1014$0=$1013$0 & $$etemp$17$0;
      var $1014$1=$1013$1 & $$etemp$17$1;
      var $st$8$0=(($cap_sf1)|0);
      HEAP32[(($st$8$0)>>2)]=$1014$0;
      var $st$8$1=(($cap_sf1+4)|0);
      HEAP32[(($st$8$1)>>2)]=$1014$1;
      var $st$12$0=(($cap_sf1)|0);
      var $1015$0=HEAP32[(($st$12$0)>>2)];
      var $st$12$1=(($cap_sf1+4)|0);
      var $1015$1=HEAP32[(($st$12$1)>>2)];
      var $$etemp$18$0=0;
      var $$etemp$18$1=0;
      var $1016=$1015$0 != $$etemp$18$0 || $1015$1 != $$etemp$18$1;
      if ($1016) { label = 224; break; } else { label = 227; break; }
    case 224: 
      var $1018=$2;
      var $st$1$0=(($cap_sf1)|0);
      var $1019$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($cap_sf1+4)|0);
      var $1019$1=HEAP32[(($st$1$1)>>2)];
      var $$etemp$19=((5271592)|0);
      var $1020=_file_printf($1018, $$etemp$19, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1019$0,HEAP32[(((tempInt)+(4))>>2)]=$1019$1,tempInt));
      var $1021=(($1020)|0)==-1;
      if ($1021) { label = 225; break; } else { label = 226; break; }
    case 225: 
      $1=-1;
      label = 229; break;
    case 226: 
      label = 227; break;
    case 227: 
      label = 228; break;
    case 228: 
      $1=0;
      label = 229; break;
    case 229: 
      var $1027=$1;
      STACKTOP = __stackBase__;
      return $1027;
    default: assert(0, "bad label: " + label);
  }
}
_doshn["X"]=1;

function _donote($ms, $vbuf, $offset, $size, $clazz, $swap, $align, $flags) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $nh32=__stackBase__;
      var $nh64=(__stackBase__)+(12);
      var $noff;
      var $doff;
      var $os_style;
      var $namesz;
      var $descsz;
      var $nbuf;
      var $desc=(__stackBase__)+(24);
      var $desc1=(__stackBase__)+(40);
      var $i;
      var $desc2=(__stackBase__)+(60);
      var $ver_patch;
      var $ver_rel;
      var $ver_min;
      var $ver_maj;
      var $desc3=(__stackBase__)+(64);
      var $desc4=(__stackBase__)+(68);
      var $signo=(__stackBase__)+(72);
      var $i5;
      var $j;
      var $c;
      var $cname;
      var $cp;
      var $reloffset;
      var $noffset;
      var $k;
      var $no;
      var $adjust;
      $2=$ms;
      $3=$vbuf;
      $4=$offset;
      $5=$size;
      $6=$clazz;
      $7=$swap;
      $8=$align;
      $9=$flags;
      $os_style=-1;
      var $10=$3;
      $nbuf=$10;
      var $11=$6;
      var $12=(($11)|0)==1;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$nh32;
      var $18 = $14;label = 5; break;
    case 4: 
      var $16=$nh64;
      var $18 = $16;label = 5; break;
    case 5: 
      var $18;
      var $19=$4;
      var $20=$nbuf;
      var $21=(($20+$19)|0);
      var $22=$6;
      var $23=(($22)|0)==1;
      var $24=$23 ? 12 : 12;
      assert($24 % 1 === 0);_memcpy($18, $21, $24);
      var $25=$6;
      var $26=(($25)|0)==1;
      var $27=$26 ? 12 : 12;
      var $28=$4;
      var $29=((($28)+($27))|0);
      $4=$29;
      var $30=$6;
      var $31=(($30)|0)==1;
      if ($31) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $33=$7;
      var $34=(($nh32)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_getu32($33, $35);
      var $43 = $36;label = 8; break;
    case 7: 
      var $38=$7;
      var $39=(($nh64)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=_getu32($38, $40);
      var $43 = $41;label = 8; break;
    case 8: 
      var $43;
      $namesz=$43;
      var $44=$6;
      var $45=(($44)|0)==1;
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $47=$7;
      var $48=(($nh32+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=_getu32($47, $49);
      var $57 = $50;label = 11; break;
    case 10: 
      var $52=$7;
      var $53=(($nh64+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=_getu32($52, $54);
      var $57 = $55;label = 11; break;
    case 11: 
      var $57;
      $descsz=$57;
      var $58=$namesz;
      var $59=(($58)|0)==0;
      if ($59) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $61=$descsz;
      var $62=(($61)|0)==0;
      if ($62) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $64=$4;
      var $65=$5;
      var $66=(($64)>>>0) >= (($65)>>>0);
      if ($66) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $68=$4;
      var $72 = $68;label = 16; break;
    case 15: 
      var $70=$5;
      var $72 = $70;label = 16; break;
    case 16: 
      var $72;
      $1=$72;
      label = 296; break;
    case 17: 
      var $74=$namesz;
      var $75=$74 & -2147483648;
      var $76=(($75)|0)!=0;
      if ($76) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $78=$2;
      var $79=$namesz;
      var $80=_file_printf($78, ((5265152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$79,tempInt));
      var $81=$4;
      $1=$81;
      label = 296; break;
    case 19: 
      var $83=$descsz;
      var $84=$83 & -2147483648;
      var $85=(($84)|0)!=0;
      if ($85) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $87=$2;
      var $88=$descsz;
      var $89=_file_printf($87, ((5264992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$88,tempInt));
      var $90=$4;
      $1=$90;
      label = 296; break;
    case 21: 
      var $92=$4;
      $noff=$92;
      var $93=$4;
      var $94=$namesz;
      var $95=((($93)+($94))|0);
      var $96=$8;
      var $97=((($95)+($96))|0);
      var $98=((($97)-(1))|0);
      var $99=$8;
      var $100=Math.floor(((($98)>>>0))/((($99)>>>0)));
      var $101=$8;
      var $102=((($100)*($101))|0);
      $doff=$102;
      var $103=$4;
      var $104=$namesz;
      var $105=((($103)+($104))|0);
      var $106=$5;
      var $107=(($105)>>>0) > (($106)>>>0);
      if ($107) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $109=$doff;
      $1=$109;
      label = 296; break;
    case 23: 
      var $111=$doff;
      var $112=$descsz;
      var $113=((($111)+($112))|0);
      var $114=$8;
      var $115=((($113)+($114))|0);
      var $116=((($115)-(1))|0);
      var $117=$8;
      var $118=Math.floor(((($116)>>>0))/((($117)>>>0)));
      var $119=$8;
      var $120=((($118)*($119))|0);
      $4=$120;
      var $121=$doff;
      var $122=$descsz;
      var $123=((($121)+($122))|0);
      var $124=$5;
      var $125=(($123)>>>0) > (($124)>>>0);
      if ($125) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $127=$4;
      var $128=$5;
      var $129=(($127)>>>0) >= (($128)>>>0);
      if ($129) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $131=$4;
      var $135 = $131;label = 27; break;
    case 26: 
      var $133=$5;
      var $135 = $133;label = 27; break;
    case 27: 
      var $135;
      $1=$135;
      label = 296; break;
    case 28: 
      var $137=$9;
      var $138=HEAP32[(($137)>>2)];
      var $139=$138 & 6;
      var $140=(($139)|0)==6;
      if ($140) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 193; break;
    case 30: 
      var $143=$namesz;
      var $144=(($143)|0)==5;
      if ($144) { label = 31; break; } else { label = 38; break; }
    case 31: 
      var $146=$noff;
      var $147=$nbuf;
      var $148=(($147+$146)|0);
      var $149=_strcmp($148, ((5264760)|0));
      var $150=(($149)|0)==0;
      if ($150) { label = 32; break; } else { label = 38; break; }
    case 32: 
      var $152=$6;
      var $153=(($152)|0)==1;
      if ($153) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $155=$7;
      var $156=(($nh32+8)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=_getu32($155, $157);
      var $165 = $158;label = 35; break;
    case 34: 
      var $160=$7;
      var $161=(($nh64+8)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=_getu32($160, $162);
      var $165 = $163;label = 35; break;
    case 35: 
      var $165;
      var $166=(($165)|0)==1;
      if ($166) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $168=$descsz;
      var $169=(($168)|0)==2;
      if ($169) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $171=$2;
      var $172=$doff;
      var $173=$nbuf;
      var $174=(($173+$172)|0);
      var $175=HEAP8[($174)];
      var $176=(($175)&255);
      var $177=$doff;
      var $178=((($177)+(1))|0);
      var $179=$nbuf;
      var $180=(($179+$178)|0);
      var $181=HEAP8[($180)];
      var $182=(($181)&255);
      var $183=_file_printf($171, ((5264508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$176,HEAP32[(((tempInt)+(4))>>2)]=$182,tempInt));
      label = 38; break;
    case 38: 
      var $185=$namesz;
      var $186=(($185)|0)==4;
      if ($186) { label = 39; break; } else { label = 69; break; }
    case 39: 
      var $188=$noff;
      var $189=$nbuf;
      var $190=(($189+$188)|0);
      var $191=_strcmp($190, ((5264400)|0));
      var $192=(($191)|0)==0;
      if ($192) { label = 40; break; } else { label = 69; break; }
    case 40: 
      var $194=$6;
      var $195=(($194)|0)==1;
      if ($195) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $197=$7;
      var $198=(($nh32+8)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=_getu32($197, $199);
      var $207 = $200;label = 43; break;
    case 42: 
      var $202=$7;
      var $203=(($nh64+8)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=_getu32($202, $204);
      var $207 = $205;label = 43; break;
    case 43: 
      var $207;
      var $208=(($207)|0)==1;
      if ($208) { label = 44; break; } else { label = 69; break; }
    case 44: 
      var $210=$descsz;
      var $211=(($210)|0)==16;
      if ($211) { label = 45; break; } else { label = 69; break; }
    case 45: 
      var $213=$desc;
      var $214=$doff;
      var $215=$nbuf;
      var $216=(($215+$214)|0);
      assert(16 % 1 === 0);for (var $$src = $216, $$dest = $213, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $217=$2;
      var $218=_file_printf($217, ((5264236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $219=(($218)|0)==-1;
      if ($219) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $221=$5;
      $1=$221;
      label = 296; break;
    case 47: 
      var $223=$7;
      var $224=(($desc)|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=_getu32($223, $225);
      if ((($226)|0) == 0) {
        label = 48; break;
      }
      else if ((($226)|0) == 1) {
        label = 51; break;
      }
      else if ((($226)|0) == 2) {
        label = 54; break;
      }
      else if ((($226)|0) == 3) {
        label = 57; break;
      }
      else if ((($226)|0) == 4) {
        label = 60; break;
      }
      else {
      label = 63; break;
      }
      
    case 48: 
      var $228=$2;
      var $229=_file_printf($228, ((5264116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $230=(($229)|0)==-1;
      if ($230) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $232=$5;
      $1=$232;
      label = 296; break;
    case 50: 
      label = 66; break;
    case 51: 
      var $235=$2;
      var $236=_file_printf($235, ((5264028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $237=(($236)|0)==-1;
      if ($237) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $239=$5;
      $1=$239;
      label = 296; break;
    case 53: 
      label = 66; break;
    case 54: 
      var $242=$2;
      var $243=_file_printf($242, ((5263948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $244=(($243)|0)==-1;
      if ($244) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $246=$5;
      $1=$246;
      label = 296; break;
    case 56: 
      label = 66; break;
    case 57: 
      var $249=$2;
      var $250=_file_printf($249, ((5263896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $251=(($250)|0)==-1;
      if ($251) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $253=$5;
      $1=$253;
      label = 296; break;
    case 59: 
      label = 66; break;
    case 60: 
      var $256=$2;
      var $257=_file_printf($256, ((5263828)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $258=(($257)|0)==-1;
      if ($258) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $260=$5;
      $1=$260;
      label = 296; break;
    case 62: 
      label = 66; break;
    case 63: 
      var $263=$2;
      var $264=_file_printf($263, ((5263772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $265=(($264)|0)==-1;
      if ($265) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $267=$5;
      $1=$267;
      label = 296; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $270=$2;
      var $271=$7;
      var $272=(($desc+4)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=_getu32($271, $273);
      var $275=$7;
      var $276=(($desc+8)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=_getu32($275, $277);
      var $279=$7;
      var $280=(($desc+12)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=_getu32($279, $281);
      var $283=_file_printf($270, ((5263608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$274,HEAP32[(((tempInt)+(4))>>2)]=$278,HEAP32[(((tempInt)+(8))>>2)]=$282,tempInt));
      var $284=(($283)|0)==-1;
      if ($284) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $286=$5;
      $1=$286;
      label = 296; break;
    case 68: 
      var $288=$9;
      var $289=HEAP32[(($288)>>2)];
      var $290=$289 | 2;
      HEAP32[(($288)>>2)]=$290;
      var $291=$5;
      $1=$291;
      label = 296; break;
    case 69: 
      var $293=$namesz;
      var $294=(($293)|0)==4;
      if ($294) { label = 70; break; } else { label = 86; break; }
    case 70: 
      var $296=$noff;
      var $297=$nbuf;
      var $298=(($297+$296)|0);
      var $299=_strcmp($298, ((5264400)|0));
      var $300=(($299)|0)==0;
      if ($300) { label = 71; break; } else { label = 86; break; }
    case 71: 
      var $302=$6;
      var $303=(($302)|0)==1;
      if ($303) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $305=$7;
      var $306=(($nh32+8)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=_getu32($305, $307);
      var $315 = $308;label = 74; break;
    case 73: 
      var $310=$7;
      var $311=(($nh64+8)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=_getu32($310, $312);
      var $315 = $313;label = 74; break;
    case 74: 
      var $315;
      var $316=(($315)|0)==3;
      if ($316) { label = 75; break; } else { label = 86; break; }
    case 75: 
      var $318=$descsz;
      var $319=(($318)|0)==16;
      if ($319) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $321=$descsz;
      var $322=(($321)|0)==20;
      if ($322) { label = 77; break; } else { label = 86; break; }
    case 77: 
      var $324=$2;
      var $325=$descsz;
      var $326=(($325)|0)==16;
      var $327=$326 ? (((5263404)|0)) : (((5263120)|0));
      var $328=_file_printf($324, ((5263492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$327,tempInt));
      var $329=(($328)|0)==-1;
      if ($329) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $331=$5;
      $1=$331;
      label = 296; break;
    case 79: 
      var $333=$desc1;
      var $334=$doff;
      var $335=$nbuf;
      var $336=(($335+$334)|0);
      var $337=$descsz;
      assert($337 % 1 === 0);_memcpy($333, $336, $337);
      $i=0;
      label = 80; break;
    case 80: 
      var $339=$i;
      var $340=$descsz;
      var $341=(($339)>>>0) < (($340)>>>0);
      if ($341) { label = 81; break; } else { label = 85; break; }
    case 81: 
      var $343=$2;
      var $344=$i;
      var $345=(($desc1+$344)|0);
      var $346=HEAP8[($345)];
      var $347=(($346)&255);
      var $348=_file_printf($343, ((5263060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$347,tempInt));
      var $349=(($348)|0)==-1;
      if ($349) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $351=$5;
      $1=$351;
      label = 296; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $354=$i;
      var $355=((($354)+(1))|0);
      $i=$355;
      label = 80; break;
    case 85: 
      var $357=$9;
      var $358=HEAP32[(($357)>>2)];
      var $359=$358 | 4;
      HEAP32[(($357)>>2)]=$359;
      label = 86; break;
    case 86: 
      var $361=$namesz;
      var $362=(($361)|0)==7;
      if ($362) { label = 87; break; } else { label = 115; break; }
    case 87: 
      var $364=$noff;
      var $365=$nbuf;
      var $366=(($365+$364)|0);
      var $367=_strcmp($366, ((5262992)|0));
      var $368=(($367)|0)==0;
      if ($368) { label = 88; break; } else { label = 115; break; }
    case 88: 
      var $370=$6;
      var $371=(($370)|0)==1;
      if ($371) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $373=$7;
      var $374=(($nh32+8)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=_getu32($373, $375);
      var $383 = $376;label = 91; break;
    case 90: 
      var $378=$7;
      var $379=(($nh64+8)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=_getu32($378, $380);
      var $383 = $381;label = 91; break;
    case 91: 
      var $383;
      var $384=(($383)|0)==1;
      if ($384) { label = 92; break; } else { label = 115; break; }
    case 92: 
      var $386=$descsz;
      var $387=(($386)|0)==4;
      if ($387) { label = 93; break; } else { label = 115; break; }
    case 93: 
      var $389=$desc2;
      var $390=$doff;
      var $391=$nbuf;
      var $392=(($391+$390)|0);
      assert(4 % 1 === 0);HEAP8[($389)]=HEAP8[($392)];HEAP8[(($389)+(1))]=HEAP8[(($392)+(1))];HEAP8[(($389)+(2))]=HEAP8[(($392)+(2))];HEAP8[(($389)+(3))]=HEAP8[(($392)+(3))];
      var $393=$7;
      var $394=HEAP32[(($desc2)>>2)];
      var $395=_getu32($393, $394);
      HEAP32[(($desc2)>>2)]=$395;
      var $396=$2;
      var $397=_file_printf($396, ((5262924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $398=(($397)|0)==-1;
      if ($398) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $400=$5;
      $1=$400;
      label = 296; break;
    case 95: 
      var $402=HEAP32[(($desc2)>>2)];
      var $403=(($402)>>>0) > 100000000;
      if ($403) { label = 96; break; } else { label = 114; break; }
    case 96: 
      var $405=HEAP32[(($desc2)>>2)];
      var $406=Math.floor(((($405)>>>0))/(100));
      var $407=((($406)>>>0))%(100);
      $ver_patch=$407;
      var $408=HEAP32[(($desc2)>>2)];
      var $409=Math.floor(((($408)>>>0))/(10000));
      var $410=((($409)>>>0))%(100);
      $ver_rel=$410;
      var $411=HEAP32[(($desc2)>>2)];
      var $412=Math.floor(((($411)>>>0))/(1000000));
      var $413=((($412)>>>0))%(100);
      $ver_min=$413;
      var $414=HEAP32[(($desc2)>>2)];
      var $415=Math.floor(((($414)>>>0))/(100000000));
      $ver_maj=$415;
      var $416=$2;
      var $417=$ver_maj;
      var $418=$ver_min;
      var $419=_file_printf($416, ((5262868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$417,HEAP32[(((tempInt)+(4))>>2)]=$418,tempInt));
      var $420=(($419)|0)==-1;
      if ($420) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $422=$5;
      $1=$422;
      label = 296; break;
    case 98: 
      var $424=$ver_rel;
      var $425=(($424)|0)==0;
      if ($425) { label = 99; break; } else { label = 103; break; }
    case 99: 
      var $427=$ver_patch;
      var $428=(($427)|0)!=0;
      if ($428) { label = 100; break; } else { label = 103; break; }
    case 100: 
      var $430=$2;
      var $431=$ver_patch;
      var $432=_file_printf($430, ((5262728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$431,tempInt));
      var $433=(($432)|0)==-1;
      if ($433) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $435=$5;
      $1=$435;
      label = 296; break;
    case 102: 
      label = 113; break;
    case 103: 
      var $438=$ver_rel;
      var $439=(($438)|0)!=0;
      if ($439) { label = 104; break; } else { label = 112; break; }
    case 104: 
      label = 105; break;
    case 105: 
      var $442=$ver_rel;
      var $443=(($442)>>>0) > 26;
      if ($443) { label = 106; break; } else { label = 109; break; }
    case 106: 
      var $445=$2;
      var $446=_file_printf($445, ((5262676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $447=(($446)|0)==-1;
      if ($447) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $449=$5;
      $1=$449;
      label = 296; break;
    case 108: 
      var $451=$ver_rel;
      var $452=((($451)-(26))|0);
      $ver_rel=$452;
      label = 105; break;
    case 109: 
      var $454=$2;
      var $455=$ver_rel;
      var $456=((($455)+(65))|0);
      var $457=((($456)-(1))|0);
      var $458=_file_printf($454, ((5262508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$457,tempInt));
      var $459=(($458)|0)==-1;
      if ($459) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $461=$5;
      $1=$461;
      label = 296; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $466=$9;
      var $467=HEAP32[(($466)>>2)];
      var $468=$467 | 2;
      HEAP32[(($466)>>2)]=$468;
      var $469=$5;
      $1=$469;
      label = 296; break;
    case 115: 
      var $471=$namesz;
      var $472=(($471)|0)==8;
      if ($472) { label = 116; break; } else { label = 170; break; }
    case 116: 
      var $474=$noff;
      var $475=$nbuf;
      var $476=(($475+$474)|0);
      var $477=_strcmp($476, ((5262400)|0));
      var $478=(($477)|0)==0;
      if ($478) { label = 117; break; } else { label = 170; break; }
    case 117: 
      var $480=$6;
      var $481=(($480)|0)==1;
      if ($481) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $483=$7;
      var $484=(($nh32+8)|0);
      var $485=HEAP32[(($484)>>2)];
      var $486=_getu32($483, $485);
      var $493 = $486;label = 120; break;
    case 119: 
      var $488=$7;
      var $489=(($nh64+8)|0);
      var $490=HEAP32[(($489)>>2)];
      var $491=_getu32($488, $490);
      var $493 = $491;label = 120; break;
    case 120: 
      var $493;
      var $494=(($493)|0)==1;
      if ($494) { label = 121; break; } else { label = 170; break; }
    case 121: 
      var $496=$descsz;
      var $497=(($496)|0)==4;
      if ($497) { label = 122; break; } else { label = 170; break; }
    case 122: 
      var $499=$desc3;
      var $500=$doff;
      var $501=$nbuf;
      var $502=(($501+$500)|0);
      assert(4 % 1 === 0);HEAP8[($499)]=HEAP8[($502)];HEAP8[(($499)+(1))]=HEAP8[(($502)+(1))];HEAP8[(($499)+(2))]=HEAP8[(($502)+(2))];HEAP8[(($499)+(3))]=HEAP8[(($502)+(3))];
      var $503=$7;
      var $504=HEAP32[(($desc3)>>2)];
      var $505=_getu32($503, $504);
      HEAP32[(($desc3)>>2)]=$505;
      var $506=$2;
      var $507=_file_printf($506, ((5262344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $508=(($507)|0)==-1;
      if ($508) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $510=$5;
      $1=$510;
      label = 296; break;
    case 124: 
      var $512=HEAP32[(($desc3)>>2)];
      var $513=(($512)|0)==460002;
      if ($513) { label = 125; break; } else { label = 128; break; }
    case 125: 
      var $515=$2;
      var $516=_file_printf($515, ((5262280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $517=(($516)|0)==-1;
      if ($517) { label = 126; break; } else { label = 127; break; }
    case 126: 
      var $519=$5;
      $1=$519;
      label = 296; break;
    case 127: 
      label = 169; break;
    case 128: 
      var $522=HEAP32[(($desc3)>>2)];
      var $523=(($522)>>>0) < 460100;
      if ($523) { label = 129; break; } else { label = 141; break; }
    case 129: 
      var $525=$2;
      var $526=HEAP32[(($desc3)>>2)];
      var $527=Math.floor(((($526)>>>0))/(100000));
      var $528=HEAP32[(($desc3)>>2)];
      var $529=Math.floor(((($528)>>>0))/(10000));
      var $530=((($529)>>>0))%(10);
      var $531=_file_printf($525, ((5262240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$527,HEAP32[(((tempInt)+(4))>>2)]=$530,tempInt));
      var $532=(($531)|0)==-1;
      if ($532) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $534=$5;
      $1=$534;
      label = 296; break;
    case 131: 
      var $536=HEAP32[(($desc3)>>2)];
      var $537=Math.floor(((($536)>>>0))/(1000));
      var $538=((($537)>>>0))%(10);
      var $539=(($538)>>>0) > 0;
      if ($539) { label = 132; break; } else { label = 135; break; }
    case 132: 
      var $541=$2;
      var $542=HEAP32[(($desc3)>>2)];
      var $543=Math.floor(((($542)>>>0))/(1000));
      var $544=((($543)>>>0))%(10);
      var $545=_file_printf($541, ((5262160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$544,tempInt));
      var $546=(($545)|0)==-1;
      if ($546) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $548=$5;
      $1=$548;
      label = 296; break;
    case 134: 
      label = 135; break;
    case 135: 
      var $551=HEAP32[(($desc3)>>2)];
      var $552=((($551)>>>0))%(1000);
      var $553=(($552)>>>0) > 0;
      if ($553) { label = 137; break; } else { label = 136; break; }
    case 136: 
      var $555=HEAP32[(($desc3)>>2)];
      var $556=((($555)>>>0))%(100000);
      var $557=(($556)|0)==0;
      if ($557) { label = 137; break; } else { label = 140; break; }
    case 137: 
      var $559=$2;
      var $560=HEAP32[(($desc3)>>2)];
      var $561=_file_printf($559, ((5262104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$560,tempInt));
      var $562=(($561)|0)==-1;
      if ($562) { label = 138; break; } else { label = 139; break; }
    case 138: 
      var $564=$5;
      $1=$564;
      label = 296; break;
    case 139: 
      label = 140; break;
    case 140: 
      label = 168; break;
    case 141: 
      var $568=HEAP32[(($desc3)>>2)];
      var $569=(($568)>>>0) < 500000;
      if ($569) { label = 142; break; } else { label = 154; break; }
    case 142: 
      var $571=$2;
      var $572=HEAP32[(($desc3)>>2)];
      var $573=Math.floor(((($572)>>>0))/(100000));
      var $574=HEAP32[(($desc3)>>2)];
      var $575=Math.floor(((($574)>>>0))/(10000));
      var $576=((($575)>>>0))%(10);
      var $577=HEAP32[(($desc3)>>2)];
      var $578=Math.floor(((($577)>>>0))/(1000));
      var $579=((($578)>>>0))%(10);
      var $580=((($576)+($579))|0);
      var $581=_file_printf($571, ((5262240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$573,HEAP32[(((tempInt)+(4))>>2)]=$580,tempInt));
      var $582=(($581)|0)==-1;
      if ($582) { label = 143; break; } else { label = 144; break; }
    case 143: 
      var $584=$5;
      $1=$584;
      label = 296; break;
    case 144: 
      var $586=HEAP32[(($desc3)>>2)];
      var $587=Math.floor(((($586)>>>0))/(100));
      var $588=((($587)>>>0))%(10);
      var $589=(($588)>>>0) > 0;
      if ($589) { label = 145; break; } else { label = 148; break; }
    case 145: 
      var $591=$2;
      var $592=HEAP32[(($desc3)>>2)];
      var $593=_file_printf($591, ((5262104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$592,tempInt));
      var $594=(($593)|0)==-1;
      if ($594) { label = 146; break; } else { label = 147; break; }
    case 146: 
      var $596=$5;
      $1=$596;
      label = 296; break;
    case 147: 
      label = 153; break;
    case 148: 
      var $599=HEAP32[(($desc3)>>2)];
      var $600=Math.floor(((($599)>>>0))/(10));
      var $601=((($600)>>>0))%(10);
      var $602=(($601)>>>0) > 0;
      if ($602) { label = 149; break; } else { label = 152; break; }
    case 149: 
      var $604=$2;
      var $605=HEAP32[(($desc3)>>2)];
      var $606=Math.floor(((($605)>>>0))/(10));
      var $607=((($606)>>>0))%(10);
      var $608=_file_printf($604, ((5262160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$607,tempInt));
      var $609=(($608)|0)==-1;
      if ($609) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $611=$5;
      $1=$611;
      label = 296; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 167; break;
    case 154: 
      var $616=$2;
      var $617=HEAP32[(($desc3)>>2)];
      var $618=Math.floor(((($617)>>>0))/(100000));
      var $619=HEAP32[(($desc3)>>2)];
      var $620=Math.floor(((($619)>>>0))/(1000));
      var $621=((($620)>>>0))%(100);
      var $622=_file_printf($616, ((5262240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$618,HEAP32[(((tempInt)+(4))>>2)]=$621,tempInt));
      var $623=(($622)|0)==-1;
      if ($623) { label = 155; break; } else { label = 156; break; }
    case 155: 
      var $625=$5;
      $1=$625;
      label = 296; break;
    case 156: 
      var $627=HEAP32[(($desc3)>>2)];
      var $628=Math.floor(((($627)>>>0))/(100));
      var $629=((($628)>>>0))%(10);
      var $630=(($629)>>>0) > 0;
      if ($630) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $632=HEAP32[(($desc3)>>2)];
      var $633=((($632)>>>0))%(100000);
      var $634=Math.floor(((($633)>>>0))/(100));
      var $635=(($634)|0)==0;
      if ($635) { label = 158; break; } else { label = 161; break; }
    case 158: 
      var $637=$2;
      var $638=HEAP32[(($desc3)>>2)];
      var $639=_file_printf($637, ((5262104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$638,tempInt));
      var $640=(($639)|0)==-1;
      if ($640) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $642=$5;
      $1=$642;
      label = 296; break;
    case 160: 
      label = 166; break;
    case 161: 
      var $645=HEAP32[(($desc3)>>2)];
      var $646=Math.floor(((($645)>>>0))/(10));
      var $647=((($646)>>>0))%(10);
      var $648=(($647)>>>0) > 0;
      if ($648) { label = 162; break; } else { label = 165; break; }
    case 162: 
      var $650=$2;
      var $651=HEAP32[(($desc3)>>2)];
      var $652=Math.floor(((($651)>>>0))/(10));
      var $653=((($652)>>>0))%(10);
      var $654=_file_printf($650, ((5262160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$653,tempInt));
      var $655=(($654)|0)==-1;
      if ($655) { label = 163; break; } else { label = 164; break; }
    case 163: 
      var $657=$5;
      $1=$657;
      label = 296; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $664=$9;
      var $665=HEAP32[(($664)>>2)];
      var $666=$665 | 2;
      HEAP32[(($664)>>2)]=$666;
      var $667=$5;
      $1=$667;
      label = 296; break;
    case 170: 
      var $669=$namesz;
      var $670=(($669)|0)==8;
      if ($670) { label = 171; break; } else { label = 180; break; }
    case 171: 
      var $672=$noff;
      var $673=$nbuf;
      var $674=(($673+$672)|0);
      var $675=_strcmp($674, ((5262044)|0));
      var $676=(($675)|0)==0;
      if ($676) { label = 172; break; } else { label = 180; break; }
    case 172: 
      var $678=$6;
      var $679=(($678)|0)==1;
      if ($679) { label = 173; break; } else { label = 174; break; }
    case 173: 
      var $681=$7;
      var $682=(($nh32+8)|0);
      var $683=HEAP32[(($682)>>2)];
      var $684=_getu32($681, $683);
      var $691 = $684;label = 175; break;
    case 174: 
      var $686=$7;
      var $687=(($nh64+8)|0);
      var $688=HEAP32[(($687)>>2)];
      var $689=_getu32($686, $688);
      var $691 = $689;label = 175; break;
    case 175: 
      var $691;
      var $692=(($691)|0)==1;
      if ($692) { label = 176; break; } else { label = 180; break; }
    case 176: 
      var $694=$descsz;
      var $695=(($694)|0)==4;
      if ($695) { label = 177; break; } else { label = 180; break; }
    case 177: 
      var $697=$2;
      var $698=_file_printf($697, ((5261960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $699=(($698)|0)==-1;
      if ($699) { label = 178; break; } else { label = 179; break; }
    case 178: 
      var $701=$5;
      $1=$701;
      label = 296; break;
    case 179: 
      var $703=$9;
      var $704=HEAP32[(($703)>>2)];
      var $705=$704 | 2;
      HEAP32[(($703)>>2)]=$705;
      var $706=$5;
      $1=$706;
      label = 296; break;
    case 180: 
      var $708=$namesz;
      var $709=(($708)|0)==10;
      if ($709) { label = 181; break; } else { label = 192; break; }
    case 181: 
      var $711=$noff;
      var $712=$nbuf;
      var $713=(($712+$711)|0);
      var $714=_strcmp($713, ((5261860)|0));
      var $715=(($714)|0)==0;
      if ($715) { label = 182; break; } else { label = 192; break; }
    case 182: 
      var $717=$6;
      var $718=(($717)|0)==1;
      if ($718) { label = 183; break; } else { label = 184; break; }
    case 183: 
      var $720=$7;
      var $721=(($nh32+8)|0);
      var $722=HEAP32[(($721)>>2)];
      var $723=_getu32($720, $722);
      var $730 = $723;label = 185; break;
    case 184: 
      var $725=$7;
      var $726=(($nh64+8)|0);
      var $727=HEAP32[(($726)>>2)];
      var $728=_getu32($725, $727);
      var $730 = $728;label = 185; break;
    case 185: 
      var $730;
      var $731=(($730)|0)==1;
      if ($731) { label = 186; break; } else { label = 192; break; }
    case 186: 
      var $733=$descsz;
      var $734=(($733)|0)==4;
      if ($734) { label = 187; break; } else { label = 192; break; }
    case 187: 
      var $736=$2;
      var $737=_file_printf($736, ((5261664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $738=(($737)|0)==-1;
      if ($738) { label = 188; break; } else { label = 189; break; }
    case 188: 
      var $740=$5;
      $1=$740;
      label = 296; break;
    case 189: 
      var $742=$desc4;
      var $743=$doff;
      var $744=$nbuf;
      var $745=(($744+$743)|0);
      assert(4 % 1 === 0);HEAP8[($742)]=HEAP8[($745)];HEAP8[(($742)+(1))]=HEAP8[(($745)+(1))];HEAP8[(($742)+(2))]=HEAP8[(($745)+(2))];HEAP8[(($742)+(3))]=HEAP8[(($745)+(3))];
      var $746=$7;
      var $747=HEAP32[(($desc4)>>2)];
      var $748=_getu32($746, $747);
      HEAP32[(($desc4)>>2)]=$748;
      var $749=$2;
      var $750=HEAP32[(($desc4)>>2)];
      var $751=Math.floor(((($750)>>>0))/(100000));
      var $752=HEAP32[(($desc4)>>2)];
      var $753=Math.floor(((($752)>>>0))/(10000));
      var $754=((($753)>>>0))%(10);
      var $755=HEAP32[(($desc4)>>2)];
      var $756=((($755)>>>0))%(10000);
      var $757=_file_printf($749, ((5263608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$751,HEAP32[(((tempInt)+(4))>>2)]=$754,HEAP32[(((tempInt)+(8))>>2)]=$756,tempInt));
      var $758=(($757)|0)==-1;
      if ($758) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $760=$5;
      $1=$760;
      label = 296; break;
    case 191: 
      var $762=$9;
      var $763=HEAP32[(($762)>>2)];
      var $764=$763 | 2;
      HEAP32[(($762)>>2)]=$764;
      var $765=$5;
      $1=$765;
      label = 296; break;
    case 192: 
      label = 193; break;
    case 193: 
      var $768=$namesz;
      var $769=(($768)|0)==4;
      if ($769) { label = 194; break; } else { label = 195; break; }
    case 194: 
      var $771=$noff;
      var $772=$nbuf;
      var $773=(($772+$771)|0);
      var $774=_strncmp($773, ((5261544)|0), 4);
      var $775=(($774)|0)==0;
      if ($775) { label = 197; break; } else { label = 195; break; }
    case 195: 
      var $777=$namesz;
      var $778=(($777)|0)==5;
      if ($778) { label = 196; break; } else { label = 198; break; }
    case 196: 
      var $780=$noff;
      var $781=$nbuf;
      var $782=(($781+$780)|0);
      var $783=_strcmp($782, ((5261544)|0));
      var $784=(($783)|0)==0;
      if ($784) { label = 197; break; } else { label = 198; break; }
    case 197: 
      $os_style=0;
      label = 198; break;
    case 198: 
      var $787=$namesz;
      var $788=(($787)|0)==8;
      if ($788) { label = 199; break; } else { label = 201; break; }
    case 199: 
      var $790=$noff;
      var $791=$nbuf;
      var $792=(($791+$790)|0);
      var $793=_strcmp($792, ((5262400)|0));
      var $794=(($793)|0)==0;
      if ($794) { label = 200; break; } else { label = 201; break; }
    case 200: 
      $os_style=1;
      label = 201; break;
    case 201: 
      var $797=$namesz;
      var $798=(($797)>>>0) >= 11;
      if ($798) { label = 202; break; } else { label = 204; break; }
    case 202: 
      var $800=$noff;
      var $801=$nbuf;
      var $802=(($801+$800)|0);
      var $803=_strncmp($802, ((5261432)|0), 11);
      var $804=(($803)|0)==0;
      if ($804) { label = 203; break; } else { label = 204; break; }
    case 203: 
      $os_style=2;
      label = 204; break;
    case 204: 
      var $807=$9;
      var $808=HEAP32[(($807)>>2)];
      var $809=$808 & 1;
      var $810=(($809)|0)!=0;
      if ($810) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $812=$5;
      $1=$812;
      label = 296; break;
    case 206: 
      var $814=$os_style;
      var $815=(($814)|0)!=-1;
      if ($815) { label = 207; break; } else { label = 211; break; }
    case 207: 
      var $817=$9;
      var $818=HEAP32[(($817)>>2)];
      var $819=$818 & 8;
      var $820=(($819)|0)==0;
      if ($820) { label = 208; break; } else { label = 211; break; }
    case 208: 
      var $822=$2;
      var $823=$os_style;
      var $824=((5246328+($823<<3))|0);
      var $825=(($824)|0);
      var $826=_file_printf($822, ((5261312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$825,tempInt));
      var $827=(($826)|0)==-1;
      if ($827) { label = 209; break; } else { label = 210; break; }
    case 209: 
      var $829=$5;
      $1=$829;
      label = 296; break;
    case 210: 
      var $831=$9;
      var $832=HEAP32[(($831)>>2)];
      var $833=$832 | 8;
      HEAP32[(($831)>>2)]=$833;
      label = 211; break;
    case 211: 
      var $835=$os_style;
      if ((($835)|0) == 2) {
        label = 212; break;
      }
      else {
      label = 222; break;
      }
      
    case 212: 
      var $837=$6;
      var $838=(($837)|0)==1;
      if ($838) { label = 213; break; } else { label = 214; break; }
    case 213: 
      var $840=$7;
      var $841=(($nh32+8)|0);
      var $842=HEAP32[(($841)>>2)];
      var $843=_getu32($840, $842);
      var $850 = $843;label = 215; break;
    case 214: 
      var $845=$7;
      var $846=(($nh64+8)|0);
      var $847=HEAP32[(($846)>>2)];
      var $848=_getu32($845, $847);
      var $850 = $848;label = 215; break;
    case 215: 
      var $850;
      var $851=(($850)|0)==1;
      if ($851) { label = 216; break; } else { label = 221; break; }
    case 216: 
      var $853=$2;
      var $854=$doff;
      var $855=((($854)+(124))|0);
      var $856=$nbuf;
      var $857=(($856+$855)|0);
      var $858=_file_printf($853, ((5261232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$857,tempInt));
      var $859=(($858)|0)==-1;
      if ($859) { label = 217; break; } else { label = 218; break; }
    case 217: 
      var $861=$5;
      $1=$861;
      label = 296; break;
    case 218: 
      var $863=$signo;
      var $864=$doff;
      var $865=((($864)+(8))|0);
      var $866=$nbuf;
      var $867=(($866+$865)|0);
      assert(4 % 1 === 0);HEAP8[($863)]=HEAP8[($867)];HEAP8[(($863)+(1))]=HEAP8[(($867)+(1))];HEAP8[(($863)+(2))]=HEAP8[(($867)+(2))];HEAP8[(($863)+(3))]=HEAP8[(($867)+(3))];
      var $868=$2;
      var $869=$7;
      var $870=HEAP32[(($signo)>>2)];
      var $871=_getu32($869, $870);
      var $872=_file_printf($868, ((5261164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$871,tempInt));
      var $873=(($872)|0)==-1;
      if ($873) { label = 219; break; } else { label = 220; break; }
    case 219: 
      var $875=$5;
      $1=$875;
      label = 296; break;
    case 220: 
      var $877=$9;
      var $878=HEAP32[(($877)>>2)];
      var $879=$878 | 1;
      HEAP32[(($877)>>2)]=$879;
      var $880=$5;
      $1=$880;
      label = 296; break;
    case 221: 
      label = 295; break;
    case 222: 
      var $883=$6;
      var $884=(($883)|0)==1;
      if ($884) { label = 223; break; } else { label = 224; break; }
    case 223: 
      var $886=$7;
      var $887=(($nh32+8)|0);
      var $888=HEAP32[(($887)>>2)];
      var $889=_getu32($886, $888);
      var $896 = $889;label = 225; break;
    case 224: 
      var $891=$7;
      var $892=(($nh64+8)|0);
      var $893=HEAP32[(($892)>>2)];
      var $894=_getu32($891, $893);
      var $896 = $894;label = 225; break;
    case 225: 
      var $896;
      var $897=(($896)|0)==3;
      if ($897) { label = 226; break; } else { label = 294; break; }
    case 226: 
      var $899=$9;
      var $900=HEAP32[(($899)>>2)];
      var $901=$900 & 16;
      var $902=(($901)|0)!=0;
      if ($902) { label = 227; break; } else { label = 294; break; }
    case 227: 
      $i5=0;
      label = 228; break;
    case 228: 
      var $905=$i5;
      var $906=$6;
      var $907=(($906)|0)==1;
      var $908=$907 ? 5 : 5;
      var $909=(($905)>>>0) < (($908)>>>0);
      if ($909) { label = 229; break; } else { label = 293; break; }
    case 229: 
      var $911=$6;
      var $912=(($911)|0)==1;
      if ($912) { label = 230; break; } else { label = 231; break; }
    case 230: 
      var $914=$i5;
      var $915=((5246296+($914<<2))|0);
      var $916=HEAP32[(($915)>>2)];
      var $922 = $916;label = 232; break;
    case 231: 
      var $918=$i5;
      var $919=((5246276+($918<<2))|0);
      var $920=HEAP32[(($919)>>2)];
      var $922 = $920;label = 232; break;
    case 232: 
      var $922;
      $reloffset=$922;
      var $923=$doff;
      var $924=$reloffset;
      var $925=((($923)+($924))|0);
      $noffset=$925;
      $j=0;
      label = 233; break;
    case 233: 
      var $927=$j;
      var $928=(($927)>>>0) < 16;
      if ($928) { label = 234; break; } else { label = 248; break; }
    case 234: 
      var $930=$noffset;
      var $931=$5;
      var $932=(($930)>>>0) >= (($931)>>>0);
      if ($932) { label = 235; break; } else { label = 236; break; }
    case 235: 
      label = 291; break;
    case 236: 
      var $935=$reloffset;
      var $936=$descsz;
      var $937=(($935)>>>0) >= (($936)>>>0);
      if ($937) { label = 237; break; } else { label = 238; break; }
    case 237: 
      label = 291; break;
    case 238: 
      var $940=$noffset;
      var $941=$nbuf;
      var $942=(($941+$940)|0);
      var $943=HEAP8[($942)];
      $c=$943;
      var $944=$c;
      var $945=(($944)&255);
      var $946=(($945)|0)==0;
      if ($946) { label = 239; break; } else { label = 242; break; }
    case 239: 
      var $948=$j;
      var $949=(($948)|0)==0;
      if ($949) { label = 240; break; } else { label = 241; break; }
    case 240: 
      label = 291; break;
    case 241: 
      label = 248; break;
    case 242: 
      var $953=$c;
      var $954=(($953)&255);
      var $955=_isprint($954);
      var $956=(($955)|0)!=0;
      if ($956) { label = 243; break; } else { label = 244; break; }
    case 243: 
      var $958=$c;
      var $959=(($958)&255);
      var $960=_strchr(((5261136)|0), $959);
      var $961=(($960)|0)!=0;
      if ($961) { label = 244; break; } else { label = 245; break; }
    case 244: 
      label = 291; break;
    case 245: 
      label = 246; break;
    case 246: 
      label = 247; break;
    case 247: 
      var $966=$j;
      var $967=((($966)+(1))|0);
      $j=$967;
      var $968=$noffset;
      var $969=((($968)+(1))|0);
      $noffset=$969;
      var $970=$reloffset;
      var $971=((($970)+(1))|0);
      $reloffset=$971;
      label = 233; break;
    case 248: 
      var $973=$i5;
      var $974=((($973)+(1))|0);
      $k=$974;
      label = 249; break;
    case 249: 
      var $976=$k;
      var $977=$6;
      var $978=(($977)|0)==1;
      var $979=$978 ? 5 : 5;
      var $980=(($976)>>>0) < (($979)>>>0);
      if ($980) { label = 250; break; } else { label = 274; break; }
    case 250: 
      $adjust=1;
      var $982=$6;
      var $983=(($982)|0)==1;
      if ($983) { label = 251; break; } else { label = 252; break; }
    case 251: 
      var $985=$k;
      var $986=((5246296+($985<<2))|0);
      var $987=HEAP32[(($986)>>2)];
      var $993 = $987;label = 253; break;
    case 252: 
      var $989=$k;
      var $990=((5246276+($989<<2))|0);
      var $991=HEAP32[(($990)>>2)];
      var $993 = $991;label = 253; break;
    case 253: 
      var $993;
      var $994=$6;
      var $995=(($994)|0)==1;
      if ($995) { label = 254; break; } else { label = 255; break; }
    case 254: 
      var $997=$i5;
      var $998=((5246296+($997<<2))|0);
      var $999=HEAP32[(($998)>>2)];
      var $1005 = $999;label = 256; break;
    case 255: 
      var $1001=$i5;
      var $1002=((5246276+($1001<<2))|0);
      var $1003=HEAP32[(($1002)>>2)];
      var $1005 = $1003;label = 256; break;
    case 256: 
      var $1005;
      var $1006=(($993)>>>0) >= (($1005)>>>0);
      if ($1006) { label = 257; break; } else { label = 258; break; }
    case 257: 
      label = 273; break;
    case 258: 
      var $1009=$doff;
      var $1010=$6;
      var $1011=(($1010)|0)==1;
      if ($1011) { label = 259; break; } else { label = 260; break; }
    case 259: 
      var $1013=$k;
      var $1014=((5246296+($1013<<2))|0);
      var $1015=HEAP32[(($1014)>>2)];
      var $1021 = $1015;label = 261; break;
    case 260: 
      var $1017=$k;
      var $1018=((5246276+($1017<<2))|0);
      var $1019=HEAP32[(($1018)>>2)];
      var $1021 = $1019;label = 261; break;
    case 261: 
      var $1021;
      var $1022=((($1009)+($1021))|0);
      $no=$1022;
      label = 262; break;
    case 262: 
      var $1024=$no;
      var $1025=$doff;
      var $1026=$6;
      var $1027=(($1026)|0)==1;
      if ($1027) { label = 263; break; } else { label = 264; break; }
    case 263: 
      var $1029=$i5;
      var $1030=((5246296+($1029<<2))|0);
      var $1031=HEAP32[(($1030)>>2)];
      var $1037 = $1031;label = 265; break;
    case 264: 
      var $1033=$i5;
      var $1034=((5246276+($1033<<2))|0);
      var $1035=HEAP32[(($1034)>>2)];
      var $1037 = $1035;label = 265; break;
    case 265: 
      var $1037;
      var $1038=((($1025)+($1037))|0);
      var $1039=(($1024)>>>0) < (($1038)>>>0);
      if ($1039) { label = 266; break; } else { label = 270; break; }
    case 266: 
      var $1041=$adjust;
      var $1042=(($1041)|0)!=0;
      if ($1042) { label = 267; break; } else { var $1052 = 0;label = 268; break; }
    case 267: 
      var $1044=$no;
      var $1045=$nbuf;
      var $1046=(($1045+$1044)|0);
      var $1047=HEAP8[($1046)];
      var $1048=(($1047)&255);
      var $1049=_isprint($1048);
      var $1050=(($1049)|0)!=0;
      var $1052 = $1050;label = 268; break;
    case 268: 
      var $1052;
      var $1053=(($1052)&1);
      $adjust=$1053;
      label = 269; break;
    case 269: 
      var $1055=$no;
      var $1056=((($1055)+(1))|0);
      $no=$1056;
      label = 262; break;
    case 270: 
      var $1058=$adjust;
      var $1059=(($1058)|0)!=0;
      if ($1059) { label = 271; break; } else { label = 272; break; }
    case 271: 
      var $1061=$k;
      $i5=$1061;
      label = 272; break;
    case 272: 
      label = 273; break;
    case 273: 
      var $1064=$k;
      var $1065=((($1064)+(1))|0);
      $k=$1065;
      label = 249; break;
    case 274: 
      var $1067=$doff;
      var $1068=$6;
      var $1069=(($1068)|0)==1;
      if ($1069) { label = 275; break; } else { label = 276; break; }
    case 275: 
      var $1071=$i5;
      var $1072=((5246296+($1071<<2))|0);
      var $1073=HEAP32[(($1072)>>2)];
      var $1079 = $1073;label = 277; break;
    case 276: 
      var $1075=$i5;
      var $1076=((5246276+($1075<<2))|0);
      var $1077=HEAP32[(($1076)>>2)];
      var $1079 = $1077;label = 277; break;
    case 277: 
      var $1079;
      var $1080=((($1067)+($1079))|0);
      var $1081=$nbuf;
      var $1082=(($1081+$1080)|0);
      $cname=$1082;
      var $1083=$cname;
      $cp=$1083;
      label = 278; break;
    case 278: 
      var $1085=$cp;
      var $1086=HEAP8[($1085)];
      var $1087=(($1086)&255);
      var $1088=(($1087)|0)!=0;
      if ($1088) { label = 279; break; } else { var $1096 = 0;label = 280; break; }
    case 279: 
      var $1090=$cp;
      var $1091=HEAP8[($1090)];
      var $1092=(($1091)&255);
      var $1093=_isprint($1092);
      var $1094=(($1093)|0)!=0;
      var $1096 = $1094;label = 280; break;
    case 280: 
      var $1096;
      if ($1096) { label = 281; break; } else { label = 283; break; }
    case 281: 
      label = 282; break;
    case 282: 
      var $1099=$cp;
      var $1100=(($1099+1)|0);
      $cp=$1100;
      label = 278; break;
    case 283: 
      label = 284; break;
    case 284: 
      var $1103=$cp;
      var $1104=$cname;
      var $1105=(($1103)>>>0) > (($1104)>>>0);
      if ($1105) { label = 285; break; } else { var $1114 = 0;label = 286; break; }
    case 285: 
      var $1107=$cp;
      var $1108=((($1107)-(1))|0);
      var $1109=HEAP8[($1108)];
      var $1110=(($1109)&255);
      var $1111=_isspace($1110);
      var $1112=(($1111)|0)!=0;
      var $1114 = $1112;label = 286; break;
    case 286: 
      var $1114;
      if ($1114) { label = 287; break; } else { label = 288; break; }
    case 287: 
      var $1116=$cp;
      var $1117=((($1116)-(1))|0);
      $cp=$1117;
      label = 284; break;
    case 288: 
      var $1119=$2;
      var $1120=$cp;
      var $1121=$cname;
      var $1122=$1120;
      var $1123=$1121;
      var $1124=((($1122)-($1123))|0);
      var $1125=$cname;
      var $1126=_file_printf($1119, ((5261100)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$1124,HEAP32[(((tempInt)+(4))>>2)]=$1125,tempInt));
      var $1127=(($1126)|0)==-1;
      if ($1127) { label = 289; break; } else { label = 290; break; }
    case 289: 
      var $1129=$5;
      $1=$1129;
      label = 296; break;
    case 290: 
      var $1131=$9;
      var $1132=HEAP32[(($1131)>>2)];
      var $1133=$1132 | 1;
      HEAP32[(($1131)>>2)]=$1133;
      var $1134=$5;
      $1=$1134;
      label = 296; break;
    case 291: 
      label = 292; break;
    case 292: 
      var $1137=$i5;
      var $1138=((($1137)+(1))|0);
      $i5=$1138;
      label = 228; break;
    case 293: 
      label = 294; break;
    case 294: 
      label = 295; break;
    case 295: 
      var $1142=$4;
      $1=$1142;
      label = 296; break;
    case 296: 
      var $1144=$1;
      STACKTOP = __stackBase__;
      return $1144;
    default: assert(0, "bad label: " + label);
  }
}
_donote["X"]=1;


function _file_mdump($m) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $tbuf=__stackBase__;
      $1=$m;
      var $2=HEAP32[((_stderr)>>2)];
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP16[(($7)>>1)];
      var $9=(($8)&65535);
      var $10=$9 & 7;
      var $11=((($10)+(1))|0);
      var $12=$1;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=_fprintf($2, ((5267624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$11,HEAP32[(((tempInt)+(8))>>2)]=((5271876)|0),HEAP32[(((tempInt)+(12))>>2)]=$14,tempInt));
      var $16=$1;
      var $17=(($16+2)|0);
      var $18=HEAP8[($17)];
      var $19=(($18)&255);
      var $20=$19 & 1;
      var $21=(($20)|0)!=0;
      if ($21) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $23=HEAP32[((_stderr)>>2)];
      var $24=$1;
      var $25=(($24+7)|0);
      var $26=HEAP8[($25)];
      var $27=(($26)&255);
      var $28=HEAP32[((5249716)>>2)];
      var $29=(($27)>>>0) < (($28)>>>0);
      if ($29) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $31=$1;
      var $32=(($31+7)|0);
      var $33=HEAP8[($32)];
      var $34=(($33)&255);
      var $35=((5249720+($34<<2))|0);
      var $36=((((HEAPU8[($35)])|(HEAPU8[(($35)+(1))]<<8)|(HEAPU8[(($35)+(2))]<<16)|(HEAPU8[(($35)+(3))]<<24))|0));
      var $39 = $36;label = 6; break;
    case 5: 
      var $39 = ((5266956)|0);label = 6; break;
    case 6: 
      var $39;
      var $40=_fprintf($23, ((5268860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$39,tempInt));
      var $41=$1;
      var $42=(($41+8)|0);
      var $43=HEAP8[($42)];
      var $44=(($43)&255);
      var $45=$44 & 64;
      var $46=(($45)|0)!=0;
      if ($46) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $48=HEAP32[((_stderr)>>2)];
      var $49=_fputc(126, $48);
      label = 8; break;
    case 8: 
      var $51=HEAP32[((_stderr)>>2)];
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAP8[($53)];
      var $55=(($54)&255);
      var $56=$55 & 7;
      var $57=(($56)>>>0) < 9;
      if ($57) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $59=$1;
      var $60=(($59+8)|0);
      var $61=HEAP8[($60)];
      var $62=(($61)&255);
      var $63=$62 & 7;
      var $64=((5249908+$63)|0);
      var $65=HEAP8[($64)];
      var $66=(($65 << 24) >> 24);
      var $69 = $66;label = 11; break;
    case 10: 
      var $69 = 63;label = 11; break;
    case 11: 
      var $69;
      var $70=$1;
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=_fprintf($51, ((5265880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$69,HEAP32[(((tempInt)+(4))>>2)]=$72,tempInt));
      label = 12; break;
    case 12: 
      var $75=HEAP32[((_stderr)>>2)];
      var $76=$1;
      var $77=(($76+2)|0);
      var $78=HEAP8[($77)];
      var $79=(($78)&255);
      var $80=$79 & 8;
      var $81=(($80)|0)!=0;
      var $82=$81 ? (((5263576)|0)) : (((5262488)|0));
      var $83=$1;
      var $84=(($83+6)|0);
      var $85=HEAP8[($84)];
      var $86=(($85)&255);
      var $87=HEAP32[((5249716)>>2)];
      var $88=(($86)>>>0) < (($87)>>>0);
      if ($88) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $90=$1;
      var $91=(($90+6)|0);
      var $92=HEAP8[($91)];
      var $93=(($92)&255);
      var $94=((5249720+($93<<2))|0);
      var $95=((((HEAPU8[($94)])|(HEAPU8[(($94)+(1))]<<8)|(HEAPU8[(($94)+(2))]<<16)|(HEAPU8[(($94)+(3))]<<24))|0));
      var $98 = $95;label = 15; break;
    case 14: 
      var $98 = ((5266956)|0);label = 15; break;
    case 15: 
      var $98;
      var $99=_fprintf($75, ((5264740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$82,HEAP32[(((tempInt)+(4))>>2)]=$98,tempInt));
      var $100=$1;
      var $101=(($100+9)|0);
      var $102=HEAP8[($101)];
      var $103=(($102)&255);
      var $104=$103 & 64;
      var $105=(($104)|0)!=0;
      if ($105) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $107=HEAP32[((_stderr)>>2)];
      var $108=_fputc(126, $107);
      label = 17; break;
    case 17: 
      var $110=$1;
      var $111=(($110+6)|0);
      var $112=HEAP8[($111)];
      var $113=(($112)&255);
      var $114=(($113)|0)==5;
      if ($114) { label = 26; break; } else { label = 18; break; }
    case 18: 
      var $116=$1;
      var $117=(($116+6)|0);
      var $118=HEAP8[($117)];
      var $119=(($118)&255);
      var $120=(($119)|0)==13;
      if ($120) { label = 26; break; } else { label = 19; break; }
    case 19: 
      var $122=$1;
      var $123=(($122+6)|0);
      var $124=HEAP8[($123)];
      var $125=(($124)&255);
      var $126=(($125)|0)==18;
      if ($126) { label = 26; break; } else { label = 20; break; }
    case 20: 
      var $128=$1;
      var $129=(($128+6)|0);
      var $130=HEAP8[($129)];
      var $131=(($130)&255);
      var $132=(($131)|0)==19;
      if ($132) { label = 26; break; } else { label = 21; break; }
    case 21: 
      var $134=$1;
      var $135=(($134+6)|0);
      var $136=HEAP8[($135)];
      var $137=(($136)&255);
      var $138=(($137)|0)==17;
      if ($138) { label = 26; break; } else { label = 22; break; }
    case 22: 
      var $140=$1;
      var $141=(($140+6)|0);
      var $142=HEAP8[($141)];
      var $143=(($142)&255);
      var $144=(($143)|0)==20;
      if ($144) { label = 26; break; } else { label = 23; break; }
    case 23: 
      var $146=$1;
      var $147=(($146+6)|0);
      var $148=HEAP8[($147)];
      var $149=(($148)&255);
      var $150=(($149)|0)==45;
      if ($150) { label = 26; break; } else { label = 24; break; }
    case 24: 
      var $152=$1;
      var $153=(($152+6)|0);
      var $154=HEAP8[($153)];
      var $155=(($154)&255);
      var $156=(($155)|0)==46;
      if ($156) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $158=$1;
      var $159=(($158+6)|0);
      var $160=HEAP8[($159)];
      var $161=(($160)&255);
      var $162=(($161)|0)==3;
      if ($162) { label = 26; break; } else { label = 57; break; }
    case 26: 
      var $164=$1;
      var $165=(($164+24)|0);
      var $166=$165;
      var $167=(($166+4)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168)|0)!=0;
      if ($169) { label = 27; break; } else { label = 54; break; }
    case 27: 
      var $171=HEAP32[((_stderr)>>2)];
      var $172=_fputc(47, $171);
      var $173=$1;
      var $174=(($173+24)|0);
      var $175=$174;
      var $176=(($175+4)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177 & 1;
      var $179=(($178)|0)!=0;
      if ($179) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $181=HEAP32[((_stderr)>>2)];
      var $182=_fputc(87, $181);
      label = 29; break;
    case 29: 
      var $184=$1;
      var $185=(($184+24)|0);
      var $186=$185;
      var $187=(($186+4)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=$188 & 2;
      var $190=(($189)|0)!=0;
      if ($190) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $192=HEAP32[((_stderr)>>2)];
      var $193=_fputc(119, $192);
      label = 31; break;
    case 31: 
      var $195=$1;
      var $196=(($195+24)|0);
      var $197=$196;
      var $198=(($197+4)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=$199 & 4;
      var $201=(($200)|0)!=0;
      if ($201) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $203=HEAP32[((_stderr)>>2)];
      var $204=_fputc(99, $203);
      label = 33; break;
    case 33: 
      var $206=$1;
      var $207=(($206+24)|0);
      var $208=$207;
      var $209=(($208+4)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=$210 & 8;
      var $212=(($211)|0)!=0;
      if ($212) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $214=HEAP32[((_stderr)>>2)];
      var $215=_fputc(67, $214);
      label = 35; break;
    case 35: 
      var $217=$1;
      var $218=(($217+24)|0);
      var $219=$218;
      var $220=(($219+4)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=$221 & 16;
      var $223=(($222)|0)!=0;
      if ($223) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $225=HEAP32[((_stderr)>>2)];
      var $226=_fputc(115, $225);
      label = 37; break;
    case 37: 
      var $228=$1;
      var $229=(($228+24)|0);
      var $230=$229;
      var $231=(($230+4)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=$232 & 32;
      var $234=(($233)|0)!=0;
      if ($234) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $236=HEAP32[((_stderr)>>2)];
      var $237=_fputc(116, $236);
      label = 39; break;
    case 39: 
      var $239=$1;
      var $240=(($239+24)|0);
      var $241=$240;
      var $242=(($241+4)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=$243 & 64;
      var $245=(($244)|0)!=0;
      if ($245) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $247=HEAP32[((_stderr)>>2)];
      var $248=_fputc(98, $247);
      label = 41; break;
    case 41: 
      var $250=$1;
      var $251=(($250+24)|0);
      var $252=$251;
      var $253=(($252+4)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=$254 & 128;
      var $256=(($255)|0)!=0;
      if ($256) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $258=HEAP32[((_stderr)>>2)];
      var $259=_fputc(66, $258);
      label = 43; break;
    case 43: 
      var $261=$1;
      var $262=(($261+24)|0);
      var $263=$262;
      var $264=(($263+4)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=$265 & 256;
      var $267=(($266)|0)!=0;
      if ($267) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $269=HEAP32[((_stderr)>>2)];
      var $270=_fputc(72, $269);
      label = 45; break;
    case 45: 
      var $272=$1;
      var $273=(($272+24)|0);
      var $274=$273;
      var $275=(($274+4)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=$276 & 512;
      var $278=(($277)|0)!=0;
      if ($278) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $280=HEAP32[((_stderr)>>2)];
      var $281=_fputc(104, $280);
      label = 47; break;
    case 47: 
      var $283=$1;
      var $284=(($283+24)|0);
      var $285=$284;
      var $286=(($285+4)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$287 & 1024;
      var $289=(($288)|0)!=0;
      if ($289) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $291=HEAP32[((_stderr)>>2)];
      var $292=_fputc(76, $291);
      label = 49; break;
    case 49: 
      var $294=$1;
      var $295=(($294+24)|0);
      var $296=$295;
      var $297=(($296+4)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=$298 & 2048;
      var $300=(($299)|0)!=0;
      if ($300) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $302=HEAP32[((_stderr)>>2)];
      var $303=_fputc(108, $302);
      label = 51; break;
    case 51: 
      var $305=$1;
      var $306=(($305+24)|0);
      var $307=$306;
      var $308=(($307+4)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=$309 & 4096;
      var $311=(($310)|0)!=0;
      if ($311) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $313=HEAP32[((_stderr)>>2)];
      var $314=_fputc(74, $313);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $317=$1;
      var $318=(($317+24)|0);
      var $319=$318;
      var $320=(($319)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($321)|0)!=0;
      if ($322) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $324=HEAP32[((_stderr)>>2)];
      var $325=$1;
      var $326=(($325+24)|0);
      var $327=$326;
      var $328=(($327)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=_fprintf($324, ((5261632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$329,tempInt));
      label = 56; break;
    case 56: 
      label = 63; break;
    case 57: 
      var $333=$1;
      var $334=(($333+9)|0);
      var $335=HEAP8[($334)];
      var $336=(($335)&255);
      var $337=$336 & 7;
      var $338=(($337)>>>0) < 9;
      if ($338) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $340=$1;
      var $341=(($340+9)|0);
      var $342=HEAP8[($341)];
      var $343=(($342)&255);
      var $344=$343 & 7;
      var $345=((5249908+$344)|0);
      var $346=HEAP8[($345)];
      var $347=(($346 << 24) >> 24);
      var $348=HEAP32[((_stderr)>>2)];
      var $349=_fputc($347, $348);
      label = 60; break;
    case 59: 
      var $351=HEAP32[((_stderr)>>2)];
      var $352=_fputc(63, $351);
      label = 60; break;
    case 60: 
      var $354=$1;
      var $355=(($354+24)|0);
      var $356=$355;
      var $st$3$0=(($356)|0);
      var $357$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($356+4)|0);
      var $357$1=HEAP32[(($st$3$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $358=$357$0 != $$etemp$0$0 || $357$1 != $$etemp$0$1;
      if ($358) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $360=HEAP32[((_stderr)>>2)];
      var $361=$1;
      var $362=(($361+24)|0);
      var $363=$362;
      var $st$4$0=(($363)|0);
      var $364$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($363+4)|0);
      var $364$1=HEAP32[(($st$4$1)>>2)];
      var $$etemp$1=((5260736)|0);
      var $365=_fprintf($360, $$etemp$1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$364$0,HEAP32[(((tempInt)+(4))>>2)]=$364$1,tempInt));
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $368=HEAP32[((_stderr)>>2)];
      var $369=$1;
      var $370=(($369+4)|0);
      var $371=HEAP8[($370)];
      var $372=(($371)&255);
      var $373=_fprintf($368, ((5273200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$372,tempInt));
      var $374=$1;
      var $375=(($374+4)|0);
      var $376=HEAP8[($375)];
      var $377=(($376)&255);
      var $378=(($377)|0)!=120;
      if ($378) { label = 64; break; } else { label = 79; break; }
    case 64: 
      var $380=$1;
      var $381=(($380+6)|0);
      var $382=HEAP8[($381)];
      var $383=(($382)&255);
      if ((($383)|0) == 1 || (($383)|0) == 2 || (($383)|0) == 4 || (($383)|0) == 10 || (($383)|0) == 11 || (($383)|0) == 23 || (($383)|0) == 7 || (($383)|0) == 8) {
        label = 65; break;
      }
      else if ((($383)|0) == 26 || (($383)|0) == 25 || (($383)|0) == 24) {
        label = 66; break;
      }
      else if ((($383)|0) == 13 || (($383)|0) == 5 || (($383)|0) == 17 || (($383)|0) == 18 || (($383)|0) == 19 || (($383)|0) == 20) {
        label = 67; break;
      }
      else if ((($383)|0) == 6 || (($383)|0) == 12 || (($383)|0) == 9 || (($383)|0) == 21) {
        label = 68; break;
      }
      else if ((($383)|0) == 14 || (($383)|0) == 16 || (($383)|0) == 15 || (($383)|0) == 22) {
        label = 69; break;
      }
      else if ((($383)|0) == 27 || (($383)|0) == 28 || (($383)|0) == 29) {
        label = 70; break;
      }
      else if ((($383)|0) == 30 || (($383)|0) == 31 || (($383)|0) == 32) {
        label = 71; break;
      }
      else if ((($383)|0) == 42 || (($383)|0) == 43 || (($383)|0) == 44) {
        label = 72; break;
      }
      else if ((($383)|0) == 33 || (($383)|0) == 34 || (($383)|0) == 35) {
        label = 73; break;
      }
      else if ((($383)|0) == 36 || (($383)|0) == 37 || (($383)|0) == 38) {
        label = 74; break;
      }
      else if ((($383)|0) == 3) {
        label = 75; break;
      }
      else if ((($383)|0) == 46 || (($383)|0) == 45) {
        label = 76; break;
      }
      else {
      label = 77; break;
      }
      
    case 65: 
      var $385=HEAP32[((_stderr)>>2)];
      var $386=$1;
      var $387=(($386+32)|0);
      var $388=$387;
      var $389=HEAP32[(($388)>>2)];
      var $390=_fprintf($385, ((5272496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$389,tempInt));
      label = 78; break;
    case 66: 
      var $392=HEAP32[((_stderr)>>2)];
      var $393=$1;
      var $394=(($393+32)|0);
      var $395=$394;
      var $st$4$0=(($395)|0);
      var $396$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($395+4)|0);
      var $396$1=HEAP32[(($st$4$1)>>2)];
      var $$etemp$2=((5271972)|0);
      var $397=_fprintf($392, $$etemp$2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$396$0,HEAP32[(((tempInt)+(4))>>2)]=$396$1,tempInt));
      label = 78; break;
    case 67: 
      var $399=HEAP32[((_stderr)>>2)];
      var $400=$1;
      var $401=(($400+32)|0);
      var $402=$401;
      var $403=(($402)|0);
      var $404=$1;
      var $405=(($404+5)|0);
      var $406=HEAP8[($405)];
      var $407=(($406)&255);
      _file_showstr($399, $403, $407);
      label = 78; break;
    case 68: 
      var $409=HEAP32[((_stderr)>>2)];
      var $410=$1;
      var $411=(($410+32)|0);
      var $412=$411;
      var $413=HEAP32[(($412)>>2)];
      var $414$0=$413;
      var $414$1=0;
      var $415=(($tbuf)|0);
      var $416=_file_fmttime($414$0, $414$1, 1, $415);
      var $417=_fprintf($409, ((5271552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$416,tempInt));
      label = 78; break;
    case 69: 
      var $419=HEAP32[((_stderr)>>2)];
      var $420=$1;
      var $421=(($420+32)|0);
      var $422=$421;
      var $423=HEAP32[(($422)>>2)];
      var $424$0=$423;
      var $424$1=0;
      var $425=(($tbuf)|0);
      var $426=_file_fmttime($424$0, $424$1, 0, $425);
      var $427=_fprintf($419, ((5271552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$426,tempInt));
      label = 70; break;
    case 70: 
      var $429=HEAP32[((_stderr)>>2)];
      var $430=$1;
      var $431=(($430+32)|0);
      var $432=$431;
      var $st$4$0=(($432)|0);
      var $433$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($432+4)|0);
      var $433$1=HEAP32[(($st$4$1)>>2)];
      var $434=(($tbuf)|0);
      var $435=_file_fmttime($433$0, $433$1, 1, $434);
      var $436=_fprintf($429, ((5271552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$435,tempInt));
      label = 78; break;
    case 71: 
      var $438=HEAP32[((_stderr)>>2)];
      var $439=$1;
      var $440=(($439+32)|0);
      var $441=$440;
      var $st$4$0=(($441)|0);
      var $442$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($441+4)|0);
      var $442$1=HEAP32[(($st$4$1)>>2)];
      var $443=(($tbuf)|0);
      var $444=_file_fmttime($442$0, $442$1, 0, $443);
      var $445=_fprintf($438, ((5271552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$444,tempInt));
      label = 78; break;
    case 72: 
      var $447=HEAP32[((_stderr)>>2)];
      var $448=$1;
      var $449=(($448+32)|0);
      var $450=$449;
      var $st$4$0=(($450)|0);
      var $451$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($450+4)|0);
      var $451$1=HEAP32[(($st$4$1)>>2)];
      var $452=(($tbuf)|0);
      var $453=_file_fmttime($451$0, $451$1, 2, $452);
      var $454=_fprintf($447, ((5271552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$453,tempInt));
      label = 78; break;
    case 73: 
      var $456=HEAP32[((_stderr)>>2)];
      var $457=$1;
      var $458=(($457+32)|0);
      var $459=$458;
      var $460=HEAPF32[(($459)>>2)];
      var $461=$460;
      var $462=_fprintf($456, ((5271272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$461,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 78; break;
    case 74: 
      var $464=HEAP32[((_stderr)>>2)];
      var $465=$1;
      var $466=(($465+32)|0);
      var $467=$466;
      var $468=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($467)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($467)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $469=_fprintf($464, ((5271272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$468,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      label = 78; break;
    case 75: 
      label = 78; break;
    case 76: 
      var $472=HEAP32[((_stderr)>>2)];
      var $473=$1;
      var $474=(($473+32)|0);
      var $475=$474;
      var $476=(($475)|0);
      var $477=_fprintf($472, ((5270972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$476,tempInt));
      label = 78; break;
    case 77: 
      var $479=HEAP32[((_stderr)>>2)];
      var $480=_fputs(((5266956)|0), $479);
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $483=HEAP32[((_stderr)>>2)];
      var $484=$1;
      var $485=(($484+96)|0);
      var $486=(($485)|0);
      var $487=_fprintf($483, ((5270716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$486,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_file_mdump["X"]=1;

function _file_fmttime($v$0, $v$1, $flags, $buf) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2=__stackBase__;
      var $3;
      var $4;
      var $pp;
      var $t=(__stackBase__)+(8);
      var $tm;
      var $ts=(__stackBase__)+(12);
      var $tm1;
      var $st$9$0=(($2)|0);
      HEAP32[(($st$9$0)>>2)]=$v$0;
      var $st$9$1=(($2+4)|0);
      HEAP32[(($st$9$1)>>2)]=$v$1;
      $3=$flags;
      $4=$buf;
      var $st$15$0=(($2)|0);
      var $5$0=HEAP32[(($st$15$0)>>2)];
      var $st$15$1=(($2+4)|0);
      var $5$1=HEAP32[(($st$15$1)>>2)];
      var $6$0=$5$0;
      var $6=$6$0;
      HEAP32[(($t)>>2)]=$6;
      var $7=$3;
      var $8=$7 & 2;
      var $9=(($8)|0)!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=HEAP32[(($t)>>2)];
      var $12$0=$11;
      var $12$1=((($11)|0) < 0 ? -1 : 0);
      var $13=_cdf_timestamp_to_timespec($ts, $12$0, $12$1);
      var $14=(($ts)|0);
      var $15=HEAP32[(($14)>>2)];
      HEAP32[(($t)>>2)]=$15;
      label = 4; break;
    case 4: 
      var $17=$3;
      var $18=$17 & 1;
      var $19=(($18)|0)!=0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=$4;
      var $22=_ctime_r($t, $21);
      $pp=$22;
      label = 15; break;
    case 6: 
      var $24=HEAP32[((5250108)>>2)];
      var $25=(($24)|0)==0;
      if ($25) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $27=_time(5250108);
      var $28=_localtime(5250108);
      $tm1=$28;
      var $29=$tm1;
      var $30=(($29)|0)==0;
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 18; break;
    case 9: 
      var $33=$tm1;
      var $34=(($33+32)|0);
      var $35=HEAP32[(($34)>>2)];
      HEAP32[((5250112)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $37=HEAP32[((5250112)>>2)];
      var $38=(($37)|0)!=0;
      if ($38) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $40=HEAP32[(($t)>>2)];
      var $41=((($40)+(3600))|0);
      HEAP32[(($t)>>2)]=$41;
      label = 12; break;
    case 12: 
      var $43=_gmtime($t);
      $tm=$43;
      var $44=$tm;
      var $45=(($44)|0)==0;
      if ($45) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 18; break;
    case 14: 
      var $48=$tm;
      var $49=$4;
      var $50=_asctime_r($48, $49);
      $pp=$50;
      label = 15; break;
    case 15: 
      var $52=$pp;
      var $53=(($52)|0)==0;
      if ($53) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 18; break;
    case 17: 
      var $56=$pp;
      var $57=_strcspn($56, ((5269784)|0));
      var $58=$pp;
      var $59=(($58+$57)|0);
      HEAP8[($59)]=0;
      var $60=$pp;
      $1=$60;
      label = 19; break;
    case 18: 
      var $62=$4;
      var $63=_strcpy($62, ((5269580)|0));
      $1=$63;
      label = 19; break;
    case 19: 
      var $65=$1;
      STACKTOP = __stackBase__;
      return $65;
    default: assert(0, "bad label: " + label);
  }
}
_file_fmttime["X"]=1;

function _file_magwarn($ms, $f, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $va=__stackBase__;
      $1=$ms;
      $2=$f;
      var $3=HEAP32[((_stdout)>>2)];
      var $4=_fflush($3);
      var $5=$1;
      var $6=(($5+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=HEAP32[((_stderr)>>2)];
      var $11=$1;
      var $12=(($11+40)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$1;
      var $15=(($14+44)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_fprintf($10, ((5270416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,HEAP32[(((tempInt)+(4))>>2)]=$16,tempInt));
      label = 4; break;
    case 4: 
      var $19=HEAP32[((_stderr)>>2)];
      var $20=_fprintf($19, ((5270124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=$va;
      HEAP32[(($21)>>2)]=varrp;
      var $22=HEAP32[((_stderr)>>2)];
      var $23=$2;
      var $24=HEAP32[(($va)>>2)];
      var $25=_fprintf($22, $23, $24);
      var $26=$va;

      var $27=HEAP32[((_stderr)>>2)];
      var $28=_fputc(10, $27);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}


function _file_fsmagic($ms, $fn, $sb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 3152)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $did;
      var $mime;
      var $buf=__stackBase__;
      var $nch;
      var $tstatbuf=(__stackBase__)+(1028);
      var $tmp;
      var $buf2=(__stackBase__)+(1100);
      var $p;
      $2=$ms;
      $3=$fn;
      $4=$sb;
      $ret=0;
      $did=0;
      var $5=$2;
      var $6=(($5+32)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1040;
      $mime=$8;
      var $9=$2;
      var $10=(($9+32)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 2048;
      var $13=(($12)|0)!=0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 132; break;
    case 4: 
      var $16=$3;
      var $17=(($16)|0)==0;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 132; break;
    case 6: 
      var $20=$2;
      var $21=(($20+32)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & 2;
      var $24=(($23)|0)==0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$3;
      var $27=$4;
      var $28=_lstat($26, $27);
      $ret=$28;
      label = 9; break;
    case 8: 
      var $30=$3;
      var $31=$4;
      var $32=_stat($30, $31);
      $ret=$32;
      label = 9; break;
    case 9: 
      var $34=$ret;
      var $35=(($34)|0)!=0;
      if ($35) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $37=$2;
      var $38=(($37+32)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & 512;
      var $41=(($40)|0)!=0;
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$2;
      var $44=___errno_location();
      var $45=HEAP32[(($44)>>2)];
      var $46=$3;
      _file_error($43, $45, ((5267116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$46,tempInt));
      $1=-1;
      label = 132; break;
    case 12: 
      var $48=$2;
      var $49=$3;
      var $50=___errno_location();
      var $51=HEAP32[(($50)>>2)];
      var $52=_strerror($51);
      var $53=_file_printf($48, ((5271636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$49,HEAP32[(((tempInt)+(4))>>2)]=$52,tempInt));
      var $54=(($53)|0)==-1;
      if ($54) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=-1;
      label = 132; break;
    case 14: 
      var $57=$2;
      var $58=(($57+36)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 | 1;
      HEAP32[(($58)>>2)]=$60;
      $1=-1;
      label = 132; break;
    case 15: 
      var $62=$mime;
      var $63=(($62)|0)!=0;
      if ($63) { label = 29; break; } else { label = 16; break; }
    case 16: 
      var $65=$4;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 2048;
      var $69=(($68)|0)!=0;
      if ($69) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $71=$2;
      var $72=$did;
      var $73=((($72)+(1))|0);
      $did=$73;
      var $74=(($72)|0)!=0;
      var $75=$74 ? (((5266872)|0)) : (((5265784)|0));
      var $76=_file_printf($71, ((5268708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$75,tempInt));
      var $77=(($76)|0)==-1;
      if ($77) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=-1;
      label = 132; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $81=$4;
      var $82=(($81+8)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$83 & 1024;
      var $85=(($84)|0)!=0;
      if ($85) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $87=$2;
      var $88=$did;
      var $89=((($88)+(1))|0);
      $did=$89;
      var $90=(($88)|0)!=0;
      var $91=$90 ? (((5266872)|0)) : (((5265784)|0));
      var $92=_file_printf($87, ((5264528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$91,tempInt));
      var $93=(($92)|0)==-1;
      if ($93) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=-1;
      label = 132; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $97=$4;
      var $98=(($97+8)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$99 & 512;
      var $101=(($100)|0)!=0;
      if ($101) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $103=$2;
      var $104=$did;
      var $105=((($104)+(1))|0);
      $did=$105;
      var $106=(($104)|0)!=0;
      var $107=$106 ? (((5266872)|0)) : (((5265784)|0));
      var $108=_file_printf($103, ((5263508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$107,tempInt));
      var $109=(($108)|0)==-1;
      if ($109) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=-1;
      label = 132; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $114=$4;
      var $115=(($114+8)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$116 & 61440;
      if ((($117)|0) == 16384) {
        label = 30; break;
      }
      else if ((($117)|0) == 8192) {
        label = 38; break;
      }
      else if ((($117)|0) == 24576) {
        label = 48; break;
      }
      else if ((($117)|0) == 4096) {
        label = 58; break;
      }
      else if ((($117)|0) == 40960) {
        label = 68; break;
      }
      else if ((($117)|0) == 49152) {
        label = 111; break;
      }
      else if ((($117)|0) == 32768) {
        label = 119; break;
      }
      else {
      label = 120; break;
      }
      
    case 30: 
      var $119=$mime;
      var $120=(($119)|0)!=0;
      if ($120) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $122=$2;
      var $123=$mime;
      var $124=_handle_mime($122, $123, ((5262408)|0));
      var $125=(($124)|0)==-1;
      if ($125) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $1=-1;
      label = 132; break;
    case 33: 
      label = 37; break;
    case 34: 
      var $129=$2;
      var $130=$did;
      var $131=((($130)+(1))|0);
      $did=$131;
      var $132=(($130)|0)!=0;
      var $133=$132 ? (((5266872)|0)) : (((5265784)|0));
      var $134=_file_printf($129, ((5261552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$133,tempInt));
      var $135=(($134)|0)==-1;
      if ($135) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $1=-1;
      label = 132; break;
    case 36: 
      label = 37; break;
    case 37: 
      $1=1;
      label = 132; break;
    case 38: 
      var $140=$2;
      var $141=(($140+32)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$142 & 8;
      var $144=(($143)|0)!=0;
      if ($144) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 121; break;
    case 40: 
      var $147=$mime;
      var $148=(($147)|0)!=0;
      if ($148) { label = 41; break; } else { label = 44; break; }
    case 41: 
      var $150=$2;
      var $151=$mime;
      var $152=_handle_mime($150, $151, ((5260664)|0));
      var $153=(($152)|0)==-1;
      if ($153) { label = 42; break; } else { label = 43; break; }
    case 42: 
      $1=-1;
      label = 132; break;
    case 43: 
      label = 47; break;
    case 44: 
      var $157=$2;
      var $158=$did;
      var $159=((($158)+(1))|0);
      $did=$159;
      var $160=(($158)|0)!=0;
      var $161=$160 ? (((5266872)|0)) : (((5265784)|0));
      var $162=_file_printf($157, ((5273148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$161,tempInt));
      var $163=(($162)|0)==-1;
      if ($163) { label = 45; break; } else { label = 46; break; }
    case 45: 
      $1=-1;
      label = 132; break;
    case 46: 
      label = 47; break;
    case 47: 
      $1=1;
      label = 132; break;
    case 48: 
      var $168=$2;
      var $169=(($168+32)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$170 & 8;
      var $172=(($171)|0)!=0;
      if ($172) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 121; break;
    case 50: 
      var $175=$mime;
      var $176=(($175)|0)!=0;
      if ($176) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $178=$2;
      var $179=$mime;
      var $180=_handle_mime($178, $179, ((5272444)|0));
      var $181=(($180)|0)==-1;
      if ($181) { label = 52; break; } else { label = 53; break; }
    case 52: 
      $1=-1;
      label = 132; break;
    case 53: 
      label = 57; break;
    case 54: 
      var $185=$2;
      var $186=$did;
      var $187=((($186)+(1))|0);
      $did=$187;
      var $188=(($186)|0)!=0;
      var $189=$188 ? (((5266872)|0)) : (((5265784)|0));
      var $190=_file_printf($185, ((5271928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$189,tempInt));
      var $191=(($190)|0)==-1;
      if ($191) { label = 55; break; } else { label = 56; break; }
    case 55: 
      $1=-1;
      label = 132; break;
    case 56: 
      label = 57; break;
    case 57: 
      $1=1;
      label = 132; break;
    case 58: 
      var $196=$2;
      var $197=(($196+32)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$198 & 8;
      var $200=(($199)|0)!=0;
      if ($200) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 121; break;
    case 60: 
      var $203=$mime;
      var $204=(($203)|0)!=0;
      if ($204) { label = 61; break; } else { label = 64; break; }
    case 61: 
      var $206=$2;
      var $207=$mime;
      var $208=_handle_mime($206, $207, ((5271520)|0));
      var $209=(($208)|0)==-1;
      if ($209) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $1=-1;
      label = 132; break;
    case 63: 
      label = 67; break;
    case 64: 
      var $213=$2;
      var $214=$did;
      var $215=((($214)+(1))|0);
      $did=$215;
      var $216=(($214)|0)!=0;
      var $217=$216 ? (((5266872)|0)) : (((5265784)|0));
      var $218=_file_printf($213, ((5271224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$217,tempInt));
      var $219=(($218)|0)==-1;
      if ($219) { label = 65; break; } else { label = 66; break; }
    case 65: 
      $1=-1;
      label = 132; break;
    case 66: 
      label = 67; break;
    case 67: 
      $1=1;
      label = 132; break;
    case 68: 
      var $224=$3;
      var $225=(($buf)|0);
      var $226=_readlink($224, $225, 1023);
      $nch=$226;
      var $227=(($226)|0) <= 0;
      if ($227) { label = 69; break; } else { label = 79; break; }
    case 69: 
      var $229=$2;
      var $230=(($229+32)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$231 & 512;
      var $233=(($232)|0)!=0;
      if ($233) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $235=$2;
      var $236=___errno_location();
      var $237=HEAP32[(($236)>>2)];
      var $238=$3;
      _file_error($235, $237, ((5270924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$238,tempInt));
      $1=-1;
      label = 132; break;
    case 71: 
      var $240=$mime;
      var $241=(($240)|0)!=0;
      if ($241) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $243=$2;
      var $244=$mime;
      var $245=_handle_mime($243, $244, ((5270676)|0));
      var $246=(($245)|0)==-1;
      if ($246) { label = 73; break; } else { label = 74; break; }
    case 73: 
      $1=-1;
      label = 132; break;
    case 74: 
      label = 78; break;
    case 75: 
      var $250=$2;
      var $251=$did;
      var $252=((($251)+(1))|0);
      $did=$252;
      var $253=(($251)|0)!=0;
      var $254=$253 ? (((5266872)|0)) : (((5265784)|0));
      var $255=$3;
      var $256=___errno_location();
      var $257=HEAP32[(($256)>>2)];
      var $258=_strerror($257);
      var $259=_file_printf($250, ((5270360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$254,HEAP32[(((tempInt)+(4))>>2)]=$255,HEAP32[(((tempInt)+(8))>>2)]=$258,tempInt));
      var $260=(($259)|0)==-1;
      if ($260) { label = 76; break; } else { label = 77; break; }
    case 76: 
      $1=-1;
      label = 132; break;
    case 77: 
      label = 78; break;
    case 78: 
      $1=1;
      label = 132; break;
    case 79: 
      var $265=$nch;
      var $266=(($buf+$265)|0);
      HEAP8[($266)]=0;
      var $267=(($buf)|0);
      var $268=HEAP8[($267)];
      var $269=(($268 << 24) >> 24);
      var $270=(($269)|0)==47;
      if ($270) { label = 80; break; } else { label = 83; break; }
    case 80: 
      var $272=(($buf)|0);
      var $273=_stat($272, $tstatbuf);
      var $274=(($273)|0) < 0;
      if ($274) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $276=$2;
      var $277=___errno_location();
      var $278=HEAP32[(($277)>>2)];
      var $279=(($buf)|0);
      var $280=_bad_link($276, $278, $279);
      $1=$280;
      label = 132; break;
    case 82: 
      label = 100; break;
    case 83: 
      var $283=$3;
      var $284=_strrchr($283, 47);
      $tmp=$284;
      var $285=(($284)|0)==0;
      if ($285) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $287=(($buf)|0);
      $tmp=$287;
      label = 97; break;
    case 85: 
      var $289=$tmp;
      var $290=$3;
      var $291=$289;
      var $292=$290;
      var $293=((($291)-($292))|0);
      var $294=((($293)+(1))|0);
      var $295=(($294)|0) > 1024;
      if ($295) { label = 86; break; } else { label = 96; break; }
    case 86: 
      var $297=$2;
      var $298=(($297+32)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=$299 & 512;
      var $301=(($300)|0)!=0;
      if ($301) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $303=$2;
      var $304=(($buf)|0);
      _file_error($303, 0, ((5270080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$304,tempInt));
      $1=-1;
      label = 132; break;
    case 88: 
      var $306=$mime;
      var $307=(($306)|0)!=0;
      if ($307) { label = 89; break; } else { label = 92; break; }
    case 89: 
      var $309=$2;
      var $310=$mime;
      var $311=_handle_mime($309, $310, ((5269768)|0));
      var $312=(($311)|0)==-1;
      if ($312) { label = 90; break; } else { label = 91; break; }
    case 90: 
      $1=-1;
      label = 132; break;
    case 91: 
      label = 95; break;
    case 92: 
      var $316=$2;
      var $317=$did;
      var $318=((($317)+(1))|0);
      $did=$318;
      var $319=(($317)|0)!=0;
      var $320=$319 ? (((5266872)|0)) : (((5265784)|0));
      var $321=$3;
      var $322=_file_printf($316, ((5269556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$320,HEAP32[(((tempInt)+(4))>>2)]=$321,tempInt));
      var $323=(($322)|0)==-1;
      if ($323) { label = 93; break; } else { label = 94; break; }
    case 93: 
      $1=-1;
      label = 132; break;
    case 94: 
      label = 95; break;
    case 95: 
      $1=1;
      label = 132; break;
    case 96: 
      var $328=(($buf2)|0);
      var $329=$3;
      var $330=_strlcpy($328, $329, 2052);
      var $331=$tmp;
      var $332=$3;
      var $333=$331;
      var $334=$332;
      var $335=((($333)-($334))|0);
      var $336=((($335)+(1))|0);
      var $337=(($buf2+$336)|0);
      HEAP8[($337)]=0;
      var $338=(($buf2)|0);
      var $339=(($buf)|0);
      var $340=_strlcat($338, $339, 2052);
      var $341=(($buf2)|0);
      $tmp=$341;
      label = 97; break;
    case 97: 
      var $343=$tmp;
      var $344=_stat($343, $tstatbuf);
      var $345=(($344)|0) < 0;
      if ($345) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $347=$2;
      var $348=___errno_location();
      var $349=HEAP32[(($348)>>2)];
      var $350=(($buf)|0);
      var $351=_bad_link($347, $349, $350);
      $1=$351;
      label = 132; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $354=$2;
      var $355=(($354+32)|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=$356 & 2;
      var $358=(($357)|0)!=0;
      if ($358) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $360=$2;
      var $361=(($360+32)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=$362 & 2;
      HEAP32[(($361)>>2)]=$363;
      var $364=$2;
      var $365=(($buf)|0);
      var $366=_magic_file($364, $365);
      $p=$366;
      var $367=$2;
      var $368=(($367+32)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=$369 | 2;
      HEAP32[(($368)>>2)]=$370;
      var $371=$p;
      var $372=(($371)|0)!=0;
      var $373=$372 ? 1 : -1;
      $1=$373;
      label = 132; break;
    case 102: 
      var $375=$mime;
      var $376=(($375)|0)!=0;
      if ($376) { label = 103; break; } else { label = 106; break; }
    case 103: 
      var $378=$2;
      var $379=$mime;
      var $380=_handle_mime($378, $379, ((5270676)|0));
      var $381=(($380)|0)==-1;
      if ($381) { label = 104; break; } else { label = 105; break; }
    case 104: 
      $1=-1;
      label = 132; break;
    case 105: 
      label = 109; break;
    case 106: 
      var $385=$2;
      var $386=$did;
      var $387=((($386)+(1))|0);
      $did=$387;
      var $388=(($386)|0)!=0;
      var $389=$388 ? (((5266872)|0)) : (((5265784)|0));
      var $390=(($buf)|0);
      var $391=_file_printf($385, ((5269204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$389,HEAP32[(((tempInt)+(4))>>2)]=$390,tempInt));
      var $392=(($391)|0)==-1;
      if ($392) { label = 107; break; } else { label = 108; break; }
    case 107: 
      $1=-1;
      label = 132; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      $1=1;
      label = 132; break;
    case 111: 
      var $398=$mime;
      var $399=(($398)|0)!=0;
      if ($399) { label = 112; break; } else { label = 115; break; }
    case 112: 
      var $401=$2;
      var $402=$mime;
      var $403=_handle_mime($401, $402, ((5268920)|0));
      var $404=(($403)|0)==-1;
      if ($404) { label = 113; break; } else { label = 114; break; }
    case 113: 
      $1=-1;
      label = 132; break;
    case 114: 
      label = 118; break;
    case 115: 
      var $408=$2;
      var $409=$did;
      var $410=((($409)+(1))|0);
      $did=$410;
      var $411=(($409)|0)!=0;
      var $412=$411 ? (((5266872)|0)) : (((5265784)|0));
      var $413=_file_printf($408, ((5268672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$412,tempInt));
      var $414=(($413)|0)==-1;
      if ($414) { label = 116; break; } else { label = 117; break; }
    case 116: 
      $1=-1;
      label = 132; break;
    case 117: 
      label = 118; break;
    case 118: 
      $1=1;
      label = 132; break;
    case 119: 
      label = 121; break;
    case 120: 
      var $420=$2;
      var $421=$4;
      var $422=(($421+8)|0);
      var $423=HEAP32[(($422)>>2)];
      _file_error($420, 0, ((5268428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$423,tempInt));
      $1=-1;
      label = 132; break;
    case 121: 
      var $425=$2;
      var $426=(($425+32)|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=$427 & 8;
      var $429=(($428)|0)==0;
      if ($429) { label = 122; break; } else { label = 131; break; }
    case 122: 
      var $431=$4;
      var $432=(($431+28)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=(($433)|0)==0;
      if ($434) { label = 123; break; } else { label = 131; break; }
    case 123: 
      var $436=$mime;
      var $437=(($436)|0)!=0;
      if ($437) { label = 124; break; } else { label = 127; break; }
    case 124: 
      var $439=$2;
      var $440=$mime;
      var $441=_handle_mime($439, $440, ((5268196)|0));
      var $442=(($441)|0)==-1;
      if ($442) { label = 125; break; } else { label = 126; break; }
    case 125: 
      $1=-1;
      label = 132; break;
    case 126: 
      label = 130; break;
    case 127: 
      var $446=$2;
      var $447=$did;
      var $448=((($447)+(1))|0);
      $did=$448;
      var $449=(($447)|0)!=0;
      var $450=$449 ? (((5266872)|0)) : (((5265784)|0));
      var $451=_file_printf($446, ((5268080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$450,tempInt));
      var $452=(($451)|0)==-1;
      if ($452) { label = 128; break; } else { label = 129; break; }
    case 128: 
      $1=-1;
      label = 132; break;
    case 129: 
      label = 130; break;
    case 130: 
      $1=1;
      label = 132; break;
    case 131: 
      $1=0;
      label = 132; break;
    case 132: 
      var $458=$1;
      STACKTOP = __stackBase__;
      return $458;
    default: assert(0, "bad label: " + label);
  }
}
_file_fsmagic["X"]=1;

function _handle_mime($ms, $mime, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$ms;
      $3=$mime;
      $4=$str;
      var $5=$3;
      var $6=$5 & 16;
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $9=$2;
      var $10=$4;
      var $11=_file_printf($9, ((5267532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$10,tempInt));
      var $12=(($11)|0)==-1;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 13; break;
    case 5: 
      var $15=$3;
      var $16=$15 & 1024;
      var $17=(($16)|0)!=0;
      if ($17) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $19=$2;
      var $20=_file_printf($19, ((5267396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=(($20)|0)==-1;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-1;
      label = 13; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $25=$3;
      var $26=$25 & 1024;
      var $27=(($26)|0)!=0;
      if ($27) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $29=$2;
      var $30=_file_printf($29, ((5267264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=(($30)|0)==-1;
      if ($31) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=-1;
      label = 13; break;
    case 12: 
      $1=0;
      label = 13; break;
    case 13: 
      var $35=$1;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}


function _bad_link($ms, $err, $buf) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $mime;
      $2=$ms;
      $3=$err;
      $4=$buf;
      var $5=$2;
      var $6=(($5+32)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 1040;
      $mime=$8;
      var $9=$mime;
      var $10=$9 & 16;
      var $11=(($10)|0)!=0;
      if ($11) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $13=$2;
      var $14=_file_printf($13, ((5267864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $15=(($14)|0)==-1;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 13; break;
    case 5: 
      var $18=$mime;
      var $19=(($18)|0)!=0;
      if ($19) { label = 11; break; } else { label = 6; break; }
    case 6: 
      var $21=$2;
      var $22=(($21+32)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 512;
      var $25=(($24)|0)!=0;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=$2;
      var $28=$3;
      var $29=$4;
      _file_error($27, $28, ((5267712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$29,tempInt));
      $1=-1;
      label = 13; break;
    case 8: 
      var $31=$2;
      var $32=$4;
      var $33=_file_printf($31, ((5267712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$32,tempInt));
      var $34=(($33)|0)==-1;
      if ($34) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=-1;
      label = 13; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      $1=1;
      label = 13; break;
    case 13: 
      var $40=$1;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
_bad_link["X"]=1;

function _file_vprintf($ms, $fmt, $ap) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $len;
      var $buf=__stackBase__;
      var $newstr=(__stackBase__)+(4);
      $2=$ms;
      $3=$fmt;
      $4=$ap;
      var $5=$3;
      var $6=$4;
      var $7=_vasprintf($buf, $5, $6);
      $len=$7;
      var $8=$len;
      var $9=(($8)|0) < 0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 9; break;
    case 4: 
      var $12=$2;
      var $13=(($12+16)|0);
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=HEAP32[(($buf)>>2)];
      var $23=_asprintf($newstr, ((5266576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$21,HEAP32[(((tempInt)+(4))>>2)]=$22,tempInt));
      $len=$23;
      var $24=HEAP32[(($buf)>>2)];
      _free($24);
      var $25=$len;
      var $26=(($25)|0) < 0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 9; break;
    case 7: 
      var $29=$2;
      var $30=(($29+16)|0);
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      _free($32);
      var $33=HEAP32[(($newstr)>>2)];
      HEAP32[(($buf)>>2)]=$33;
      label = 8; break;
    case 8: 
      var $35=HEAP32[(($buf)>>2)];
      var $36=$2;
      var $37=(($36+16)|0);
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$35;
      $1=0;
      label = 10; break;
    case 9: 
      var $40=$2;
      var $41=___errno_location();
      var $42=HEAP32[(($41)>>2)];
      _file_error($40, $42, ((5271428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 10; break;
    case 10: 
      var $44=$1;
      STACKTOP = __stackBase__;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
_file_vprintf["X"]=1;

function _file_error($ms, $error, $f, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $3;
  var $va=__stackBase__;
  $1=$ms;
  $2=$error;
  $3=$f;
  var $4=$va;
  HEAP32[(($4)>>2)]=varrp;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=HEAP32[(($va)>>2)];
  _file_error_core($5, $6, $7, $8, 0);
  var $9=$va;

  STACKTOP = __stackBase__;
  return;
}


function _file_printf($ms, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $rv;
  var $ap=__stackBase__;
  $1=$ms;
  $2=$fmt;
  var $3=$ap;
  HEAP32[(($3)>>2)]=varrp;
  var $4=$1;
  var $5=$2;
  var $6=HEAP32[(($ap)>>2)];
  var $7=_file_vprintf($4, $5, $6);
  $rv=$7;
  var $8=$ap;

  var $9=$rv;
  STACKTOP = __stackBase__;
  return $9;
}


function _file_error_core($ms, $error, $f, $va, $lineno) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$ms;
      $2=$error;
      $3=$f;
      $4=$va;
      $5=$lineno;
      var $6=$1;
      var $7=(($6+36)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 1;
      var $10=(($9)|0)!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 9; break;
    case 4: 
      var $13=$5;
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$1;
      var $17=(($16+16)|0);
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      _free($19);
      var $20=$1;
      var $21=(($20+16)|0);
      var $22=(($21)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$1;
      var $24=$5;
      var $25=_file_printf($23, ((5268660)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$24,tempInt));
      label = 6; break;
    case 6: 
      var $27=$1;
      var $28=$3;
      var $29=$4;
      var $30=_file_vprintf($27, $28, $29);
      var $31=$2;
      var $32=(($31)|0) > 0;
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $34=$1;
      var $35=$2;
      var $36=_strerror($35);
      var $37=_file_printf($34, ((5268420)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$36,tempInt));
      label = 8; break;
    case 8: 
      var $39=$1;
      var $40=(($39+36)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 | 1;
      HEAP32[(($40)>>2)]=$42;
      var $43=$2;
      var $44=$1;
      var $45=(($44+28)|0);
      HEAP32[(($45)>>2)]=$43;
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_file_error_core["X"]=1;

function _file_magerror($ms, $f, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $va=__stackBase__;
  $1=$ms;
  $2=$f;
  var $3=$va;
  HEAP32[(($3)>>2)]=varrp;
  var $4=$1;
  var $5=$2;
  var $6=HEAP32[(($va)>>2)];
  var $7=$1;
  var $8=(($7+44)|0);
  var $9=HEAP32[(($8)>>2)];
  _file_error_core($4, 0, $5, $6, $9);
  var $10=$va;

  STACKTOP = __stackBase__;
  return;
}


function _file_oomem($ms, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  $1=$ms;
  $2=$len;
  var $3=$1;
  var $4=___errno_location();
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  _file_error($3, $5, ((5268564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _file_badseek($ms) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  $1=$ms;
  var $2=$1;
  var $3=___errno_location();
  var $4=HEAP32[(($3)>>2)];
  _file_error($2, $4, ((5266816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _file_badread($ms) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  $1=$ms;
  var $2=$1;
  var $3=___errno_location();
  var $4=HEAP32[(($3)>>2)];
  _file_error($2, $4, ((5265760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _file_buffer($ms, $fd, $inname, $buf, $nb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $m;
      var $rv;
      var $looks_text;
      var $mime;
      var $ubuf;
      var $u8buf=__stackBase__;
      var $ulen=(__stackBase__)+(4);
      var $code=(__stackBase__)+(8);
      var $code_mime=(__stackBase__)+(12);
      var $type=(__stackBase__)+(16);
      $2=$ms;
      $3=$fd;
      $4=$inname;
      $5=$buf;
      $6=$nb;
      $m=0;
      $rv=0;
      $looks_text=0;
      var $7=$2;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 1040;
      $mime=$10;
      var $11=$5;
      $ubuf=$11;
      HEAP32[(($u8buf)>>2)]=0;
      HEAP32[(($code)>>2)]=0;
      HEAP32[(($code_mime)>>2)]=((5264500)|0);
      HEAP32[(($type)>>2)]=0;
      var $12=$6;
      var $13=(($12)|0)==0;
      if ($13) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $15=$mime;
      var $16=(($15)|0)!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$mime;
      var $19=$18 & 16;
      var $20=(($19)|0)!=0;
      if ($20) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $22=$2;
      var $23=$mime;
      var $24=(($23)|0)!=0;
      var $25=$24 ? (((5263472)|0)) : (((5262392)|0));
      var $26=_file_printf($22, $25, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $27=(($26)|0)==-1;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 80; break;
    case 7: 
      $1=1;
      label = 80; break;
    case 8: 
      var $31=$6;
      var $32=(($31)|0)==1;
      if ($32) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $34=$mime;
      var $35=(($34)|0)!=0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=$mime;
      var $38=$37 & 16;
      var $39=(($38)|0)!=0;
      if ($39) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $41=$2;
      var $42=$mime;
      var $43=(($42)|0)!=0;
      var $44=$43 ? (((5261516)|0)) : (((5260636)|0));
      var $45=_file_printf($41, $44, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $46=(($45)|0)==-1;
      if ($46) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=-1;
      label = 80; break;
    case 13: 
      $1=1;
      label = 80; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $51=$2;
      var $52=(($51+32)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 & 2097152;
      var $55=(($54)|0)==0;
      if ($55) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $57=$2;
      var $58=$ubuf;
      var $59=$6;
      var $60=_file_encoding($57, $58, $59, $u8buf, $ulen, $code, $code_mime, $type);
      $looks_text=$60;
      label = 17; break;
    case 17: 
      var $62=$2;
      var $63=(($62+32)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & 4096;
      var $66=(($65)|0)==0;
      if ($66) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $68=$2;
      var $69=$3;
      var $70=$4;
      var $71=$ubuf;
      var $72=$6;
      var $73=_file_zmagic($68, $69, $70, $71, $72);
      $m=$73;
      var $74=(($73)|0)!=0;
      if ($74) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $76=$2;
      var $77=(($76+32)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & 1;
      var $80=(($79)|0)!=0;
      if ($80) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $82=HEAP32[((_stderr)>>2)];
      var $83=$m;
      var $84=_fprintf($82, ((5273136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$83,tempInt));
      label = 21; break;
    case 21: 
      label = 69; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $88=$2;
      var $89=(($88+32)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$90 & 8192;
      var $92=(($91)|0)==0;
      if ($92) { label = 24; break; } else { label = 29; break; }
    case 24: 
      var $94=$2;
      var $95=$ubuf;
      var $96=$6;
      var $97=_file_is_tar($94, $95, $96);
      $m=$97;
      var $98=(($97)|0)!=0;
      if ($98) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $100=$2;
      var $101=(($100+32)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102 & 1;
      var $104=(($103)|0)!=0;
      if ($104) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $106=HEAP32[((_stderr)>>2)];
      var $107=$m;
      var $108=_fprintf($106, ((5272436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$107,tempInt));
      label = 27; break;
    case 27: 
      label = 69; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $112=$2;
      var $113=(($112+32)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & 262144;
      var $116=(($115)|0)==0;
      if ($116) { label = 30; break; } else { label = 35; break; }
    case 30: 
      var $118=$2;
      var $119=$3;
      var $120=$ubuf;
      var $121=$6;
      var $122=_file_trycdf($118, $119, $120, $121);
      $m=$122;
      var $123=(($122)|0)!=0;
      if ($123) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $125=$2;
      var $126=(($125+32)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$127 & 1;
      var $129=(($128)|0)!=0;
      if ($129) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $131=HEAP32[((_stderr)>>2)];
      var $132=$m;
      var $133=_fprintf($131, ((5271920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$132,tempInt));
      label = 33; break;
    case 33: 
      label = 69; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $137=$2;
      var $138=(($137+32)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=$139 & 16384;
      var $141=(($140)|0)==0;
      if ($141) { label = 36; break; } else { label = 50; break; }
    case 36: 
      var $143=$2;
      var $144=$ubuf;
      var $145=$6;
      var $146=$looks_text;
      var $147=_file_softmagic($143, $144, $145, 32, $146);
      $m=$147;
      var $148=(($147)|0)!=0;
      if ($148) { label = 37; break; } else { label = 49; break; }
    case 37: 
      var $150=$2;
      var $151=(($150+32)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$152 & 1;
      var $154=(($153)|0)!=0;
      if ($154) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $156=HEAP32[((_stderr)>>2)];
      var $157=$m;
      var $158=_fprintf($156, ((5271504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$157,tempInt));
      label = 39; break;
    case 39: 
      var $160=$2;
      var $161=(($160+32)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$162 & 65536;
      var $164=(($163)|0)==0;
      if ($164) { label = 40; break; } else { label = 48; break; }
    case 40: 
      var $166=$m;
      var $167=(($166)|0)==1;
      if ($167) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $169=$6;
      var $170=(($169)>>>0) > 5;
      if ($170) { label = 42; break; } else { label = 48; break; }
    case 42: 
      var $172=$3;
      var $173=(($172)|0)!=-1;
      if ($173) { label = 43; break; } else { label = 48; break; }
    case 43: 
      var $175=$2;
      var $176=$3;
      var $177=$ubuf;
      var $178=$6;
      var $179=_file_tryelf($175, $176, $177, $178);
      $m=$179;
      var $180=(($179)|0)!=0;
      if ($180) { label = 44; break; } else { label = 47; break; }
    case 44: 
      var $182=$2;
      var $183=(($182+32)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=$184 & 1;
      var $186=(($185)|0)!=0;
      if ($186) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $188=HEAP32[((_stderr)>>2)];
      var $189=$m;
      var $190=_fprintf($188, ((5271216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$189,tempInt));
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 69; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $196=$2;
      var $197=(($196+32)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$198 & 131072;
      var $200=(($199)|0)==0;
      if ($200) { label = 51; break; } else { label = 64; break; }
    case 51: 
      var $202=$2;
      var $203=$ubuf;
      var $204=$6;
      var $205=$looks_text;
      var $206=_file_ascmagic($202, $203, $204, $205);
      $m=$206;
      var $207=(($206)|0)!=0;
      if ($207) { label = 52; break; } else { label = 55; break; }
    case 52: 
      var $209=$2;
      var $210=(($209+32)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$211 & 1;
      var $213=(($212)|0)!=0;
      if ($213) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $215=HEAP32[((_stderr)>>2)];
      var $216=$m;
      var $217=_fprintf($215, ((5270908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$216,tempInt));
      label = 54; break;
    case 54: 
      label = 69; break;
    case 55: 
      var $220=$2;
      var $221=(($220+32)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$222 & 2097152;
      var $224=(($223)|0)==0;
      if ($224) { label = 56; break; } else { label = 63; break; }
    case 56: 
      var $226=$looks_text;
      var $227=(($226)|0)==0;
      if ($227) { label = 57; break; } else { label = 62; break; }
    case 57: 
      var $229=$2;
      var $230=$ubuf;
      var $231=$6;
      var $232=HEAP32[(($u8buf)>>2)];
      var $233=HEAP32[(($ulen)>>2)];
      var $234=HEAP32[(($code)>>2)];
      var $235=HEAP32[(($type)>>2)];
      var $236=$looks_text;
      var $237=_file_ascmagic_with_encoding($229, $230, $231, $232, $233, $234, $235, $236);
      $m=$237;
      var $238=(($237)|0)!=0;
      if ($238) { label = 58; break; } else { label = 61; break; }
    case 58: 
      var $240=$2;
      var $241=(($240+32)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$242 & 1;
      var $244=(($243)|0)!=0;
      if ($244) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $246=HEAP32[((_stderr)>>2)];
      var $247=$m;
      var $248=_fprintf($246, ((5270656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$247,tempInt));
      label = 60; break;
    case 60: 
      label = 69; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      $m=1;
      var $254=$mime;
      var $255=(($254)|0)!=0;
      if ($255) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $257=$mime;
      var $258=$257 & 16;
      var $259=(($258)|0)!=0;
      if ($259) { label = 66; break; } else { label = 68; break; }
    case 66: 
      var $261=$2;
      var $262=$mime;
      var $263=(($262)|0)!=0;
      var $264=$263 ? (((5261516)|0)) : (((5270352)|0));
      var $265=_file_printf($261, $264, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $266=(($265)|0)==-1;
      if ($266) { label = 67; break; } else { label = 68; break; }
    case 67: 
      $rv=-1;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $270=$2;
      var $271=(($270+32)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$272 & 1024;
      var $274=(($273)|0)!=0;
      if ($274) { label = 70; break; } else { label = 77; break; }
    case 70: 
      var $276=$2;
      var $277=(($276+32)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=$278 & 16;
      var $280=(($279)|0)!=0;
      if ($280) { label = 71; break; } else { label = 74; break; }
    case 71: 
      var $282=$2;
      var $283=_file_printf($282, ((5270068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $284=(($283)|0)==-1;
      if ($284) { label = 72; break; } else { label = 73; break; }
    case 72: 
      $rv=-1;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $288=$2;
      var $289=HEAP32[(($code_mime)>>2)];
      var $290=_file_printf($288, ((5269764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$289,tempInt));
      var $291=(($290)|0)==-1;
      if ($291) { label = 75; break; } else { label = 76; break; }
    case 75: 
      $rv=-1;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $295=HEAP32[(($u8buf)>>2)];
      var $296=$295;
      _free($296);
      var $297=$rv;
      var $298=(($297)|0)!=0;
      if ($298) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $300=$rv;
      $1=$300;
      label = 80; break;
    case 79: 
      var $302=$m;
      $1=$302;
      label = 80; break;
    case 80: 
      var $304=$1;
      STACKTOP = __stackBase__;
      return $304;
    default: assert(0, "bad label: " + label);
  }
}
_file_buffer["X"]=1;

function _file_reset($ms) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $2=$ms;
      var $3=$2;
      var $4=(($3)|0);
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      _file_error($9, 0, ((5269532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=-1;
      label = 9; break;
    case 4: 
      var $11=$2;
      var $12=(($11+16)|0);
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)!=0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      _free($20);
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=(($22)|0);
      HEAP32[(($23)>>2)]=0;
      label = 6; break;
    case 6: 
      var $25=$2;
      var $26=(($25+16)|0);
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)!=0;
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=(($32+4)|0);
      var $34=HEAP32[(($33)>>2)];
      _free($34);
      var $35=$2;
      var $36=(($35+16)|0);
      var $37=(($36+4)|0);
      HEAP32[(($37)>>2)]=0;
      label = 8; break;
    case 8: 
      var $39=$2;
      var $40=(($39+36)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41 & -2;
      HEAP32[(($40)>>2)]=$42;
      var $43=$2;
      var $44=(($43+28)|0);
      HEAP32[(($44)>>2)]=-1;
      $1=0;
      label = 9; break;
    case 9: 
      var $46=$1;
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + label);
  }
}
_file_reset["X"]=1;

function __cdf_tole2($sv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP16[(($1)>>1)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+1)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=HEAP16[(($rv)>>1)];
  STACKTOP = __stackBase__;
  return $14;
}


function __cdf_tole4($sv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(4);
  var $s;
  var $d;
  HEAP32[(($1)>>2)]=$sv;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+3)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+2)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+1)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=HEAP32[(($rv)>>2)];
  STACKTOP = __stackBase__;
  return $24;
}


function __cdf_tole8($sv$0, $sv$1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1=__stackBase__;
  var $rv=(__stackBase__)+(8);
  var $s;
  var $d;
  var $st$4$0=(($1)|0);
  HEAP32[(($st$4$0)>>2)]=$sv$0;
  var $st$4$1=(($1+4)|0);
  HEAP32[(($st$4$1)>>2)]=$sv$1;
  var $2=$1;
  $s=$2;
  var $3=$rv;
  $d=$3;
  var $4=$s;
  var $5=(($4+7)|0);
  var $6=HEAP8[($5)];
  var $7=$d;
  var $8=(($7)|0);
  HEAP8[($8)]=$6;
  var $9=$s;
  var $10=(($9+6)|0);
  var $11=HEAP8[($10)];
  var $12=$d;
  var $13=(($12+1)|0);
  HEAP8[($13)]=$11;
  var $14=$s;
  var $15=(($14+5)|0);
  var $16=HEAP8[($15)];
  var $17=$d;
  var $18=(($17+2)|0);
  HEAP8[($18)]=$16;
  var $19=$s;
  var $20=(($19+4)|0);
  var $21=HEAP8[($20)];
  var $22=$d;
  var $23=(($22+3)|0);
  HEAP8[($23)]=$21;
  var $24=$s;
  var $25=(($24+3)|0);
  var $26=HEAP8[($25)];
  var $27=$d;
  var $28=(($27+4)|0);
  HEAP8[($28)]=$26;
  var $29=$s;
  var $30=(($29+2)|0);
  var $31=HEAP8[($30)];
  var $32=$d;
  var $33=(($32+5)|0);
  HEAP8[($33)]=$31;
  var $34=$s;
  var $35=(($34+1)|0);
  var $36=HEAP8[($35)];
  var $37=$d;
  var $38=(($37+6)|0);
  HEAP8[($38)]=$36;
  var $39=$s;
  var $40=(($39)|0);
  var $41=HEAP8[($40)];
  var $42=$d;
  var $43=(($42+7)|0);
  HEAP8[($43)]=$41;
  var $st$60$0=(($rv)|0);
  var $44$0=HEAP32[(($st$60$0)>>2)];
  var $st$60$1=(($rv+4)|0);
  var $44$1=HEAP32[(($st$60$1)>>2)];
  STACKTOP = __stackBase__;
  return (tempRet0=$44$1,$44$0);
}
__cdf_tole8["X"]=1;

function _file_getbuffer($ms) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $pbuf;
      var $op;
      var $np;
      var $psize;
      var $len;
      $2=$ms;
      var $3=$2;
      var $4=(($3+36)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 & 1;
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 19; break;
    case 4: 
      var $10=$2;
      var $11=(($10+32)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & 256;
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$2;
      var $17=(($16+16)|0);
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      $1=$19;
      label = 19; break;
    case 6: 
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==0;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 19; break;
    case 8: 
      var $28=$2;
      var $29=(($28+16)|0);
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=_strlen($31);
      $len=$32;
      var $33=$len;
      var $34=(($33)>>>0) > 1073741823;
      if ($34) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $36=$2;
      var $37=$len;
      _file_oomem($36, $37);
      $1=0;
      label = 19; break;
    case 10: 
      var $39=$len;
      var $40=((($39<<2))|0);
      var $41=((($40)+(1))|0);
      $psize=$41;
      var $42=$2;
      var $43=(($42+16)|0);
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$psize;
      var $47=_realloc($45, $46);
      $pbuf=$47;
      var $48=(($47)|0)==0;
      if ($48) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $50=$2;
      var $51=$psize;
      _file_oomem($50, $51);
      $1=0;
      label = 19; break;
    case 12: 
      var $53=$pbuf;
      var $54=$2;
      var $55=(($54+16)|0);
      var $56=(($55+4)|0);
      HEAP32[(($56)>>2)]=$53;
      var $57=$2;
      var $58=(($57+16)|0);
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      $np=$60;
      var $61=$2;
      var $62=(($61+16)|0);
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      $op=$64;
      label = 13; break;
    case 13: 
      var $66=$op;
      var $67=HEAP8[($66)];
      var $68=(($67 << 24) >> 24)!=0;
      if ($68) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $70=$op;
      var $71=HEAP8[($70)];
      var $72=(($71)&255);
      var $73=_isprint($72);
      var $74=(($73)|0)!=0;
      if ($74) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $76=$op;
      var $77=(($76+1)|0);
      $op=$77;
      var $78=HEAP8[($76)];
      var $79=$np;
      var $80=(($79+1)|0);
      $np=$80;
      HEAP8[($79)]=$78;
      label = 17; break;
    case 16: 
      var $82=$np;
      var $83=(($82+1)|0);
      $np=$83;
      HEAP8[($82)]=92;
      var $84=$op;
      var $85=HEAP8[($84)];
      var $86=(($85 << 24) >> 24);
      var $87=$86 >>> 6;
      var $88=$87 & 3;
      var $89=((($88)+(48))|0);
      var $90=(($89) & 255);
      var $91=$np;
      var $92=(($91+1)|0);
      $np=$92;
      HEAP8[($91)]=$90;
      var $93=$op;
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=$95 >>> 3;
      var $97=$96 & 7;
      var $98=((($97)+(48))|0);
      var $99=(($98) & 255);
      var $100=$np;
      var $101=(($100+1)|0);
      $np=$101;
      HEAP8[($100)]=$99;
      var $102=$op;
      var $103=HEAP8[($102)];
      var $104=(($103 << 24) >> 24);
      var $105=$104 >>> 0;
      var $106=$105 & 7;
      var $107=((($106)+(48))|0);
      var $108=(($107) & 255);
      var $109=$np;
      var $110=(($109+1)|0);
      $np=$110;
      HEAP8[($109)]=$108;
      var $111=$op;
      var $112=(($111+1)|0);
      $op=$112;
      label = 17; break;
    case 17: 
      label = 13; break;
    case 18: 
      var $115=$np;
      HEAP8[($115)]=0;
      var $116=$2;
      var $117=(($116+16)|0);
      var $118=(($117+4)|0);
      var $119=HEAP32[(($118)>>2)];
      $1=$119;
      label = 19; break;
    case 19: 
      var $121=$1;

      return $121;
    default: assert(0, "bad label: " + label);
  }
}
_file_getbuffer["X"]=1;

function _file_check_mem($ms, $level) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $len;
      $2=$ms;
      $3=$level;
      var $4=$3;
      var $5=$2;
      var $6=(($5+8)|0);
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($4)>>>0) >= (($8)>>>0);
      if ($9) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+8)|0);
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)+(20))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=((($15<<4))|0);
      $len=$16;
      var $17=$2;
      var $18=(($17+8)|0);
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==0;
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=$len;
      var $24=_malloc($23);
      var $34 = $24;label = 6; break;
    case 5: 
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=$len;
      var $32=_realloc($30, $31);
      var $34 = $32;label = 6; break;
    case 6: 
      var $34;
      var $35=$34;
      var $36=$2;
      var $37=(($36+8)|0);
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$35;
      var $39=$2;
      var $40=(($39+8)|0);
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)==0;
      if ($43) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $45=$2;
      var $46=$len;
      _file_oomem($45, $46);
      $1=-1;
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $49=$3;
      var $50=$2;
      var $51=(($50+8)|0);
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($49<<4))|0);
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=0;
      var $56=$3;
      var $57=$2;
      var $58=(($57+8)|0);
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+($56<<4))|0);
      var $62=(($61+8)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$3;
      var $64=$2;
      var $65=(($64+8)|0);
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+($63<<4))|0);
      var $69=(($68+12)|0);
      HEAP32[(($69)>>2)]=0;
      $1=0;
      label = 10; break;
    case 10: 
      var $71=$1;

      return $71;
    default: assert(0, "bad label: " + label);
  }
}
_file_check_mem["X"]=1;

function _file_printedlen($ms) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$ms;
      var $2=$1;
      var $3=(($2+16)|0);
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15 = 0;label = 5; break;
    case 4: 
      var $9=$1;
      var $10=(($9+16)|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=_strlen($12);
      var $15 = $13;label = 5; break;
    case 5: 
      var $15;

      return $15;
    default: assert(0, "bad label: " + label);
  }
}


function _file_replace($ms, $pat, $rep) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 536)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $rx=__stackBase__;
      var $rc;
      var $errmsg=(__stackBase__)+(16);
      var $rm=(__stackBase__)+(528);
      var $nm;
      $2=$ms;
      $3=$pat;
      $4=$rep;
      var $5=$3;
      var $6=_regcomp($rx, $5, 1);
      $rc=$6;
      var $7=$rc;
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$rc;
      var $11=(($errmsg)|0);
      var $12=_regerror($10, $rx, $11, 512);
      var $13=$2;
      var $14=$rc;
      var $15=(($errmsg)|0);
      _file_magerror($13, ((5269180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
      $1=-1;
      label = 13; break;
    case 4: 
      $nm=0;
      label = 5; break;
    case 5: 
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_regexec($rx, $21, 1, $rm, 0);
      var $23=(($22)|0)==0;
      if ($23) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $25=(($rm)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$2;
      var $28=(($27+16)|0);
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+$26)|0);
      HEAP8[($31)]=0;
      var $32=$2;
      var $33=$4;
      var $34=(($rm+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0)!=0;
      if ($36) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $38=$2;
      var $39=(($38+16)|0);
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($rm+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($41+$43)|0);
      var $47 = $44;label = 9; break;
    case 8: 
      var $47 = ((5268916)|0);label = 9; break;
    case 9: 
      var $47;
      var $48=_file_printf($32, ((5266576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$33,HEAP32[(((tempInt)+(4))>>2)]=$47,tempInt));
      var $49=(($48)|0)==-1;
      if ($49) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=-1;
      label = 13; break;
    case 11: 
      var $52=$nm;
      var $53=((($52)+(1))|0);
      $nm=$53;
      label = 5; break;
    case 12: 
      _regfree($rx);
      var $55=$nm;
      $1=$55;
      label = 13; break;
    case 13: 
      var $57=$1;
      STACKTOP = __stackBase__;
      return $57;
    default: assert(0, "bad label: " + label);
  }
}
_file_replace["X"]=1;

function _cdf_tole2($sv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$sv;
      var $2=HEAP32[((((5259672)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$1;
      var $6=__cdf_tole2($5);
      var $7=(($6)&65535);
      var $12 = $7;label = 5; break;
    case 4: 
      var $9=$1;
      var $10=(($9)&65535);
      var $12 = $10;label = 5; break;
    case 5: 
      var $12;
      var $13=(($12) & 65535);

      return $13;
    default: assert(0, "bad label: " + label);
  }
}


function _cdf_swap_header($h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      $1=$h;
      var $2=HEAP32[((((5259672)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)|0);
      var $st$2$0=(($6)|0);
      var $7$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($6+4)|0);
      var $7$1=HEAP32[(($st$2$1)>>2)];
      var $8$0=__cdf_tole8($7$0, $7$1);
      var $8$1=tempRet0;
      var $14$1 = $8$1;var $14$0 = $8$0;label = 5; break;
    case 4: 
      var $10=$1;
      var $11=(($10)|0);
      var $st$2$0=(($11)|0);
      var $12$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($11+4)|0);
      var $12$1=HEAP32[(($st$2$1)>>2)];
      var $14$1 = $12$1;var $14$0 = $12$0;label = 5; break;
    case 5: 
      var $14$0;
      var $14$1;
      var $15=$1;
      var $16=(($15)|0);
      var $st$4$0=(($16)|0);
      HEAP32[(($st$4$0)>>2)]=$14$0;
      var $st$4$1=(($16+4)|0);
      HEAP32[(($st$4$1)>>2)]=$14$1;
      var $17=HEAP32[((((5259672)|0))>>2)];
      var $18=(($17)|0)==16909060;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$1;
      var $21=(($20+8)|0);
      var $22=(($21)|0);
      var $st$3$0=(($22)|0);
      var $23$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($22+4)|0);
      var $23$1=HEAP32[(($st$3$1)>>2)];
      var $24$0=__cdf_tole8($23$0, $23$1);
      var $24$1=tempRet0;
      var $31$1 = $24$1;var $31$0 = $24$0;label = 8; break;
    case 7: 
      var $26=$1;
      var $27=(($26+8)|0);
      var $28=(($27)|0);
      var $st$3$0=(($28)|0);
      var $29$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($28+4)|0);
      var $29$1=HEAP32[(($st$3$1)>>2)];
      var $31$1 = $29$1;var $31$0 = $29$0;label = 8; break;
    case 8: 
      var $31$0;
      var $31$1;
      var $32=$1;
      var $33=(($32+8)|0);
      var $34=(($33)|0);
      var $st$5$0=(($34)|0);
      HEAP32[(($st$5$0)>>2)]=$31$0;
      var $st$5$1=(($34+4)|0);
      HEAP32[(($st$5$1)>>2)]=$31$1;
      var $35=HEAP32[((((5259672)|0))>>2)];
      var $36=(($35)|0)==16909060;
      if ($36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $38=$1;
      var $39=(($38+8)|0);
      var $40=(($39+8)|0);
      var $st$3$0=(($40)|0);
      var $41$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($40+4)|0);
      var $41$1=HEAP32[(($st$3$1)>>2)];
      var $42$0=__cdf_tole8($41$0, $41$1);
      var $42$1=tempRet0;
      var $49$1 = $42$1;var $49$0 = $42$0;label = 11; break;
    case 10: 
      var $44=$1;
      var $45=(($44+8)|0);
      var $46=(($45+8)|0);
      var $st$3$0=(($46)|0);
      var $47$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($46+4)|0);
      var $47$1=HEAP32[(($st$3$1)>>2)];
      var $49$1 = $47$1;var $49$0 = $47$0;label = 11; break;
    case 11: 
      var $49$0;
      var $49$1;
      var $50=$1;
      var $51=(($50+8)|0);
      var $52=(($51+8)|0);
      var $st$5$0=(($52)|0);
      HEAP32[(($st$5$0)>>2)]=$49$0;
      var $st$5$1=(($52+4)|0);
      HEAP32[(($st$5$1)>>2)]=$49$1;
      var $53=HEAP32[((((5259672)|0))>>2)];
      var $54=(($53)|0)==16909060;
      if ($54) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $56=$1;
      var $57=(($56+24)|0);
      var $58=HEAP16[(($57)>>1)];
      var $59=__cdf_tole2($58);
      var $60=(($59)&65535);
      var $67 = $60;label = 14; break;
    case 13: 
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP16[(($63)>>1)];
      var $65=(($64)&65535);
      var $67 = $65;label = 14; break;
    case 14: 
      var $67;
      var $68=(($67) & 65535);
      var $69=$1;
      var $70=(($69+24)|0);
      HEAP16[(($70)>>1)]=$68;
      var $71=HEAP32[((((5259672)|0))>>2)];
      var $72=(($71)|0)==16909060;
      if ($72) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $74=$1;
      var $75=(($74+26)|0);
      var $76=HEAP16[(($75)>>1)];
      var $77=__cdf_tole2($76);
      var $78=(($77)&65535);
      var $85 = $78;label = 17; break;
    case 16: 
      var $80=$1;
      var $81=(($80+26)|0);
      var $82=HEAP16[(($81)>>1)];
      var $83=(($82)&65535);
      var $85 = $83;label = 17; break;
    case 17: 
      var $85;
      var $86=(($85) & 65535);
      var $87=$1;
      var $88=(($87+26)|0);
      HEAP16[(($88)>>1)]=$86;
      var $89=HEAP32[((((5259672)|0))>>2)];
      var $90=(($89)|0)==16909060;
      if ($90) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $92=$1;
      var $93=(($92+28)|0);
      var $94=HEAP16[(($93)>>1)];
      var $95=__cdf_tole2($94);
      var $96=(($95)&65535);
      var $103 = $96;label = 20; break;
    case 19: 
      var $98=$1;
      var $99=(($98+28)|0);
      var $100=HEAP16[(($99)>>1)];
      var $101=(($100)&65535);
      var $103 = $101;label = 20; break;
    case 20: 
      var $103;
      var $104=(($103) & 65535);
      var $105=$1;
      var $106=(($105+28)|0);
      HEAP16[(($106)>>1)]=$104;
      var $107=HEAP32[((((5259672)|0))>>2)];
      var $108=(($107)|0)==16909060;
      if ($108) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $110=$1;
      var $111=(($110+30)|0);
      var $112=HEAP16[(($111)>>1)];
      var $113=__cdf_tole2($112);
      var $114=(($113)&65535);
      var $121 = $114;label = 23; break;
    case 22: 
      var $116=$1;
      var $117=(($116+30)|0);
      var $118=HEAP16[(($117)>>1)];
      var $119=(($118)&65535);
      var $121 = $119;label = 23; break;
    case 23: 
      var $121;
      var $122=(($121) & 65535);
      var $123=$1;
      var $124=(($123+30)|0);
      HEAP16[(($124)>>1)]=$122;
      var $125=HEAP32[((((5259672)|0))>>2)];
      var $126=(($125)|0)==16909060;
      if ($126) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $128=$1;
      var $129=(($128+32)|0);
      var $130=HEAP16[(($129)>>1)];
      var $131=__cdf_tole2($130);
      var $132=(($131)&65535);
      var $139 = $132;label = 26; break;
    case 25: 
      var $134=$1;
      var $135=(($134+32)|0);
      var $136=HEAP16[(($135)>>1)];
      var $137=(($136)&65535);
      var $139 = $137;label = 26; break;
    case 26: 
      var $139;
      var $140=(($139) & 65535);
      var $141=$1;
      var $142=(($141+32)|0);
      HEAP16[(($142)>>1)]=$140;
      var $143=HEAP32[((((5259672)|0))>>2)];
      var $144=(($143)|0)==16909060;
      if ($144) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $146=$1;
      var $147=(($146+44)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=__cdf_tole4($148);
      var $155 = $149;label = 29; break;
    case 28: 
      var $151=$1;
      var $152=(($151+44)|0);
      var $153=HEAP32[(($152)>>2)];
      var $155 = $153;label = 29; break;
    case 29: 
      var $155;
      var $156=$1;
      var $157=(($156+44)|0);
      HEAP32[(($157)>>2)]=$155;
      var $158=HEAP32[((((5259672)|0))>>2)];
      var $159=(($158)|0)==16909060;
      if ($159) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $161=$1;
      var $162=(($161+48)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=__cdf_tole4($163);
      var $170 = $164;label = 32; break;
    case 31: 
      var $166=$1;
      var $167=(($166+48)|0);
      var $168=HEAP32[(($167)>>2)];
      var $170 = $168;label = 32; break;
    case 32: 
      var $170;
      var $171=$1;
      var $172=(($171+48)|0);
      HEAP32[(($172)>>2)]=$170;
      var $173=HEAP32[((((5259672)|0))>>2)];
      var $174=(($173)|0)==16909060;
      if ($174) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $176=$1;
      var $177=(($176+56)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=__cdf_tole4($178);
      var $185 = $179;label = 35; break;
    case 34: 
      var $181=$1;
      var $182=(($181+56)|0);
      var $183=HEAP32[(($182)>>2)];
      var $185 = $183;label = 35; break;
    case 35: 
      var $185;
      var $186=$1;
      var $187=(($186+56)|0);
      HEAP32[(($187)>>2)]=$185;
      var $188=HEAP32[((((5259672)|0))>>2)];
      var $189=(($188)|0)==16909060;
      if ($189) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $191=$1;
      var $192=(($191+60)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=__cdf_tole4($193);
      var $200 = $194;label = 38; break;
    case 37: 
      var $196=$1;
      var $197=(($196+60)|0);
      var $198=HEAP32[(($197)>>2)];
      var $200 = $198;label = 38; break;
    case 38: 
      var $200;
      var $201=$1;
      var $202=(($201+60)|0);
      HEAP32[(($202)>>2)]=$200;
      var $203=HEAP32[((((5259672)|0))>>2)];
      var $204=(($203)|0)==16909060;
      if ($204) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $206=$1;
      var $207=(($206+64)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=__cdf_tole4($208);
      var $215 = $209;label = 41; break;
    case 40: 
      var $211=$1;
      var $212=(($211+64)|0);
      var $213=HEAP32[(($212)>>2)];
      var $215 = $213;label = 41; break;
    case 41: 
      var $215;
      var $216=$1;
      var $217=(($216+64)|0);
      HEAP32[(($217)>>2)]=$215;
      var $218=HEAP32[((((5259672)|0))>>2)];
      var $219=(($218)|0)==16909060;
      if ($219) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $221=$1;
      var $222=(($221+68)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=__cdf_tole4($223);
      var $230 = $224;label = 44; break;
    case 43: 
      var $226=$1;
      var $227=(($226+68)|0);
      var $228=HEAP32[(($227)>>2)];
      var $230 = $228;label = 44; break;
    case 44: 
      var $230;
      var $231=$1;
      var $232=(($231+68)|0);
      HEAP32[(($232)>>2)]=$230;
      var $233=HEAP32[((((5259672)|0))>>2)];
      var $234=(($233)|0)==16909060;
      if ($234) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $236=$1;
      var $237=(($236+72)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=__cdf_tole4($238);
      var $245 = $239;label = 47; break;
    case 46: 
      var $241=$1;
      var $242=(($241+72)|0);
      var $243=HEAP32[(($242)>>2)];
      var $245 = $243;label = 47; break;
    case 47: 
      var $245;
      var $246=$1;
      var $247=(($246+72)|0);
      HEAP32[(($247)>>2)]=$245;
      $i=0;
      label = 48; break;
    case 48: 
      var $249=$i;
      var $250=(($249)>>>0) < 109;
      if ($250) { label = 49; break; } else { label = 54; break; }
    case 49: 
      var $252=HEAP32[((((5259672)|0))>>2)];
      var $253=(($252)|0)==16909060;
      if ($253) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $255=$i;
      var $256=$1;
      var $257=(($256+76)|0);
      var $258=(($257+($255<<2))|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=__cdf_tole4($259);
      var $268 = $260;label = 52; break;
    case 51: 
      var $262=$i;
      var $263=$1;
      var $264=(($263+76)|0);
      var $265=(($264+($262<<2))|0);
      var $266=HEAP32[(($265)>>2)];
      var $268 = $266;label = 52; break;
    case 52: 
      var $268;
      var $269=$i;
      var $270=$1;
      var $271=(($270+76)|0);
      var $272=(($271+($269<<2))|0);
      HEAP32[(($272)>>2)]=$268;
      label = 53; break;
    case 53: 
      var $274=$i;
      var $275=((($274)+(1))|0);
      $i=$275;
      label = 48; break;
    case 54: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_swap_header["X"]=1;

function _cdf_unpack_header($h, $buf) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $len;
      $1=$h;
      $2=$buf;
      $len=0;
      var $3=$1;
      var $4=(($3)|0);
      var $5=$4;
      var $6=$len;
      var $7=$2;
      var $8=(($7+$6)|0);
      assert(8 % 1 === 0);HEAP8[($5)]=HEAP8[($8)];HEAP8[(($5)+(1))]=HEAP8[(($8)+(1))];HEAP8[(($5)+(2))]=HEAP8[(($8)+(2))];HEAP8[(($5)+(3))]=HEAP8[(($8)+(3))];HEAP8[(($5)+(4))]=HEAP8[(($8)+(4))];HEAP8[(($5)+(5))]=HEAP8[(($8)+(5))];HEAP8[(($5)+(6))]=HEAP8[(($8)+(6))];HEAP8[(($5)+(7))]=HEAP8[(($8)+(7))];
      var $9=$len;
      var $10=((($9)+(8))|0);
      $len=$10;
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=$12;
      var $14=$len;
      var $15=$2;
      var $16=(($15+$14)|0);
      assert(16 % 1 === 0);for (var $$src = $16, $$dest = $13, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $17=$len;
      var $18=((($17)+(16))|0);
      $len=$18;
      var $19=$1;
      var $20=(($19+24)|0);
      var $21=$20;
      var $22=$len;
      var $23=$2;
      var $24=(($23+$22)|0);
      assert(2 % 1 === 0);HEAP8[($21)]=HEAP8[($24)];HEAP8[(($21)+(1))]=HEAP8[(($24)+(1))];
      var $25=$len;
      var $26=((($25)+(2))|0);
      $len=$26;
      var $27=$1;
      var $28=(($27+26)|0);
      var $29=$28;
      var $30=$len;
      var $31=$2;
      var $32=(($31+$30)|0);
      assert(2 % 1 === 0);HEAP8[($29)]=HEAP8[($32)];HEAP8[(($29)+(1))]=HEAP8[(($32)+(1))];
      var $33=$len;
      var $34=((($33)+(2))|0);
      $len=$34;
      var $35=$1;
      var $36=(($35+28)|0);
      var $37=$36;
      var $38=$len;
      var $39=$2;
      var $40=(($39+$38)|0);
      assert(2 % 1 === 0);HEAP8[($37)]=HEAP8[($40)];HEAP8[(($37)+(1))]=HEAP8[(($40)+(1))];
      var $41=$len;
      var $42=((($41)+(2))|0);
      $len=$42;
      var $43=$1;
      var $44=(($43+30)|0);
      var $45=$44;
      var $46=$len;
      var $47=$2;
      var $48=(($47+$46)|0);
      assert(2 % 1 === 0);HEAP8[($45)]=HEAP8[($48)];HEAP8[(($45)+(1))]=HEAP8[(($48)+(1))];
      var $49=$len;
      var $50=((($49)+(2))|0);
      $len=$50;
      var $51=$1;
      var $52=(($51+32)|0);
      var $53=$52;
      var $54=$len;
      var $55=$2;
      var $56=(($55+$54)|0);
      assert(2 % 1 === 0);HEAP8[($53)]=HEAP8[($56)];HEAP8[(($53)+(1))]=HEAP8[(($56)+(1))];
      var $57=$len;
      var $58=((($57)+(2))|0);
      $len=$58;
      var $59=$1;
      var $60=(($59+34)|0);
      var $61=$60;
      var $62=$len;
      var $63=$2;
      var $64=(($63+$62)|0);
      assert(10 % 1 === 0);for (var $$src = $64, $$dest = $61, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src]
      };
      var $65=$len;
      var $66=((($65)+(10))|0);
      $len=$66;
      var $67=$1;
      var $68=(($67+44)|0);
      var $69=$68;
      var $70=$len;
      var $71=$2;
      var $72=(($71+$70)|0);
      assert(4 % 1 === 0);HEAP8[($69)]=HEAP8[($72)];HEAP8[(($69)+(1))]=HEAP8[(($72)+(1))];HEAP8[(($69)+(2))]=HEAP8[(($72)+(2))];HEAP8[(($69)+(3))]=HEAP8[(($72)+(3))];
      var $73=$len;
      var $74=((($73)+(4))|0);
      $len=$74;
      var $75=$1;
      var $76=(($75+48)|0);
      var $77=$76;
      var $78=$len;
      var $79=$2;
      var $80=(($79+$78)|0);
      assert(4 % 1 === 0);HEAP8[($77)]=HEAP8[($80)];HEAP8[(($77)+(1))]=HEAP8[(($80)+(1))];HEAP8[(($77)+(2))]=HEAP8[(($80)+(2))];HEAP8[(($77)+(3))]=HEAP8[(($80)+(3))];
      var $81=$len;
      var $82=((($81)+(4))|0);
      $len=$82;
      var $83=$1;
      var $84=(($83+52)|0);
      var $85=$84;
      var $86=$len;
      var $87=$2;
      var $88=(($87+$86)|0);
      assert(4 % 1 === 0);HEAP8[($85)]=HEAP8[($88)];HEAP8[(($85)+(1))]=HEAP8[(($88)+(1))];HEAP8[(($85)+(2))]=HEAP8[(($88)+(2))];HEAP8[(($85)+(3))]=HEAP8[(($88)+(3))];
      var $89=$len;
      var $90=((($89)+(4))|0);
      $len=$90;
      var $91=$1;
      var $92=(($91+56)|0);
      var $93=$92;
      var $94=$len;
      var $95=$2;
      var $96=(($95+$94)|0);
      assert(4 % 1 === 0);HEAP8[($93)]=HEAP8[($96)];HEAP8[(($93)+(1))]=HEAP8[(($96)+(1))];HEAP8[(($93)+(2))]=HEAP8[(($96)+(2))];HEAP8[(($93)+(3))]=HEAP8[(($96)+(3))];
      var $97=$len;
      var $98=((($97)+(4))|0);
      $len=$98;
      var $99=$1;
      var $100=(($99+60)|0);
      var $101=$100;
      var $102=$len;
      var $103=$2;
      var $104=(($103+$102)|0);
      assert(4 % 1 === 0);HEAP8[($101)]=HEAP8[($104)];HEAP8[(($101)+(1))]=HEAP8[(($104)+(1))];HEAP8[(($101)+(2))]=HEAP8[(($104)+(2))];HEAP8[(($101)+(3))]=HEAP8[(($104)+(3))];
      var $105=$len;
      var $106=((($105)+(4))|0);
      $len=$106;
      var $107=$1;
      var $108=(($107+64)|0);
      var $109=$108;
      var $110=$len;
      var $111=$2;
      var $112=(($111+$110)|0);
      assert(4 % 1 === 0);HEAP8[($109)]=HEAP8[($112)];HEAP8[(($109)+(1))]=HEAP8[(($112)+(1))];HEAP8[(($109)+(2))]=HEAP8[(($112)+(2))];HEAP8[(($109)+(3))]=HEAP8[(($112)+(3))];
      var $113=$len;
      var $114=((($113)+(4))|0);
      $len=$114;
      var $115=$1;
      var $116=(($115+68)|0);
      var $117=$116;
      var $118=$len;
      var $119=$2;
      var $120=(($119+$118)|0);
      assert(4 % 1 === 0);HEAP8[($117)]=HEAP8[($120)];HEAP8[(($117)+(1))]=HEAP8[(($120)+(1))];HEAP8[(($117)+(2))]=HEAP8[(($120)+(2))];HEAP8[(($117)+(3))]=HEAP8[(($120)+(3))];
      var $121=$len;
      var $122=((($121)+(4))|0);
      $len=$122;
      var $123=$1;
      var $124=(($123+72)|0);
      var $125=$124;
      var $126=$len;
      var $127=$2;
      var $128=(($127+$126)|0);
      assert(4 % 1 === 0);HEAP8[($125)]=HEAP8[($128)];HEAP8[(($125)+(1))]=HEAP8[(($128)+(1))];HEAP8[(($125)+(2))]=HEAP8[(($128)+(2))];HEAP8[(($125)+(3))]=HEAP8[(($128)+(3))];
      var $129=$len;
      var $130=((($129)+(4))|0);
      $len=$130;
      $i=0;
      label = 3; break;
    case 3: 
      var $132=$i;
      var $133=(($132)>>>0) < 109;
      if ($133) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $135=$i;
      var $136=$1;
      var $137=(($136+76)|0);
      var $138=(($137+($135<<2))|0);
      var $139=$138;
      var $140=$len;
      var $141=$2;
      var $142=(($141+$140)|0);
      assert(4 % 1 === 0);HEAP8[($139)]=HEAP8[($142)];HEAP8[(($139)+(1))]=HEAP8[(($142)+(1))];HEAP8[(($139)+(2))]=HEAP8[(($142)+(2))];HEAP8[(($139)+(3))]=HEAP8[(($142)+(3))];
      var $143=$len;
      var $144=((($143)+(4))|0);
      $len=$144;
      label = 5; break;
    case 5: 
      var $146=$i;
      var $147=((($146)+(1))|0);
      $i=$147;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_unpack_header["X"]=1;

function _cdf_swap_dir($d) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$d;
      var $2=HEAP32[((((5259672)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5+64)|0);
      var $7=HEAP16[(($6)>>1)];
      var $8=__cdf_tole2($7);
      var $9=(($8)&65535);
      var $16 = $9;label = 5; break;
    case 4: 
      var $11=$1;
      var $12=(($11+64)|0);
      var $13=HEAP16[(($12)>>1)];
      var $14=(($13)&65535);
      var $16 = $14;label = 5; break;
    case 5: 
      var $16;
      var $17=(($16) & 65535);
      var $18=$1;
      var $19=(($18+64)|0);
      HEAP16[(($19)>>1)]=$17;
      var $20=HEAP32[((((5259672)|0))>>2)];
      var $21=(($20)|0)==16909060;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$1;
      var $24=(($23+68)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=__cdf_tole4($25);
      var $32 = $26;label = 8; break;
    case 7: 
      var $28=$1;
      var $29=(($28+68)|0);
      var $30=HEAP32[(($29)>>2)];
      var $32 = $30;label = 8; break;
    case 8: 
      var $32;
      var $33=$1;
      var $34=(($33+68)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=HEAP32[((((5259672)|0))>>2)];
      var $36=(($35)|0)==16909060;
      if ($36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $38=$1;
      var $39=(($38+72)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=__cdf_tole4($40);
      var $47 = $41;label = 11; break;
    case 10: 
      var $43=$1;
      var $44=(($43+72)|0);
      var $45=HEAP32[(($44)>>2)];
      var $47 = $45;label = 11; break;
    case 11: 
      var $47;
      var $48=$1;
      var $49=(($48+72)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=HEAP32[((((5259672)|0))>>2)];
      var $51=(($50)|0)==16909060;
      if ($51) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $53=$1;
      var $54=(($53+76)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=__cdf_tole4($55);
      var $62 = $56;label = 14; break;
    case 13: 
      var $58=$1;
      var $59=(($58+76)|0);
      var $60=HEAP32[(($59)>>2)];
      var $62 = $60;label = 14; break;
    case 14: 
      var $62;
      var $63=$1;
      var $64=(($63+76)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=HEAP32[((((5259672)|0))>>2)];
      var $66=(($65)|0)==16909060;
      if ($66) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $68=$1;
      var $69=(($68+80)|0);
      var $70=(($69)|0);
      var $st$3$0=(($70)|0);
      var $71$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($70+4)|0);
      var $71$1=HEAP32[(($st$3$1)>>2)];
      var $72$0=__cdf_tole8($71$0, $71$1);
      var $72$1=tempRet0;
      var $79$1 = $72$1;var $79$0 = $72$0;label = 17; break;
    case 16: 
      var $74=$1;
      var $75=(($74+80)|0);
      var $76=(($75)|0);
      var $st$3$0=(($76)|0);
      var $77$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($76+4)|0);
      var $77$1=HEAP32[(($st$3$1)>>2)];
      var $79$1 = $77$1;var $79$0 = $77$0;label = 17; break;
    case 17: 
      var $79$0;
      var $79$1;
      var $80=$1;
      var $81=(($80+80)|0);
      var $82=(($81)|0);
      var $st$5$0=(($82)|0);
      HEAP32[(($st$5$0)>>2)]=$79$0;
      var $st$5$1=(($82+4)|0);
      HEAP32[(($st$5$1)>>2)]=$79$1;
      var $83=HEAP32[((((5259672)|0))>>2)];
      var $84=(($83)|0)==16909060;
      if ($84) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $86=$1;
      var $87=(($86+80)|0);
      var $88=(($87+8)|0);
      var $st$3$0=(($88)|0);
      var $89$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($88+4)|0);
      var $89$1=HEAP32[(($st$3$1)>>2)];
      var $90$0=__cdf_tole8($89$0, $89$1);
      var $90$1=tempRet0;
      var $97$1 = $90$1;var $97$0 = $90$0;label = 20; break;
    case 19: 
      var $92=$1;
      var $93=(($92+80)|0);
      var $94=(($93+8)|0);
      var $st$3$0=(($94)|0);
      var $95$0=HEAP32[(($st$3$0)>>2)];
      var $st$3$1=(($94+4)|0);
      var $95$1=HEAP32[(($st$3$1)>>2)];
      var $97$1 = $95$1;var $97$0 = $95$0;label = 20; break;
    case 20: 
      var $97$0;
      var $97$1;
      var $98=$1;
      var $99=(($98+80)|0);
      var $100=(($99+8)|0);
      var $st$5$0=(($100)|0);
      HEAP32[(($st$5$0)>>2)]=$97$0;
      var $st$5$1=(($100+4)|0);
      HEAP32[(($st$5$1)>>2)]=$97$1;
      var $101=HEAP32[((((5259672)|0))>>2)];
      var $102=(($101)|0)==16909060;
      if ($102) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $104=$1;
      var $105=(($104+96)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=__cdf_tole4($106);
      var $113 = $107;label = 23; break;
    case 22: 
      var $109=$1;
      var $110=(($109+96)|0);
      var $111=HEAP32[(($110)>>2)];
      var $113 = $111;label = 23; break;
    case 23: 
      var $113;
      var $114=$1;
      var $115=(($114+96)|0);
      HEAP32[(($115)>>2)]=$113;
      var $116=HEAP32[((((5259672)|0))>>2)];
      var $117=(($116)|0)==16909060;
      if ($117) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $119=$1;
      var $120=(($119+100)|0);
      var $st$2$0=(($120)|0);
      var $121$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($120+4)|0);
      var $121$1=HEAP32[(($st$2$1)>>2)];
      var $122$0=__cdf_tole8($121$0, $121$1);
      var $122$1=tempRet0;
      var $128$1 = $122$1;var $128$0 = $122$0;label = 26; break;
    case 25: 
      var $124=$1;
      var $125=(($124+100)|0);
      var $st$2$0=(($125)|0);
      var $126$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($125+4)|0);
      var $126$1=HEAP32[(($st$2$1)>>2)];
      var $128$1 = $126$1;var $128$0 = $126$0;label = 26; break;
    case 26: 
      var $128$0;
      var $128$1;
      var $129=$1;
      var $130=(($129+100)|0);
      var $st$4$0=(($130)|0);
      HEAP32[(($st$4$0)>>2)]=$128$0;
      var $st$4$1=(($130+4)|0);
      HEAP32[(($st$4$1)>>2)]=$128$1;
      var $131=HEAP32[((((5259672)|0))>>2)];
      var $132=(($131)|0)==16909060;
      if ($132) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $134=$1;
      var $135=(($134+108)|0);
      var $st$2$0=(($135)|0);
      var $136$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($135+4)|0);
      var $136$1=HEAP32[(($st$2$1)>>2)];
      var $137$0=__cdf_tole8($136$0, $136$1);
      var $137$1=tempRet0;
      var $143$1 = $137$1;var $143$0 = $137$0;label = 29; break;
    case 28: 
      var $139=$1;
      var $140=(($139+108)|0);
      var $st$2$0=(($140)|0);
      var $141$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($140+4)|0);
      var $141$1=HEAP32[(($st$2$1)>>2)];
      var $143$1 = $141$1;var $143$0 = $141$0;label = 29; break;
    case 29: 
      var $143$0;
      var $143$1;
      var $144=$1;
      var $145=(($144+108)|0);
      var $st$4$0=(($145)|0);
      HEAP32[(($st$4$0)>>2)]=$143$0;
      var $st$4$1=(($145+4)|0);
      HEAP32[(($st$4$1)>>2)]=$143$1;
      var $146=HEAP32[((((5259672)|0))>>2)];
      var $147=(($146)|0)==16909060;
      if ($147) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $149=$1;
      var $150=(($149+116)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=__cdf_tole4($151);
      var $158 = $152;label = 32; break;
    case 31: 
      var $154=$1;
      var $155=(($154+116)|0);
      var $156=HEAP32[(($155)>>2)];
      var $158 = $156;label = 32; break;
    case 32: 
      var $158;
      var $159=$1;
      var $160=(($159+116)|0);
      HEAP32[(($160)>>2)]=$158;
      var $161=HEAP32[((((5259672)|0))>>2)];
      var $162=(($161)|0)==16909060;
      if ($162) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $164=$1;
      var $165=(($164+120)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=__cdf_tole4($166);
      var $173 = $167;label = 35; break;
    case 34: 
      var $169=$1;
      var $170=(($169+120)|0);
      var $171=HEAP32[(($170)>>2)];
      var $173 = $171;label = 35; break;
    case 35: 
      var $173;
      var $174=$1;
      var $175=(($174+120)|0);
      HEAP32[(($175)>>2)]=$173;

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_swap_dir["X"]=1;

function _cdf_swap_class($d) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$d;
      var $2=HEAP32[((((5259672)|0))>>2)];
      var $3=(($2)|0)==16909060;
      if ($3) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=__cdf_tole4($7);
      var $14 = $8;label = 5; break;
    case 4: 
      var $10=$1;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $14 = $12;label = 5; break;
    case 5: 
      var $14;
      var $15=$1;
      var $16=(($15)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=HEAP32[((((5259672)|0))>>2)];
      var $18=(($17)|0)==16909060;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=(($21)|0);
      var $23=HEAP16[(($22)>>1)];
      var $24=__cdf_tole2($23);
      var $25=(($24)&65535);
      var $33 = $25;label = 8; break;
    case 7: 
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=(($28)|0);
      var $30=HEAP16[(($29)>>1)];
      var $31=(($30)&65535);
      var $33 = $31;label = 8; break;
    case 8: 
      var $33;
      var $34=(($33) & 65535);
      var $35=$1;
      var $36=(($35+4)|0);
      var $37=(($36)|0);
      HEAP16[(($37)>>1)]=$34;
      var $38=HEAP32[((((5259672)|0))>>2)];
      var $39=(($38)|0)==16909060;
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $41=$1;
      var $42=(($41+4)|0);
      var $43=(($42+2)|0);
      var $44=HEAP16[(($43)>>1)];
      var $45=__cdf_tole2($44);
      var $46=(($45)&65535);
      var $54 = $46;label = 11; break;
    case 10: 
      var $48=$1;
      var $49=(($48+4)|0);
      var $50=(($49+2)|0);
      var $51=HEAP16[(($50)>>1)];
      var $52=(($51)&65535);
      var $54 = $52;label = 11; break;
    case 11: 
      var $54;
      var $55=(($54) & 65535);
      var $56=$1;
      var $57=(($56+4)|0);
      var $58=(($57+2)|0);
      HEAP16[(($58)>>1)]=$55;

      return;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_swap_class["X"]=1;

function _cdf_unpack_dir($d, $buf) {
  var label = 0;


  var $1;
  var $2;
  var $len;
  $1=$d;
  $2=$buf;
  $len=0;
  var $3=$1;
  var $4=(($3)|0);
  var $5=$4;
  var $6=$len;
  var $7=$2;
  var $8=(($7+$6)|0);
  assert(64 % 1 === 0);_memcpy($5, $8, 64);
  var $9=$len;
  var $10=((($9)+(64))|0);
  $len=$10;
  var $11=$1;
  var $12=(($11+64)|0);
  var $13=$12;
  var $14=$len;
  var $15=$2;
  var $16=(($15+$14)|0);
  assert(2 % 1 === 0);HEAP8[($13)]=HEAP8[($16)];HEAP8[(($13)+(1))]=HEAP8[(($16)+(1))];
  var $17=$len;
  var $18=((($17)+(2))|0);
  $len=$18;
  var $19=$1;
  var $20=(($19+66)|0);
  var $21=$len;
  var $22=$2;
  var $23=(($22+$21)|0);
  assert(1 % 1 === 0);HEAP8[($20)]=HEAP8[($23)];
  var $24=$len;
  var $25=((($24)+(1))|0);
  $len=$25;
  var $26=$1;
  var $27=(($26+67)|0);
  var $28=$len;
  var $29=$2;
  var $30=(($29+$28)|0);
  assert(1 % 1 === 0);HEAP8[($27)]=HEAP8[($30)];
  var $31=$len;
  var $32=((($31)+(1))|0);
  $len=$32;
  var $33=$1;
  var $34=(($33+68)|0);
  var $35=$34;
  var $36=$len;
  var $37=$2;
  var $38=(($37+$36)|0);
  assert(4 % 1 === 0);HEAP8[($35)]=HEAP8[($38)];HEAP8[(($35)+(1))]=HEAP8[(($38)+(1))];HEAP8[(($35)+(2))]=HEAP8[(($38)+(2))];HEAP8[(($35)+(3))]=HEAP8[(($38)+(3))];
  var $39=$len;
  var $40=((($39)+(4))|0);
  $len=$40;
  var $41=$1;
  var $42=(($41+72)|0);
  var $43=$42;
  var $44=$len;
  var $45=$2;
  var $46=(($45+$44)|0);
  assert(4 % 1 === 0);HEAP8[($43)]=HEAP8[($46)];HEAP8[(($43)+(1))]=HEAP8[(($46)+(1))];HEAP8[(($43)+(2))]=HEAP8[(($46)+(2))];HEAP8[(($43)+(3))]=HEAP8[(($46)+(3))];
  var $47=$len;
  var $48=((($47)+(4))|0);
  $len=$48;
  var $49=$1;
  var $50=(($49+76)|0);
  var $51=$50;
  var $52=$len;
  var $53=$2;
  var $54=(($53+$52)|0);
  assert(4 % 1 === 0);HEAP8[($51)]=HEAP8[($54)];HEAP8[(($51)+(1))]=HEAP8[(($54)+(1))];HEAP8[(($51)+(2))]=HEAP8[(($54)+(2))];HEAP8[(($51)+(3))]=HEAP8[(($54)+(3))];
  var $55=$len;
  var $56=((($55)+(4))|0);
  $len=$56;
  var $57=$1;
  var $58=(($57+80)|0);
  var $59=$58;
  var $60=$len;
  var $61=$2;
  var $62=(($61+$60)|0);
  assert(16 % 1 === 0);for (var $$src = $62, $$dest = $59, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src]
  };
  var $63=$len;
  var $64=((($63)+(16))|0);
  $len=$64;
  var $65=$1;
  var $66=(($65+96)|0);
  var $67=$66;
  var $68=$len;
  var $69=$2;
  var $70=(($69+$68)|0);
  assert(4 % 1 === 0);HEAP8[($67)]=HEAP8[($70)];HEAP8[(($67)+(1))]=HEAP8[(($70)+(1))];HEAP8[(($67)+(2))]=HEAP8[(($70)+(2))];HEAP8[(($67)+(3))]=HEAP8[(($70)+(3))];
  var $71=$len;
  var $72=((($71)+(4))|0);
  $len=$72;
  var $73=$1;
  var $74=(($73+100)|0);
  var $75=$74;
  var $76=$len;
  var $77=$2;
  var $78=(($77+$76)|0);
  assert(8 % 1 === 0);HEAP8[($75)]=HEAP8[($78)];HEAP8[(($75)+(1))]=HEAP8[(($78)+(1))];HEAP8[(($75)+(2))]=HEAP8[(($78)+(2))];HEAP8[(($75)+(3))]=HEAP8[(($78)+(3))];HEAP8[(($75)+(4))]=HEAP8[(($78)+(4))];HEAP8[(($75)+(5))]=HEAP8[(($78)+(5))];HEAP8[(($75)+(6))]=HEAP8[(($78)+(6))];HEAP8[(($75)+(7))]=HEAP8[(($78)+(7))];
  var $79=$len;
  var $80=((($79)+(8))|0);
  $len=$80;
  var $81=$1;
  var $82=(($81+108)|0);
  var $83=$82;
  var $84=$len;
  var $85=$2;
  var $86=(($85+$84)|0);
  assert(8 % 1 === 0);HEAP8[($83)]=HEAP8[($86)];HEAP8[(($83)+(1))]=HEAP8[(($86)+(1))];HEAP8[(($83)+(2))]=HEAP8[(($86)+(2))];HEAP8[(($83)+(3))]=HEAP8[(($86)+(3))];HEAP8[(($83)+(4))]=HEAP8[(($86)+(4))];HEAP8[(($83)+(5))]=HEAP8[(($86)+(5))];HEAP8[(($83)+(6))]=HEAP8[(($86)+(6))];HEAP8[(($83)+(7))]=HEAP8[(($86)+(7))];
  var $87=$len;
  var $88=((($87)+(8))|0);
  $len=$88;
  var $89=$1;
  var $90=(($89+116)|0);
  var $91=$90;
  var $92=$len;
  var $93=$2;
  var $94=(($93+$92)|0);
  assert(4 % 1 === 0);HEAP8[($91)]=HEAP8[($94)];HEAP8[(($91)+(1))]=HEAP8[(($94)+(1))];HEAP8[(($91)+(2))]=HEAP8[(($94)+(2))];HEAP8[(($91)+(3))]=HEAP8[(($94)+(3))];
  var $95=$len;
  var $96=((($95)+(4))|0);
  $len=$96;
  var $97=$1;
  var $98=(($97+120)|0);
  var $99=$98;
  var $100=$len;
  var $101=$2;
  var $102=(($101+$100)|0);
  assert(4 % 1 === 0);HEAP8[($99)]=HEAP8[($102)];HEAP8[(($99)+(1))]=HEAP8[(($102)+(1))];HEAP8[(($99)+(2))]=HEAP8[(($102)+(2))];HEAP8[(($99)+(3))]=HEAP8[(($102)+(3))];
  var $103=$len;
  var $104=((($103)+(4))|0);
  $len=$104;
  var $105=$1;
  var $106=(($105+124)|0);
  var $107=$106;
  var $108=$len;
  var $109=$2;
  var $110=(($109+$108)|0);
  assert(4 % 1 === 0);HEAP8[($107)]=HEAP8[($110)];HEAP8[(($107)+(1))]=HEAP8[(($110)+(1))];HEAP8[(($107)+(2))]=HEAP8[(($110)+(2))];HEAP8[(($107)+(3))]=HEAP8[(($110)+(3))];
  var $111=$len;
  var $112=((($111)+(4))|0);
  $len=$112;

  return;
}
_cdf_unpack_dir["X"]=1;

function _cdf_read_header($info, $h) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 512)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $buf=__stackBase__;
      $2=$info;
      $3=$h;
      assert(4 % 1 === 0);HEAP8[(5259672)]=HEAP8[(((5266168)|0))];HEAP8[(5259673)]=HEAP8[((((5266168)|0))+(1))];HEAP8[(5259674)]=HEAP8[((((5266168)|0))+(2))];HEAP8[(5259675)]=HEAP8[((((5266168)|0))+(3))];
      var $4=$2;
      var $5=(($buf)|0);
      var $6=_cdf_read($4, 0, $5, 512);
      var $7=(($6)|0)==-1;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 12; break;
    case 4: 
      var $10=$3;
      var $11=(($buf)|0);
      _cdf_unpack_header($10, $11);
      var $12=$3;
      _cdf_swap_header($12);
      var $13=$3;
      var $14=(($13)|0);
      var $st$7$0=(($14)|0);
      var $15$0=HEAP32[(($st$7$0)>>2)];
      var $st$7$1=(($14+4)|0);
      var $15$1=HEAP32[(($st$7$1)>>2)];
      var $$etemp$0$0=-535703600;
      var $$etemp$0$1=-518344287;
      var $16=$15$0 != $$etemp$0$0 || $15$1 != $$etemp$0$1;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 11; break;
    case 6: 
      var $19=$3;
      var $20=(($19+30)|0);
      var $21=HEAP16[(($20)>>1)];
      var $22=(($21)&65535);
      var $23=(($22)|0) > 20;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $26=$3;
      var $27=(($26+32)|0);
      var $28=HEAP16[(($27)>>1)];
      var $29=(($28)&65535);
      var $30=(($29)|0) > 20;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      $1=0;
      label = 12; break;
    case 11: 
      var $34=___errno_location();
      HEAP32[(($34)>>2)]=79;
      $1=-1;
      label = 12; break;
    case 12: 
      var $36=$1;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_header["X"]=1;

function _cdf_read($info, $off, $buf, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $siz;
      $2=$info;
      $3=$off;
      $4=$buf;
      $5=$len;
      var $6=$3;
      var $7=$5;
      var $8=((($6)+($7))|0);
      $siz=$8;
      var $9=$3;
      var $10=$5;
      var $11=((($9)+($10))|0);
      var $12=$siz;
      var $13=(($11)|0)!=(($12)|0);
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=___errno_location();
      HEAP32[(($15)>>2)]=22;
      $1=-1;
      label = 14; break;
    case 4: 
      var $17=$2;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)!=0;
      if ($20) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$siz;
      var $26=(($24)>>>0) >= (($25)>>>0);
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$4;
      var $29=$3;
      var $30=$2;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29)|0);
      var $34=$5;
      assert($34 % 1 === 0);_memcpy($28, $33, $34);
      var $35=$5;
      $1=$35;
      label = 14; break;
    case 7: 
      var $37=$2;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0)==-1;
      if ($40) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 14; break;
    case 9: 
      var $43=$2;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$3;
      var $47=_lseek($45, $46, 0);
      var $48=(($47)|0)==-1;
      if ($48) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=-1;
      label = 14; break;
    case 11: 
      var $51=$2;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$4;
      var $55=$5;
      var $56=_read($53, $54, $55);
      var $57=$5;
      var $58=(($56)|0)!=(($57)|0);
      if ($58) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=-1;
      label = 14; break;
    case 13: 
      var $61=$5;
      $1=$61;
      label = 14; break;
    case 14: 
      var $63=$1;

      return $63;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read["X"]=1;

function _cdf_read_sector($info, $buf, $offs, $len, $h, $id) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $ss;
      var $pos;
      $1=$info;
      $2=$buf;
      $3=$offs;
      $4=$len;
      $5=$h;
      $6=$id;
      var $7=$5;
      var $8=(($7+30)|0);
      var $9=HEAP16[(($8)>>1)];
      var $10=(($9)&65535);
      var $11=1 << $10;
      $ss=$11;
      var $12=$5;
      var $13=(($12+30)|0);
      var $14=HEAP16[(($13)>>1)];
      var $15=(($14)&65535);
      var $16=1 << $15;
      var $17=$6;
      var $18=$5;
      var $19=(($18+30)|0);
      var $20=HEAP16[(($19)>>1)];
      var $21=(($20)&65535);
      var $22=1 << $21;
      var $23=((($17)*($22))|0);
      var $24=((($16)+($23))|0);
      $pos=$24;
      var $25=$ss;
      var $26=$4;
      var $27=(($25)|0)==(($26)|0);
      if ($27) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5271392)|0), 347, ((5274044)|0), ((5268532)|0));
      label = 5; break;
    case 5: 
      var $31=$1;
      var $32=$pos;
      var $33=$2;
      var $34=$3;
      var $35=(($33+$34)|0);
      var $36=$4;
      var $37=_cdf_read($31, $32, $35, $36);

      return $37;
    default: assert(0, "bad label: " + label);
  }
}


function _cdf_read_short_sector($sst, $buf, $offs, $len, $h, $id) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ss;
      var $pos;
      $2=$sst;
      $3=$buf;
      $4=$offs;
      $5=$len;
      $6=$h;
      $7=$id;
      var $8=$6;
      var $9=(($8+32)|0);
      var $10=HEAP16[(($9)>>1)];
      var $11=(($10)&65535);
      var $12=1 << $11;
      $ss=$12;
      var $13=$7;
      var $14=$6;
      var $15=(($14+32)|0);
      var $16=HEAP16[(($15)>>1)];
      var $17=(($16)&65535);
      var $18=1 << $17;
      var $19=((($13)*($18))|0);
      $pos=$19;
      var $20=$ss;
      var $21=$5;
      var $22=(($20)|0)==(($21)|0);
      if ($22) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5271392)|0), 357, ((5274020)|0), ((5268532)|0));
      label = 5; break;
    case 5: 
      var $26=$pos;
      var $27=$6;
      var $28=(($27+30)|0);
      var $29=HEAP16[(($28)>>1)];
      var $30=(($29)&65535);
      var $31=1 << $30;
      var $32=$2;
      var $33=(($32+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=((($31)*($34))|0);
      var $36=(($26)>>>0) > (($35)>>>0);
      if ($36) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 8; break;
    case 7: 
      var $39=$3;
      var $40=$4;
      var $41=(($39+$40)|0);
      var $42=$2;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$pos;
      var $46=(($44+$45)|0);
      var $47=$5;
      assert($47 % 1 === 0);_memcpy($41, $46, $47);
      var $48=$5;
      $1=$48;
      label = 8; break;
    case 8: 
      var $50=$1;

      return $50;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_short_sector["X"]=1;

function _cdf_read_sat($info, $h, $sat) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $j;
      var $k;
      var $ss;
      var $msa;
      var $mid;
      var $sec;
      var $nsatpersec;
      $2=$info;
      $3=$h;
      $4=$sat;
      var $5=$3;
      var $6=(($5+30)|0);
      var $7=HEAP16[(($6)>>1)];
      var $8=(($7)&65535);
      var $9=1 << $8;
      $ss=$9;
      var $10=$ss;
      var $11=Math.floor(((($10)>>>0))/(4));
      var $12=((($11)-(1))|0);
      $nsatpersec=$12;
      $i=0;
      label = 3; break;
    case 3: 
      var $14=$i;
      var $15=(($14)>>>0) < 109;
      if ($15) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $17=$i;
      var $18=$3;
      var $19=(($18+76)|0);
      var $20=(($19+($17<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|0)==-1;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$i;
      var $27=((($26)+(1))|0);
      $i=$27;
      label = 3; break;
    case 8: 
      var $29=$nsatpersec;
      var $30=(($29)>>>0) > 0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$3;
      var $33=(($32+72)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$ss;
      var $36=((($35<<2))|0);
      var $37=Math.floor((4294967295)/((($36)>>>0)));
      var $38=$nsatpersec;
      var $39=Math.floor(((($37)>>>0))/((($38)>>>0)));
      var $40=(($34)>>>0) > (($39)>>>0);
      if ($40) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $42=$i;
      var $43=$ss;
      var $44=((($43<<2))|0);
      var $45=Math.floor((4294967295)/((($44)>>>0)));
      var $46=(($42)>>>0) > (($45)>>>0);
      if ($46) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $48=___errno_location();
      HEAP32[(($48)>>2)]=79;
      $1=-1;
      label = 54; break;
    case 12: 
      var $50=$3;
      var $51=(($50+72)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$nsatpersec;
      var $54=((($52)*($53))|0);
      var $55=$i;
      var $56=((($54)+($55))|0);
      var $57=$4;
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$56;
      var $59=$4;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$ss;
      var $63=_calloc($61, $62);
      var $64=$63;
      var $65=$4;
      var $66=(($65)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=(($64)|0)==0;
      if ($67) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=-1;
      label = 54; break;
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $71=$i;
      var $72=(($71)>>>0) < 109;
      if ($72) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $74=$i;
      var $75=$3;
      var $76=(($75+76)|0);
      var $77=(($76+($74<<2))|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78)|0) < 0;
      if ($79) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 22; break;
    case 18: 
      var $82=$2;
      var $83=$4;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$85;
      var $87=$ss;
      var $88=$i;
      var $89=((($87)*($88))|0);
      var $90=$ss;
      var $91=$3;
      var $92=$i;
      var $93=$3;
      var $94=(($93+76)|0);
      var $95=(($94+($92<<2))|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=_cdf_read_sector($82, $86, $89, $90, $91, $96);
      var $98=$ss;
      var $99=(($97)|0)!=(($98)|0);
      if ($99) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 53; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $103=$i;
      var $104=((($103)+(1))|0);
      $i=$104;
      label = 15; break;
    case 22: 
      var $106=$ss;
      var $107=_calloc(1, $106);
      var $108=$107;
      $msa=$108;
      var $109=(($108)|0)==0;
      if ($109) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 53; break;
    case 24: 
      var $112=$3;
      var $113=(($112+68)|0);
      var $114=HEAP32[(($113)>>2)];
      $mid=$114;
      $j=0;
      label = 25; break;
    case 25: 
      var $116=$j;
      var $117=$3;
      var $118=(($117+72)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($116)>>>0) < (($119)>>>0);
      if ($120) { label = 26; break; } else { label = 50; break; }
    case 26: 
      var $122=$mid;
      var $123=(($122)|0) < 0;
      if ($123) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 51; break;
    case 28: 
      var $126=$j;
      var $127=(($126)>>>0) >= 10000;
      if ($127) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $129=___errno_location();
      HEAP32[(($129)>>2)]=79;
      label = 52; break;
    case 30: 
      var $131=$2;
      var $132=$msa;
      var $133=$132;
      var $134=$ss;
      var $135=$3;
      var $136=$mid;
      var $137=_cdf_read_sector($131, $133, 0, $134, $135, $136);
      var $138=$ss;
      var $139=(($137)|0)!=(($138)|0);
      if ($139) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 52; break;
    case 32: 
      $k=0;
      label = 33; break;
    case 33: 
      var $143=$k;
      var $144=$nsatpersec;
      var $145=(($143)>>>0) < (($144)>>>0);
      if ($145) { label = 34; break; } else { label = 45; break; }
    case 34: 
      var $147=HEAP32[((((5259672)|0))>>2)];
      var $148=(($147)|0)==16909060;
      if ($148) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $150=$k;
      var $151=$msa;
      var $152=(($151+($150<<2))|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=__cdf_tole4($153);
      var $161 = $154;label = 37; break;
    case 36: 
      var $156=$k;
      var $157=$msa;
      var $158=(($157+($156<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      var $161 = $159;label = 37; break;
    case 37: 
      var $161;
      $sec=$161;
      var $162=$sec;
      var $163=(($162)|0) < 0;
      if ($163) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 51; break;
    case 39: 
      var $166=$i;
      var $167=$4;
      var $168=(($167+4)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($166)>>>0) >= (($169)>>>0);
      if ($170) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $172=___errno_location();
      HEAP32[(($172)>>2)]=79;
      label = 52; break;
    case 41: 
      var $174=$2;
      var $175=$4;
      var $176=(($175)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=$ss;
      var $180=$i;
      var $181=((($179)*($180))|0);
      var $182=$ss;
      var $183=$3;
      var $184=$sec;
      var $185=_cdf_read_sector($174, $178, $181, $182, $183, $184);
      var $186=$ss;
      var $187=(($185)|0)!=(($186)|0);
      if ($187) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 52; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $191=$k;
      var $192=((($191)+(1))|0);
      $k=$192;
      var $193=$i;
      var $194=((($193)+(1))|0);
      $i=$194;
      label = 33; break;
    case 45: 
      var $196=HEAP32[((((5259672)|0))>>2)];
      var $197=(($196)|0)==16909060;
      if ($197) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $199=$nsatpersec;
      var $200=$msa;
      var $201=(($200+($199<<2))|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=__cdf_tole4($202);
      var $210 = $203;label = 48; break;
    case 47: 
      var $205=$nsatpersec;
      var $206=$msa;
      var $207=(($206+($205<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $210 = $208;label = 48; break;
    case 48: 
      var $210;
      $mid=$210;
      label = 49; break;
    case 49: 
      var $212=$j;
      var $213=((($212)+(1))|0);
      $j=$213;
      label = 25; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $216=$i;
      var $217=$4;
      var $218=(($217+4)|0);
      HEAP32[(($218)>>2)]=$216;
      var $219=$msa;
      var $220=$219;
      _free($220);
      $1=0;
      label = 54; break;
    case 52: 
      var $222=$msa;
      var $223=$222;
      _free($223);
      label = 53; break;
    case 53: 
      var $225=$4;
      var $226=(($225)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$227;
      _free($228);
      $1=-1;
      label = 54; break;
    case 54: 
      var $230=$1;

      return $230;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_sat["X"]=1;

function _cdf_count_chain($sat, $sid, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $j;
      var $maxsector;
      $2=$sat;
      $3=$sid;
      $4=$size;
      var $5=$2;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$4;
      var $9=((($7)*($8))|0);
      $maxsector=$9;
      $i=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $11=$3;
      var $12=(($11)|0) >= 0;
      if ($12) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $14=$j;
      var $15=(($14)>>>0) >= 10000;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=___errno_location();
      HEAP32[(($17)>>2)]=79;
      $1=-1;
      label = 14; break;
    case 6: 
      var $19=$3;
      var $20=$maxsector;
      var $21=(($19)|0) > (($20)|0);
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $23=___errno_location();
      HEAP32[(($23)>>2)]=79;
      $1=-1;
      label = 14; break;
    case 8: 
      var $25=HEAP32[((((5259672)|0))>>2)];
      var $26=(($25)|0)==16909060;
      if ($26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$3;
      var $29=$2;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($28<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=__cdf_tole4($33);
      var $43 = $34;label = 11; break;
    case 10: 
      var $36=$3;
      var $37=$2;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($36<<2))|0);
      var $41=HEAP32[(($40)>>2)];
      var $43 = $41;label = 11; break;
    case 11: 
      var $43;
      $3=$43;
      label = 12; break;
    case 12: 
      var $45=$i;
      var $46=((($45)+(1))|0);
      $i=$46;
      var $47=$j;
      var $48=((($47)+(1))|0);
      $j=$48;
      label = 3; break;
    case 13: 
      var $50=$i;
      $1=$50;
      label = 14; break;
    case 14: 
      var $52=$1;

      return $52;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_count_chain["X"]=1;

function _cdf_read_long_sector_chain($info, $h, $sat, $sid, $len, $scn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ss;
      var $i;
      var $j;
      var $nr;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$sid;
      $6=$len;
      $7=$scn;
      var $8=$3;
      var $9=(($8+30)|0);
      var $10=HEAP16[(($9)>>1)];
      var $11=(($10)&65535);
      var $12=1 << $11;
      $ss=$12;
      var $13=$4;
      var $14=$5;
      var $15=$ss;
      var $16=_cdf_count_chain($13, $14, $15);
      var $17=$7;
      var $18=(($17+4)|0);
      HEAP32[(($18)>>2)]=$16;
      var $19=$6;
      var $20=$7;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=$19;
      var $22=$7;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)==-1;
      if ($25) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 24; break;
    case 4: 
      var $28=$7;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$ss;
      var $32=_calloc($30, $31);
      var $33=$7;
      var $34=(($33)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$7;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)==0;
      if ($38) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 24; break;
    case 6: 
      $i=0;
      $j=0;
      label = 7; break;
    case 7: 
      var $42=$5;
      var $43=(($42)|0) >= 0;
      if ($43) { label = 8; break; } else { label = 22; break; }
    case 8: 
      var $45=$j;
      var $46=(($45)>>>0) >= 10000;
      if ($46) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $48=___errno_location();
      HEAP32[(($48)>>2)]=79;
      label = 23; break;
    case 10: 
      var $50=$i;
      var $51=$7;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($50)>>>0) >= (($53)>>>0);
      if ($54) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $56=___errno_location();
      HEAP32[(($56)>>2)]=79;
      label = 23; break;
    case 12: 
      var $58=$2;
      var $59=$7;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$i;
      var $63=$ss;
      var $64=((($62)*($63))|0);
      var $65=$ss;
      var $66=$3;
      var $67=$5;
      var $68=_cdf_read_sector($58, $61, $64, $65, $66, $67);
      $nr=$68;
      var $69=$ss;
      var $70=(($68)|0)!=(($69)|0);
      if ($70) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $72=$i;
      var $73=$7;
      var $74=(($73+4)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)-(1))|0);
      var $77=(($72)|0)==(($76)|0);
      if ($77) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $79=$nr;
      var $80=(($79)|0) > 0;
      if ($80) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $1=0;
      label = 24; break;
    case 16: 
      label = 23; break;
    case 17: 
      var $84=HEAP32[((((5259672)|0))>>2)];
      var $85=(($84)|0)==16909060;
      if ($85) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $87=$5;
      var $88=$4;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+($87<<2))|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=__cdf_tole4($92);
      var $102 = $93;label = 20; break;
    case 19: 
      var $95=$5;
      var $96=$4;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+($95<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $102 = $100;label = 20; break;
    case 20: 
      var $102;
      $5=$102;
      label = 21; break;
    case 21: 
      var $104=$i;
      var $105=((($104)+(1))|0);
      $i=$105;
      var $106=$j;
      var $107=((($106)+(1))|0);
      $j=$107;
      label = 7; break;
    case 22: 
      $1=0;
      label = 24; break;
    case 23: 
      var $110=$7;
      var $111=(($110)|0);
      var $112=HEAP32[(($111)>>2)];
      _free($112);
      $1=-1;
      label = 24; break;
    case 24: 
      var $114=$1;

      return $114;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_long_sector_chain["X"]=1;

function _cdf_read_short_sector_chain($h, $ssat, $sst, $sid, $len, $scn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ss;
      var $i;
      var $j;
      $2=$h;
      $3=$ssat;
      $4=$sst;
      $5=$sid;
      $6=$len;
      $7=$scn;
      var $8=$2;
      var $9=(($8+32)|0);
      var $10=HEAP16[(($9)>>1)];
      var $11=(($10)&65535);
      var $12=1 << $11;
      $ss=$12;
      var $13=$3;
      var $14=$5;
      var $15=$2;
      var $16=(($15+30)|0);
      var $17=HEAP16[(($16)>>1)];
      var $18=(($17)&65535);
      var $19=1 << $18;
      var $20=_cdf_count_chain($13, $14, $19);
      var $21=$7;
      var $22=(($21+4)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=$6;
      var $24=$7;
      var $25=(($24+8)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$4;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==0;
      if ($29) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $31=$7;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)==-1;
      if ($34) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 22; break;
    case 5: 
      var $37=$7;
      var $38=(($37+4)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$ss;
      var $41=_calloc($39, $40);
      var $42=$7;
      var $43=(($42)|0);
      HEAP32[(($43)>>2)]=$41;
      var $44=$7;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0)==0;
      if ($47) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 22; break;
    case 7: 
      $i=0;
      $j=0;
      label = 8; break;
    case 8: 
      var $51=$5;
      var $52=(($51)|0) >= 0;
      if ($52) { label = 9; break; } else { label = 20; break; }
    case 9: 
      var $54=$j;
      var $55=(($54)>>>0) >= 10000;
      if ($55) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $57=___errno_location();
      HEAP32[(($57)>>2)]=79;
      label = 21; break;
    case 11: 
      var $59=$i;
      var $60=$7;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($59)>>>0) >= (($62)>>>0);
      if ($63) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $65=___errno_location();
      HEAP32[(($65)>>2)]=79;
      label = 21; break;
    case 13: 
      var $67=$4;
      var $68=$7;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$i;
      var $72=$ss;
      var $73=((($71)*($72))|0);
      var $74=$ss;
      var $75=$2;
      var $76=$5;
      var $77=_cdf_read_short_sector($67, $70, $73, $74, $75, $76);
      var $78=$ss;
      var $79=(($77)|0)!=(($78)|0);
      if ($79) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 21; break;
    case 15: 
      var $82=HEAP32[((((5259672)|0))>>2)];
      var $83=(($82)|0)==16909060;
      if ($83) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $85=$5;
      var $86=$3;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+($85<<2))|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=__cdf_tole4($90);
      var $100 = $91;label = 18; break;
    case 17: 
      var $93=$5;
      var $94=$3;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+($93<<2))|0);
      var $98=HEAP32[(($97)>>2)];
      var $100 = $98;label = 18; break;
    case 18: 
      var $100;
      $5=$100;
      label = 19; break;
    case 19: 
      var $102=$i;
      var $103=((($102)+(1))|0);
      $i=$103;
      var $104=$j;
      var $105=((($104)+(1))|0);
      $j=$105;
      label = 8; break;
    case 20: 
      $1=0;
      label = 22; break;
    case 21: 
      var $108=$7;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      _free($110);
      $1=-1;
      label = 22; break;
    case 22: 
      var $112=$1;

      return $112;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_short_sector_chain["X"]=1;

function _cdf_read_sector_chain($info, $h, $sat, $ssat, $sst, $sid, $len, $scn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$ssat;
      $6=$sst;
      $7=$sid;
      $8=$len;
      $9=$scn;
      var $10=$8;
      var $11=$3;
      var $12=(($11+56)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10)>>>0) < (($13)>>>0);
      if ($14) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $16=$6;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$3;
      var $22=$5;
      var $23=$6;
      var $24=$7;
      var $25=$8;
      var $26=$9;
      var $27=_cdf_read_short_sector_chain($21, $22, $23, $24, $25, $26);
      $1=$27;
      label = 6; break;
    case 5: 
      var $29=$2;
      var $30=$3;
      var $31=$4;
      var $32=$7;
      var $33=$8;
      var $34=$9;
      var $35=_cdf_read_long_sector_chain($29, $30, $31, $32, $33, $34);
      $1=$35;
      label = 6; break;
    case 6: 
      var $37=$1;

      return $37;
    default: assert(0, "bad label: " + label);
  }
}


function _cdf_read_dir($info, $h, $sat, $dir) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $j;
      var $ss;
      var $ns;
      var $nd;
      var $buf;
      var $sid;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$dir;
      var $6=$3;
      var $7=(($6+30)|0);
      var $8=HEAP16[(($7)>>1)];
      var $9=(($8)&65535);
      var $10=1 << $9;
      $ss=$10;
      var $11=$3;
      var $12=(($11+48)|0);
      var $13=HEAP32[(($12)>>2)];
      $sid=$13;
      var $14=$4;
      var $15=$sid;
      var $16=$ss;
      var $17=_cdf_count_chain($14, $15, $16);
      $ns=$17;
      var $18=$ns;
      var $19=(($18)|0)==-1;
      if ($19) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 31; break;
    case 4: 
      var $22=$ss;
      var $23=Math.floor(((($22)>>>0))/(128));
      $nd=$23;
      var $24=$ns;
      var $25=$nd;
      var $26=((($24)*($25))|0);
      var $27=$5;
      var $28=(($27+4)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$5;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=_calloc($31, 128);
      var $33=$32;
      var $34=$5;
      var $35=(($34)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$5;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|0)==0;
      if ($39) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 31; break;
    case 6: 
      var $42=$ss;
      var $43=_malloc($42);
      $buf=$43;
      var $44=(($43)|0)==0;
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$5;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      _free($49);
      $1=-1;
      label = 31; break;
    case 8: 
      $i=0;
      $j=0;
      label = 9; break;
    case 9: 
      var $52=$i;
      var $53=$ns;
      var $54=(($52)>>>0) < (($53)>>>0);
      if ($54) { label = 10; break; } else { label = 23; break; }
    case 10: 
      var $56=$j;
      var $57=(($56)>>>0) >= 10000;
      if ($57) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $59=___errno_location();
      HEAP32[(($59)>>2)]=79;
      label = 30; break;
    case 12: 
      var $61=$2;
      var $62=$buf;
      var $63=$ss;
      var $64=$3;
      var $65=$sid;
      var $66=_cdf_read_sector($61, $62, 0, $63, $64, $65);
      var $67=$ss;
      var $68=(($66)|0)!=(($67)|0);
      if ($68) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 30; break;
    case 14: 
      $j=0;
      label = 15; break;
    case 15: 
      var $72=$j;
      var $73=$nd;
      var $74=(($72)>>>0) < (($73)>>>0);
      if ($74) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $76=$i;
      var $77=$nd;
      var $78=((($76)*($77))|0);
      var $79=$j;
      var $80=((($78)+($79))|0);
      var $81=$5;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($80<<7))|0);
      var $85=$j;
      var $86=((($85<<7))|0);
      var $87=$buf;
      var $88=(($87+$86)|0);
      _cdf_unpack_dir($84, $88);
      label = 17; break;
    case 17: 
      var $90=$j;
      var $91=((($90)+(1))|0);
      $j=$91;
      label = 15; break;
    case 18: 
      var $93=HEAP32[((((5259672)|0))>>2)];
      var $94=(($93)|0)==16909060;
      if ($94) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $96=$sid;
      var $97=$4;
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+($96<<2))|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=__cdf_tole4($101);
      var $111 = $102;label = 21; break;
    case 20: 
      var $104=$sid;
      var $105=$4;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+($104<<2))|0);
      var $109=HEAP32[(($108)>>2)];
      var $111 = $109;label = 21; break;
    case 21: 
      var $111;
      $sid=$111;
      label = 22; break;
    case 22: 
      var $113=$i;
      var $114=((($113)+(1))|0);
      $i=$114;
      var $115=$j;
      var $116=((($115)+(1))|0);
      $j=$116;
      label = 9; break;
    case 23: 
      var $118=HEAP32[((((5259672)|0))>>2)];
      var $119=(($118)|0)==16909060;
      if ($119) { label = 24; break; } else { label = 29; break; }
    case 24: 
      $i=0;
      label = 25; break;
    case 25: 
      var $122=$i;
      var $123=$5;
      var $124=(($123+4)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($122)>>>0) < (($125)>>>0);
      if ($126) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $128=$i;
      var $129=$5;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+($128<<7))|0);
      _cdf_swap_dir($132);
      label = 27; break;
    case 27: 
      var $134=$i;
      var $135=((($134)+(1))|0);
      $i=$135;
      label = 25; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $138=$buf;
      _free($138);
      $1=0;
      label = 31; break;
    case 30: 
      var $140=$5;
      var $141=(($140)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$142;
      _free($143);
      var $144=$buf;
      _free($144);
      $1=-1;
      label = 31; break;
    case 31: 
      var $146=$1;

      return $146;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_dir["X"]=1;

function _cdf_read_ssat($info, $h, $sat, $ssat) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $j;
      var $ss;
      var $sid;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$ssat;
      var $6=$3;
      var $7=(($6+30)|0);
      var $8=HEAP16[(($7)>>1)];
      var $9=(($8)&65535);
      var $10=1 << $9;
      $ss=$10;
      var $11=$3;
      var $12=(($11+60)|0);
      var $13=HEAP32[(($12)>>2)];
      $sid=$13;
      var $14=$4;
      var $15=$sid;
      var $16=$3;
      var $17=(($16+30)|0);
      var $18=HEAP16[(($17)>>1)];
      var $19=(($18)&65535);
      var $20=1 << $19;
      var $21=_cdf_count_chain($14, $15, $20);
      var $22=$5;
      var $23=(($22+4)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=$5;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)==-1;
      if ($27) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 21; break;
    case 4: 
      var $30=$5;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$ss;
      var $34=_calloc($32, $33);
      var $35=$34;
      var $36=$5;
      var $37=(($36)|0);
      HEAP32[(($37)>>2)]=$35;
      var $38=$5;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)==0;
      if ($41) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 21; break;
    case 6: 
      $i=0;
      $j=0;
      label = 7; break;
    case 7: 
      var $45=$sid;
      var $46=(($45)|0) >= 0;
      if ($46) { label = 8; break; } else { label = 19; break; }
    case 8: 
      var $48=$j;
      var $49=(($48)>>>0) >= 10000;
      if ($49) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $51=___errno_location();
      HEAP32[(($51)>>2)]=79;
      label = 20; break;
    case 10: 
      var $53=$i;
      var $54=$5;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($53)>>>0) >= (($56)>>>0);
      if ($57) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $59=___errno_location();
      HEAP32[(($59)>>2)]=79;
      label = 20; break;
    case 12: 
      var $61=$2;
      var $62=$5;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      var $66=$i;
      var $67=$ss;
      var $68=((($66)*($67))|0);
      var $69=$ss;
      var $70=$3;
      var $71=$sid;
      var $72=_cdf_read_sector($61, $65, $68, $69, $70, $71);
      var $73=$ss;
      var $74=(($72)|0)!=(($73)|0);
      if ($74) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 20; break;
    case 14: 
      var $77=HEAP32[((((5259672)|0))>>2)];
      var $78=(($77)|0)==16909060;
      if ($78) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $80=$sid;
      var $81=$4;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($80<<2))|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=__cdf_tole4($85);
      var $95 = $86;label = 17; break;
    case 16: 
      var $88=$sid;
      var $89=$4;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+($88<<2))|0);
      var $93=HEAP32[(($92)>>2)];
      var $95 = $93;label = 17; break;
    case 17: 
      var $95;
      $sid=$95;
      label = 18; break;
    case 18: 
      var $97=$i;
      var $98=((($97)+(1))|0);
      $i=$98;
      var $99=$j;
      var $100=((($99)+(1))|0);
      $j=$100;
      label = 7; break;
    case 19: 
      $1=0;
      label = 21; break;
    case 20: 
      var $103=$5;
      var $104=(($103)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105;
      _free($106);
      $1=-1;
      label = 21; break;
    case 21: 
      var $108=$1;

      return $108;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_ssat["X"]=1;

function _cdf_read_short_stream($info, $h, $sat, $dir, $scn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $i;
      var $d;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$dir;
      $6=$scn;
      $i=0;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$5;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($8)>>>0) < (($11)>>>0);
      if ($12) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $14=$i;
      var $15=$5;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14<<7))|0);
      var $19=(($18+66)|0);
      var $20=HEAP8[($19)];
      var $21=(($20)&255);
      var $22=(($21)|0)==5;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$i;
      var $27=((($26)+(1))|0);
      $i=$27;
      label = 3; break;
    case 8: 
      var $29=$i;
      var $30=$5;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)|0)==(($32)|0);
      if ($33) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 13; break;
    case 10: 
      var $36=$i;
      var $37=$5;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($36<<7))|0);
      $d=$40;
      var $41=$d;
      var $42=(($41+116)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0) < 0;
      if ($44) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 13; break;
    case 12: 
      var $47=$2;
      var $48=$3;
      var $49=$4;
      var $50=$d;
      var $51=(($50+116)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$d;
      var $54=(($53+120)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$6;
      var $57=_cdf_read_long_sector_chain($47, $48, $49, $52, $55, $56);
      $1=$57;
      label = 14; break;
    case 13: 
      var $59=$6;
      var $60=(($59)|0);
      HEAP32[(($60)>>2)]=0;
      var $61=$6;
      var $62=(($61+4)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$6;
      var $64=(($63+8)|0);
      HEAP32[(($64)>>2)]=0;
      $1=0;
      label = 14; break;
    case 14: 
      var $66=$1;

      return $66;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_short_stream["X"]=1;

function _cdf_read_summary_info($info, $h, $sat, $ssat, $sst, $dir, $scn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $d;
      $2=$info;
      $3=$h;
      $4=$sat;
      $5=$ssat;
      $6=$sst;
      $7=$dir;
      $8=$scn;
      var $9=$7;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      $i=$11;
      label = 3; break;
    case 3: 
      var $13=$i;
      var $14=(($13)>>>0) > 0;
      if ($14) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $16=$i;
      var $17=((($16)-(1))|0);
      var $18=$7;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17<<7))|0);
      var $22=(($21+66)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&255);
      var $25=(($24)|0)==2;
      if ($25) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $27=$i;
      var $28=((($27)-(1))|0);
      var $29=$7;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+($28<<7))|0);
      var $33=(($32)|0);
      var $34=(($33)|0);
      var $35=_cdf_namecmp(((5259652)|0), $34, 20);
      var $36=(($35)|0)==0;
      if ($36) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $40=$i;
      var $41=((($40)-(1))|0);
      $i=$41;
      label = 3; break;
    case 9: 
      var $43=$i;
      var $44=(($43)|0)==0;
      if ($44) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $46=___errno_location();
      HEAP32[(($46)>>2)]=3;
      $1=-1;
      label = 12; break;
    case 11: 
      var $48=$i;
      var $49=((($48)-(1))|0);
      var $50=$7;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($49<<7))|0);
      $d=$53;
      var $54=$2;
      var $55=$3;
      var $56=$4;
      var $57=$5;
      var $58=$6;
      var $59=$d;
      var $60=(($59+116)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$d;
      var $63=(($62+120)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$8;
      var $66=_cdf_read_sector_chain($54, $55, $56, $57, $58, $61, $64, $65);
      $1=$66;
      label = 12; break;
    case 12: 
      var $68=$1;

      return $68;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_summary_info["X"]=1;

function _cdf_namecmp($d, $s, $l) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$d;
      $3=$s;
      $4=$l;
      label = 3; break;
    case 3: 
      var $6=$4;
      var $7=((($6)-(1))|0);
      $4=$7;
      var $8=(($6)|0)!=0;
      if ($8) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $10=$2;
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      var $13=HEAP32[((((5259672)|0))>>2)];
      var $14=(($13)|0)==16909060;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$3;
      var $17=HEAP16[(($16)>>1)];
      var $18=__cdf_tole2($17);
      var $19=(($18)&65535);
      var $25 = $19;label = 7; break;
    case 6: 
      var $21=$3;
      var $22=HEAP16[(($21)>>1)];
      var $23=(($22)&65535);
      var $25 = $23;label = 7; break;
    case 7: 
      var $25;
      var $26=(($25) & 65535);
      var $27=(($26)&65535);
      var $28=(($12)|0)!=(($27)|0);
      if ($28) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $30=$2;
      var $31=HEAP8[($30)];
      var $32=(($31)&255);
      var $33=HEAP32[((((5259672)|0))>>2)];
      var $34=(($33)|0)==16909060;
      if ($34) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $36=$3;
      var $37=HEAP16[(($36)>>1)];
      var $38=__cdf_tole2($37);
      var $39=(($38)&65535);
      var $45 = $39;label = 11; break;
    case 10: 
      var $41=$3;
      var $42=HEAP16[(($41)>>1)];
      var $43=(($42)&65535);
      var $45 = $43;label = 11; break;
    case 11: 
      var $45;
      var $46=(($45) & 65535);
      var $47=(($46)&65535);
      var $48=((($32)-($47))|0);
      $1=$48;
      label = 15; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $51=$2;
      var $52=(($51+1)|0);
      $2=$52;
      var $53=$3;
      var $54=(($53+2)|0);
      $3=$54;
      label = 3; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $57=$1;

      return $57;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_namecmp["X"]=1;

function _cdf_read_property_info($sst, $h, $offs, $info, $count, $maxcount) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $shp;
      var $sh=__stackBase__;
      var $p;
      var $q;
      var $e;
      var $s16=(__stackBase__)+(8);
      var $s32=(__stackBase__)+(12);
      var $u32=(__stackBase__)+(16);
      var $s64=(__stackBase__)+(20);
      var $u64=(__stackBase__)+(28);
      var $tp=(__stackBase__)+(36);
      var $i;
      var $o;
      var $o4;
      var $nelements;
      var $j;
      var $inp;
      var $ofs;
      var $nelem;
      var $l;
      $2=$sst;
      $3=$h;
      $4=$offs;
      $5=$info;
      $6=$count;
      $7=$maxcount;
      var $8=$4;
      var $9=(($8)>>>0) > 1073741823;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=___errno_location();
      HEAP32[(($11)>>2)]=79;
      label = 108; break;
    case 4: 
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$4;
      var $17=(($15+$16)|0);
      var $18=$17;
      $shp=$18;
      var $19=$2;
      var $20=$3;
      var $21=$shp;
      var $22=$21;
      var $23=_cdf_check_stream_offset($19, $20, $22, 8, 764);
      var $24=(($23)|0)==-1;
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 108; break;
    case 6: 
      var $27=HEAP32[((((5259672)|0))>>2)];
      var $28=(($27)|0)==16909060;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $30=$shp;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=__cdf_tole4($32);
      var $39 = $33;label = 9; break;
    case 8: 
      var $35=$shp;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $39 = $37;label = 9; break;
    case 9: 
      var $39;
      var $40=(($sh)|0);
      HEAP32[(($40)>>2)]=$39;
      var $41=(($sh)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)>>>0) > 536870911;
      if ($43) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $45=___errno_location();
      HEAP32[(($45)>>2)]=79;
      label = 108; break;
    case 11: 
      var $47=HEAP32[((((5259672)|0))>>2)];
      var $48=(($47)|0)==16909060;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $50=$shp;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=__cdf_tole4($52);
      var $59 = $53;label = 14; break;
    case 13: 
      var $55=$shp;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $59 = $57;label = 14; break;
    case 14: 
      var $59;
      var $60=(($sh+4)|0);
      HEAP32[(($60)>>2)]=$59;
      var $61=(($sh+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)>>>0) > 67108863;
      if ($63) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 108; break;
    case 16: 
      var $66=$7;
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0)!=0;
      if ($68) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $70=$7;
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)>>>0) > 67108863;
      if ($72) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 108; break;
    case 19: 
      var $75=(($sh+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$7;
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)+($76))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=$5;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      var $83=$7;
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84<<4))|0);
      var $86=_realloc($82, $85);
      var $87=$86;
      $inp=$87;
      label = 21; break;
    case 20: 
      var $89=(($sh+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$7;
      HEAP32[(($91)>>2)]=$90;
      var $92=$7;
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93<<4))|0);
      var $95=_malloc($94);
      var $96=$95;
      $inp=$96;
      label = 21; break;
    case 21: 
      var $98=$inp;
      var $99=(($98)|0)==0;
      if ($99) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 108; break;
    case 23: 
      var $102=$inp;
      var $103=$5;
      HEAP32[(($103)>>2)]=$102;
      var $104=$6;
      var $105=HEAP32[(($104)>>2)];
      var $106=$inp;
      var $107=(($106+($105<<4))|0);
      $inp=$107;
      var $108=(($sh+4)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$6;
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)+($109))|0);
      HEAP32[(($110)>>2)]=$112;
      var $113=$2;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$4;
      var $117=(($115+$116)|0);
      var $118=(($117+8)|0);
      $p=$118;
      var $119=$shp;
      var $120=$119;
      var $121=(($sh)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($120+$122)|0);
      $e=$123;
      var $124=$2;
      var $125=$3;
      var $126=$e;
      var $127=_cdf_check_stream_offset($124, $125, $126, 0, 799);
      var $128=(($127)|0)==-1;
      if ($128) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 108; break;
    case 25: 
      $i=0;
      label = 26; break;
    case 26: 
      var $132=$i;
      var $133=(($sh+4)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($132)>>>0) < (($134)>>>0);
      if ($135) { label = 27; break; } else { label = 107; break; }
    case 27: 
      var $137=$p;
      var $138=$i;
      var $139=$138 << 1;
      var $140=((($139)+(1))|0);
      var $141=_cdf_getuint32($137, $140);
      $ofs=$141;
      var $142=$p;
      var $143=$ofs;
      var $144=(($142+$143)|0);
      var $145=((($144)-(8))|0);
      $q=$145;
      var $146=$q;
      var $147=$e;
      var $148=(($146)>>>0) > (($147)>>>0);
      if ($148) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 108; break;
    case 29: 
      var $151=$p;
      var $152=$i;
      var $153=$152 << 1;
      var $154=_cdf_getuint32($151, $153);
      var $155=$i;
      var $156=$inp;
      var $157=(($156+($155<<4))|0);
      var $158=(($157)|0);
      HEAP32[(($158)>>2)]=$154;
      var $159=$q;
      var $160=_cdf_getuint32($159, 0);
      var $161=$i;
      var $162=$inp;
      var $163=(($162+($161<<4))|0);
      var $164=(($163+4)|0);
      HEAP32[(($164)>>2)]=$160;
      var $165=$i;
      var $166=$inp;
      var $167=(($166+($165<<4))|0);
      var $168=(($167+4)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$169 & 4096;
      var $171=(($170)|0)!=0;
      if ($171) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $173=$q;
      var $174=_cdf_getuint32($173, 1);
      $nelements=$174;
      $o=2;
      label = 32; break;
    case 31: 
      $nelements=1;
      $o=1;
      label = 32; break;
    case 32: 
      var $177=$o;
      var $178=((($177<<2))|0);
      $o4=$178;
      var $179=$i;
      var $180=$inp;
      var $181=(($180+($179<<4))|0);
      var $182=(($181+4)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$183 & 57344;
      var $185=(($184)|0)!=0;
      if ($185) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 104; break;
    case 34: 
      var $188=$i;
      var $189=$inp;
      var $190=(($189+($188<<4))|0);
      var $191=(($190+4)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=$192 & 4095;
      if ((($193)|0) == 1 || (($193)|0) == 0) {
        label = 35; break;
      }
      else if ((($193)|0) == 2) {
        label = 36; break;
      }
      else if ((($193)|0) == 3) {
        label = 42; break;
      }
      else if ((($193)|0) == 11 || (($193)|0) == 19) {
        label = 48; break;
      }
      else if ((($193)|0) == 20) {
        label = 54; break;
      }
      else if ((($193)|0) == 21) {
        label = 60; break;
      }
      else if ((($193)|0) == 4) {
        label = 66; break;
      }
      else if ((($193)|0) == 5) {
        label = 72; break;
      }
      else if ((($193)|0) == 30 || (($193)|0) == 31) {
        label = 78; break;
      }
      else if ((($193)|0) == 64) {
        label = 94; break;
      }
      else if ((($193)|0) == 71) {
        label = 100; break;
      }
      else {
      label = 103; break;
      }
      
    case 35: 
      label = 105; break;
    case 36: 
      var $196=$i;
      var $197=$inp;
      var $198=(($197+($196<<4))|0);
      var $199=(($198+4)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=$200 & 4096;
      var $202=(($201)|0)!=0;
      if ($202) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 104; break;
    case 38: 
      var $205=$s16;
      var $206=$o4;
      var $207=$q;
      var $208=(($207+$206)|0);
      assert(2 % 1 === 0);HEAP8[($205)]=HEAP8[($208)];HEAP8[(($205)+(1))]=HEAP8[(($208)+(1))];
      var $209=HEAP32[((((5259672)|0))>>2)];
      var $210=(($209)|0)==16909060;
      if ($210) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $212=HEAP16[(($s16)>>1)];
      var $213=__cdf_tole2($212);
      var $214=(($213)&65535);
      var $219 = $214;label = 41; break;
    case 40: 
      var $216=HEAP16[(($s16)>>1)];
      var $217=(($216)&65535);
      var $219 = $217;label = 41; break;
    case 41: 
      var $219;
      var $220=(($219) & 65535);
      var $221=$i;
      var $222=$inp;
      var $223=(($222+($221<<4))|0);
      var $224=(($223+8)|0);
      var $225=$224;
      HEAP16[(($225)>>1)]=$220;
      label = 105; break;
    case 42: 
      var $227=$i;
      var $228=$inp;
      var $229=(($228+($227<<4))|0);
      var $230=(($229+4)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$231 & 4096;
      var $233=(($232)|0)!=0;
      if ($233) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 104; break;
    case 44: 
      var $236=$s32;
      var $237=$o4;
      var $238=$q;
      var $239=(($238+$237)|0);
      assert(4 % 1 === 0);HEAP8[($236)]=HEAP8[($239)];HEAP8[(($236)+(1))]=HEAP8[(($239)+(1))];HEAP8[(($236)+(2))]=HEAP8[(($239)+(2))];HEAP8[(($236)+(3))]=HEAP8[(($239)+(3))];
      var $240=HEAP32[((((5259672)|0))>>2)];
      var $241=(($240)|0)==16909060;
      if ($241) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $243=HEAP32[(($s32)>>2)];
      var $244=__cdf_tole4($243);
      var $248 = $244;label = 47; break;
    case 46: 
      var $246=HEAP32[(($s32)>>2)];
      var $248 = $246;label = 47; break;
    case 47: 
      var $248;
      var $249=$i;
      var $250=$inp;
      var $251=(($250+($249<<4))|0);
      var $252=(($251+8)|0);
      var $253=$252;
      HEAP32[(($253)>>2)]=$248;
      label = 105; break;
    case 48: 
      var $255=$i;
      var $256=$inp;
      var $257=(($256+($255<<4))|0);
      var $258=(($257+4)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$259 & 4096;
      var $261=(($260)|0)!=0;
      if ($261) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 104; break;
    case 50: 
      var $264=$u32;
      var $265=$o4;
      var $266=$q;
      var $267=(($266+$265)|0);
      assert(4 % 1 === 0);HEAP8[($264)]=HEAP8[($267)];HEAP8[(($264)+(1))]=HEAP8[(($267)+(1))];HEAP8[(($264)+(2))]=HEAP8[(($267)+(2))];HEAP8[(($264)+(3))]=HEAP8[(($267)+(3))];
      var $268=HEAP32[((((5259672)|0))>>2)];
      var $269=(($268)|0)==16909060;
      if ($269) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $271=HEAP32[(($u32)>>2)];
      var $272=__cdf_tole4($271);
      var $276 = $272;label = 53; break;
    case 52: 
      var $274=HEAP32[(($u32)>>2)];
      var $276 = $274;label = 53; break;
    case 53: 
      var $276;
      var $277=$i;
      var $278=$inp;
      var $279=(($278+($277<<4))|0);
      var $280=(($279+8)|0);
      var $281=$280;
      HEAP32[(($281)>>2)]=$276;
      label = 105; break;
    case 54: 
      var $283=$i;
      var $284=$inp;
      var $285=(($284+($283<<4))|0);
      var $286=(($285+4)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$287 & 4096;
      var $289=(($288)|0)!=0;
      if ($289) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 104; break;
    case 56: 
      var $292=$s64;
      var $293=$o4;
      var $294=$q;
      var $295=(($294+$293)|0);
      assert(8 % 1 === 0);HEAP8[($292)]=HEAP8[($295)];HEAP8[(($292)+(1))]=HEAP8[(($295)+(1))];HEAP8[(($292)+(2))]=HEAP8[(($295)+(2))];HEAP8[(($292)+(3))]=HEAP8[(($295)+(3))];HEAP8[(($292)+(4))]=HEAP8[(($295)+(4))];HEAP8[(($292)+(5))]=HEAP8[(($295)+(5))];HEAP8[(($292)+(6))]=HEAP8[(($295)+(6))];HEAP8[(($292)+(7))]=HEAP8[(($295)+(7))];
      var $296=HEAP32[((((5259672)|0))>>2)];
      var $297=(($296)|0)==16909060;
      if ($297) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $st$0$0=(($s64)|0);
      var $299$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($s64+4)|0);
      var $299$1=HEAP32[(($st$0$1)>>2)];
      var $300$0=__cdf_tole8($299$0, $299$1);
      var $300$1=tempRet0;
      var $304$1 = $300$1;var $304$0 = $300$0;label = 59; break;
    case 58: 
      var $st$0$0=(($s64)|0);
      var $302$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($s64+4)|0);
      var $302$1=HEAP32[(($st$0$1)>>2)];
      var $304$1 = $302$1;var $304$0 = $302$0;label = 59; break;
    case 59: 
      var $304$0;
      var $304$1;
      var $305=$i;
      var $306=$inp;
      var $307=(($306+($305<<4))|0);
      var $308=(($307+8)|0);
      var $309=$308;
      var $st$7$0=(($309)|0);
      HEAP32[(($st$7$0)>>2)]=$304$0;
      var $st$7$1=(($309+4)|0);
      HEAP32[(($st$7$1)>>2)]=$304$1;
      label = 105; break;
    case 60: 
      var $311=$i;
      var $312=$inp;
      var $313=(($312+($311<<4))|0);
      var $314=(($313+4)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=$315 & 4096;
      var $317=(($316)|0)!=0;
      if ($317) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 104; break;
    case 62: 
      var $320=$u64;
      var $321=$o4;
      var $322=$q;
      var $323=(($322+$321)|0);
      assert(8 % 1 === 0);HEAP8[($320)]=HEAP8[($323)];HEAP8[(($320)+(1))]=HEAP8[(($323)+(1))];HEAP8[(($320)+(2))]=HEAP8[(($323)+(2))];HEAP8[(($320)+(3))]=HEAP8[(($323)+(3))];HEAP8[(($320)+(4))]=HEAP8[(($323)+(4))];HEAP8[(($320)+(5))]=HEAP8[(($323)+(5))];HEAP8[(($320)+(6))]=HEAP8[(($323)+(6))];HEAP8[(($320)+(7))]=HEAP8[(($323)+(7))];
      var $324=HEAP32[((((5259672)|0))>>2)];
      var $325=(($324)|0)==16909060;
      if ($325) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $st$0$0=(($u64)|0);
      var $327$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $327$1=HEAP32[(($st$0$1)>>2)];
      var $328$0=__cdf_tole8($327$0, $327$1);
      var $328$1=tempRet0;
      var $332$1 = $328$1;var $332$0 = $328$0;label = 65; break;
    case 64: 
      var $st$0$0=(($u64)|0);
      var $330$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $330$1=HEAP32[(($st$0$1)>>2)];
      var $332$1 = $330$1;var $332$0 = $330$0;label = 65; break;
    case 65: 
      var $332$0;
      var $332$1;
      var $333=$i;
      var $334=$inp;
      var $335=(($334+($333<<4))|0);
      var $336=(($335+8)|0);
      var $337=$336;
      var $st$7$0=(($337)|0);
      HEAP32[(($st$7$0)>>2)]=$332$0;
      var $st$7$1=(($337+4)|0);
      HEAP32[(($st$7$1)>>2)]=$332$1;
      label = 105; break;
    case 66: 
      var $339=$i;
      var $340=$inp;
      var $341=(($340+($339<<4))|0);
      var $342=(($341+4)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=$343 & 4096;
      var $345=(($344)|0)!=0;
      if ($345) { label = 67; break; } else { label = 68; break; }
    case 67: 
      label = 104; break;
    case 68: 
      var $348=$u32;
      var $349=$o4;
      var $350=$q;
      var $351=(($350+$349)|0);
      assert(4 % 1 === 0);HEAP8[($348)]=HEAP8[($351)];HEAP8[(($348)+(1))]=HEAP8[(($351)+(1))];HEAP8[(($348)+(2))]=HEAP8[(($351)+(2))];HEAP8[(($348)+(3))]=HEAP8[(($351)+(3))];
      var $352=HEAP32[((((5259672)|0))>>2)];
      var $353=(($352)|0)==16909060;
      if ($353) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $355=HEAP32[(($u32)>>2)];
      var $356=__cdf_tole4($355);
      var $360 = $356;label = 71; break;
    case 70: 
      var $358=HEAP32[(($u32)>>2)];
      var $360 = $358;label = 71; break;
    case 71: 
      var $360;
      HEAP32[(($u32)>>2)]=$360;
      var $361=$i;
      var $362=$inp;
      var $363=(($362+($361<<4))|0);
      var $364=(($363+8)|0);
      var $365=$364;
      var $366=$365;
      var $367=$u32;
      assert(4 % 1 === 0);HEAP32[(($366)>>2)]=HEAP32[(($367)>>2)];
      label = 105; break;
    case 72: 
      var $369=$i;
      var $370=$inp;
      var $371=(($370+($369<<4))|0);
      var $372=(($371+4)|0);
      var $373=HEAP32[(($372)>>2)];
      var $374=$373 & 4096;
      var $375=(($374)|0)!=0;
      if ($375) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 104; break;
    case 74: 
      var $378=$u64;
      var $379=$o4;
      var $380=$q;
      var $381=(($380+$379)|0);
      assert(8 % 1 === 0);HEAP8[($378)]=HEAP8[($381)];HEAP8[(($378)+(1))]=HEAP8[(($381)+(1))];HEAP8[(($378)+(2))]=HEAP8[(($381)+(2))];HEAP8[(($378)+(3))]=HEAP8[(($381)+(3))];HEAP8[(($378)+(4))]=HEAP8[(($381)+(4))];HEAP8[(($378)+(5))]=HEAP8[(($381)+(5))];HEAP8[(($378)+(6))]=HEAP8[(($381)+(6))];HEAP8[(($378)+(7))]=HEAP8[(($381)+(7))];
      var $382=HEAP32[((((5259672)|0))>>2)];
      var $383=(($382)|0)==16909060;
      if ($383) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $st$0$0=(($u64)|0);
      var $385$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $385$1=HEAP32[(($st$0$1)>>2)];
      var $386$0=__cdf_tole8($385$0, $385$1);
      var $386$1=tempRet0;
      var $390$1 = $386$1;var $390$0 = $386$0;label = 77; break;
    case 76: 
      var $st$0$0=(($u64)|0);
      var $388$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($u64+4)|0);
      var $388$1=HEAP32[(($st$0$1)>>2)];
      var $390$1 = $388$1;var $390$0 = $388$0;label = 77; break;
    case 77: 
      var $390$0;
      var $390$1;
      var $st$2$0=(($u64)|0);
      HEAP32[(($st$2$0)>>2)]=$390$0;
      var $st$2$1=(($u64+4)|0);
      HEAP32[(($st$2$1)>>2)]=$390$1;
      var $391=$i;
      var $392=$inp;
      var $393=(($392+($391<<4))|0);
      var $394=(($393+8)|0);
      var $395=$394;
      var $396=$395;
      var $397=$u64;
      assert(8 % 1 === 0);HEAP32[(($396)>>2)]=HEAP32[(($397)>>2)];HEAP32[((($396)+(4))>>2)]=HEAP32[((($397)+(4))>>2)];
      label = 105; break;
    case 78: 
      var $399=$nelements;
      var $400=(($399)>>>0) > 1;
      if ($400) { label = 79; break; } else { label = 85; break; }
    case 79: 
      var $402=$inp;
      var $403=$5;
      var $404=HEAP32[(($403)>>2)];
      var $405=$402;
      var $406=$404;
      var $407=((($405)-($406))|0);
      var $408=((((($407)|0))/(16))&-1);
      $nelem=$408;
      var $409=$7;
      var $410=HEAP32[(($409)>>2)];
      var $411=(($410)>>>0) > 67108863;
      if ($411) { label = 81; break; } else { label = 80; break; }
    case 80: 
      var $413=$nelements;
      var $414=(($413)>>>0) > 67108863;
      if ($414) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 108; break;
    case 82: 
      var $417=$nelements;
      var $418=$7;
      var $419=HEAP32[(($418)>>2)];
      var $420=((($419)+($417))|0);
      HEAP32[(($418)>>2)]=$420;
      var $421=$5;
      var $422=HEAP32[(($421)>>2)];
      var $423=$422;
      var $424=$7;
      var $425=HEAP32[(($424)>>2)];
      var $426=((($425<<4))|0);
      var $427=_realloc($423, $426);
      var $428=$427;
      $inp=$428;
      var $429=$inp;
      var $430=(($429)|0)==0;
      if ($430) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 108; break;
    case 84: 
      var $433=$inp;
      var $434=$5;
      HEAP32[(($434)>>2)]=$433;
      var $435=$5;
      var $436=HEAP32[(($435)>>2)];
      var $437=$nelem;
      var $438=(($436+($437<<4))|0);
      $inp=$438;
      label = 85; break;
    case 85: 
      $j=0;
      label = 86; break;
    case 86: 
      var $441=$j;
      var $442=$nelements;
      var $443=(($441)>>>0) < (($442)>>>0);
      if ($443) { label = 87; break; } else { label = 93; break; }
    case 87: 
      var $445=$q;
      var $446=$o;
      var $447=_cdf_getuint32($445, $446);
      $l=$447;
      var $448=$l;
      var $449=$i;
      var $450=$inp;
      var $451=(($450+($449<<4))|0);
      var $452=(($451+8)|0);
      var $453=$452;
      var $454=(($453)|0);
      HEAP32[(($454)>>2)]=$448;
      var $455=$o4;
      var $456=((($455)+(4))|0);
      var $457=$q;
      var $458=(($457+$456)|0);
      var $459=$i;
      var $460=$inp;
      var $461=(($460+($459<<4))|0);
      var $462=(($461+8)|0);
      var $463=$462;
      var $464=(($463+4)|0);
      HEAP32[(($464)>>2)]=$458;
      var $465=$l;
      var $466=$465 & 1;
      var $467=(($466)|0)!=0;
      if ($467) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $469=$l;
      var $470=((($469)+(1))|0);
      $l=$470;
      label = 89; break;
    case 89: 
      var $472=$l;
      var $473=$472 >>> 1;
      var $474=$o;
      var $475=((($474)+($473))|0);
      $o=$475;
      var $476=$q;
      var $477=$o;
      var $478=(($476+$477)|0);
      var $479=$e;
      var $480=(($478)>>>0) >= (($479)>>>0);
      if ($480) { label = 90; break; } else { label = 91; break; }
    case 90: 
      label = 108; break;
    case 91: 
      var $483=$o;
      var $484=((($483<<2))|0);
      $o4=$484;
      label = 92; break;
    case 92: 
      var $486=$j;
      var $487=((($486)+(1))|0);
      $j=$487;
      var $488=$i;
      var $489=((($488)+(1))|0);
      $i=$489;
      label = 86; break;
    case 93: 
      var $491=$i;
      var $492=((($491)-(1))|0);
      $i=$492;
      label = 105; break;
    case 94: 
      var $494=$i;
      var $495=$inp;
      var $496=(($495+($494<<4))|0);
      var $497=(($496+4)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=$498 & 4096;
      var $500=(($499)|0)!=0;
      if ($500) { label = 95; break; } else { label = 96; break; }
    case 95: 
      label = 104; break;
    case 96: 
      var $503=$tp;
      var $504=$o4;
      var $505=$q;
      var $506=(($505+$504)|0);
      assert(8 % 1 === 0);HEAP8[($503)]=HEAP8[($506)];HEAP8[(($503)+(1))]=HEAP8[(($506)+(1))];HEAP8[(($503)+(2))]=HEAP8[(($506)+(2))];HEAP8[(($503)+(3))]=HEAP8[(($506)+(3))];HEAP8[(($503)+(4))]=HEAP8[(($506)+(4))];HEAP8[(($503)+(5))]=HEAP8[(($506)+(5))];HEAP8[(($503)+(6))]=HEAP8[(($506)+(6))];HEAP8[(($503)+(7))]=HEAP8[(($506)+(7))];
      var $507=HEAP32[((((5259672)|0))>>2)];
      var $508=(($507)|0)==16909060;
      if ($508) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $st$0$0=(($tp)|0);
      var $510$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $510$1=HEAP32[(($st$0$1)>>2)];
      var $511$0=__cdf_tole8($510$0, $510$1);
      var $511$1=tempRet0;
      var $515$1 = $511$1;var $515$0 = $511$0;label = 99; break;
    case 98: 
      var $st$0$0=(($tp)|0);
      var $513$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $513$1=HEAP32[(($st$0$1)>>2)];
      var $515$1 = $513$1;var $515$0 = $513$0;label = 99; break;
    case 99: 
      var $515$0;
      var $515$1;
      var $516=$i;
      var $517=$inp;
      var $518=(($517+($516<<4))|0);
      var $519=(($518+8)|0);
      var $520=$519;
      var $st$7$0=(($520)|0);
      HEAP32[(($st$7$0)>>2)]=$515$0;
      var $st$7$1=(($520+4)|0);
      HEAP32[(($st$7$1)>>2)]=$515$1;
      label = 105; break;
    case 100: 
      var $522=$i;
      var $523=$inp;
      var $524=(($523+($522<<4))|0);
      var $525=(($524+4)|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=$526 & 4096;
      var $528=(($527)|0)!=0;
      if ($528) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 104; break;
    case 102: 
      label = 105; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $535=$i;
      var $536=((($535)+(1))|0);
      $i=$536;
      label = 26; break;
    case 107: 
      $1=0;
      label = 109; break;
    case 108: 
      var $539=$5;
      var $540=HEAP32[(($539)>>2)];
      var $541=$540;
      _free($541);
      $1=-1;
      label = 109; break;
    case 109: 
      var $543=$1;
      STACKTOP = __stackBase__;
      return $543;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_read_property_info["X"]=1;

function _cdf_check_stream_offset($sst, $h, $p, $tail, $line) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $b;
      var $e;
      $2=$sst;
      $3=$h;
      $4=$p;
      $5=$tail;
      $6=$line;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      $b=$9;
      var $10=$4;
      var $11=$5;
      var $12=(($10+$11)|0);
      $e=$12;
      var $13=$e;
      var $14=$b;
      var $15=(($13)>>>0) >= (($14)>>>0);
      if ($15) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $17=$e;
      var $18=$b;
      var $19=$17;
      var $20=$18;
      var $21=((($19)-($20))|0);
      var $22=$3;
      var $23=(($22+30)|0);
      var $24=HEAP16[(($23)>>1)];
      var $25=(($24)&65535);
      var $26=1 << $25;
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($26)*($29))|0);
      var $31=(($21)>>>0) <= (($30)>>>0);
      if ($31) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 6; break;
    case 5: 
      var $34=___errno_location();
      HEAP32[(($34)>>2)]=79;
      $1=-1;
      label = 6; break;
    case 6: 
      var $36=$1;

      return $36;
    default: assert(0, "bad label: " + label);
  }
}


function _cdf_getuint32($p, $offs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $rv=__stackBase__;
      $1=$p;
      $2=$offs;
      var $3=$rv;
      var $4=$1;
      var $5=$2;
      var $6=((($5<<2))|0);
      var $7=(($4+$6)|0);
      assert(4 % 1 === 0);HEAP8[($3)]=HEAP8[($7)];HEAP8[(($3)+(1))]=HEAP8[(($7)+(1))];HEAP8[(($3)+(2))]=HEAP8[(($7)+(2))];HEAP8[(($3)+(3))]=HEAP8[(($7)+(3))];
      var $8=HEAP32[((((5259672)|0))>>2)];
      var $9=(($8)|0)==16909060;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=HEAP32[(($rv)>>2)];
      var $12=__cdf_tole4($11);
      var $16 = $12;label = 5; break;
    case 4: 
      var $14=HEAP32[(($rv)>>2)];
      var $16 = $14;label = 5; break;
    case 5: 
      var $16;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}


function _cdf_getdays($year) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $days;
      var $y;
      $1=$year;
      $days=0;
      $y=1601;
      label = 3; break;
    case 3: 
      var $3=$y;
      var $4=$1;
      var $5=(($3)|0) < (($4)|0);
      if ($5) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $7=$y;
      var $8=((($7)|0))%(4);
      var $9=(($8)|0)==0;
      if ($9) { label = 5; break; } else { var $21 = 0;label = 8; break; }
    case 5: 
      var $11=$y;
      var $12=((($11)|0))%(100);
      var $13=(($12)|0)!=0;
      if ($13) { var $19 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $15=$y;
      var $16=((($15)|0))%(400);
      var $17=(($16)|0)==0;
      var $19 = $17;label = 7; break;
    case 7: 
      var $19;
      var $21 = $19;label = 8; break;
    case 8: 
      var $21;
      var $22=(($21)&1);
      var $23=((($22)+(365))|0);
      var $24=$days;
      var $25=((($24)+($23))|0);
      $days=$25;
      label = 9; break;
    case 9: 
      var $27=$y;
      var $28=((($27)+(1))|0);
      $y=$28;
      label = 3; break;
    case 10: 
      var $30=$days;

      return $30;
    default: assert(0, "bad label: " + label);
  }
}


function _cdf_getday($year, $days) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      var $sub;
      $2=$year;
      $3=$days;
      $m=0;
      label = 3; break;
    case 3: 
      var $5=$m;
      var $6=(($5)>>>0) < 12;
      if ($6) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $8=$m;
      var $9=((5246552+($8<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$m;
      var $12=(($11)|0)==1;
      if ($12) { label = 5; break; } else { var $30 = 0;label = 10; break; }
    case 5: 
      var $14=$2;
      var $15=((($14)|0))%(4);
      var $16=(($15)|0)==0;
      if ($16) { label = 6; break; } else { var $28 = 0;label = 9; break; }
    case 6: 
      var $18=$2;
      var $19=((($18)|0))%(100);
      var $20=(($19)|0)!=0;
      if ($20) { var $26 = 1;label = 8; break; } else { label = 7; break; }
    case 7: 
      var $22=$2;
      var $23=((($22)|0))%(400);
      var $24=(($23)|0)==0;
      var $26 = $24;label = 8; break;
    case 8: 
      var $26;
      var $28 = $26;label = 9; break;
    case 9: 
      var $28;
      var $30 = $28;label = 10; break;
    case 10: 
      var $30;
      var $31=(($30)&1);
      var $32=((($10)+($31))|0);
      $sub=$32;
      var $33=$3;
      var $34=$sub;
      var $35=(($33)|0) < (($34)|0);
      if ($35) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $37=$3;
      $1=$37;
      label = 15; break;
    case 12: 
      var $39=$sub;
      var $40=$3;
      var $41=((($40)-($39))|0);
      $3=$41;
      label = 13; break;
    case 13: 
      var $43=$m;
      var $44=((($43)+(1))|0);
      $m=$44;
      label = 3; break;
    case 14: 
      var $46=$3;
      $1=$46;
      label = 15; break;
    case 15: 
      var $48=$1;

      return $48;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_getday["X"]=1;

function _cdf_getmonth($year, $days) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$year;
      $3=$days;
      $m=0;
      label = 3; break;
    case 3: 
      var $5=$m;
      var $6=(($5)>>>0) < 12;
      if ($6) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $8=$m;
      var $9=((5246552+($8<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$3;
      var $12=((($11)-($10))|0);
      $3=$12;
      var $13=$m;
      var $14=(($13)|0)==1;
      if ($14) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $16=$2;
      var $17=((($16)|0))%(4);
      var $18=(($17)|0)==0;
      if ($18) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $20=$2;
      var $21=((($20)|0))%(100);
      var $22=(($21)|0)!=0;
      if ($22) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $24=$2;
      var $25=((($24)|0))%(400);
      var $26=(($25)|0)==0;
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $28=$3;
      var $29=((($28)-(1))|0);
      $3=$29;
      label = 9; break;
    case 9: 
      var $31=$3;
      var $32=(($31)|0) <= 0;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $34=$m;
      $1=$34;
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $37=$m;
      var $38=((($37)+(1))|0);
      $m=$38;
      label = 3; break;
    case 13: 
      var $40=$m;
      $1=$40;
      label = 14; break;
    case 14: 
      var $42=$1;

      return $42;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_getmonth["X"]=1;

function _cdf_unpack_summary_info($sst, $h, $ssi, $info, $count) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $i;
      var $maxcount=__stackBase__;
      var $si;
      var $sd;
      $2=$sst;
      $3=$h;
      $4=$ssi;
      $5=$info;
      $6=$count;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      $si=$10;
      var $11=$2;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+28)|0);
      var $15=$14;
      $sd=$15;
      var $16=$2;
      var $17=$3;
      var $18=$si;
      var $19=$18;
      var $20=_cdf_check_stream_offset($16, $17, $19, 28, 942);
      var $21=(($20)|0)==-1;
      if ($21) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $23=$2;
      var $24=$3;
      var $25=$sd;
      var $26=$25;
      var $27=_cdf_check_stream_offset($23, $24, $26, 20, 943);
      var $28=(($27)|0)==-1;
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-1;
      label = 32; break;
    case 5: 
      var $31=HEAP32[((((5259672)|0))>>2)];
      var $32=(($31)|0)==16909060;
      if ($32) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $34=$si;
      var $35=(($34)|0);
      var $36=HEAP16[(($35)>>1)];
      var $37=__cdf_tole2($36);
      var $38=(($37)&65535);
      var $45 = $38;label = 8; break;
    case 7: 
      var $40=$si;
      var $41=(($40)|0);
      var $42=HEAP16[(($41)>>1)];
      var $43=(($42)&65535);
      var $45 = $43;label = 8; break;
    case 8: 
      var $45;
      var $46=(($45) & 65535);
      var $47=$4;
      var $48=(($47)|0);
      HEAP16[(($48)>>1)]=$46;
      var $49=HEAP32[((((5259672)|0))>>2)];
      var $50=(($49)|0)==16909060;
      if ($50) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $52=$si;
      var $53=(($52+4)|0);
      var $54=HEAP16[(($53)>>1)];
      var $55=__cdf_tole2($54);
      var $56=(($55)&65535);
      var $63 = $56;label = 11; break;
    case 10: 
      var $58=$si;
      var $59=(($58+4)|0);
      var $60=HEAP16[(($59)>>1)];
      var $61=(($60)&65535);
      var $63 = $61;label = 11; break;
    case 11: 
      var $63;
      var $64=(($63) & 65535);
      var $65=$4;
      var $66=(($65+4)|0);
      HEAP16[(($66)>>1)]=$64;
      var $67=HEAP32[((((5259672)|0))>>2)];
      var $68=(($67)|0)==16909060;
      if ($68) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $70=$si;
      var $71=(($70+6)|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=__cdf_tole2($72);
      var $74=(($73)&65535);
      var $81 = $74;label = 14; break;
    case 13: 
      var $76=$si;
      var $77=(($76+6)|0);
      var $78=HEAP16[(($77)>>1)];
      var $79=(($78)&65535);
      var $81 = $79;label = 14; break;
    case 14: 
      var $81;
      var $82=(($81) & 65535);
      var $83=$4;
      var $84=(($83+6)|0);
      HEAP16[(($84)>>1)]=$82;
      var $85=$4;
      var $86=(($85+8)|0);
      var $87=$si;
      var $88=(($87+8)|0);
      var $89=$86;
      var $90=$88;
      assert(16 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];HEAP32[((($89)+(8))>>2)]=HEAP32[((($90)+(8))>>2)];HEAP32[((($89)+(12))>>2)]=HEAP32[((($90)+(12))>>2)];
      var $91=$4;
      var $92=(($91+8)|0);
      _cdf_swap_class($92);
      var $93=HEAP32[((((5259672)|0))>>2)];
      var $94=(($93)|0)==16909060;
      if ($94) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $96=$si;
      var $97=(($96+24)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98) & 65535);
      var $100=__cdf_tole2($99);
      var $101=(($100)&65535);
      var $109 = $101;label = 17; break;
    case 16: 
      var $103=$si;
      var $104=(($103+24)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105) & 65535);
      var $107=(($106)&65535);
      var $109 = $107;label = 17; break;
    case 17: 
      var $109;
      var $110=(($109) & 65535);
      var $111=(($110)&65535);
      var $112=$4;
      var $113=(($112+24)|0);
      HEAP32[(($113)>>2)]=$111;
      var $114=$6;
      HEAP32[(($114)>>2)]=0;
      HEAP32[(($maxcount)>>2)]=0;
      var $115=$5;
      HEAP32[(($115)>>2)]=0;
      $i=0;
      label = 18; break;
    case 18: 
      var $117=$i;
      var $118=HEAP32[((((5259672)|0))>>2)];
      var $119=(($118)|0)==16909060;
      if ($119) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $121=$si;
      var $122=(($121+24)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=__cdf_tole4($123);
      var $130 = $124;label = 21; break;
    case 20: 
      var $126=$si;
      var $127=(($126+24)|0);
      var $128=HEAP32[(($127)>>2)];
      var $130 = $128;label = 21; break;
    case 21: 
      var $130;
      var $131=(($117)>>>0) < (($130)>>>0);
      if ($131) { label = 22; break; } else { label = 31; break; }
    case 22: 
      var $133=$i;
      var $134=(($133)>>>0) >= 10000;
      if ($134) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $136=___errno_location();
      HEAP32[(($136)>>2)]=79;
      $1=-1;
      label = 32; break;
    case 24: 
      var $138=$2;
      var $139=$3;
      var $140=HEAP32[((((5259672)|0))>>2)];
      var $141=(($140)|0)==16909060;
      if ($141) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $143=$sd;
      var $144=(($143+16)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=__cdf_tole4($145);
      var $152 = $146;label = 27; break;
    case 26: 
      var $148=$sd;
      var $149=(($148+16)|0);
      var $150=HEAP32[(($149)>>2)];
      var $152 = $150;label = 27; break;
    case 27: 
      var $152;
      var $153=$5;
      var $154=$6;
      var $155=_cdf_read_property_info($138, $139, $152, $153, $154, $maxcount);
      var $156=(($155)|0)==-1;
      if ($156) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $1=-1;
      label = 32; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $160=$i;
      var $161=((($160)+(1))|0);
      $i=$161;
      label = 18; break;
    case 31: 
      $1=0;
      label = 32; break;
    case 32: 
      var $164=$1;
      STACKTOP = __stackBase__;
      return $164;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_unpack_summary_info["X"]=1;

function _cdf_print_property_name($buf, $bufsiz, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$buf;
      $3=$bufsiz;
      $4=$p;
      $i=0;
      label = 3; break;
    case 3: 
      var $6=$i;
      var $7=(($6)>>>0) < 20;
      if ($7) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $9=$i;
      var $10=((5242880+($9<<3))|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$4;
      var $14=(($12)|0)==(($13)|0);
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$2;
      var $17=$3;
      var $18=$i;
      var $19=((5242880+($18<<3))|0);
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_snprintf($16, $17, ((5265720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$21,tempInt));
      $1=$22;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $25=$i;
      var $26=((($25)+(1))|0);
      $i=$26;
      label = 3; break;
    case 8: 
      var $28=$2;
      var $29=$3;
      var $30=$4;
      var $31=_snprintf($28, $29, ((5264472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$30,tempInt));
      $1=$31;
      label = 9; break;
    case 9: 
      var $33=$1;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}


function _cdf_print_elapsed_time($buf, $bufsiz, $ts$0, $ts$1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $len;
      var $days;
      var $hours;
      var $mins;
      var $secs;
      $2=$buf;
      $3=$bufsiz;
      var $st$11$0=(($4)|0);
      HEAP32[(($st$11$0)>>2)]=$ts$0;
      var $st$11$1=(($4+4)|0);
      HEAP32[(($st$11$1)>>2)]=$ts$1;
      $len=0;
      var $st$16$0=(($4)|0);
      var $5$0=HEAP32[(($st$16$0)>>2)];
      var $st$16$1=(($4+4)|0);
      var $5$1=HEAP32[(($st$16$1)>>2)];
      var $$etemp$0$0=10000000;
      var $$etemp$0$1=0;
      var $6$0 = (i64Math.divide($5$0,$5$1,$$etemp$0$0,$$etemp$0$1),HEAP32[((tempDoublePtr)>>2)]); var $6$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$23$0=(($4)|0);
      HEAP32[(($st$23$0)>>2)]=$6$0;
      var $st$23$1=(($4+4)|0);
      HEAP32[(($st$23$1)>>2)]=$6$1;
      var $st$27$0=(($4)|0);
      var $7$0=HEAP32[(($st$27$0)>>2)];
      var $st$27$1=(($4+4)|0);
      var $7$1=HEAP32[(($st$27$1)>>2)];
      var $$etemp$1$0=60;
      var $$etemp$1$1=0;
      var $8$0 = (i64Math.modulo($7$0,$7$1,$$etemp$1$0,$$etemp$1$1),HEAP32[((tempDoublePtr)>>2)]); var $8$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $9$0=$8$0;
      var $9=$9$0;
      $secs=$9;
      var $st$37$0=(($4)|0);
      var $10$0=HEAP32[(($st$37$0)>>2)];
      var $st$37$1=(($4+4)|0);
      var $10$1=HEAP32[(($st$37$1)>>2)];
      var $$etemp$2$0=60;
      var $$etemp$2$1=0;
      var $11$0 = (i64Math.divide($10$0,$10$1,$$etemp$2$0,$$etemp$2$1),HEAP32[((tempDoublePtr)>>2)]); var $11$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$44$0=(($4)|0);
      HEAP32[(($st$44$0)>>2)]=$11$0;
      var $st$44$1=(($4+4)|0);
      HEAP32[(($st$44$1)>>2)]=$11$1;
      var $st$48$0=(($4)|0);
      var $12$0=HEAP32[(($st$48$0)>>2)];
      var $st$48$1=(($4+4)|0);
      var $12$1=HEAP32[(($st$48$1)>>2)];
      var $$etemp$3$0=60;
      var $$etemp$3$1=0;
      var $13$0 = (i64Math.modulo($12$0,$12$1,$$etemp$3$0,$$etemp$3$1),HEAP32[((tempDoublePtr)>>2)]); var $13$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $14$0=$13$0;
      var $14=$14$0;
      $mins=$14;
      var $st$58$0=(($4)|0);
      var $15$0=HEAP32[(($st$58$0)>>2)];
      var $st$58$1=(($4+4)|0);
      var $15$1=HEAP32[(($st$58$1)>>2)];
      var $$etemp$4$0=60;
      var $$etemp$4$1=0;
      var $16$0 = (i64Math.divide($15$0,$15$1,$$etemp$4$0,$$etemp$4$1),HEAP32[((tempDoublePtr)>>2)]); var $16$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$65$0=(($4)|0);
      HEAP32[(($st$65$0)>>2)]=$16$0;
      var $st$65$1=(($4+4)|0);
      HEAP32[(($st$65$1)>>2)]=$16$1;
      var $st$69$0=(($4)|0);
      var $17$0=HEAP32[(($st$69$0)>>2)];
      var $st$69$1=(($4+4)|0);
      var $17$1=HEAP32[(($st$69$1)>>2)];
      var $$etemp$5$0=24;
      var $$etemp$5$1=0;
      var $18$0 = (i64Math.modulo($17$0,$17$1,$$etemp$5$0,$$etemp$5$1),HEAP32[((tempDoublePtr)>>2)]); var $18$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $19$0=$18$0;
      var $19=$19$0;
      $hours=$19;
      var $st$79$0=(($4)|0);
      var $20$0=HEAP32[(($st$79$0)>>2)];
      var $st$79$1=(($4+4)|0);
      var $20$1=HEAP32[(($st$79$1)>>2)];
      var $$etemp$6$0=24;
      var $$etemp$6$1=0;
      var $21$0 = (i64Math.divide($20$0,$20$1,$$etemp$6$0,$$etemp$6$1),HEAP32[((tempDoublePtr)>>2)]); var $21$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$86$0=(($4)|0);
      HEAP32[(($st$86$0)>>2)]=$21$0;
      var $st$86$1=(($4+4)|0);
      HEAP32[(($st$86$1)>>2)]=$21$1;
      var $st$90$0=(($4)|0);
      var $22$0=HEAP32[(($st$90$0)>>2)];
      var $st$90$1=(($4+4)|0);
      var $22$1=HEAP32[(($st$90$1)>>2)];
      var $23$0=$22$0;
      var $23=$23$0;
      $days=$23;
      var $24=$days;
      var $25=(($24)|0)!=0;
      if ($25) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $27=$2;
      var $28=$len;
      var $29=(($27+$28)|0);
      var $30=$3;
      var $31=$len;
      var $32=((($30)-($31))|0);
      var $33=$days;
      var $34=_snprintf($29, $32, ((5263456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$33,tempInt));
      var $35=$len;
      var $36=((($35)+($34))|0);
      $len=$36;
      var $37=$len;
      var $38=$3;
      var $39=(($37)>>>0) >= (($38)>>>0);
      if ($39) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $41=$len;
      $1=$41;
      label = 14; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $44=$days;
      var $45=(($44)|0)!=0;
      if ($45) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $47=$hours;
      var $48=(($47)|0)!=0;
      if ($48) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $50=$2;
      var $51=$len;
      var $52=(($50+$51)|0);
      var $53=$3;
      var $54=$len;
      var $55=((($53)-($54))|0);
      var $56=$hours;
      var $57=_snprintf($52, $55, ((5262376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$56,tempInt));
      var $58=$len;
      var $59=((($58)+($57))|0);
      $len=$59;
      var $60=$len;
      var $61=$3;
      var $62=(($60)>>>0) >= (($61)>>>0);
      if ($62) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $64=$len;
      $1=$64;
      label = 14; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $67=$2;
      var $68=$len;
      var $69=(($67+$68)|0);
      var $70=$3;
      var $71=$len;
      var $72=((($70)-($71))|0);
      var $73=$mins;
      var $74=_snprintf($69, $72, ((5262376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$73,tempInt));
      var $75=$len;
      var $76=((($75)+($74))|0);
      $len=$76;
      var $77=$len;
      var $78=$3;
      var $79=(($77)>>>0) >= (($78)>>>0);
      if ($79) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $81=$len;
      $1=$81;
      label = 14; break;
    case 13: 
      var $83=$2;
      var $84=$len;
      var $85=(($83+$84)|0);
      var $86=$3;
      var $87=$len;
      var $88=((($86)-($87))|0);
      var $89=$secs;
      var $90=_snprintf($85, $88, ((5261500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$89,tempInt));
      var $91=$len;
      var $92=((($91)+($90))|0);
      $len=$92;
      var $93=$len;
      $1=$93;
      label = 14; break;
    case 14: 
      var $95=$1;
      STACKTOP = __stackBase__;
      return $95;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_print_elapsed_time["X"]=1;

function _cdf_timestamp_to_timespec($ts, $t$0, $t$1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $tm=(__stackBase__)+(8);
      var $rdays;
      $2=$ts;
      var $st$6$0=(($3)|0);
      HEAP32[(($st$6$0)>>2)]=$t$0;
      var $st$6$1=(($3+4)|0);
      HEAP32[(($st$6$1)>>2)]=$t$1;
      var $st$10$0=(($3)|0);
      var $4$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($3+4)|0);
      var $4$1=HEAP32[(($st$10$1)>>2)];
      var $$etemp$0$0=10000000;
      var $$etemp$0$1=0;
      var $5$0 = (i64Math.modulo($4$0,$4$1,$$etemp$0$0,$$etemp$0$1),HEAP32[((tempDoublePtr)>>2)]); var $5$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $$etemp$1$0=100;
      var $$etemp$1$1=0;
      var $6$0 = (i64Math.multiply($5$0,$5$1,$$etemp$1$0,$$etemp$1$1),HEAP32[((tempDoublePtr)>>2)]); var $6$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $7$0=$6$0;
      var $7=$7$0;
      var $8=$2;
      var $9=(($8+4)|0);
      HEAP32[(($9)>>2)]=$7;
      var $st$25$0=(($3)|0);
      var $10$0=HEAP32[(($st$25$0)>>2)];
      var $st$25$1=(($3+4)|0);
      var $10$1=HEAP32[(($st$25$1)>>2)];
      var $$etemp$2$0=10000000;
      var $$etemp$2$1=0;
      var $11$0 = (i64Math.divide($10$0,$10$1,$$etemp$2$0,$$etemp$2$1),HEAP32[((tempDoublePtr)>>2)]); var $11$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$32$0=(($3)|0);
      HEAP32[(($st$32$0)>>2)]=$11$0;
      var $st$32$1=(($3+4)|0);
      HEAP32[(($st$32$1)>>2)]=$11$1;
      var $st$36$0=(($3)|0);
      var $12$0=HEAP32[(($st$36$0)>>2)];
      var $st$36$1=(($3+4)|0);
      var $12$1=HEAP32[(($st$36$1)>>2)];
      var $$etemp$3$0=60;
      var $$etemp$3$1=0;
      var $13$0 = (i64Math.modulo($12$0,$12$1,$$etemp$3$0,$$etemp$3$1),HEAP32[((tempDoublePtr)>>2)]); var $13$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $14$0=$13$0;
      var $14=$14$0;
      var $15=(($tm)|0);
      HEAP32[(($15)>>2)]=$14;
      var $st$47$0=(($3)|0);
      var $16$0=HEAP32[(($st$47$0)>>2)];
      var $st$47$1=(($3+4)|0);
      var $16$1=HEAP32[(($st$47$1)>>2)];
      var $$etemp$4$0=60;
      var $$etemp$4$1=0;
      var $17$0 = (i64Math.divide($16$0,$16$1,$$etemp$4$0,$$etemp$4$1),HEAP32[((tempDoublePtr)>>2)]); var $17$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$54$0=(($3)|0);
      HEAP32[(($st$54$0)>>2)]=$17$0;
      var $st$54$1=(($3+4)|0);
      HEAP32[(($st$54$1)>>2)]=$17$1;
      var $st$58$0=(($3)|0);
      var $18$0=HEAP32[(($st$58$0)>>2)];
      var $st$58$1=(($3+4)|0);
      var $18$1=HEAP32[(($st$58$1)>>2)];
      var $$etemp$5$0=60;
      var $$etemp$5$1=0;
      var $19$0 = (i64Math.modulo($18$0,$18$1,$$etemp$5$0,$$etemp$5$1),HEAP32[((tempDoublePtr)>>2)]); var $19$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $20$0=$19$0;
      var $20=$20$0;
      var $21=(($tm+4)|0);
      HEAP32[(($21)>>2)]=$20;
      var $st$69$0=(($3)|0);
      var $22$0=HEAP32[(($st$69$0)>>2)];
      var $st$69$1=(($3+4)|0);
      var $22$1=HEAP32[(($st$69$1)>>2)];
      var $$etemp$6$0=60;
      var $$etemp$6$1=0;
      var $23$0 = (i64Math.divide($22$0,$22$1,$$etemp$6$0,$$etemp$6$1),HEAP32[((tempDoublePtr)>>2)]); var $23$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$76$0=(($3)|0);
      HEAP32[(($st$76$0)>>2)]=$23$0;
      var $st$76$1=(($3+4)|0);
      HEAP32[(($st$76$1)>>2)]=$23$1;
      var $st$80$0=(($3)|0);
      var $24$0=HEAP32[(($st$80$0)>>2)];
      var $st$80$1=(($3+4)|0);
      var $24$1=HEAP32[(($st$80$1)>>2)];
      var $$etemp$7$0=24;
      var $$etemp$7$1=0;
      var $25$0 = (i64Math.modulo($24$0,$24$1,$$etemp$7$0,$$etemp$7$1),HEAP32[((tempDoublePtr)>>2)]); var $25$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $26$0=$25$0;
      var $26=$26$0;
      var $27=(($tm+8)|0);
      HEAP32[(($27)>>2)]=$26;
      var $st$91$0=(($3)|0);
      var $28$0=HEAP32[(($st$91$0)>>2)];
      var $st$91$1=(($3+4)|0);
      var $28$1=HEAP32[(($st$91$1)>>2)];
      var $$etemp$8$0=24;
      var $$etemp$8$1=0;
      var $29$0 = (i64Math.divide($28$0,$28$1,$$etemp$8$0,$$etemp$8$1),HEAP32[((tempDoublePtr)>>2)]); var $29$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$98$0=(($3)|0);
      HEAP32[(($st$98$0)>>2)]=$29$0;
      var $st$98$1=(($3+4)|0);
      HEAP32[(($st$98$1)>>2)]=$29$1;
      var $st$102$0=(($3)|0);
      var $30$0=HEAP32[(($st$102$0)>>2)];
      var $st$102$1=(($3+4)|0);
      var $30$1=HEAP32[(($st$102$1)>>2)];
      var $$etemp$9$0=365;
      var $$etemp$9$1=0;
      var $31$0 = (i64Math.divide($30$0,$30$1,$$etemp$9$0,$$etemp$9$1),HEAP32[((tempDoublePtr)>>2)]); var $31$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $$etemp$10$0=1601;
      var $$etemp$10$1=0;
      var $32$0 = (i64Math.add($$etemp$10$0,$$etemp$10$1,$31$0,$31$1),HEAP32[((tempDoublePtr)>>2)]); var $32$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $33$0=$32$0;
      var $33=$33$0;
      var $34=(($tm+20)|0);
      HEAP32[(($34)>>2)]=$33;
      var $35=(($tm+20)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=_cdf_getdays($36);
      $rdays=$37;
      var $38=$rdays;
      var $39=((($38)-(1))|0);
      var $40$0=$39;
      var $40$1=((($39)|0) < 0 ? -1 : 0);
      var $st$124$0=(($3)|0);
      var $41$0=HEAP32[(($st$124$0)>>2)];
      var $st$124$1=(($3+4)|0);
      var $41$1=HEAP32[(($st$124$1)>>2)];
      var $42$0 = (i64Math.subtract($41$0,$41$1,$40$0,$40$1),HEAP32[((tempDoublePtr)>>2)]); var $42$1 = HEAP32[(((tempDoublePtr)+(4))>>2)];
      var $st$129$0=(($3)|0);
      HEAP32[(($st$129$0)>>2)]=$42$0;
      var $st$129$1=(($3+4)|0);
      HEAP32[(($st$129$1)>>2)]=$42$1;
      var $43=(($tm+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $st$135$0=(($3)|0);
      var $45$0=HEAP32[(($st$135$0)>>2)];
      var $st$135$1=(($3+4)|0);
      var $45$1=HEAP32[(($st$135$1)>>2)];
      var $46$0=$45$0;
      var $46=$46$0;
      var $47=_cdf_getday($44, $46);
      var $48=(($tm+12)|0);
      HEAP32[(($48)>>2)]=$47;
      var $49=(($tm+20)|0);
      var $50=HEAP32[(($49)>>2)];
      var $st$146$0=(($3)|0);
      var $51$0=HEAP32[(($st$146$0)>>2)];
      var $st$146$1=(($3+4)|0);
      var $51$1=HEAP32[(($st$146$1)>>2)];
      var $52$0=$51$0;
      var $52=$52$0;
      var $53=_cdf_getmonth($50, $52);
      var $54=(($tm+16)|0);
      HEAP32[(($54)>>2)]=$53;
      var $55=(($tm+24)|0);
      HEAP32[(($55)>>2)]=0;
      var $56=(($tm+28)|0);
      HEAP32[(($56)>>2)]=0;
      var $57=(($tm+32)|0);
      HEAP32[(($57)>>2)]=0;
      var $58=(($tm+36)|0);
      HEAP32[(($58)>>2)]=0;
      var $59=(($tm+40)|0);
      HEAP32[(($59)>>2)]=((5259648)|0);
      var $60=(($tm+20)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1900))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=_mktime($tm);
      var $64=$2;
      var $65=(($64)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$2;
      var $67=(($66)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|0)==-1;
      if ($69) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $71=___errno_location();
      HEAP32[(($71)>>2)]=22;
      $1=-1;
      label = 5; break;
    case 4: 
      $1=0;
      label = 5; break;
    case 5: 
      var $74=$1;
      STACKTOP = __stackBase__;
      return $74;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_timestamp_to_timespec["X"]=1;

function _cdf_ctime($sec, $buf) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ptr;
      $2=$sec;
      $3=$buf;
      var $4=$2;
      var $5=$3;
      var $6=_ctime_r($4, $5);
      $ptr=$6;
      var $7=$ptr;
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$3;
      $1=$10;
      label = 5; break;
    case 4: 
      var $12=$3;
      var $13=$2;
      var $14=HEAP32[(($13)>>2)];
      var $15$0=$14;
      var $15$1=((($14)|0) < 0 ? -1 : 0);
      var $$etemp$0=((5265724)|0);
      var $16=_snprintf($12, 26, $$etemp$0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$15$0,HEAP32[(((tempInt)+(4))>>2)]=$15$1,tempInt));
      var $17=$3;
      $1=$17;
      label = 5; break;
    case 5: 
      var $19=$1;
      STACKTOP = __stackBase__;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}


function _file_trycdf($ms, $fd, $buf, $nbytes) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 604)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $info=__stackBase__;
      var $h=(__stackBase__)+(12);
      var $sat=(__stackBase__)+(524);
      var $ssat=(__stackBase__)+(532);
      var $sst=(__stackBase__)+(540);
      var $scn=(__stackBase__)+(552);
      var $dir=(__stackBase__)+(564);
      var $i;
      var $expn;
      var $corrupt;
      var $str;
      var $d;
      var $name=(__stackBase__)+(572);
      var $j;
      var $k;
      $2=$ms;
      $3=$fd;
      $4=$buf;
      $5=$nbytes;
      $expn=((5265652)|0);
      $corrupt=((5271168)|0);
      var $6=$3;
      var $7=(($info)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=$4;
      var $9=(($info+4)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$5;
      var $11=(($info+8)|0);
      HEAP32[(($11)>>2)]=$10;
      var $12=$2;
      var $13=(($12+32)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 2048;
      var $16=(($15)|0)!=0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 58; break;
    case 4: 
      var $19=_cdf_read_header($info, $h);
      var $20=(($19)|0)==-1;
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 58; break;
    case 6: 
      var $23=_cdf_read_sat($info, $h, $sat);
      $i=$23;
      var $24=(($23)|0)==-1;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $expn=((5268368)|0);
      label = 42; break;
    case 8: 
      var $27=_cdf_read_ssat($info, $h, $sat, $ssat);
      $i=$27;
      var $28=(($27)|0)==-1;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $expn=((5266652)|0);
      label = 41; break;
    case 10: 
      var $31=_cdf_read_dir($info, $h, $sat, $dir);
      $i=$31;
      var $32=(($31)|0)==-1;
      if ($32) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $expn=((5265656)|0);
      label = 40; break;
    case 12: 
      var $35=_cdf_read_short_stream($info, $h, $sat, $dir, $sst);
      $i=$35;
      var $36=(($35)|0)==-1;
      if ($36) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $expn=((5264372)|0);
      label = 39; break;
    case 14: 
      var $39=_cdf_read_summary_info($info, $h, $sat, $ssat, $sst, $dir, $scn);
      $i=$39;
      var $40=(($39)|0)==-1;
      if ($40) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $42=___errno_location();
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0)==3;
      if ($44) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $46=$expn;
      $corrupt=$46;
      $expn=((5263388)|0);
      label = 18; break;
    case 17: 
      $expn=((5262316)|0);
      label = 18; break;
    case 18: 
      label = 38; break;
    case 19: 
      var $50=$2;
      var $51=_cdf_file_summary_info($50, $h, $scn);
      $i=$51;
      var $52=(($51)|0) < 0;
      if ($52) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $expn=((5261404)|0);
      label = 21; break;
    case 21: 
      var $55=$i;
      var $56=(($55)|0)==0;
      if ($56) { label = 22; break; } else { label = 37; break; }
    case 22: 
      $str=((5260548)|0);
      $j=0;
      label = 23; break;
    case 23: 
      var $59=$j;
      var $60=(($dir+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($59)>>>0) < (($61)>>>0);
      if ($62) { label = 24; break; } else { label = 34; break; }
    case 24: 
      var $64=$j;
      var $65=(($dir)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+($64<<7))|0);
      $d=$67;
      $k=0;
      label = 25; break;
    case 25: 
      var $69=$k;
      var $70=(($69)>>>0) < 32;
      if ($70) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $72=$k;
      var $73=$d;
      var $74=(($73)|0);
      var $75=(($74+($72<<1))|0);
      var $76=HEAP16[(($75)>>1)];
      var $77=_cdf_tole2($76);
      var $78=(($77) & 255);
      var $79=$k;
      var $80=(($name+$79)|0);
      HEAP8[($80)]=$78;
      label = 27; break;
    case 27: 
      var $82=$k;
      var $83=((($82)+(1))|0);
      $k=$83;
      label = 25; break;
    case 28: 
      var $85=(($name)|0);
      var $86=_strstr($85, ((5273088)|0));
      var $87=(($86)|0)!=0;
      if ($87) { label = 29; break; } else { label = 30; break; }
    case 29: 
      $str=((5272396)|0);
      label = 34; break;
    case 30: 
      var $90=(($name)|0);
      var $91=_strstr($90, ((5271900)|0));
      var $92=(($91)|0)!=0;
      if ($92) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $str=((5271448)|0);
      label = 34; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $96=$j;
      var $97=((($96)+(1))|0);
      $j=$97;
      label = 23; break;
    case 34: 
      var $99=$2;
      var $100=$str;
      var $101=_file_printf($99, ((5271180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$100,tempInt));
      var $102=(($101)|0)==-1;
      if ($102) { label = 35; break; } else { label = 36; break; }
    case 35: 
      $1=-1;
      label = 58; break;
    case 36: 
      $i=1;
      label = 37; break;
    case 37: 
      var $106=(($scn)|0);
      var $107=HEAP32[(($106)>>2)];
      _free($107);
      label = 38; break;
    case 38: 
      var $109=(($sst)|0);
      var $110=HEAP32[(($109)>>2)];
      _free($110);
      label = 39; break;
    case 39: 
      var $112=(($dir)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113;
      _free($114);
      label = 40; break;
    case 40: 
      var $116=(($ssat)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$117;
      _free($118);
      label = 41; break;
    case 41: 
      var $120=(($sat)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$121;
      _free($122);
      label = 42; break;
    case 42: 
      var $124=$i;
      var $125=(($124)|0)!=1;
      if ($125) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $127=$i;
      var $128=(($127)|0)==-1;
      if ($128) { label = 44; break; } else { label = 56; break; }
    case 44: 
      var $130=$2;
      var $131=(($130+32)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$132 & 1040;
      var $134=(($133)|0)==0;
      if ($134) { label = 45; break; } else { label = 52; break; }
    case 45: 
      var $136=$2;
      var $137=_file_printf($136, ((5270860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $138=(($137)|0)==-1;
      if ($138) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $1=-1;
      label = 58; break;
    case 47: 
      var $141=$expn;
      var $142=HEAP8[($141)];
      var $143=(($142 << 24) >> 24)!=0;
      if ($143) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $145=$2;
      var $146=$corrupt;
      var $147=$expn;
      var $148=_file_printf($145, ((5270632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$146,HEAP32[(((tempInt)+(4))>>2)]=$147,tempInt));
      var $149=(($148)|0)==-1;
      if ($149) { label = 49; break; } else { label = 50; break; }
    case 49: 
      $1=-1;
      label = 58; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 55; break;
    case 52: 
      var $154=$2;
      var $155=_file_printf($154, ((5270308)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $156=(($155)|0)==-1;
      if ($156) { label = 53; break; } else { label = 54; break; }
    case 53: 
      $1=-1;
      label = 58; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      $i=1;
      label = 57; break;
    case 57: 
      var $162=$i;
      $1=$162;
      label = 58; break;
    case 58: 
      var $164=$1;
      STACKTOP = __stackBase__;
      return $164;
    default: assert(0, "bad label: " + label);
  }
}
_file_trycdf["X"]=1;

function _cdf_file_summary_info($ms, $h, $sst) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $si=__stackBase__;
      var $info=(__stackBase__)+(28);
      var $count=(__stackBase__)+(32);
      var $m;
      $2=$ms;
      $3=$h;
      $4=$sst;
      var $5=$4;
      var $6=$3;
      var $7=_cdf_unpack_summary_info($5, $6, $si, $info, $count);
      var $8=(($7)|0)==-1;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 24; break;
    case 4: 
      var $11=$2;
      var $12=(($11+32)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 & 1040;
      var $15=(($14)|0)==0;
      if ($15) { label = 5; break; } else { label = 20; break; }
    case 5: 
      var $17=$2;
      var $18=_file_printf($17, ((5270860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $19=(($18)|0)==-1;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 24; break;
    case 7: 
      var $22=$2;
      var $23=(($si)|0);
      var $24=HEAP16[(($23)>>1)];
      var $25=(($24)&65535);
      var $26=(($25)|0)==65534;
      var $27=$26 ? (((5269736)|0)) : (((5269508)|0));
      var $28=_file_printf($22, ((5270036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$27,tempInt));
      var $29=(($28)|0)==-1;
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-2;
      label = 24; break;
    case 9: 
      var $32=(($si+6)|0);
      var $33=HEAP16[(($32)>>1)];
      var $34=(($33)&65535);
      if ((($34)|0) == 2) {
        label = 10; break;
      }
      else if ((($34)|0) == 1) {
        label = 13; break;
      }
      else {
      label = 16; break;
      }
      
    case 10: 
      var $36=$2;
      var $37=(($si+4)|0);
      var $38=HEAP16[(($37)>>1)];
      var $39=(($38)&65535);
      var $40=$39 & 255;
      var $41=(($si+4)|0);
      var $42=HEAP16[(($41)>>1)];
      var $43=(($42)&65535);
      var $44=$43 >>> 8;
      var $45=_file_printf($36, ((5269108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$40,HEAP32[(((tempInt)+(4))>>2)]=$44,tempInt));
      var $46=(($45)|0)==-1;
      if ($46) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=-2;
      label = 24; break;
    case 12: 
      label = 19; break;
    case 13: 
      var $50=$2;
      var $51=(($si+4)|0);
      var $52=HEAP16[(($51)>>1)];
      var $53=(($52)&65535);
      var $54=$53 >>> 8;
      var $55=(($si+4)|0);
      var $56=HEAP16[(($55)>>1)];
      var $57=(($56)&65535);
      var $58=$57 & 255;
      var $59=_file_printf($50, ((5268872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$54,HEAP32[(((tempInt)+(4))>>2)]=$58,tempInt));
      var $60=(($59)|0)==-1;
      if ($60) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=-2;
      label = 24; break;
    case 15: 
      label = 19; break;
    case 16: 
      var $64=$2;
      var $65=(($si+6)|0);
      var $66=HEAP16[(($65)>>1)];
      var $67=(($66)&65535);
      var $68=(($si+4)|0);
      var $69=HEAP16[(($68)>>1)];
      var $70=(($69)&65535);
      var $71=$70 & 255;
      var $72=(($si+4)|0);
      var $73=HEAP16[(($72)>>1)];
      var $74=(($73)&65535);
      var $75=$74 >>> 8;
      var $76=_file_printf($64, ((5268592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$67,HEAP32[(((tempInt)+(4))>>2)]=$71,HEAP32[(((tempInt)+(8))>>2)]=$75,tempInt));
      var $77=(($76)|0)==-1;
      if ($77) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $1=-2;
      label = 24; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $82=$2;
      var $83=HEAP32[(($info)>>2)];
      var $84=HEAP32[(($count)>>2)];
      var $85=_cdf_file_property_info($82, $83, $84);
      $m=$85;
      var $86=HEAP32[(($info)>>2)];
      var $87=$86;
      _free($87);
      var $88=$m;
      var $89=(($88)|0)==-1;
      if ($89) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $94 = -2;label = 23; break;
    case 22: 
      var $92=$m;
      var $94 = $92;label = 23; break;
    case 23: 
      var $94;
      $1=$94;
      label = 24; break;
    case 24: 
      var $96=$1;
      STACKTOP = __stackBase__;
      return $96;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_file_summary_info["X"]=1;

function _strlcpy($dst, $src, $siz) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $d;
      var $s;
      var $n;
      $1=$dst;
      $2=$src;
      $3=$siz;
      var $4=$1;
      $d=$4;
      var $5=$2;
      $s=$5;
      var $6=$3;
      $n=$6;
      var $7=$n;
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $10=$n;
      var $11=((($10)-(1))|0);
      $n=$11;
      var $12=(($11)|0)!=0;
      if ($12) { label = 4; break; } else { label = 10; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $15=$s;
      var $16=(($15+1)|0);
      $s=$16;
      var $17=HEAP8[($15)];
      var $18=$d;
      var $19=(($18+1)|0);
      $d=$19;
      HEAP8[($18)]=$17;
      var $20=(($17 << 24) >> 24);
      var $21=(($20)|0)==0;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$n;
      var $26=((($25)-(1))|0);
      $n=$26;
      var $27=(($26)|0)!=0;
      if ($27) { label = 5; break; } else { label = 9; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $30=$n;
      var $31=(($30)|0)==0;
      if ($31) { label = 11; break; } else { label = 17; break; }
    case 11: 
      var $33=$3;
      var $34=(($33)|0)!=0;
      if ($34) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $36=$d;
      HEAP8[($36)]=0;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $39=$s;
      var $40=(($39+1)|0);
      $s=$40;
      var $41=HEAP8[($39)];
      var $42=(($41 << 24) >> 24)!=0;
      if ($42) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $46=$s;
      var $47=$2;
      var $48=$46;
      var $49=$47;
      var $50=((($48)-($49))|0);
      var $51=((($50)-(1))|0);

      return $51;
    default: assert(0, "bad label: " + label);
  }
}
_strlcpy["X"]=1;

function _cdf_file_property_info($ms, $info, $count) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1168)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $tp=__stackBase__;
      var $ts=(__stackBase__)+(8);
      var $buf=(__stackBase__)+(16);
      var $str;
      var $s;
      var $len;
      var $vbuf=(__stackBase__)+(80);
      var $j;
      var $k;
      var $tbuf=(__stackBase__)+(1104);
      var $c;
      var $ec;
      $2=$ms;
      $3=$info;
      $4=$count;
      $str=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $6=$i;
      var $7=$4;
      var $8=(($6)>>>0) < (($7)>>>0);
      if ($8) { label = 4; break; } else { label = 81; break; }
    case 4: 
      var $10=(($buf)|0);
      var $11=$i;
      var $12=$3;
      var $13=(($12+($11<<4))|0);
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_cdf_print_property_name($10, 64, $15);
      var $17=$i;
      var $18=$3;
      var $19=(($18+($17<<4))|0);
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      if ((($21)|0) == 1) {
        label = 5; break;
      }
      else if ((($21)|0) == 2) {
        label = 6; break;
      }
      else if ((($21)|0) == 3) {
        label = 10; break;
      }
      else if ((($21)|0) == 19) {
        label = 14; break;
      }
      else if ((($21)|0) == 4) {
        label = 18; break;
      }
      else if ((($21)|0) == 5) {
        label = 22; break;
      }
      else if ((($21)|0) == 30 || (($21)|0) == 31) {
        label = 26; break;
      }
      else if ((($21)|0) == 64) {
        label = 63; break;
      }
      else if ((($21)|0) == 71) {
        label = 77; break;
      }
      else {
      label = 78; break;
      }
      
    case 5: 
      label = 79; break;
    case 6: 
      var $24=$2;
      var $25=(($24+32)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & 1040;
      var $28=(($27)|0)==0;
      if ($28) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $30=$2;
      var $31=(($buf)|0);
      var $32=$i;
      var $33=$3;
      var $34=(($33+($32<<4))|0);
      var $35=(($34+8)|0);
      var $36=$35;
      var $37=HEAP16[(($36)>>1)];
      var $38=(($37 << 16) >> 16);
      var $39=_file_printf($30, ((5268384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$31,HEAP32[(((tempInt)+(4))>>2)]=$38,tempInt));
      var $40=(($39)|0)==-1;
      if ($40) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 88; break;
    case 9: 
      label = 79; break;
    case 10: 
      var $44=$2;
      var $45=(($44+32)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & 1040;
      var $48=(($47)|0)==0;
      if ($48) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $50=$2;
      var $51=(($buf)|0);
      var $52=$i;
      var $53=$3;
      var $54=(($53+($52<<4))|0);
      var $55=(($54+8)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=_file_printf($50, ((5268172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$51,HEAP32[(((tempInt)+(4))>>2)]=$57,tempInt));
      var $59=(($58)|0)==-1;
      if ($59) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=-1;
      label = 88; break;
    case 13: 
      label = 79; break;
    case 14: 
      var $63=$2;
      var $64=(($63+32)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65 & 1040;
      var $67=(($66)|0)==0;
      if ($67) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $69=$2;
      var $70=(($buf)|0);
      var $71=$i;
      var $72=$3;
      var $73=(($72+($71<<4))|0);
      var $74=(($73+8)|0);
      var $75=$74;
      var $76=HEAP32[(($75)>>2)];
      var $77=_file_printf($69, ((5268036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$70,HEAP32[(((tempInt)+(4))>>2)]=$76,tempInt));
      var $78=(($77)|0)==-1;
      if ($78) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $1=-1;
      label = 88; break;
    case 17: 
      label = 79; break;
    case 18: 
      var $82=$2;
      var $83=(($82+32)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 & 1040;
      var $86=(($85)|0)==0;
      if ($86) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $88=$2;
      var $89=(($buf)|0);
      var $90=$i;
      var $91=$3;
      var $92=(($91+($90<<4))|0);
      var $93=(($92+8)|0);
      var $94=$93;
      var $95=HEAPF32[(($94)>>2)];
      var $96=$95;
      var $97=_file_printf($88, ((5267840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$89,(HEAPF64[(tempDoublePtr)>>3]=$96,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $98=(($97)|0)==-1;
      if ($98) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=-1;
      label = 88; break;
    case 21: 
      label = 79; break;
    case 22: 
      var $102=$2;
      var $103=(($102+32)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 & 1040;
      var $106=(($105)|0)==0;
      if ($106) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $108=$2;
      var $109=(($buf)|0);
      var $110=$i;
      var $111=$3;
      var $112=(($111+($110<<4))|0);
      var $113=(($112+8)|0);
      var $114=$113;
      var $115=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($114)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($114)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $116=_file_printf($108, ((5267840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$109,(HEAPF64[(tempDoublePtr)>>3]=$115,HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((((tempInt)+(4))+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      var $117=(($116)|0)==-1;
      if ($117) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=-1;
      label = 88; break;
    case 25: 
      label = 79; break;
    case 26: 
      var $121=$i;
      var $122=$3;
      var $123=(($122+($121<<4))|0);
      var $124=(($123+8)|0);
      var $125=$124;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      $len=$127;
      var $128=$len;
      var $129=(($128)|0) > 1;
      if ($129) { label = 27; break; } else { label = 62; break; }
    case 27: 
      $k=1;
      var $131=$i;
      var $132=$3;
      var $133=(($132+($131<<4))|0);
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|0)==31;
      if ($136) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $138=$k;
      var $139=((($138)+(1))|0);
      $k=$139;
      label = 29; break;
    case 29: 
      var $141=$i;
      var $142=$3;
      var $143=(($142+($141<<4))|0);
      var $144=(($143+8)|0);
      var $145=$144;
      var $146=(($145+4)|0);
      var $147=HEAP32[(($146)>>2)];
      $s=$147;
      $j=0;
      label = 30; break;
    case 30: 
      var $149=$j;
      var $150=(($149)>>>0) < 1024;
      if ($150) { label = 31; break; } else { var $156 = 0;label = 32; break; }
    case 31: 
      var $152=$len;
      var $153=((($152)-(1))|0);
      $len=$153;
      var $154=(($152)|0)!=0;
      var $156 = $154;label = 32; break;
    case 32: 
      var $156;
      if ($156) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $158=$s;
      var $159=HEAP8[($158)];
      var $160=(($159 << 24) >> 24);
      var $161=(($160)|0)==0;
      if ($161) { label = 34; break; } else { label = 35; break; }
    case 34: 
      label = 39; break;
    case 35: 
      var $164=$s;
      var $165=HEAP8[($164)];
      var $166=(($165)&255);
      var $167=_isprint($166);
      var $168=(($167)|0)!=0;
      if ($168) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $170=$s;
      var $171=HEAP8[($170)];
      var $172=$j;
      var $173=(($vbuf+$172)|0);
      HEAP8[($173)]=$171;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $176=$j;
      var $177=((($176)+(1))|0);
      $j=$177;
      var $178=$k;
      var $179=$s;
      var $180=(($179+$178)|0);
      $s=$180;
      label = 30; break;
    case 39: 
      var $182=$j;
      var $183=(($182)|0)==1024;
      if ($183) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $185=$j;
      var $186=((($185)-(1))|0);
      $j=$186;
      label = 41; break;
    case 41: 
      var $188=$j;
      var $189=(($vbuf+$188)|0);
      HEAP8[($189)]=0;
      var $190=$2;
      var $191=(($190+32)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=$192 & 1040;
      var $194=(($193)|0)==0;
      if ($194) { label = 42; break; } else { label = 47; break; }
    case 42: 
      var $196=(($vbuf)|0);
      var $197=HEAP8[($196)];
      var $198=(($197 << 24) >> 24)!=0;
      if ($198) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $200=$2;
      var $201=(($buf)|0);
      var $202=(($vbuf)|0);
      var $203=_file_printf($200, ((5267688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$201,HEAP32[(((tempInt)+(4))>>2)]=$202,tempInt));
      var $204=(($203)|0)==-1;
      if ($204) { label = 44; break; } else { label = 45; break; }
    case 44: 
      $1=-1;
      label = 88; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 61; break;
    case 47: 
      var $209=$i;
      var $210=$3;
      var $211=(($210+($209<<4))|0);
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213)|0)==18;
      if ($214) { label = 48; break; } else { label = 60; break; }
    case 48: 
      var $216=(($vbuf)|0);
      var $217=_strstr($216, ((5267524)|0));
      var $218=(($217)|0)!=0;
      if ($218) { label = 49; break; } else { label = 50; break; }
    case 49: 
      $str=((5272396)|0);
      label = 59; break;
    case 50: 
      var $221=(($vbuf)|0);
      var $222=_strstr($221, ((5267388)|0));
      var $223=(($222)|0)!=0;
      if ($223) { label = 51; break; } else { label = 52; break; }
    case 51: 
      $str=((5267216)|0);
      label = 58; break;
    case 52: 
      var $226=(($vbuf)|0);
      var $227=_strstr($226, ((5266976)|0));
      var $228=(($227)|0)!=0;
      if ($228) { label = 53; break; } else { label = 54; break; }
    case 53: 
      $str=((5271448)|0);
      label = 57; break;
    case 54: 
      var $231=(($vbuf)|0);
      var $232=_strstr($231, ((5266832)|0));
      var $233=(($232)|0)!=0;
      if ($233) { label = 55; break; } else { label = 56; break; }
    case 55: 
      $str=((5266668)|0);
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 79; break;
    case 63: 
      var $243=$i;
      var $244=$3;
      var $245=(($244+($243<<4))|0);
      var $246=(($245+8)|0);
      var $247=$246;
      var $st$5$0=(($247)|0);
      var $248$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($247+4)|0);
      var $248$1=HEAP32[(($st$5$1)>>2)];
      var $st$9$0=(($tp)|0);
      HEAP32[(($st$9$0)>>2)]=$248$0;
      var $st$9$1=(($tp+4)|0);
      HEAP32[(($st$9$1)>>2)]=$248$1;
      var $st$13$0=(($tp)|0);
      var $249$0=HEAP32[(($st$13$0)>>2)];
      var $st$13$1=(($tp+4)|0);
      var $249$1=HEAP32[(($st$13$1)>>2)];
      var $$etemp$0$0=0;
      var $$etemp$0$1=0;
      var $250=$249$0 != $$etemp$0$0 || $249$1 != $$etemp$0$1;
      if ($250) { label = 64; break; } else { label = 76; break; }
    case 64: 
      var $st$0$0=(($tp)|0);
      var $252$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $252$1=HEAP32[(($st$0$1)>>2)];
      var $$etemp$1$0=-1530494976;
      var $$etemp$1$1=232830;
      var $253=($252$1|0) < ($$etemp$1$1|0) || (($252$1|0) == ($$etemp$1$1|0) && ($252$0>>>0) <  ($$etemp$1$0>>>0));
      if ($253) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $255=(($tbuf)|0);
      var $st$1$0=(($tp)|0);
      var $256$0=HEAP32[(($st$1$0)>>2)];
      var $st$1$1=(($tp+4)|0);
      var $256$1=HEAP32[(($st$1$1)>>2)];
      var $257=_cdf_print_elapsed_time($255, 64, $256$0, $256$1);
      var $258=$2;
      var $259=(($258+32)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$260 & 1040;
      var $262=(($261)|0)==0;
      if ($262) { label = 66; break; } else { label = 68; break; }
    case 66: 
      var $264=$2;
      var $265=(($buf)|0);
      var $266=(($tbuf)|0);
      var $267=_file_printf($264, ((5267688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$265,HEAP32[(((tempInt)+(4))>>2)]=$266,tempInt));
      var $268=(($267)|0)==-1;
      if ($268) { label = 67; break; } else { label = 68; break; }
    case 67: 
      $1=-1;
      label = 88; break;
    case 68: 
      label = 75; break;
    case 69: 
      var $st$0$0=(($tp)|0);
      var $272$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($tp+4)|0);
      var $272$1=HEAP32[(($st$0$1)>>2)];
      var $273=_cdf_timestamp_to_timespec($ts, $272$0, $272$1);
      var $274=(($ts)|0);
      var $275=(($tbuf)|0);
      var $276=_cdf_ctime($274, $275);
      $c=$276;
      var $277=$c;
      var $278=_strchr($277, 10);
      $ec=$278;
      var $279=(($278)|0)!=0;
      if ($279) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $281=$ec;
      HEAP8[($281)]=0;
      label = 71; break;
    case 71: 
      var $283=$2;
      var $284=(($283+32)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$285 & 1040;
      var $287=(($286)|0)==0;
      if ($287) { label = 72; break; } else { label = 74; break; }
    case 72: 
      var $289=$2;
      var $290=(($buf)|0);
      var $291=$c;
      var $292=_file_printf($289, ((5267688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$290,HEAP32[(((tempInt)+(4))>>2)]=$291,tempInt));
      var $293=(($292)|0)==-1;
      if ($293) { label = 73; break; } else { label = 74; break; }
    case 73: 
      $1=-1;
      label = 88; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 79; break;
    case 77: 
      label = 79; break;
    case 78: 
      $1=-1;
      label = 88; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $302=$i;
      var $303=((($302)+(1))|0);
      $i=$303;
      label = 3; break;
    case 81: 
      var $305=$2;
      var $306=(($305+32)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=$307 & 1040;
      var $309=(($308)|0)==0;
      if ($309) { label = 87; break; } else { label = 82; break; }
    case 82: 
      var $311=$str;
      var $312=(($311)|0)==0;
      if ($312) { label = 83; break; } else { label = 84; break; }
    case 83: 
      $1=0;
      label = 88; break;
    case 84: 
      var $315=$2;
      var $316=$str;
      var $317=_file_printf($315, ((5271180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$316,tempInt));
      var $318=(($317)|0)==-1;
      if ($318) { label = 85; break; } else { label = 86; break; }
    case 85: 
      $1=-1;
      label = 88; break;
    case 86: 
      label = 87; break;
    case 87: 
      $1=1;
      label = 88; break;
    case 88: 
      var $323=$1;
      STACKTOP = __stackBase__;
      return $323;
    default: assert(0, "bad label: " + label);
  }
}
_cdf_file_property_info["X"]=1;

function _strlcat($dst, $src, $siz) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $d;
      var $s;
      var $n;
      var $dlen;
      $2=$dst;
      $3=$src;
      $4=$siz;
      var $5=$2;
      $d=$5;
      var $6=$3;
      $s=$6;
      var $7=$4;
      $n=$7;
      label = 3; break;
    case 3: 
      var $9=$n;
      var $10=((($9)-(1))|0);
      $n=$10;
      var $11=(($9)|0)!=0;
      if ($11) { label = 4; break; } else { var $18 = 0;label = 5; break; }
    case 4: 
      var $13=$d;
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $16=(($15)|0)!=0;
      var $18 = $16;label = 5; break;
    case 5: 
      var $18;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$d;
      var $21=(($20+1)|0);
      $d=$21;
      label = 3; break;
    case 7: 
      var $23=$d;
      var $24=$2;
      var $25=$23;
      var $26=$24;
      var $27=((($25)-($26))|0);
      $dlen=$27;
      var $28=$4;
      var $29=$dlen;
      var $30=((($28)-($29))|0);
      $n=$30;
      var $31=$n;
      var $32=(($31)|0)==0;
      if ($32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $34=$dlen;
      var $35=$s;
      var $36=_strlen($35);
      var $37=((($34)+($36))|0);
      $1=$37;
      label = 15; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $40=$s;
      var $41=HEAP8[($40)];
      var $42=(($41 << 24) >> 24);
      var $43=(($42)|0)!=0;
      if ($43) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $45=$n;
      var $46=(($45)|0)!=1;
      if ($46) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $48=$s;
      var $49=HEAP8[($48)];
      var $50=$d;
      var $51=(($50+1)|0);
      $d=$51;
      HEAP8[($50)]=$49;
      var $52=$n;
      var $53=((($52)-(1))|0);
      $n=$53;
      label = 13; break;
    case 13: 
      var $55=$s;
      var $56=(($55+1)|0);
      $s=$56;
      label = 10; break;
    case 14: 
      var $58=$d;
      HEAP8[($58)]=0;
      var $59=$dlen;
      var $60=$s;
      var $61=$3;
      var $62=$60;
      var $63=$61;
      var $64=((($62)-($63))|0);
      var $65=((($59)+($64))|0);
      $1=$65;
      label = 15; break;
    case 15: 
      var $67=$1;

      return $67;
    default: assert(0, "bad label: " + label);
  }
}
_strlcat["X"]=1;

function _getopt_internal($nargc, $nargv, $options) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oli;
      var $optchar;
      $2=$nargc;
      $3=$nargv;
      $4=$options;
      var $5=$3;
      var $6=(($5)|0)!=0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5272808)|0), 185, ((5274004)|0), ((5272728)|0));
      label = 5; break;
    case 5: 
      var $10=$4;
      var $11=(($10)|0)!=0;
      if ($11) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5272808)|0), 186, ((5274004)|0), ((5269284)|0));
      label = 8; break;
    case 8: 
      HEAP32[((5246368)>>2)]=0;
      var $15=HEAP32[((5246360)>>2)];
      var $16=(($15)|0)==0;
      if ($16) { label = 9; break; } else { label = 10; break; }
    case 9: 
      HEAP32[((5246360)>>2)]=1;
      label = 10; break;
    case 10: 
      var $19=HEAP32[((5246352)>>2)];
      var $20=(($19)|0)!=0;
      if ($20) { label = 11; break; } else { label = 12; break; }
    case 11: 
      HEAP32[((5246476)>>2)]=-1;
      HEAP32[((5246472)>>2)]=-1;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $24=HEAP32[((5246352)>>2)];
      var $25=(($24)|0)!=0;
      if ($25) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $27=HEAP32[((5246320)>>2)];
      var $28=HEAP8[($27)];
      var $29=(($28 << 24) >> 24)!=0;
      if ($29) { label = 44; break; } else { label = 15; break; }
    case 15: 
      HEAP32[((5246352)>>2)]=0;
      var $31=HEAP32[((5246360)>>2)];
      var $32=$2;
      var $33=(($31)|0) >= (($32)|0);
      if ($33) { label = 16; break; } else { label = 22; break; }
    case 16: 
      HEAP32[((5246320)>>2)]=((5266112)|0);
      var $35=HEAP32[((5246476)>>2)];
      var $36=(($35)|0)!=-1;
      if ($36) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $38=HEAP32[((5246472)>>2)];
      var $39=HEAP32[((5246476)>>2)];
      var $40=HEAP32[((5246360)>>2)];
      var $41=$3;
      _permute_args($38, $39, $40, $41);
      var $42=HEAP32[((5246476)>>2)];
      var $43=HEAP32[((5246472)>>2)];
      var $44=((($42)-($43))|0);
      var $45=HEAP32[((5246360)>>2)];
      var $46=((($45)-($44))|0);
      HEAP32[((5246360)>>2)]=$46;
      label = 21; break;
    case 18: 
      var $48=HEAP32[((5246472)>>2)];
      var $49=(($48)|0)!=-1;
      if ($49) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $51=HEAP32[((5246472)>>2)];
      HEAP32[((5246360)>>2)]=$51;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      HEAP32[((5246476)>>2)]=-1;
      HEAP32[((5246472)>>2)]=-1;
      $1=-1;
      label = 99; break;
    case 22: 
      var $55=HEAP32[((5246360)>>2)];
      var $56=$3;
      var $57=(($56+($55<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      HEAP32[((5246320)>>2)]=$58;
      var $59=HEAP8[($58)];
      var $60=(($59 << 24) >> 24);
      var $61=(($60)|0)!=45;
      if ($61) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $63=HEAP32[((5246320)>>2)];
      var $64=(($63+1)|0);
      var $65=HEAP8[($64)];
      var $66=(($65 << 24) >> 24);
      var $67=(($66)|0)==0;
      if ($67) { label = 24; break; } else { label = 37; break; }
    case 24: 
      HEAP32[((5246320)>>2)]=((5266112)|0);
      var $69=_getenv(((5265040)|0));
      var $70=(($69)|0)!=0;
      if ($70) { label = 27; break; } else { label = 25; break; }
    case 25: 
      var $72=$4;
      var $73=HEAP8[($72)];
      var $74=(($73 << 24) >> 24);
      var $75=(($74)|0)==45;
      if ($75) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $77=HEAP32[((5246360)>>2)];
      var $78=((($77)+(1))|0);
      HEAP32[((5246360)>>2)]=$78;
      var $79=$3;
      var $80=(($79+($77<<2))|0);
      var $81=HEAP32[(($80)>>2)];
      HEAP32[((5246368)>>2)]=$81;
      $1=1;
      label = 99; break;
    case 27: 
      var $83=_getenv(((5265040)|0));
      var $84=(($83)|0)!=0;
      if ($84) { label = 30; break; } else { label = 28; break; }
    case 28: 
      var $86=$4;
      var $87=HEAP8[($86)];
      var $88=(($87 << 24) >> 24);
      var $89=(($88)|0)==45;
      if ($89) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $91=$4;
      var $92=HEAP8[($91)];
      var $93=(($92 << 24) >> 24);
      var $94=(($93)|0)==43;
      if ($94) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $1=-1;
      label = 99; break;
    case 31: 
      var $97=HEAP32[((5246472)>>2)];
      var $98=(($97)|0)==-1;
      if ($98) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $100=HEAP32[((5246360)>>2)];
      HEAP32[((5246472)>>2)]=$100;
      label = 36; break;
    case 33: 
      var $102=HEAP32[((5246476)>>2)];
      var $103=(($102)|0)!=-1;
      if ($103) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $105=HEAP32[((5246472)>>2)];
      var $106=HEAP32[((5246476)>>2)];
      var $107=HEAP32[((5246360)>>2)];
      var $108=$3;
      _permute_args($105, $106, $107, $108);
      var $109=HEAP32[((5246360)>>2)];
      var $110=HEAP32[((5246476)>>2)];
      var $111=HEAP32[((5246472)>>2)];
      var $112=((($110)-($111))|0);
      var $113=((($109)-($112))|0);
      HEAP32[((5246472)>>2)]=$113;
      HEAP32[((5246476)>>2)]=-1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $116=HEAP32[((5246360)>>2)];
      var $117=((($116)+(1))|0);
      HEAP32[((5246360)>>2)]=$117;
      label = 13; break;
    case 37: 
      var $119=HEAP32[((5246472)>>2)];
      var $120=(($119)|0)!=-1;
      if ($120) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $122=HEAP32[((5246476)>>2)];
      var $123=(($122)|0)==-1;
      if ($123) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $125=HEAP32[((5246360)>>2)];
      HEAP32[((5246476)>>2)]=$125;
      label = 40; break;
    case 40: 
      var $127=HEAP32[((5246320)>>2)];
      var $128=(($127+1)|0);
      var $129=HEAP8[($128)];
      var $130=(($129 << 24) >> 24);
      var $131=(($130)|0)!=0;
      if ($131) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $133=HEAP32[((5246320)>>2)];
      var $134=(($133+1)|0);
      HEAP32[((5246320)>>2)]=$134;
      var $135=HEAP8[($134)];
      var $136=(($135 << 24) >> 24);
      var $137=(($136)|0)==45;
      if ($137) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $139=HEAP32[((5246320)>>2)];
      var $140=(($139+1)|0);
      HEAP32[((5246320)>>2)]=$140;
      $1=-2;
      label = 99; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $143=HEAP32[((5246320)>>2)];
      var $144=(($143+1)|0);
      HEAP32[((5246320)>>2)]=$144;
      var $145=HEAP8[($143)];
      var $146=(($145 << 24) >> 24);
      $optchar=$146;
      var $147=(($146)|0)==58;
      if ($147) { label = 48; break; } else { label = 45; break; }
    case 45: 
      var $149=$4;
      var $150=$4;
      var $151=HEAP8[($150)];
      var $152=(($151 << 24) >> 24);
      var $153=(($152)|0)==45;
      if ($153) { var $160 = 1;label = 47; break; } else { label = 46; break; }
    case 46: 
      var $155=$4;
      var $156=HEAP8[($155)];
      var $157=(($156 << 24) >> 24);
      var $158=(($157)|0)==43;
      var $160 = $158;label = 47; break;
    case 47: 
      var $160;
      var $161=$160 ? 1 : 0;
      var $162=(($149+$161)|0);
      var $163=$optchar;
      var $164=_strchr($162, $163);
      $oli=$164;
      var $165=(($164)|0)==0;
      if ($165) { label = 48; break; } else { label = 57; break; }
    case 48: 
      var $167=HEAP32[((5246320)>>2)];
      var $168=HEAP8[($167)];
      var $169=(($168 << 24) >> 24)!=0;
      if ($169) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $171=HEAP32[((5246360)>>2)];
      var $172=((($171)+(1))|0);
      HEAP32[((5246360)>>2)]=$172;
      label = 50; break;
    case 50: 
      var $174=HEAP32[((5246364)>>2)];
      var $175=(($174)|0)!=0;
      if ($175) { label = 51; break; } else { label = 56; break; }
    case 51: 
      var $177=$4;
      var $178=HEAP8[($177)];
      var $179=(($178 << 24) >> 24);
      var $180=(($179)|0)!=58;
      if ($180) { label = 55; break; } else { label = 52; break; }
    case 52: 
      var $182=$4;
      var $183=HEAP8[($182)];
      var $184=(($183 << 24) >> 24);
      var $185=(($184)|0)==45;
      if ($185) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $187=$4;
      var $188=HEAP8[($187)];
      var $189=(($188 << 24) >> 24);
      var $190=(($189)|0)==43;
      if ($190) { label = 54; break; } else { label = 56; break; }
    case 54: 
      var $192=$4;
      var $193=(($192+1)|0);
      var $194=HEAP8[($193)];
      var $195=(($194 << 24) >> 24);
      var $196=(($195)|0)!=58;
      if ($196) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $198=$optchar;
      var $199=_printf(((5247428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$198,tempInt));
      label = 56; break;
    case 56: 
      var $201=$optchar;
      HEAP32[((5246356)>>2)]=$201;
      $1=63;
      label = 99; break;
    case 57: 
      var $203=$optchar;
      var $204=(($203)|0)==87;
      if ($204) { label = 58; break; } else { label = 75; break; }
    case 58: 
      var $206=$oli;
      var $207=(($206+1)|0);
      var $208=HEAP8[($207)];
      var $209=(($208 << 24) >> 24);
      var $210=(($209)|0)==59;
      if ($210) { label = 59; break; } else { label = 75; break; }
    case 59: 
      var $212=HEAP32[((5246320)>>2)];
      var $213=HEAP8[($212)];
      var $214=(($213 << 24) >> 24)!=0;
      if ($214) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $1=-2;
      label = 99; break;
    case 61: 
      var $217=HEAP32[((5246360)>>2)];
      var $218=((($217)+(1))|0);
      HEAP32[((5246360)>>2)]=$218;
      var $219=$2;
      var $220=(($218)|0) >= (($219)|0);
      if ($220) { label = 62; break; } else { label = 73; break; }
    case 62: 
      HEAP32[((5246320)>>2)]=((5266112)|0);
      var $222=HEAP32[((5246364)>>2)];
      var $223=(($222)|0)!=0;
      if ($223) { label = 63; break; } else { label = 68; break; }
    case 63: 
      var $225=$4;
      var $226=HEAP8[($225)];
      var $227=(($226 << 24) >> 24);
      var $228=(($227)|0)!=58;
      if ($228) { label = 67; break; } else { label = 64; break; }
    case 64: 
      var $230=$4;
      var $231=HEAP8[($230)];
      var $232=(($231 << 24) >> 24);
      var $233=(($232)|0)==45;
      if ($233) { label = 66; break; } else { label = 65; break; }
    case 65: 
      var $235=$4;
      var $236=HEAP8[($235)];
      var $237=(($236 << 24) >> 24);
      var $238=(($237)|0)==43;
      if ($238) { label = 66; break; } else { label = 68; break; }
    case 66: 
      var $240=$4;
      var $241=(($240+1)|0);
      var $242=HEAP8[($241)];
      var $243=(($242 << 24) >> 24);
      var $244=(($243)|0)!=58;
      if ($244) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $246=$optchar;
      var $247=_printf(((5245016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$246,tempInt));
      label = 68; break;
    case 68: 
      var $249=$optchar;
      HEAP32[((5246356)>>2)]=$249;
      var $250=$4;
      var $251=HEAP8[($250)];
      var $252=(($251 << 24) >> 24);
      var $253=(($252)|0)==45;
      if ($253) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $255=$4;
      var $256=HEAP8[($255)];
      var $257=(($256 << 24) >> 24);
      var $258=(($257)|0)==43;
      if ($258) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $260=$4;
      var $261=(($260+1)|0);
      var $262=HEAP8[($261)];
      var $263=(($262 << 24) >> 24);
      var $264=(($263)|0)==58;
      if ($264) { var $271 = 1;label = 72; break; } else { label = 71; break; }
    case 71: 
      var $266=$4;
      var $267=HEAP8[($266)];
      var $268=(($267 << 24) >> 24);
      var $269=(($268)|0)==58;
      var $271 = $269;label = 72; break;
    case 72: 
      var $271;
      var $272=$271 ? 58 : 63;
      $1=$272;
      label = 99; break;
    case 73: 
      var $274=HEAP32[((5246360)>>2)];
      var $275=$3;
      var $276=(($275+($274<<2))|0);
      var $277=HEAP32[(($276)>>2)];
      HEAP32[((5246320)>>2)]=$277;
      label = 74; break;
    case 74: 
      $1=-2;
      label = 99; break;
    case 75: 
      var $280=$oli;
      var $281=(($280+1)|0);
      $oli=$281;
      var $282=HEAP8[($281)];
      var $283=(($282 << 24) >> 24);
      var $284=(($283)|0)!=58;
      if ($284) { label = 76; break; } else { label = 79; break; }
    case 76: 
      var $286=HEAP32[((5246320)>>2)];
      var $287=HEAP8[($286)];
      var $288=(($287 << 24) >> 24)!=0;
      if ($288) { label = 78; break; } else { label = 77; break; }
    case 77: 
      var $290=HEAP32[((5246360)>>2)];
      var $291=((($290)+(1))|0);
      HEAP32[((5246360)>>2)]=$291;
      label = 78; break;
    case 78: 
      label = 98; break;
    case 79: 
      HEAP32[((5246368)>>2)]=0;
      var $294=HEAP32[((5246320)>>2)];
      var $295=HEAP8[($294)];
      var $296=(($295 << 24) >> 24)!=0;
      if ($296) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $298=HEAP32[((5246320)>>2)];
      HEAP32[((5246368)>>2)]=$298;
      label = 97; break;
    case 81: 
      var $300=$oli;
      var $301=(($300+1)|0);
      var $302=HEAP8[($301)];
      var $303=(($302 << 24) >> 24);
      var $304=(($303)|0)!=58;
      if ($304) { label = 82; break; } else { label = 96; break; }
    case 82: 
      var $306=HEAP32[((5246360)>>2)];
      var $307=((($306)+(1))|0);
      HEAP32[((5246360)>>2)]=$307;
      var $308=$2;
      var $309=(($307)|0) >= (($308)|0);
      if ($309) { label = 83; break; } else { label = 94; break; }
    case 83: 
      HEAP32[((5246320)>>2)]=((5266112)|0);
      var $311=HEAP32[((5246364)>>2)];
      var $312=(($311)|0)!=0;
      if ($312) { label = 84; break; } else { label = 89; break; }
    case 84: 
      var $314=$4;
      var $315=HEAP8[($314)];
      var $316=(($315 << 24) >> 24);
      var $317=(($316)|0)!=58;
      if ($317) { label = 88; break; } else { label = 85; break; }
    case 85: 
      var $319=$4;
      var $320=HEAP8[($319)];
      var $321=(($320 << 24) >> 24);
      var $322=(($321)|0)==45;
      if ($322) { label = 87; break; } else { label = 86; break; }
    case 86: 
      var $324=$4;
      var $325=HEAP8[($324)];
      var $326=(($325 << 24) >> 24);
      var $327=(($326)|0)==43;
      if ($327) { label = 87; break; } else { label = 89; break; }
    case 87: 
      var $329=$4;
      var $330=(($329+1)|0);
      var $331=HEAP8[($330)];
      var $332=(($331 << 24) >> 24);
      var $333=(($332)|0)!=58;
      if ($333) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $335=$optchar;
      var $336=_printf(((5245016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$335,tempInt));
      label = 89; break;
    case 89: 
      var $338=$optchar;
      HEAP32[((5246356)>>2)]=$338;
      var $339=$4;
      var $340=HEAP8[($339)];
      var $341=(($340 << 24) >> 24);
      var $342=(($341)|0)==45;
      if ($342) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $344=$4;
      var $345=HEAP8[($344)];
      var $346=(($345 << 24) >> 24);
      var $347=(($346)|0)==43;
      if ($347) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $349=$4;
      var $350=(($349+1)|0);
      var $351=HEAP8[($350)];
      var $352=(($351 << 24) >> 24);
      var $353=(($352)|0)==58;
      if ($353) { var $360 = 1;label = 93; break; } else { label = 92; break; }
    case 92: 
      var $355=$4;
      var $356=HEAP8[($355)];
      var $357=(($356 << 24) >> 24);
      var $358=(($357)|0)==58;
      var $360 = $358;label = 93; break;
    case 93: 
      var $360;
      var $361=$360 ? 58 : 63;
      $1=$361;
      label = 99; break;
    case 94: 
      var $363=HEAP32[((5246360)>>2)];
      var $364=$3;
      var $365=(($364+($363<<2))|0);
      var $366=HEAP32[(($365)>>2)];
      HEAP32[((5246368)>>2)]=$366;
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      HEAP32[((5246320)>>2)]=((5266112)|0);
      var $370=HEAP32[((5246360)>>2)];
      var $371=((($370)+(1))|0);
      HEAP32[((5246360)>>2)]=$371;
      label = 98; break;
    case 98: 
      var $373=$optchar;
      $1=$373;
      label = 99; break;
    case 99: 
      var $375=$1;
      STACKTOP = __stackBase__;
      return $375;
    default: assert(0, "bad label: " + label);
  }
}
_getopt_internal["X"]=1;

function _permute_args($panonopt_start, $panonopt_end, $opt_end, $nargv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cstart;
      var $cyclelen;
      var $i;
      var $j;
      var $ncycle;
      var $nnonopts;
      var $nopts;
      var $pos;
      var $swap;
      $1=$panonopt_start;
      $2=$panonopt_end;
      $3=$opt_end;
      $4=$nargv;
      var $5=$4;
      var $6=(($5)|0)!=0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5272808)|0), 146, ((5273956)|0), ((5272728)|0));
      label = 5; break;
    case 5: 
      var $10=$2;
      var $11=$1;
      var $12=((($10)-($11))|0);
      $nnonopts=$12;
      var $13=$3;
      var $14=$2;
      var $15=((($13)-($14))|0);
      $nopts=$15;
      var $16=$nnonopts;
      var $17=$nopts;
      var $18=_gcd($16, $17);
      $ncycle=$18;
      var $19=$3;
      var $20=$1;
      var $21=((($19)-($20))|0);
      var $22=$ncycle;
      var $23=((((($21)|0))/((($22)|0)))&-1);
      $cyclelen=$23;
      $i=0;
      label = 6; break;
    case 6: 
      var $25=$i;
      var $26=$ncycle;
      var $27=(($25)|0) < (($26)|0);
      if ($27) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $29=$2;
      var $30=$i;
      var $31=((($29)+($30))|0);
      $cstart=$31;
      var $32=$cstart;
      $pos=$32;
      $j=0;
      label = 8; break;
    case 8: 
      var $34=$j;
      var $35=$cyclelen;
      var $36=(($34)|0) < (($35)|0);
      if ($36) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $38=$pos;
      var $39=$2;
      var $40=(($38)|0) >= (($39)|0);
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $42=$nnonopts;
      var $43=$pos;
      var $44=((($43)-($42))|0);
      $pos=$44;
      label = 12; break;
    case 11: 
      var $46=$nopts;
      var $47=$pos;
      var $48=((($47)+($46))|0);
      $pos=$48;
      label = 12; break;
    case 12: 
      var $50=$pos;
      var $51=$4;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      $swap=$53;
      var $54=$cstart;
      var $55=$4;
      var $56=(($55+($54<<2))|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$pos;
      var $59=$4;
      var $60=(($59+($58<<2))|0);
      HEAP32[(($60)>>2)]=$57;
      var $61=$swap;
      var $62=$cstart;
      var $63=$4;
      var $64=(($63+($62<<2))|0);
      HEAP32[(($64)>>2)]=$61;
      label = 13; break;
    case 13: 
      var $66=$j;
      var $67=((($66)+(1))|0);
      $j=$67;
      label = 8; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $70=$i;
      var $71=((($70)+(1))|0);
      $i=$71;
      label = 6; break;
    case 16: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_permute_args["X"]=1;

function _gcd($a, $b) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $c;
      $1=$a;
      $2=$b;
      var $3=$1;
      var $4=$2;
      var $5=((($3)|0))%((($4)|0));
      $c=$5;
      label = 3; break;
    case 3: 
      var $7=$c;
      var $8=(($7)|0)!=0;
      if ($8) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$2;
      $1=$10;
      var $11=$c;
      $2=$11;
      var $12=$1;
      var $13=$2;
      var $14=((($12)|0))%((($13)|0));
      $c=$14;
      label = 3; break;
    case 5: 
      var $16=$2;

      return $16;
    default: assert(0, "bad label: " + label);
  }
}


function _getopt_long($nargc, $nargv, $options, $long_options, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $retval;
      var $current_argv;
      var $has_equal;
      var $current_argv_len;
      var $i;
      var $ambiguous;
      var $match;
      $2=$nargc;
      $3=$nargv;
      $4=$options;
      $5=$long_options;
      $6=$idx;
      var $7=$3;
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      ___assert_func(((5272808)|0), 370, ((5273992)|0), ((5272728)|0));
      label = 5; break;
    case 5: 
      var $12=$4;
      var $13=(($12)|0)!=0;
      if ($13) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      ___assert_func(((5272808)|0), 371, ((5273992)|0), ((5269284)|0));
      label = 8; break;
    case 8: 
      var $17=$5;
      var $18=(($17)|0)!=0;
      if ($18) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      ___assert_func(((5272808)|0), 372, ((5273992)|0), ((5267312)|0));
      label = 11; break;
    case 11: 
      var $22=$2;
      var $23=$3;
      var $24=$4;
      var $25=_getopt_internal($22, $23, $24);
      $retval=$25;
      var $26=$retval;
      var $27=(($26)|0)==-2;
      if ($27) { label = 12; break; } else { label = 97; break; }
    case 12: 
      var $29=HEAP32[((5246320)>>2)];
      $current_argv=$29;
      $match=-1;
      $ambiguous=0;
      var $30=HEAP32[((5246360)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[((5246360)>>2)]=$31;
      HEAP32[((5246320)>>2)]=((5266112)|0);
      var $32=$current_argv;
      var $33=HEAP8[($32)];
      var $34=(($33 << 24) >> 24);
      var $35=(($34)|0)==0;
      if ($35) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $37=HEAP32[((5246476)>>2)];
      var $38=(($37)|0)!=-1;
      if ($38) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $40=HEAP32[((5246472)>>2)];
      var $41=HEAP32[((5246476)>>2)];
      var $42=HEAP32[((5246360)>>2)];
      var $43=$3;
      _permute_args($40, $41, $42, $43);
      var $44=HEAP32[((5246476)>>2)];
      var $45=HEAP32[((5246472)>>2)];
      var $46=((($44)-($45))|0);
      var $47=HEAP32[((5246360)>>2)];
      var $48=((($47)-($46))|0);
      HEAP32[((5246360)>>2)]=$48;
      label = 15; break;
    case 15: 
      HEAP32[((5246476)>>2)]=-1;
      HEAP32[((5246472)>>2)]=-1;
      $1=-1;
      label = 98; break;
    case 16: 
      var $51=$current_argv;
      var $52=_strchr($51, 61);
      $has_equal=$52;
      var $53=(($52)|0)!=0;
      if ($53) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $55=$has_equal;
      var $56=$current_argv;
      var $57=$55;
      var $58=$56;
      var $59=((($57)-($58))|0);
      $current_argv_len=$59;
      var $60=$has_equal;
      var $61=(($60+1)|0);
      $has_equal=$61;
      label = 19; break;
    case 18: 
      var $63=$current_argv;
      var $64=_strlen($63);
      $current_argv_len=$64;
      label = 19; break;
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $67=$i;
      var $68=$5;
      var $69=(($68+($67<<4))|0);
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|0)!=0;
      if ($72) { label = 21; break; } else { label = 34; break; }
    case 21: 
      var $74=$current_argv;
      var $75=$i;
      var $76=$5;
      var $77=(($76+($75<<4))|0);
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$current_argv_len;
      var $81=_strncmp($74, $79, $80);
      var $82=(($81)|0)!=0;
      if ($82) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 33; break;
    case 23: 
      var $85=$i;
      var $86=$5;
      var $87=(($86+($85<<4))|0);
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=_strlen($89);
      var $91=$current_argv_len;
      var $92=(($90)|0)==(($91)|0);
      if ($92) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $94=$i;
      $match=$94;
      $ambiguous=0;
      label = 34; break;
    case 25: 
      var $96=$match;
      var $97=(($96)|0)==-1;
      if ($97) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $99=$i;
      $match=$99;
      label = 32; break;
    case 27: 
      var $101=$i;
      var $102=$5;
      var $103=(($102+($101<<4))|0);
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$match;
      var $107=$5;
      var $108=(($107+($106<<4))|0);
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($105)|0)==(($110)|0);
      if ($111) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $113=$i;
      var $114=$5;
      var $115=(($114+($113<<4))|0);
      var $116=(($115+8)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$match;
      var $119=$5;
      var $120=(($119+($118<<4))|0);
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($117)|0)==(($122)|0);
      if ($123) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $125=$i;
      var $126=$5;
      var $127=(($126+($125<<4))|0);
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$match;
      var $131=$5;
      var $132=(($131+($130<<4))|0);
      var $133=(($132+12)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($129)|0)==(($134)|0);
      if ($135) { label = 31; break; } else { label = 30; break; }
    case 30: 
      $ambiguous=1;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $140=$i;
      var $141=((($140)+(1))|0);
      $i=$141;
      label = 20; break;
    case 34: 
      var $143=$ambiguous;
      var $144=(($143)|0)!=0;
      if ($144) { label = 35; break; } else { label = 42; break; }
    case 35: 
      var $146=HEAP32[((5246364)>>2)];
      var $147=(($146)|0)!=0;
      if ($147) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $149=$4;
      var $150=HEAP8[($149)];
      var $151=(($150 << 24) >> 24);
      var $152=(($151)|0)!=58;
      if ($152) { label = 40; break; } else { label = 37; break; }
    case 37: 
      var $154=$4;
      var $155=HEAP8[($154)];
      var $156=(($155 << 24) >> 24);
      var $157=(($156)|0)==45;
      if ($157) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $159=$4;
      var $160=HEAP8[($159)];
      var $161=(($160 << 24) >> 24);
      var $162=(($161)|0)==43;
      if ($162) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $164=$4;
      var $165=(($164+1)|0);
      var $166=HEAP8[($165)];
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|0)!=58;
      if ($168) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $170=$current_argv_len;
      var $171=$current_argv;
      var $172=_printf(((5260352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$170,HEAP32[(((tempInt)+(4))>>2)]=$171,tempInt));
      label = 41; break;
    case 41: 
      HEAP32[((5246356)>>2)]=0;
      $1=63;
      label = 98; break;
    case 42: 
      var $175=$match;
      var $176=(($175)|0)!=-1;
      if ($176) { label = 43; break; } else { label = 84; break; }
    case 43: 
      var $178=$match;
      var $179=$5;
      var $180=(($179+($178<<4))|0);
      var $181=(($180+4)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|0)==0;
      if ($183) { label = 44; break; } else { label = 59; break; }
    case 44: 
      var $185=$has_equal;
      var $186=(($185)|0)!=0;
      if ($186) { label = 45; break; } else { label = 59; break; }
    case 45: 
      var $188=HEAP32[((5246364)>>2)];
      var $189=(($188)|0)!=0;
      if ($189) { label = 46; break; } else { label = 51; break; }
    case 46: 
      var $191=$4;
      var $192=HEAP8[($191)];
      var $193=(($192 << 24) >> 24);
      var $194=(($193)|0)!=58;
      if ($194) { label = 50; break; } else { label = 47; break; }
    case 47: 
      var $196=$4;
      var $197=HEAP8[($196)];
      var $198=(($197 << 24) >> 24);
      var $199=(($198)|0)==45;
      if ($199) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $201=$4;
      var $202=HEAP8[($201)];
      var $203=(($202 << 24) >> 24);
      var $204=(($203)|0)==43;
      if ($204) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $206=$4;
      var $207=(($206+1)|0);
      var $208=HEAP8[($207)];
      var $209=(($208 << 24) >> 24);
      var $210=(($209)|0)!=58;
      if ($210) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $212=$current_argv_len;
      var $213=$current_argv;
      var $214=_printf(((5246484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$212,HEAP32[(((tempInt)+(4))>>2)]=$213,tempInt));
      label = 51; break;
    case 51: 
      var $216=$match;
      var $217=$5;
      var $218=(($217+($216<<4))|0);
      var $219=(($218+8)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220)|0)==0;
      if ($221) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $223=$match;
      var $224=$5;
      var $225=(($224+($223<<4))|0);
      var $226=(($225+12)|0);
      var $227=HEAP32[(($226)>>2)];
      HEAP32[((5246356)>>2)]=$227;
      label = 54; break;
    case 53: 
      HEAP32[((5246356)>>2)]=0;
      label = 54; break;
    case 54: 
      var $230=$4;
      var $231=HEAP8[($230)];
      var $232=(($231 << 24) >> 24);
      var $233=(($232)|0)==45;
      if ($233) { label = 56; break; } else { label = 55; break; }
    case 55: 
      var $235=$4;
      var $236=HEAP8[($235)];
      var $237=(($236 << 24) >> 24);
      var $238=(($237)|0)==43;
      if ($238) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $240=$4;
      var $241=(($240+1)|0);
      var $242=HEAP8[($241)];
      var $243=(($242 << 24) >> 24);
      var $244=(($243)|0)==58;
      if ($244) { var $251 = 1;label = 58; break; } else { label = 57; break; }
    case 57: 
      var $246=$4;
      var $247=HEAP8[($246)];
      var $248=(($247 << 24) >> 24);
      var $249=(($248)|0)==58;
      var $251 = $249;label = 58; break;
    case 58: 
      var $251;
      var $252=$251 ? 58 : 63;
      $1=$252;
      label = 98; break;
    case 59: 
      var $254=$match;
      var $255=$5;
      var $256=(($255+($254<<4))|0);
      var $257=(($256+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258)|0)==1;
      if ($259) { label = 61; break; } else { label = 60; break; }
    case 60: 
      var $261=$match;
      var $262=$5;
      var $263=(($262+($261<<4))|0);
      var $264=(($263+4)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265)|0)==2;
      if ($266) { label = 61; break; } else { label = 67; break; }
    case 61: 
      var $268=$has_equal;
      var $269=(($268)|0)!=0;
      if ($269) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $271=$has_equal;
      HEAP32[((5246368)>>2)]=$271;
      label = 66; break;
    case 63: 
      var $273=$match;
      var $274=$5;
      var $275=(($274+($273<<4))|0);
      var $276=(($275+4)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=(($277)|0)==1;
      if ($278) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $280=HEAP32[((5246360)>>2)];
      var $281=((($280)+(1))|0);
      HEAP32[((5246360)>>2)]=$281;
      var $282=$3;
      var $283=(($282+($280<<2))|0);
      var $284=HEAP32[(($283)>>2)];
      HEAP32[((5246368)>>2)]=$284;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $288=$match;
      var $289=$5;
      var $290=(($289+($288<<4))|0);
      var $291=(($290+4)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=(($292)|0)==1;
      if ($293) { label = 68; break; } else { label = 83; break; }
    case 68: 
      var $295=HEAP32[((5246368)>>2)];
      var $296=(($295)|0)==0;
      if ($296) { label = 69; break; } else { label = 83; break; }
    case 69: 
      var $298=HEAP32[((5246364)>>2)];
      var $299=(($298)|0)!=0;
      if ($299) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $301=$4;
      var $302=HEAP8[($301)];
      var $303=(($302 << 24) >> 24);
      var $304=(($303)|0)!=58;
      if ($304) { label = 74; break; } else { label = 71; break; }
    case 71: 
      var $306=$4;
      var $307=HEAP8[($306)];
      var $308=(($307 << 24) >> 24);
      var $309=(($308)|0)==45;
      if ($309) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $311=$4;
      var $312=HEAP8[($311)];
      var $313=(($312 << 24) >> 24);
      var $314=(($313)|0)==43;
      if ($314) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $316=$4;
      var $317=(($316+1)|0);
      var $318=HEAP8[($317)];
      var $319=(($318 << 24) >> 24);
      var $320=(($319)|0)!=58;
      if ($320) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $322=$current_argv;
      var $323=_printf(((5244980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$322,tempInt));
      label = 75; break;
    case 75: 
      var $325=$match;
      var $326=$5;
      var $327=(($326+($325<<4))|0);
      var $328=(($327+8)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=(($329)|0)==0;
      if ($330) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $332=$match;
      var $333=$5;
      var $334=(($333+($332<<4))|0);
      var $335=(($334+12)|0);
      var $336=HEAP32[(($335)>>2)];
      HEAP32[((5246356)>>2)]=$336;
      label = 78; break;
    case 77: 
      HEAP32[((5246356)>>2)]=0;
      label = 78; break;
    case 78: 
      var $339=HEAP32[((5246360)>>2)];
      var $340=((($339)-(1))|0);
      HEAP32[((5246360)>>2)]=$340;
      var $341=$4;
      var $342=HEAP8[($341)];
      var $343=(($342 << 24) >> 24);
      var $344=(($343)|0)==45;
      if ($344) { label = 80; break; } else { label = 79; break; }
    case 79: 
      var $346=$4;
      var $347=HEAP8[($346)];
      var $348=(($347 << 24) >> 24);
      var $349=(($348)|0)==43;
      if ($349) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $351=$4;
      var $352=(($351+1)|0);
      var $353=HEAP8[($352)];
      var $354=(($353 << 24) >> 24);
      var $355=(($354)|0)==58;
      if ($355) { var $362 = 1;label = 82; break; } else { label = 81; break; }
    case 81: 
      var $357=$4;
      var $358=HEAP8[($357)];
      var $359=(($358 << 24) >> 24);
      var $360=(($359)|0)==58;
      var $362 = $360;label = 82; break;
    case 82: 
      var $362;
      var $363=$362 ? 58 : 63;
      $1=$363;
      label = 98; break;
    case 83: 
      label = 91; break;
    case 84: 
      var $366=HEAP32[((5246364)>>2)];
      var $367=(($366)|0)!=0;
      if ($367) { label = 85; break; } else { label = 90; break; }
    case 85: 
      var $369=$4;
      var $370=HEAP8[($369)];
      var $371=(($370 << 24) >> 24);
      var $372=(($371)|0)!=58;
      if ($372) { label = 89; break; } else { label = 86; break; }
    case 86: 
      var $374=$4;
      var $375=HEAP8[($374)];
      var $376=(($375 << 24) >> 24);
      var $377=(($376)|0)==45;
      if ($377) { label = 88; break; } else { label = 87; break; }
    case 87: 
      var $379=$4;
      var $380=HEAP8[($379)];
      var $381=(($380 << 24) >> 24);
      var $382=(($381)|0)==43;
      if ($382) { label = 88; break; } else { label = 90; break; }
    case 88: 
      var $384=$4;
      var $385=(($384+1)|0);
      var $386=HEAP8[($385)];
      var $387=(($386 << 24) >> 24);
      var $388=(($387)|0)!=58;
      if ($388) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $390=$current_argv;
      var $391=_printf(((5247404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$390,tempInt));
      label = 90; break;
    case 90: 
      HEAP32[((5246356)>>2)]=0;
      $1=63;
      label = 98; break;
    case 91: 
      var $394=$match;
      var $395=$5;
      var $396=(($395+($394<<4))|0);
      var $397=(($396+8)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=(($398)|0)!=0;
      if ($399) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $401=$match;
      var $402=$5;
      var $403=(($402+($401<<4))|0);
      var $404=(($403+12)|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=$match;
      var $407=$5;
      var $408=(($407+($406<<4))|0);
      var $409=(($408+8)|0);
      var $410=HEAP32[(($409)>>2)];
      HEAP32[(($410)>>2)]=$405;
      $retval=0;
      label = 94; break;
    case 93: 
      var $412=$match;
      var $413=$5;
      var $414=(($413+($412<<4))|0);
      var $415=(($414+12)|0);
      var $416=HEAP32[(($415)>>2)];
      $retval=$416;
      label = 94; break;
    case 94: 
      var $418=$6;
      var $419=(($418)|0)!=0;
      if ($419) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $421=$match;
      var $422=$6;
      HEAP32[(($422)>>2)]=$421;
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $425=$retval;
      $1=$425;
      label = 98; break;
    case 98: 
      var $427=$1;
      STACKTOP = __stackBase__;
      return $427;
    default: assert(0, "bad label: " + label);
  }
}
_getopt_long["X"]=1;

function _asprintf($ptr, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $vargs=__stackBase__;
  var $retval;
  $1=$ptr;
  $2=$fmt;
  var $3=$vargs;
  HEAP32[(($3)>>2)]=varrp;
  var $4=$1;
  var $5=$2;
  var $6=HEAP32[(($vargs)>>2)];
  var $7=_vasprintf($4, $5, $6);
  $retval=$7;
  var $8=$vargs;

  var $9=$retval;
  STACKTOP = __stackBase__;
  return $9;
}


function _vasprintf($ptr, $format_string, $vargs) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $s=(__stackBase__)+(4);
      var $retval;
      $2=$ptr;
      $3=$format_string;
      HEAP32[(($4)>>2)]=$vargs;
      var $5=$3;
      var $6=(($s)|0);
      HEAP32[(($6)>>2)]=$5;
      var $7=(($s+28)|0);
      var $8=$7;
      var $9=$4;
      _llvm_va_copy($8, $9);
      var $10=(($s+24)|0);
      HEAP32[(($10)>>2)]=2147483647;
      var $11=_core($s);
      $retval=$11;
      var $12=(($s+28)|0);
      var $13=$12;

      var $14=$retval;
      var $15=(($14)|0)==-1;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$2;
      HEAP32[(($17)>>2)]=0;
      $1=-1;
      label = 5; break;
    case 4: 
      var $19=(($s+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      HEAP32[(($21)>>2)]=$20;
      var $22=$retval;
      $1=$22;
      label = 5; break;
    case 5: 
      var $24=$1;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}


function _core($s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $len;
      var $save_len;
      var $dummy_base;
      $2=$s;
      var $3=$2;
      var $4=(($3+24)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0) <= 0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 25; break;
    case 4: 
      var $9=$2;
      var $10=(($9+24)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)-(1))|0);
      HEAP32[(($10)>>2)]=$12;
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0)==0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$2;
      var $19=(($18)|0);
      HEAP32[(($19)>>2)]=((5271888)|0);
      label = 6; break;
    case 6: 
      var $21=$2;
      var $22=(($21+4)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$2;
      var $24=(($23+12)|0);
      HEAP32[(($24)>>2)]=0;
      var $25=$2;
      var $26=(($25+16)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=$2;
      var $28=(($27+20)|0);
      HEAP32[(($28)>>2)]=0;
      var $29=$2;
      var $30=_realloc_buff($29, 0);
      var $31=(($30)|0)==-1;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-1;
      label = 25; break;
    case 8: 
      var $34=$2;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=(($37+8)|0);
      HEAP32[(($38)>>2)]=$36;
      label = 9; break;
    case 9: 
      var $40=$2;
      var $41=(($40)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=HEAP8[($42)];
      var $44=(($43 << 24) >> 24);
      var $45=(($44)|0)==0;
      if ($45) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $47=$2;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      HEAP8[($49)]=0;
      var $50=$2;
      var $51=(($50+16)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)+(1))|0);
      $len=$53;
      label = 16; break;
    case 11: 
      var $55=$2;
      var $56=_dispatch($55);
      var $57=(($56)|0)==-1;
      if ($57) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 24; break;
    case 13: 
      var $60=$2;
      var $61=(($60+16)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$2;
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($62)>>>0) >= (($65)>>>0);
      if ($66) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $68=$2;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$2;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      HEAP8[($74)]=0;
      var $75=$2;
      var $76=(($75+24)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)+(1))|0);
      $len=$78;
      label = 16; break;
    case 15: 
      label = 9; break;
    case 16: 
      var $81=$2;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      $dummy_base=$83;
      $save_len=0;
      var $84=$2;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($86+$89)|0);
      $dummy_base=$90;
      var $91=$2;
      var $92=(($91+16)|0);
      var $93=HEAP32[(($92)>>2)];
      $save_len=$93;
      label = 17; break;
    case 17: 
      var $95=$2;
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=HEAP8[($97)];
      var $99=(($98 << 24) >> 24);
      var $100=(($99)|0)!=0;
      if ($100) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $102=$2;
      var $103=(($102+16)|0);
      HEAP32[(($103)>>2)]=0;
      var $104=$dummy_base;
      var $105=$2;
      var $106=(($105+8)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$2;
      var $108=_dispatch($107);
      var $109=(($108)|0)==-1;
      if ($109) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 24; break;
    case 20: 
      label = 17; break;
    case 21: 
      var $113=$2;
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$save_len;
      var $117=((($116)+(1))|0);
      var $118=_realloc($115, $117);
      var $119=$2;
      var $120=(($119+4)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$2;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|0)==0;
      if ($124) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=-1;
      label = 25; break;
    case 23: 
      var $127=$2;
      var $128=(($127+20)|0);
      var $129=HEAP32[(($128)>>2)];
      $1=$129;
      label = 25; break;
    case 24: 
      var $131=$2;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      _free($133);
      $1=-1;
      label = 25; break;
    case 25: 
      var $135=$1;

      return $135;
    default: assert(0, "bad label: " + label);
  }
}
_core["X"]=1;

function _realloc_buff($s, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ptr;
      $2=$s;
      $3=$len;
      var $4=$3;
      var $5=((($4)+(1024))|0);
      var $6=$2;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($5)+($8))|0);
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)>>>0) > (($12)>>>0);
      if ($13) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $15=$2;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(2048))|0);
      var $19=$3;
      var $20=((($19)+($18))|0);
      $3=$20;
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$3;
      var $25=_realloc($23, $24);
      $ptr=$25;
      var $26=$ptr;
      var $27=(($26)|0)==0;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$2;
      var $30=(($29+4)|0);
      HEAP32[(($30)>>2)]=0;
      $1=-1;
      label = 7; break;
    case 5: 
      var $32=$ptr;
      var $33=$2;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$35;
      var $40=$38;
      var $41=((($39)-($40))|0);
      var $42=(($32+$41)|0);
      var $43=$2;
      var $44=(($43+8)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$ptr;
      var $46=$2;
      var $47=(($46+4)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$3;
      var $49=$2;
      var $50=(($49+12)|0);
      HEAP32[(($50)>>2)]=$48;
      var $51=$2;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      var $55=$2;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+$54)|0);
      HEAP8[($58)]=1;
      label = 6; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $61=$1;

      return $61;
    default: assert(0, "bad label: " + label);
  }
}
_realloc_buff["X"]=1;
// WARNING: content after a branch in a label, line: 11310
// WARNING: content after a branch in a label, line: 11396
// WARNING: content after a branch in a label, line: 11470
// WARNING: content after a branch in a label, line: 11502
// WARNING: content after a branch in a label, line: 11585
// WARNING: content after a branch in a label, line: 11620
// WARNING: content after a branch in a label, line: 11930
// WARNING: content after a branch in a label, line: 11951
// WARNING: content after a branch in a label, line: 12017
// WARNING: content after a branch in a label, line: 12069
// WARNING: content after a branch in a label, line: 12113

function _dispatch($s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $initial_ptr;
      var $format_string=__stackBase__;
      var $format_ptr;
      var $flag_plus;
      var $flag_minus;
      var $flag_space;
      var $flag_sharp;
      var $flag_zero;
      var $width;
      var $prec;
      var $modifier;
      var $approx_width;
      var $type;
      var $p;
      $2=$s;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|0)!=37;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$2;
      var $11=_usual_char($10);
      $1=$11;
      label = 130; break;
    case 4: 
      var $13=$2;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+1)|0);
      HEAP32[(($14)>>2)]=$16;
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=HEAP8[($19)];
      var $21=(($20 << 24) >> 24);
      var $22=(($21)|0)==37;
      if ($22) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $24=$2;
      var $25=_realloc_buff($24, 1);
      var $26=(($25)|0)==-1;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 130; break;
    case 7: 
      var $29=$2;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      HEAP8[($31)]=37;
      var $32=$2;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+1)|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=$2;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+1)|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$2;
      var $41=(($40+16)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)+(1))|0);
      HEAP32[(($41)>>2)]=$43;
      var $44=$2;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      $1=0;
      label = 130; break;
    case 8: 
      var $49=$2;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      $initial_ptr=$51;
      $flag_zero=0;
      $flag_sharp=0;
      $flag_space=0;
      $flag_minus=0;
      $flag_plus=0;
      label = 9; break;
    case 9: 
      var $53=$2;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $58=(($57)|0)==32;
      if ($58) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $flag_space=1;
      label = 24; break;
    case 11: 
      var $61=$2;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=HEAP8[($63)];
      var $65=(($64 << 24) >> 24);
      var $66=(($65)|0)==43;
      if ($66) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $flag_plus=1;
      label = 23; break;
    case 13: 
      var $69=$2;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=HEAP8[($71)];
      var $73=(($72 << 24) >> 24);
      var $74=(($73)|0)==45;
      if ($74) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $flag_minus=1;
      label = 22; break;
    case 15: 
      var $77=$2;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=HEAP8[($79)];
      var $81=(($80 << 24) >> 24);
      var $82=(($81)|0)==35;
      if ($82) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $flag_sharp=1;
      label = 21; break;
    case 17: 
      var $85=$2;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=HEAP8[($87)];
      var $89=(($88 << 24) >> 24);
      var $90=(($89)|0)==48;
      if ($90) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $flag_zero=1;
      label = 20; break;
    case 19: 
      label = 26; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $99=$2;
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+1)|0);
      HEAP32[(($100)>>2)]=$102;
      label = 9; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $105=$2;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=HEAP8[($107)];
      var $109=(($108 << 24) >> 24);
      var $110=(($109)|0)==0;
      if ($110) { label = 28; break; } else { label = 30; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $113=$initial_ptr;
      var $114=$2;
      var $115=(($114)|0);
      HEAP32[(($115)>>2)]=$113;
      $1=0;
      label = 130; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $119=$2;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=HEAP8[($121)];
      var $123=(($122 << 24) >> 24);
      var $124=(($123)|0)==42;
      if ($124) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $126=$2;
      var $127=(($126)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+1)|0);
      HEAP32[(($127)>>2)]=$129;
      var $130=$2;
      var $131=(($130+28)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$132;
      var $134=(($132+4)|0);
      HEAP32[(($131)>>2)]=$134;
      var $135=HEAP32[(($133)>>2)];
      $width=$135;
      var $136=$width;
      var $137=(($136)>>>0) > 16383;
      if ($137) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $width=16383;
      label = 34; break;
    case 34: 
      label = 39; break;
    case 35: 
      var $141=$2;
      var $142=(($141)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=HEAP8[($143)];
      var $145=(($144)&255);
      var $146=_isdigit($145);
      var $147=(($146)|0)!=0;
      if ($147) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $149=$2;
      var $150=(($149)|0);
      var $151=_getint($150);
      $width=$151;
      label = 38; break;
    case 37: 
      $width=-1;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $156=$2;
      var $157=(($156)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=HEAP8[($158)];
      var $160=(($159 << 24) >> 24);
      var $161=(($160)|0)==0;
      if ($161) { label = 41; break; } else { label = 43; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $164=$initial_ptr;
      var $165=$2;
      var $166=(($165)|0);
      HEAP32[(($166)>>2)]=$164;
      $1=0;
      label = 130; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $170=$2;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=HEAP8[($172)];
      var $174=(($173 << 24) >> 24);
      var $175=(($174)|0)==46;
      if ($175) { label = 45; break; } else { label = 59; break; }
    case 45: 
      var $177=$2;
      var $178=(($177)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179+1)|0);
      HEAP32[(($178)>>2)]=$180;
      var $181=$2;
      var $182=(($181)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=HEAP8[($183)];
      var $185=(($184 << 24) >> 24);
      var $186=(($185)|0)==42;
      if ($186) { label = 46; break; } else { label = 49; break; }
    case 46: 
      var $188=$2;
      var $189=(($188)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190+1)|0);
      HEAP32[(($189)>>2)]=$191;
      var $192=$2;
      var $193=(($192+28)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=$194;
      var $196=(($194+4)|0);
      HEAP32[(($193)>>2)]=$196;
      var $197=HEAP32[(($195)>>2)];
      $prec=$197;
      var $198=$prec;
      var $199=(($198)>>>0) >= 16383;
      if ($199) { label = 47; break; } else { label = 48; break; }
    case 47: 
      $prec=16383;
      label = 48; break;
    case 48: 
      label = 53; break;
    case 49: 
      var $203=$2;
      var $204=(($203)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=HEAP8[($205)];
      var $207=(($206)&255);
      var $208=_isdigit($207);
      var $209=(($208)|0)==0;
      if ($209) { label = 50; break; } else { label = 52; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $212=$initial_ptr;
      var $213=$2;
      var $214=(($213)|0);
      HEAP32[(($214)>>2)]=$212;
      $1=0;
      label = 130; break;
    case 52: 
      var $217=$2;
      var $218=(($217)|0);
      var $219=_getint($218);
      $prec=$219;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $222=$2;
      var $223=(($222)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=HEAP8[($224)];
      var $226=(($225 << 24) >> 24);
      var $227=(($226)|0)==0;
      if ($227) { label = 55; break; } else { label = 57; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $230=$initial_ptr;
      var $231=$2;
      var $232=(($231)|0);
      HEAP32[(($232)>>2)]=$230;
      $1=0;
      label = 130; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 60; break;
    case 59: 
      $prec=-1;
      label = 60; break;
    case 60: 
      var $238=$2;
      var $239=(($238)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=HEAP8[($240)];
      var $242=(($241 << 24) >> 24);
      if ((($242)|0) == 76 || (($242)|0) == 104 || (($242)|0) == 108 || (($242)|0) == 122 || (($242)|0) == 116) {
        label = 61; break;
      }
      else {
      label = 70; break;
      }
      
    case 61: 
      var $244=$2;
      var $245=(($244)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=HEAP8[($246)];
      var $248=(($247 << 24) >> 24);
      $modifier=$248;
      var $249=$2;
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+1)|0);
      HEAP32[(($250)>>2)]=$252;
      var $253=$modifier;
      var $254=(($253)|0)==108;
      if ($254) { label = 62; break; } else { label = 64; break; }
    case 62: 
      var $256=$2;
      var $257=(($256)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=HEAP8[($258)];
      var $260=(($259 << 24) >> 24);
      var $261=(($260)|0)==108;
      if ($261) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $263=$2;
      var $264=(($263)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265+1)|0);
      HEAP32[(($264)>>2)]=$266;
      $modifier=76;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $269=$2;
      var $270=(($269)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=HEAP8[($271)];
      var $273=(($272 << 24) >> 24);
      var $274=(($273)|0)==0;
      if ($274) { label = 66; break; } else { label = 68; break; }
    case 66: 
      label = 67; break;
    case 67: 
      var $277=$initial_ptr;
      var $278=$2;
      var $279=(($278)|0);
      HEAP32[(($279)>>2)]=$277;
      $1=0;
      label = 130; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 71; break;
    case 70: 
      $modifier=-1;
      label = 71; break;
    case 71: 
      var $285=$2;
      var $286=(($285)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=HEAP8[($287)];
      $type=$288;
      var $289=$type;
      var $290=(($289 << 24) >> 24);
      var $291=_strchr(((5272596)|0), $290);
      var $292=(($291)|0)==0;
      if ($292) { label = 72; break; } else { label = 74; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $295=$initial_ptr;
      var $296=$2;
      var $297=(($296)|0);
      HEAP32[(($297)>>2)]=$295;
      $1=0;
      label = 130; break;
    case 74: 
      var $300=$2;
      var $301=(($300)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302+1)|0);
      HEAP32[(($301)>>2)]=$303;
      var $304=(($format_string)|0);
      HEAP8[($304)]=37;
      var $305=(($format_string+1)|0);
      $format_ptr=$305;
      var $306=$flag_plus;
      var $307=(($306)|0)!=0;
      if ($307) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $309=$format_ptr;
      HEAP8[($309)]=43;
      var $310=$format_ptr;
      var $311=(($310+1)|0);
      $format_ptr=$311;
      label = 76; break;
    case 76: 
      var $313=$flag_minus;
      var $314=(($313)|0)!=0;
      if ($314) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $316=$format_ptr;
      HEAP8[($316)]=45;
      var $317=$format_ptr;
      var $318=(($317+1)|0);
      $format_ptr=$318;
      label = 78; break;
    case 78: 
      var $320=$flag_space;
      var $321=(($320)|0)!=0;
      if ($321) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $323=$format_ptr;
      HEAP8[($323)]=32;
      var $324=$format_ptr;
      var $325=(($324+1)|0);
      $format_ptr=$325;
      label = 80; break;
    case 80: 
      var $327=$flag_sharp;
      var $328=(($327)|0)!=0;
      if ($328) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $330=$format_ptr;
      HEAP8[($330)]=35;
      var $331=$format_ptr;
      var $332=(($331+1)|0);
      $format_ptr=$332;
      label = 82; break;
    case 82: 
      var $334=$flag_zero;
      var $335=(($334)|0)!=0;
      if ($335) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $337=$format_ptr;
      HEAP8[($337)]=48;
      var $338=$format_ptr;
      var $339=(($338+1)|0);
      $format_ptr=$339;
      label = 84; break;
    case 84: 
      var $341=$width;
      var $342=(($341)|0)!=-1;
      if ($342) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $344=$format_ptr;
      var $345=$width;
      var $346=_sprintf($344, ((5269228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$345,tempInt));
      var $347=$format_ptr;
      var $348=_strlen($347);
      var $349=$format_ptr;
      var $350=(($349+$348)|0);
      $format_ptr=$350;
      label = 86; break;
    case 86: 
      var $352=$prec;
      var $353=(($352)|0)!=-1;
      if ($353) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $355=$format_ptr;
      HEAP8[($355)]=46;
      var $356=$format_ptr;
      var $357=(($356+1)|0);
      $format_ptr=$357;
      var $358=$format_ptr;
      var $359=$prec;
      var $360=_sprintf($358, ((5269228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$359,tempInt));
      var $361=$format_ptr;
      var $362=_strlen($361);
      var $363=$format_ptr;
      var $364=(($363+$362)|0);
      $format_ptr=$364;
      label = 88; break;
    case 88: 
      var $366=$modifier;
      var $367=(($366)|0)!=-1;
      if ($367) { label = 89; break; } else { label = 94; break; }
    case 89: 
      var $369=$modifier;
      var $370=(($369)|0)==76;
      if ($370) { label = 90; break; } else { label = 92; break; }
    case 90: 
      var $372=$type;
      var $373=(($372 << 24) >> 24);
      var $374=_strchr(((5267272)|0), $373);
      var $375=(($374)|0)!=0;
      if ($375) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $377=$format_ptr;
      HEAP8[($377)]=108;
      var $378=$format_ptr;
      var $379=(($378+1)|0);
      $format_ptr=$379;
      var $380=$format_ptr;
      HEAP8[($380)]=108;
      var $381=$format_ptr;
      var $382=(($381+1)|0);
      $format_ptr=$382;
      label = 93; break;
    case 92: 
      var $384=$modifier;
      var $385=(($384) & 255);
      var $386=$format_ptr;
      HEAP8[($386)]=$385;
      var $387=$format_ptr;
      var $388=(($387+1)|0);
      $format_ptr=$388;
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      var $391=$type;
      var $392=$format_ptr;
      HEAP8[($392)]=$391;
      var $393=$format_ptr;
      var $394=(($393+1)|0);
      $format_ptr=$394;
      var $395=$format_ptr;
      HEAP8[($395)]=0;
      var $396=$width;
      var $397=$prec;
      var $398=((($396)+($397))|0);
      $approx_width=$398;
      var $399=$approx_width;
      var $400=(($399)|0) < 0;
      if ($400) { label = 95; break; } else { label = 96; break; }
    case 95: 
      $approx_width=0;
      label = 96; break;
    case 96: 
      var $403=$type;
      var $404=(($403 << 24) >> 24);
      if ((($404)|0) == 100 || (($404)|0) == 105 || (($404)|0) == 111 || (($404)|0) == 117 || (($404)|0) == 120 || (($404)|0) == 88) {
        label = 97; break;
      }
      else if ((($404)|0) == 99) {
        label = 107; break;
      }
      else if ((($404)|0) == 101 || (($404)|0) == 102 || (($404)|0) == 103 || (($404)|0) == 69 || (($404)|0) == 71) {
        label = 111; break;
      }
      else if ((($404)|0) == 115) {
        label = 117; break;
      }
      else if ((($404)|0) == 112) {
        label = 118; break;
      }
      else if ((($404)|0) == 110) {
        label = 122; break;
      }
      else {
      label = 128; break;
      }
      
    case 97: 
      var $406=$modifier;
      if ((($406)|0) == -1) {
        label = 98; break;
      }
      else if ((($406)|0) == 76) {
        label = 99; break;
      }
      else if ((($406)|0) == 108) {
        label = 100; break;
      }
      else if ((($406)|0) == 104) {
        label = 101; break;
      }
      else if ((($406)|0) == 122) {
        label = 102; break;
      }
      else if ((($406)|0) == 116) {
        label = 103; break;
      }
      else {
      label = 104; break;
      }
      
    case 98: 
      var $408=$2;
      var $409=$approx_width;
      var $410=(($format_string)|0);
      var $411=$2;
      var $412=(($411+28)|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=$413;
      var $415=(($413+4)|0);
      HEAP32[(($412)>>2)]=$415;
      var $416=HEAP32[(($414)>>2)];
      var $417=_print_it($408, $409, $410, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$416,tempInt));
      $1=$417;
      label = 130; break;
    case 99: 
      var $419=$2;
      var $420=$approx_width;
      var $421=(($format_string)|0);
      var $422=$2;
      var $423=(($422+28)|0);
      var $424=HEAP32[(($423)>>2)];
      var $425=$424;
      var $426=(($424+8)|0);
      HEAP32[(($423)>>2)]=$426;
      var $st$9$0=(($425)|0);
      var $427$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($425+4)|0);
      var $427$1=HEAP32[(($st$9$1)>>2)];
      var $428=_print_it($419, $420, $421, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$427$0,HEAP32[(((tempInt)+(4))>>2)]=$427$1,tempInt));
      $1=$428;
      label = 130; break;
    case 100: 
      var $430=$2;
      var $431=$approx_width;
      var $432=(($format_string)|0);
      var $433=$2;
      var $434=(($433+28)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$435;
      var $437=(($435+4)|0);
      HEAP32[(($434)>>2)]=$437;
      var $438=HEAP32[(($436)>>2)];
      var $439=_print_it($430, $431, $432, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$438,tempInt));
      $1=$439;
      label = 130; break;
    case 101: 
      var $441=$2;
      var $442=$approx_width;
      var $443=(($format_string)|0);
      var $444=$2;
      var $445=(($444+28)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=$446;
      var $448=(($446+4)|0);
      HEAP32[(($445)>>2)]=$448;
      var $449=HEAP32[(($447)>>2)];
      var $450=_print_it($441, $442, $443, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$449,tempInt));
      $1=$450;
      label = 130; break;
    case 102: 
      var $452=$2;
      var $453=$approx_width;
      var $454=(($format_string)|0);
      var $455=$2;
      var $456=(($455+28)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=$457;
      var $459=(($457+4)|0);
      HEAP32[(($456)>>2)]=$459;
      var $460=HEAP32[(($458)>>2)];
      var $461=_print_it($452, $453, $454, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$460,tempInt));
      $1=$461;
      label = 130; break;
    case 103: 
      var $463=$2;
      var $464=$approx_width;
      var $465=(($format_string)|0);
      var $466=$2;
      var $467=(($466+28)|0);
      var $468=HEAP32[(($467)>>2)];
      var $469=$468;
      var $470=(($468+4)|0);
      HEAP32[(($467)>>2)]=$470;
      var $471=HEAP32[(($469)>>2)];
      var $472=_print_it($463, $464, $465, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$471,tempInt));
      $1=$472;
      label = 130; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $475=$initial_ptr;
      var $476=$2;
      var $477=(($476)|0);
      HEAP32[(($477)>>2)]=$475;
      $1=0;
      label = 130; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $481=$modifier;
      var $482=(($481)|0)!=-1;
      if ($482) { label = 108; break; } else { label = 110; break; }
    case 108: 
      label = 109; break;
    case 109: 
      var $485=$initial_ptr;
      var $486=$2;
      var $487=(($486)|0);
      HEAP32[(($487)>>2)]=$485;
      $1=0;
      label = 130; break;
    case 110: 
      var $490=$2;
      var $491=$approx_width;
      var $492=(($format_string)|0);
      var $493=$2;
      var $494=(($493+28)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$495;
      var $497=(($495+4)|0);
      HEAP32[(($494)>>2)]=$497;
      var $498=HEAP32[(($496)>>2)];
      var $499=_print_it($490, $491, $492, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$498,tempInt));
      $1=$499;
      label = 130; break;
    case 111: 
      var $501=$modifier;
      if ((($501)|0) == -1 || (($501)|0) == 108) {
        label = 112; break;
      }
      else if ((($501)|0) == 76) {
        label = 113; break;
      }
      else {
      label = 114; break;
      }
      
    case 112: 
      var $503=$2;
      var $504=$approx_width;
      var $505=(($format_string)|0);
      var $506=$2;
      var $507=(($506+28)|0);
      var $508=HEAP32[(($507)>>2)];
      var $509=$508;
      var $510=(($508+8)|0);
      HEAP32[(($507)>>2)]=$510;
      var $511=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($509)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($509)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $512=_print_it($503, $504, $505, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$511,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $1=$512;
      label = 130; break;
    case 113: 
      var $514=$2;
      var $515=$approx_width;
      var $516=(($format_string)|0);
      var $517=$2;
      var $518=(($517+28)|0);
      var $519=HEAP32[(($518)>>2)];
      var $520=$519;
      var $521=(($519+12)|0);
      HEAP32[(($518)>>2)]=$521;
      var $522=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($520)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($520)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $523=_print_it($514, $515, $516, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),(HEAPF64[(tempDoublePtr)>>3]=$522,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $1=$523;
      label = 130; break;
    case 114: 
      label = 115; break;
    case 115: 
      var $526=$initial_ptr;
      var $527=$2;
      var $528=(($527)|0);
      HEAP32[(($528)>>2)]=$526;
      $1=0;
      label = 130; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $532=$2;
      var $533=$width;
      var $534=$prec;
      var $535=(($format_string)|0);
      var $536=$2;
      var $537=(($536+28)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=$538;
      var $540=(($538+4)|0);
      HEAP32[(($537)>>2)]=$540;
      var $541=HEAP32[(($539)>>2)];
      var $542=_type_s($532, $533, $534, $535, $541);
      $1=$542;
      label = 130; break;
    case 118: 
      var $544=$modifier;
      var $545=(($544)|0)==-1;
      if ($545) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $547=$2;
      var $548=$approx_width;
      var $549=(($format_string)|0);
      var $550=$2;
      var $551=(($550+28)|0);
      var $552=HEAP32[(($551)>>2)];
      var $553=$552;
      var $554=(($552+4)|0);
      HEAP32[(($551)>>2)]=$554;
      var $555=HEAP32[(($553)>>2)];
      var $556=_print_it($547, $548, $549, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$555,tempInt));
      $1=$556;
      label = 130; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $559=$initial_ptr;
      var $560=$2;
      var $561=(($560)|0);
      HEAP32[(($561)>>2)]=$559;
      $1=0;
      label = 130; break;
    case 122: 
      var $564=$modifier;
      var $565=(($564)|0)==-1;
      if ($565) { label = 123; break; } else { label = 126; break; }
    case 123: 
      var $567=$2;
      var $568=(($567+28)|0);
      var $569=HEAP32[(($568)>>2)];
      var $570=$569;
      var $571=(($569+4)|0);
      HEAP32[(($568)>>2)]=$571;
      var $572=HEAP32[(($570)>>2)];
      $p=$572;
      var $573=$p;
      var $574=(($573)|0)!=0;
      if ($574) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $576=$2;
      var $577=(($576+20)|0);
      var $578=HEAP32[(($577)>>2)];
      var $579=$p;
      HEAP32[(($579)>>2)]=$578;
      $1=0;
      label = 130; break;
    case 125: 
      $1=-1;
      label = 130; break;
    case 126: 
      label = 127; break;
    case 127: 
      var $583=$initial_ptr;
      var $584=$2;
      var $585=(($584)|0);
      HEAP32[(($585)>>2)]=$583;
      $1=0;
      label = 130; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $589=$initial_ptr;
      var $590=$2;
      var $591=(($590)|0);
      HEAP32[(($591)>>2)]=$589;
      $1=0;
      label = 130; break;
    case 130: 
      var $593=$1;
      STACKTOP = __stackBase__;
      return $593;
    default: assert(0, "bad label: " + label);
  }
}
_dispatch["X"]=1;

function _usual_char($s) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $len;
      $2=$s;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_strcspn($5, ((5263764)|0));
      $len=$6;
      var $7=$2;
      var $8=$len;
      var $9=_realloc_buff($7, $8);
      var $10=(($9)|0)==-1;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$len;
      assert($19 % 1 === 0);_memcpy($15, $18, $19);
      var $20=$len;
      var $21=$2;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+$20)|0);
      HEAP32[(($22)>>2)]=$24;
      var $25=$len;
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+$25)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=$len;
      var $31=$2;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)+($30))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=$len;
      var $36=$2;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)+($35))|0);
      HEAP32[(($37)>>2)]=$39;
      $1=0;
      label = 5; break;
    case 5: 
      var $41=$1;

      return $41;
    default: assert(0, "bad label: " + label);
  }
}
_usual_char["X"]=1;

function _getint($string) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      $1=$string;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$1;
      var $4=HEAP32[(($3)>>2)];
      var $5=HEAP8[($4)];
      var $6=(($5)&255);
      var $7=_isdigit($6);
      var $8=(($7)|0)!=0;
      if ($8) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $10=$i;
      var $11=((($10)*(10))|0);
      var $12=$1;
      var $13=HEAP32[(($12)>>2)];
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $16=((($15)-(48))|0);
      var $17=((($11)+($16))|0);
      $i=$17;
      var $18=$1;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+1)|0);
      HEAP32[(($18)>>2)]=$20;
      label = 3; break;
    case 5: 
      var $22=$i;
      var $23=(($22)|0) < 0;
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $25=$i;
      var $26=(($25)|0) > 32767;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $i=32767;
      label = 8; break;
    case 8: 
      var $29=$i;

      return $29;
    default: assert(0, "bad label: " + label);
  }
}


function _print_it($s, $approx_len, $format_string, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $varg=__stackBase__;
      var $vsprintf_len;
      var $len;
      $2=$s;
      $3=$approx_len;
      $4=$format_string;
      var $5=$2;
      var $6=$3;
      var $7=_realloc_buff($5, $6);
      var $8=(($7)|0)==-1;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 10; break;
    case 4: 
      var $11=$varg;
      HEAP32[(($11)>>2)]=varrp;
      var $12=$2;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$4;
      var $16=HEAP32[(($varg)>>2)];
      var $17=_sprintf($14, $15, $16);
      $vsprintf_len=$17;
      var $18=$varg;

      var $19=$2;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)-(1))|0);
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+$22)|0);
      var $27=HEAP8[($26)];
      var $28=(($27 << 24) >> 24);
      var $29=(($28)|0)==1;
      if ($29) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      ___assert_func(((5266064)|0), 220, ((5273944)|0), ((5264928)|0));
      label = 7; break;
    case 7: 
      var $33=$vsprintf_len;
      var $34=(($33)|0)==-1;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=-1;
      label = 10; break;
    case 9: 
      var $37=$vsprintf_len;
      var $38=$2;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=((($40)+($37))|0);
      HEAP32[(($39)>>2)]=$41;
      var $42=$2;
      var $43=(($42+8)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=_strlen($44);
      $len=$45;
      var $46=$len;
      var $47=$2;
      var $48=(($47+16)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)+($46))|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=$len;
      var $52=$2;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+$51)|0);
      HEAP32[(($53)>>2)]=$55;
      $1=0;
      label = 10; break;
    case 10: 
      var $57=$1;
      STACKTOP = __stackBase__;
      return $57;
    default: assert(0, "bad label: " + label);
  }
}
_print_it["X"]=1;

function _type_s($s, $width, $prec, $format_string, $arg_string) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $string_len;
      $2=$s;
      $3=$width;
      $4=$prec;
      $5=$format_string;
      $6=$arg_string;
      var $7=$6;
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$2;
      var $11=_print_it($10, 6, ((5271888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $1=$11;
      label = 13; break;
    case 4: 
      $string_len=0;
      label = 5; break;
    case 5: 
      var $14=$string_len;
      var $15=$6;
      var $16=(($15+$14)|0);
      var $17=HEAP8[($16)];
      var $18=(($17 << 24) >> 24);
      var $19=(($18)|0)!=0;
      if ($19) { label = 6; break; } else { var $25 = 0;label = 7; break; }
    case 6: 
      var $21=$4;
      var $22=$string_len;
      var $23=(($21)|0)!=(($22)|0);
      var $25 = $23;label = 7; break;
    case 7: 
      var $25;
      if ($25) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $27=$string_len;
      var $28=((($27)+(1))|0);
      $string_len=$28;
      label = 5; break;
    case 9: 
      var $30=$3;
      var $31=(($30)|0)!=-1;
      if ($31) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $33=$string_len;
      var $34=$3;
      var $35=(($33)>>>0) < (($34)>>>0);
      if ($35) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $37=$3;
      $string_len=$37;
      label = 12; break;
    case 12: 
      var $39=$2;
      var $40=$string_len;
      var $41=$5;
      var $42=$6;
      var $43=_print_it($39, $40, $41, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$42,tempInt));
      $1=$43;
      label = 13; break;
    case 13: 
      var $45=$1;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
_type_s["X"]=1;

function _getdelim($buf, $bufsiz, $delimiter, $fp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ptr;
      var $eptr;
      var $c;
      var $nbuf;
      var $nbufsiz;
      var $d;
      $2=$buf;
      $3=$bufsiz;
      $4=$delimiter;
      $5=$fp;
      var $6=$2;
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)==0;
      if ($8) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $10=$3;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|0)==0;
      if ($12) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $14=$3;
      HEAP32[(($14)>>2)]=1024;
      var $15=$3;
      var $16=HEAP32[(($15)>>2)];
      var $17=_malloc($16);
      var $18=$2;
      HEAP32[(($18)>>2)]=$17;
      var $19=(($17)|0)==0;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-1;
      label = 22; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $23=$2;
      var $24=HEAP32[(($23)>>2)];
      $ptr=$24;
      var $25=$2;
      var $26=HEAP32[(($25)>>2)];
      var $27=$3;
      var $28=HEAP32[(($27)>>2)];
      var $29=(($26+$28)|0);
      $eptr=$29;
      label = 8; break;
    case 8: 
      var $31=$5;
      var $32=_fgetc($31);
      $c=$32;
      var $33=$c;
      var $34=(($33)|0)==-1;
      if ($34) { label = 9; break; } else { label = 15; break; }
    case 9: 
      var $36=$5;
      var $37=_feof($36);
      var $38=(($37)|0)!=0;
      if ($38) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $40=$ptr;
      var $41=$2;
      var $42=HEAP32[(($41)>>2)];
      var $43=(($40)|0)==(($42)|0);
      if ($43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $53 = -1;label = 13; break;
    case 12: 
      var $46=$ptr;
      var $47=$2;
      var $48=HEAP32[(($47)>>2)];
      var $49=$46;
      var $50=$48;
      var $51=((($49)-($50))|0);
      var $53 = $51;label = 13; break;
    case 13: 
      var $53;
      $1=$53;
      label = 22; break;
    case 14: 
      $1=-1;
      label = 22; break;
    case 15: 
      var $56=$c;
      var $57=(($56) & 255);
      var $58=$ptr;
      var $59=(($58+1)|0);
      $ptr=$59;
      HEAP8[($58)]=$57;
      var $60=$c;
      var $61=$4;
      var $62=(($60)|0)==(($61)|0);
      if ($62) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $64=$ptr;
      HEAP8[($64)]=0;
      var $65=$ptr;
      var $66=$2;
      var $67=HEAP32[(($66)>>2)];
      var $68=$65;
      var $69=$67;
      var $70=((($68)-($69))|0);
      $1=$70;
      label = 22; break;
    case 17: 
      var $72=$ptr;
      var $73=(($72+2)|0);
      var $74=$eptr;
      var $75=(($73)>>>0) >= (($74)>>>0);
      if ($75) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $77=$3;
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78<<1))|0);
      $nbufsiz=$79;
      var $80=$ptr;
      var $81=$2;
      var $82=HEAP32[(($81)>>2)];
      var $83=$80;
      var $84=$82;
      var $85=((($83)-($84))|0);
      $d=$85;
      var $86=$2;
      var $87=HEAP32[(($86)>>2)];
      var $88=$nbufsiz;
      var $89=_realloc($87, $88);
      $nbuf=$89;
      var $90=(($89)|0)==0;
      if ($90) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=-1;
      label = 22; break;
    case 20: 
      var $93=$nbuf;
      var $94=$2;
      HEAP32[(($94)>>2)]=$93;
      var $95=$nbufsiz;
      var $96=$3;
      HEAP32[(($96)>>2)]=$95;
      var $97=$nbuf;
      var $98=$nbufsiz;
      var $99=(($97+$98)|0);
      $eptr=$99;
      var $100=$nbuf;
      var $101=$d;
      var $102=(($100+$101)|0);
      $ptr=$102;
      label = 21; break;
    case 21: 
      label = 8; break;
    case 22: 
      var $105=$1;

      return $105;
    default: assert(0, "bad label: " + label);
  }
}
_getdelim["X"]=1;

function _getline($buf, $bufsiz, $fp) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  $1=$buf;
  $2=$bufsiz;
  $3=$fp;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=_getdelim($4, $5, 10, $6);

  return $7;
}


function _regcomp($preg, $pattern, $cflags) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pa=__stackBase__;
      var $g;
      var $p;
      var $i;
      var $len;
      $2=$preg;
      $3=$pattern;
      $4=$cflags;
      $p=$pa;
      var $5=$4;
      var $6=$5 & -129;
      $4=$6;
      var $7=$4;
      var $8=$7 & 1;
      var $9=(($8)|0)!=0;
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $11=$4;
      var $12=$11 & 16;
      var $13=(($12)|0)!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=16;
      label = 29; break;
    case 5: 
      var $16=$4;
      var $17=$16 & 32;
      var $18=(($17)|0)!=0;
      if ($18) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $20=$2;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$3;
      var $24=(($22)>>>0) < (($23)>>>0);
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=16;
      label = 29; break;
    case 8: 
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$3;
      var $31=$29;
      var $32=$30;
      var $33=((($31)-($32))|0);
      $len=$33;
      label = 10; break;
    case 9: 
      var $35=$3;
      var $36=_strlen($35);
      $len=$36;
      label = 10; break;
    case 10: 
      var $38=_malloc(339);
      var $39=$38;
      $g=$39;
      var $40=$g;
      var $41=(($40)|0)==0;
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=12;
      label = 29; break;
    case 12: 
      var $44=$len;
      var $45=Math.floor(((($44)>>>0))/(2));
      var $46=((($45)*(3))|0);
      var $47=((($46)+(1))|0);
      var $48=$p;
      var $49=(($48+16)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=$p;
      var $51=(($50+16)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=_calloc($52, 4);
      var $54=$53;
      var $55=$p;
      var $56=(($55+12)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$p;
      var $58=(($57+20)|0);
      HEAP32[(($58)>>2)]=0;
      var $59=$p;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|0)==0;
      if ($62) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $64=$g;
      var $65=$64;
      _free($65);
      $1=12;
      label = 29; break;
    case 14: 
      var $67=$g;
      var $68=$p;
      var $69=(($68+28)|0);
      HEAP32[(($69)>>2)]=$67;
      var $70=$3;
      var $71=$p;
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$p;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$len;
      var $77=(($75+$76)|0);
      var $78=$p;
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=$77;
      var $80=$p;
      var $81=(($80+8)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$p;
      var $83=(($82+24)|0);
      HEAP32[(($83)>>2)]=0;
      $i=0;
      label = 15; break;
    case 15: 
      var $85=$i;
      var $86=(($85)|0) < 10;
      if ($86) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $88=$i;
      var $89=$p;
      var $90=(($89+32)|0);
      var $91=(($90+($88<<2))|0);
      HEAP32[(($91)>>2)]=0;
      var $92=$i;
      var $93=$p;
      var $94=(($93+72)|0);
      var $95=(($94+($92<<2))|0);
      HEAP32[(($95)>>2)]=0;
      label = 17; break;
    case 17: 
      var $97=$i;
      var $98=((($97)+(1))|0);
      $i=$98;
      label = 15; break;
    case 18: 
      var $100=$g;
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=256;
      var $102=$g;
      var $103=(($102+16)|0);
      HEAP32[(($103)>>2)]=0;
      var $104=$g;
      var $105=(($104+20)|0);
      HEAP32[(($105)>>2)]=0;
      var $106=$g;
      var $107=(($106+12)|0);
      HEAP32[(($107)>>2)]=0;
      var $108=$4;
      var $109=$g;
      var $110=(($109+24)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$g;
      var $112=(($111+40)|0);
      HEAP32[(($112)>>2)]=0;
      var $113=$g;
      var $114=(($113+44)|0);
      HEAP32[(($114)>>2)]=0;
      var $115=$g;
      var $116=(($115+48)|0);
      HEAP32[(($116)>>2)]=0;
      var $117=$g;
      var $118=(($117+60)|0);
      HEAP32[(($118)>>2)]=0;
      var $119=$g;
      var $120=(($119+64)|0);
      HEAP32[(($120)>>2)]=0;
      var $121=$g;
      var $122=(($121+68)|0);
      HEAP32[(($122)>>2)]=0;
      var $123=$g;
      var $124=(($123+52)|0);
      HEAP32[(($124)>>2)]=1;
      var $125=$g;
      var $126=(($125+80)|0);
      var $127=(($126+128)|0);
      var $128=$g;
      var $129=(($128+56)|0);
      HEAP32[(($129)>>2)]=$127;
      var $130=$g;
      var $131=(($130+80)|0);
      var $132=(($131)|0);
      _memset($132, 0, 256, 1);
      var $133=$g;
      var $134=(($133+72)|0);
      HEAP32[(($134)>>2)]=0;
      var $135=$p;
      _doemit($135, 134217728, 0);
      var $136=$p;
      var $137=(($136+20)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      var $140=$g;
      var $141=(($140+32)|0);
      HEAP32[(($141)>>2)]=$139;
      var $142=$4;
      var $143=$142 & 1;
      var $144=(($143)|0)!=0;
      if ($144) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $146=$p;
      _p_ere($146, 128);
      label = 24; break;
    case 20: 
      var $148=$4;
      var $149=$148 & 16;
      var $150=(($149)|0)!=0;
      if ($150) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $152=$p;
      _p_str($152);
      label = 23; break;
    case 22: 
      var $154=$p;
      _p_bre($154, 128, 128);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $157=$p;
      _doemit($157, 134217728, 0);
      var $158=$p;
      var $159=(($158+20)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=((($160)-(1))|0);
      var $162=$g;
      var $163=(($162+36)|0);
      HEAP32[(($163)>>2)]=$161;
      var $164=$p;
      var $165=$g;
      _categorize($164, $165);
      var $166=$p;
      var $167=$g;
      _stripsnug($166, $167);
      var $168=$p;
      var $169=$g;
      _findmust($168, $169);
      var $170=$p;
      var $171=$g;
      var $172=_pluscount($170, $171);
      var $173=$g;
      var $174=(($173+76)|0);
      HEAP32[(($174)>>2)]=$172;
      var $175=$g;
      var $176=(($175)|0);
      HEAP32[(($176)>>2)]=53829;
      var $177=$g;
      var $178=(($177+68)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=$2;
      var $181=(($180+4)|0);
      HEAP32[(($181)>>2)]=$179;
      var $182=$g;
      var $183=$2;
      var $184=(($183+12)|0);
      HEAP32[(($184)>>2)]=$182;
      var $185=$2;
      var $186=(($185)|0);
      HEAP32[(($186)>>2)]=62053;
      var $187=$g;
      var $188=(($187+40)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 & 4;
      var $191=(($190)|0)!=0;
      if ($191) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $193=$p;
      var $194=_seterr($193, 15);
      label = 26; break;
    case 26: 
      var $196=$p;
      var $197=(($196+8)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198)|0)!=0;
      if ($199) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $201=$2;
      _regfree($201);
      label = 28; break;
    case 28: 
      var $203=$p;
      var $204=(($203+8)|0);
      var $205=HEAP32[(($204)>>2)];
      $1=$205;
      label = 29; break;
    case 29: 
      var $207=$1;
      STACKTOP = __stackBase__;
      return $207;
    default: assert(0, "bad label: " + label);
  }
}
_regcomp["X"]=1;

function _doemit($p, $op, $opnd) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$op;
      $3=$opnd;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 9; break;
    case 4: 
      var $10=$1;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$1;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|0) >= (($15)|0);
      if ($16) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $18=$1;
      var $19=$1;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)+(1))|0);
      var $23=((((($22)|0))/(2))&-1);
      var $24=((($23)*(3))|0);
      var $25=_enlarge($18, $24);
      var $26=(($25)|0)!=0;
      if ($26) { label = 7; break; } else { label = 6; break; }
    case 6: 
      label = 9; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $30=$2;
      var $31=$3;
      var $32=$30 | $31;
      var $33=$1;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=((($35)+(1))|0);
      HEAP32[(($34)>>2)]=$36;
      var $37=$1;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+($35<<2))|0);
      HEAP32[(($40)>>2)]=$32;
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _pluscount($p, $g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $scan;
      var $s;
      var $plusnest;
      var $maxnest;
      $2=$p;
      $3=$g;
      $plusnest=0;
      $maxnest=0;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 15; break;
    case 4: 
      var $10=$3;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+4)|0);
      $scan=$13;
      label = 5; break;
    case 5: 
      var $15=$scan;
      var $16=(($15+4)|0);
      $scan=$16;
      var $17=HEAP32[(($15)>>2)];
      $s=$17;
      var $18=$s;
      var $19=$18 & -134217728;
      if ((($19)|0) == 1207959552) {
        label = 6; break;
      }
      else if ((($19)|0) == 1342177280) {
        label = 7; break;
      }
      else {
      label = 10; break;
      }
      
    case 6: 
      var $21=$plusnest;
      var $22=((($21)+(1))|0);
      $plusnest=$22;
      label = 10; break;
    case 7: 
      var $24=$plusnest;
      var $25=$maxnest;
      var $26=(($24)|0) > (($25)|0);
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $28=$plusnest;
      $maxnest=$28;
      label = 9; break;
    case 9: 
      var $30=$plusnest;
      var $31=((($30)-(1))|0);
      $plusnest=$31;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $34=$s;
      var $35=$34 & -134217728;
      var $36=(($35)|0)!=134217728;
      if ($36) { label = 5; break; } else { label = 12; break; }
    case 12: 
      var $38=$plusnest;
      var $39=(($38)|0)!=0;
      if ($39) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $41=$3;
      var $42=(($41+40)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 | 4;
      HEAP32[(($42)>>2)]=$44;
      label = 14; break;
    case 14: 
      var $46=$maxnest;
      $1=$46;
      label = 15; break;
    case 15: 
      var $48=$1;

      return $48;
    default: assert(0, "bad label: " + label);
  }
}
_pluscount["X"]=1;

function _seterr($p, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$e;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$2;
      var $9=$1;
      var $10=(($9+8)|0);
      HEAP32[(($10)>>2)]=$8;
      label = 4; break;
    case 4: 
      var $12=$1;
      var $13=(($12)|0);
      HEAP32[(($13)>>2)]=((5246456)|0);
      var $14=$1;
      var $15=(($14+4)|0);
      HEAP32[(($15)>>2)]=((5246456)|0);

      return 0;
    default: assert(0, "bad label: " + label);
  }
}


function _p_ere($p, $stop) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $c;
      var $prevback;
      var $prevfwd;
      var $conc;
      var $first;
      $1=$p;
      $2=$stop;
      $first=1;
      label = 3; break;
    case 3: 
      var $4=$1;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $conc=$6;
      label = 4; break;
    case 4: 
      var $8=$1;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$1;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10)>>>0) < (($13)>>>0);
      if ($14) { label = 5; break; } else { var $28 = 0;label = 7; break; }
    case 5: 
      var $16=$1;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=HEAP8[($18)];
      $c=$19;
      var $20=(($19 << 24) >> 24);
      var $21=(($20)|0)!=124;
      if ($21) { label = 6; break; } else { var $28 = 0;label = 7; break; }
    case 6: 
      var $23=$c;
      var $24=(($23 << 24) >> 24);
      var $25=$2;
      var $26=(($24)|0)!=(($25)|0);
      var $28 = $26;label = 7; break;
    case 7: 
      var $28;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=$1;
      _p_ere_exp($30);
      label = 4; break;
    case 9: 
      var $32=$1;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$conc;
      var $36=(($34)|0)!=(($35)|0);
      if ($36) { var $42 = 1;label = 11; break; } else { label = 10; break; }
    case 10: 
      var $38=$1;
      var $39=_seterr($38, 14);
      var $40=(($39)|0)!=0;
      var $42 = $40;label = 11; break;
    case 11: 
      var $42;
      var $43=(($42)&1);
      var $44=$1;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$1;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($46)>>>0) < (($49)>>>0);
      if ($50) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $52=$1;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      var $57=(($56)|0)==124;
      if ($57) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $59=$1;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+1)|0);
      HEAP32[(($60)>>2)]=$62;
      if (1) { label = 16; break; } else { label = 15; break; }
    case 14: 
      if (0) { label = 16; break; } else { label = 15; break; }
    case 15: 
      label = 19; break;
    case 16: 
      var $66=$first;
      var $67=(($66)|0)!=0;
      if ($67) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $69=$1;
      var $70=$1;
      var $71=(($70+20)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$conc;
      var $74=((($72)-($73))|0);
      var $75=((($74)+(1))|0);
      var $76=$conc;
      _doinsert($69, 2013265920, $75, $76);
      var $77=$conc;
      $prevfwd=$77;
      var $78=$conc;
      $prevback=$78;
      $first=0;
      label = 18; break;
    case 18: 
      var $80=$1;
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$prevback;
      var $85=((($83)-($84))|0);
      _doemit($80, -2147483648, $85);
      var $86=$1;
      var $87=(($86+20)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=((($88)-(1))|0);
      $prevback=$89;
      var $90=$1;
      var $91=$prevfwd;
      var $92=$1;
      var $93=(($92+20)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$prevfwd;
      var $96=((($94)-($95))|0);
      _dofwd($90, $91, $96);
      var $97=$1;
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      $prevfwd=$99;
      var $100=$1;
      _doemit($100, -2013265920, 0);
      label = 3; break;
    case 19: 
      var $102=$first;
      var $103=(($102)|0)!=0;
      if ($103) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $105=$1;
      var $106=$prevfwd;
      var $107=$1;
      var $108=(($107+20)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$prevfwd;
      var $111=((($109)-($110))|0);
      _dofwd($105, $106, $111);
      var $112=$1;
      var $113=$1;
      var $114=(($113+20)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$prevback;
      var $117=((($115)-($116))|0);
      _doemit($112, -1879048192, $117);
      label = 21; break;
    case 21: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_p_ere["X"]=1;

function _p_str($p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      $1=$p;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$1;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($4)>>>0) < (($7)>>>0);
      if ($8) { var $14 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $10=$1;
      var $11=_seterr($10, 14);
      var $12=(($11)|0)!=0;
      var $14 = $12;label = 4; break;
    case 4: 
      var $14;
      var $15=(($14)&1);
      label = 5; break;
    case 5: 
      var $17=$1;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($19)>>>0) < (($22)>>>0);
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$1;
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+1)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=HEAP8[($28)];
      var $31=(($30 << 24) >> 24);
      _ordinary($25, $31);
      label = 5; break;
    case 7: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _p_bre($p, $end1, $end2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $start;
      var $first;
      var $wasdollar;
      $1=$p;
      $2=$end1;
      $3=$end2;
      var $4=$1;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $start=$6;
      $first=1;
      $wasdollar=0;
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)>>>0) < (($12)>>>0);
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=(($19)|0)==94;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $22=$1;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+1)|0);
      HEAP32[(($23)>>2)]=$25;
      if (1) { label = 6; break; } else { label = 7; break; }
    case 5: 
      if (0) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$1;
      _doemit($28, 402653184, 0);
      var $29=$1;
      var $30=(($29+28)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+40)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 | 1;
      HEAP32[(($32)>>2)]=$34;
      var $35=$1;
      var $36=(($35+28)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+44)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)+(1))|0);
      HEAP32[(($38)>>2)]=$40;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $43=$1;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$1;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($45)>>>0) < (($48)>>>0);
      if ($49) { label = 9; break; } else { var $88 = 0;label = 14; break; }
    case 9: 
      var $51=$1;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($53)>>>0) < (($56)>>>0);
      if ($57) { label = 10; break; } else { var $85 = 0;label = 13; break; }
    case 10: 
      var $59=$1;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+1)|0);
      var $63=$1;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($62)>>>0) < (($65)>>>0);
      if ($66) { label = 11; break; } else { var $85 = 0;label = 13; break; }
    case 11: 
      var $68=$1;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=HEAP8[($70)];
      var $72=(($71 << 24) >> 24);
      var $73=$2;
      var $74=(($72)|0)==(($73)|0);
      if ($74) { label = 12; break; } else { var $85 = 0;label = 13; break; }
    case 12: 
      var $76=$1;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+1)|0);
      var $80=HEAP8[($79)];
      var $81=(($80 << 24) >> 24);
      var $82=$3;
      var $83=(($81)|0)==(($82)|0);
      var $85 = $83;label = 13; break;
    case 13: 
      var $85;
      var $86=$85 ^ 1;
      var $88 = $86;label = 14; break;
    case 14: 
      var $88;
      if ($88) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $90=$1;
      var $91=$first;
      var $92=_p_simp_re($90, $91);
      $wasdollar=$92;
      $first=0;
      label = 8; break;
    case 16: 
      var $94=$wasdollar;
      var $95=(($94)|0)!=0;
      if ($95) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $97=$1;
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=((($99)-(1))|0);
      HEAP32[(($98)>>2)]=$100;
      var $101=$1;
      _doemit($101, 536870912, 0);
      var $102=$1;
      var $103=(($102+28)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+40)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$106 | 2;
      HEAP32[(($105)>>2)]=$107;
      var $108=$1;
      var $109=(($108+28)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+48)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=((($112)+(1))|0);
      HEAP32[(($111)>>2)]=$113;
      label = 18; break;
    case 18: 
      var $115=$1;
      var $116=(($115+20)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$start;
      var $119=(($117)|0)!=(($118)|0);
      if ($119) { var $125 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $121=$1;
      var $122=_seterr($121, 14);
      var $123=(($122)|0)!=0;
      var $125 = $123;label = 20; break;
    case 20: 
      var $125;
      var $126=(($125)&1);

      return;
    default: assert(0, "bad label: " + label);
  }
}
_p_bre["X"]=1;

function _categorize($p, $g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $cats;
      var $c;
      var $c2;
      var $cat;
      $1=$p;
      $2=$g;
      var $3=$2;
      var $4=(($3+56)|0);
      var $5=HEAP32[(($4)>>2)];
      $cats=$5;
      var $6=$1;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 18; break;
    case 4: 
      $c=-128;
      label = 5; break;
    case 5: 
      var $13=$c;
      var $14=(($13)|0) <= 127;
      if ($14) { label = 6; break; } else { label = 18; break; }
    case 6: 
      var $16=$c;
      var $17=$cats;
      var $18=(($17+$16)|0);
      var $19=HEAP8[($18)];
      var $20=(($19)&255);
      var $21=(($20)|0)==0;
      if ($21) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $23=$2;
      var $24=$c;
      var $25=_isinsets($23, $24);
      var $26=(($25)|0)!=0;
      if ($26) { label = 8; break; } else { label = 16; break; }
    case 8: 
      var $28=$2;
      var $29=(($28+52)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)+(1))|0);
      HEAP32[(($29)>>2)]=$31;
      var $32=(($30) & 255);
      $cat=$32;
      var $33=$cat;
      var $34=$c;
      var $35=$cats;
      var $36=(($35+$34)|0);
      HEAP8[($36)]=$33;
      var $37=$c;
      var $38=((($37)+(1))|0);
      $c2=$38;
      label = 9; break;
    case 9: 
      var $40=$c2;
      var $41=(($40)|0) <= 127;
      if ($41) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $43=$c2;
      var $44=$cats;
      var $45=(($44+$43)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&255);
      var $48=(($47)|0)==0;
      if ($48) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $50=$2;
      var $51=$c;
      var $52=$c2;
      var $53=_samesets($50, $51, $52);
      var $54=(($53)|0)!=0;
      if ($54) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $56=$cat;
      var $57=$c2;
      var $58=$cats;
      var $59=(($58+$57)|0);
      HEAP8[($59)]=$56;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $62=$c2;
      var $63=((($62)+(1))|0);
      $c2=$63;
      label = 9; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $67=$c;
      var $68=((($67)+(1))|0);
      $c=$68;
      label = 5; break;
    case 18: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_categorize["X"]=1;

function _stripsnug($p, $g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$p;
      $2=$g;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+28)|0);
      HEAP32[(($7)>>2)]=$5;
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=$1;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14<<2))|0);
      var $16=_realloc($11, $15);
      var $17=$16;
      var $18=$2;
      var $19=(($18+4)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|0)==0;
      if ($23) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=$1;
      var $26=_seterr($25, 12);
      var $27=$1;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+4)|0);
      HEAP32[(($31)>>2)]=$29;
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _findmust($p, $g) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $scan;
      var $start;
      var $newstart;
      var $newlen;
      var $s;
      var $cp;
      var $i;
      $1=$p;
      $2=$g;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0)!=0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 37; break;
    case 4: 
      $newlen=0;
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+4)|0);
      $scan=$12;
      label = 5; break;
    case 5: 
      var $14=$scan;
      var $15=(($14+4)|0);
      $scan=$15;
      var $16=HEAP32[(($14)>>2)];
      $s=$16;
      var $17=$s;
      var $18=$17 & -134217728;
      if ((($18)|0) == 268435456) {
        label = 6; break;
      }
      else if ((($18)|0) == 1207959552 || (($18)|0) == 1744830464 || (($18)|0) == 1879048192) {
        label = 9; break;
      }
      else if ((($18)|0) == 1476395008 || (($18)|0) == 2013265920) {
        label = 10; break;
      }
      else {
      label = 20; break;
      }
      
    case 6: 
      var $20=$newlen;
      var $21=(($20)|0)==0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $23=$scan;
      var $24=((($23)-(4))|0);
      $newstart=$24;
      label = 8; break;
    case 8: 
      var $26=$newlen;
      var $27=((($26)+(1))|0);
      $newlen=$27;
      label = 23; break;
    case 9: 
      label = 23; break;
    case 10: 
      var $30=$scan;
      var $31=((($30)-(4))|0);
      $scan=$31;
      label = 11; break;
    case 11: 
      var $33=$s;
      var $34=$33 & 134217727;
      var $35=$scan;
      var $36=(($35+($34<<2))|0);
      $scan=$36;
      var $37=$scan;
      var $38=HEAP32[(($37)>>2)];
      $s=$38;
      var $39=$s;
      var $40=$39 & -134217728;
      var $41=(($40)|0)!=1610612736;
      if ($41) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $43=$s;
      var $44=$43 & -134217728;
      var $45=(($44)|0)!=-1879048192;
      if ($45) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $47=$s;
      var $48=$47 & -134217728;
      var $49=(($48)|0)!=-2013265920;
      if ($49) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $51=$2;
      var $52=(($51+40)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 | 4;
      HEAP32[(($52)>>2)]=$54;
      label = 37; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $57=$s;
      var $58=$57 & -134217728;
      var $59=(($58)|0)!=1610612736;
      if ($59) { label = 17; break; } else { var $65 = 0;label = 18; break; }
    case 17: 
      var $61=$s;
      var $62=$61 & -134217728;
      var $63=(($62)|0)!=-1879048192;
      var $65 = $63;label = 18; break;
    case 18: 
      var $65;
      if ($65) { label = 11; break; } else { label = 19; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $68=$newlen;
      var $69=$2;
      var $70=(($69+64)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($68)|0) > (($71)|0);
      if ($72) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $74=$newstart;
      $start=$74;
      var $75=$newlen;
      var $76=$2;
      var $77=(($76+64)|0);
      HEAP32[(($77)>>2)]=$75;
      label = 22; break;
    case 22: 
      $newlen=0;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $81=$s;
      var $82=$81 & -134217728;
      var $83=(($82)|0)!=134217728;
      if ($83) { label = 5; break; } else { label = 25; break; }
    case 25: 
      var $85=$2;
      var $86=(($85+64)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0)==0;
      if ($88) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 37; break;
    case 27: 
      var $91=$2;
      var $92=(($91+64)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($93)+(1))|0);
      var $95=_malloc($94);
      var $96=$2;
      var $97=(($96+60)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$2;
      var $99=(($98+60)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100)|0)==0;
      if ($101) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $103=$2;
      var $104=(($103+64)|0);
      HEAP32[(($104)>>2)]=0;
      label = 37; break;
    case 29: 
      var $106=$2;
      var $107=(($106+60)|0);
      var $108=HEAP32[(($107)>>2)];
      $cp=$108;
      var $109=$start;
      $scan=$109;
      var $110=$2;
      var $111=(($110+64)|0);
      var $112=HEAP32[(($111)>>2)];
      $i=$112;
      label = 30; break;
    case 30: 
      var $114=$i;
      var $115=(($114)|0) > 0;
      if ($115) { label = 31; break; } else { label = 36; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $118=$scan;
      var $119=(($118+4)|0);
      $scan=$119;
      var $120=HEAP32[(($118)>>2)];
      $s=$120;
      var $121=$120 & -134217728;
      var $122=(($121)|0)!=268435456;
      if ($122) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 32; break;
    case 34: 
      var $125=$s;
      var $126=$125 & 134217727;
      var $127=(($126) & 255);
      var $128=$cp;
      var $129=(($128+1)|0);
      $cp=$129;
      HEAP8[($128)]=$127;
      label = 35; break;
    case 35: 
      var $131=$i;
      var $132=((($131)-(1))|0);
      $i=$132;
      label = 30; break;
    case 36: 
      var $134=$cp;
      var $135=(($134+1)|0);
      $cp=$135;
      HEAP8[($134)]=0;
      label = 37; break;
    case 37: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_findmust["X"]=1;

function _isinsets($g, $c) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $col;
      var $i;
      var $ncols;
      var $uc;
      $2=$g;
      $3=$c;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=((($6)+(7))|0);
      var $8=((((($7)|0))/(8))&-1);
      $ncols=$8;
      var $9=$3;
      var $10=(($9) & 255);
      var $11=(($10)&255);
      $uc=$11;
      $i=0;
      var $12=$2;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      $col=$14;
      label = 3; break;
    case 3: 
      var $16=$i;
      var $17=$ncols;
      var $18=(($16)|0) < (($17)|0);
      if ($18) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $20=$uc;
      var $21=$col;
      var $22=(($21+$20)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&255);
      var $25=(($24)|0)!=0;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=1;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$col;
      var $35=(($34+$33)|0);
      $col=$35;
      label = 3; break;
    case 8: 
      $1=0;
      label = 9; break;
    case 9: 
      var $38=$1;

      return $38;
    default: assert(0, "bad label: " + label);
  }
}
_isinsets["X"]=1;

function _samesets($g, $c1, $c2) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $col;
      var $i;
      var $ncols;
      var $uc1;
      var $uc2;
      $2=$g;
      $3=$c1;
      $4=$c2;
      var $5=$2;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)+(7))|0);
      var $9=((((($8)|0))/(8))&-1);
      $ncols=$9;
      var $10=$3;
      var $11=(($10) & 255);
      var $12=(($11)&255);
      $uc1=$12;
      var $13=$4;
      var $14=(($13) & 255);
      var $15=(($14)&255);
      $uc2=$15;
      $i=0;
      var $16=$2;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      $col=$18;
      label = 3; break;
    case 3: 
      var $20=$i;
      var $21=$ncols;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $24=$uc1;
      var $25=$col;
      var $26=(($25+$24)|0);
      var $27=HEAP8[($26)];
      var $28=(($27)&255);
      var $29=$uc2;
      var $30=$col;
      var $31=(($30+$29)|0);
      var $32=HEAP8[($31)];
      var $33=(($32)&255);
      var $34=(($28)|0)!=(($33)|0);
      if ($34) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $38=$i;
      var $39=((($38)+(1))|0);
      $i=$39;
      var $40=$2;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$col;
      var $44=(($43+$42)|0);
      $col=$44;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $47=$1;

      return $47;
    default: assert(0, "bad label: " + label);
  }
}
_samesets["X"]=1;

function _enlarge($p, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$p;
      $3=$size;
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$3;
      var $8=(($6)|0) >= (($7)|0);
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=1;
      label = 7; break;
    case 4: 
      var $11=$2;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=$3;
      var $16=((($15<<2))|0);
      var $17=_realloc($14, $16);
      var $18=$17;
      $sp=$18;
      var $19=$sp;
      var $20=(($19)|0)==0;
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $22=$2;
      var $23=_seterr($22, 12);
      $1=0;
      label = 7; break;
    case 6: 
      var $25=$sp;
      var $26=$2;
      var $27=(($26+12)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$3;
      var $29=$2;
      var $30=(($29+16)|0);
      HEAP32[(($30)>>2)]=$28;
      $1=1;
      label = 7; break;
    case 7: 
      var $32=$1;

      return $32;
    default: assert(0, "bad label: " + label);
  }
}


function _p_simp_re($p, $starordinary) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $count;
      var $count2;
      var $pos;
      var $i;
      var $subno;
      $2=$p;
      $3=$starordinary;
      var $4=$2;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $pos=$6;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+1)|0);
      HEAP32[(($8)>>2)]=$10;
      var $11=HEAP8[($9)];
      var $12=(($11 << 24) >> 24);
      $c=$12;
      var $13=$c;
      var $14=(($13)|0)==92;
      if ($14) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18)>>>0) < (($21)>>>0);
      if ($22) { var $28 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $24=$2;
      var $25=_seterr($24, 5);
      var $26=(($25)|0)!=0;
      var $28 = $26;label = 5; break;
    case 5: 
      var $28;
      var $29=(($28)&1);
      var $30=$2;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+1)|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=HEAP8[($32)];
      var $35=(($34 << 24) >> 24);
      var $36=256 | $35;
      $c=$36;
      label = 6; break;
    case 6: 
      var $38=$c;
      if ((($38)|0) == 46) {
        label = 7; break;
      }
      else if ((($38)|0) == 91) {
        label = 11; break;
      }
      else if ((($38)|0) == 379) {
        label = 12; break;
      }
      else if ((($38)|0) == 296) {
        label = 13; break;
      }
      else if ((($38)|0) == 297 || (($38)|0) == 381) {
        label = 31; break;
      }
      else if ((($38)|0) == 305 || (($38)|0) == 306 || (($38)|0) == 307 || (($38)|0) == 308 || (($38)|0) == 309 || (($38)|0) == 310 || (($38)|0) == 311 || (($38)|0) == 312 || (($38)|0) == 313) {
        label = 32; break;
      }
      else if ((($38)|0) == 42) {
        label = 36; break;
      }
      else {
      label = 39; break;
      }
      
    case 7: 
      var $40=$2;
      var $41=(($40+28)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & 8;
      var $46=(($45)|0)!=0;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$2;
      _nonnewline($48);
      label = 10; break;
    case 9: 
      var $50=$2;
      _doemit($50, 671088640, 0);
      label = 10; break;
    case 10: 
      label = 40; break;
    case 11: 
      var $53=$2;
      _p_bracket($53);
      label = 40; break;
    case 12: 
      var $55=$2;
      var $56=_seterr($55, 13);
      label = 40; break;
    case 13: 
      var $58=$2;
      var $59=(($58+28)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+68)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)+(1))|0);
      HEAP32[(($61)>>2)]=$63;
      var $64=$2;
      var $65=(($64+28)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+68)|0);
      var $68=HEAP32[(($67)>>2)];
      $subno=$68;
      var $69=$subno;
      var $70=(($69)|0) < 10;
      if ($70) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $72=$2;
      var $73=(($72+20)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$subno;
      var $76=$2;
      var $77=(($76+32)|0);
      var $78=(($77+($75<<2))|0);
      HEAP32[(($78)>>2)]=$74;
      label = 15; break;
    case 15: 
      var $80=$2;
      var $81=$subno;
      _doemit($80, 1744830464, $81);
      var $82=$2;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+4)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($84)>>>0) < (($87)>>>0);
      if ($88) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $90=$2;
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$2;
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($92)>>>0) < (($95)>>>0);
      if ($96) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $98=$2;
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+1)|0);
      var $102=$2;
      var $103=(($102+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) < (($104)>>>0);
      if ($105) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $107=$2;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=HEAP8[($109)];
      var $111=(($110 << 24) >> 24);
      var $112=(($111)|0)==92;
      if ($112) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $114=$2;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+1)|0);
      var $118=HEAP8[($117)];
      var $119=(($118 << 24) >> 24);
      var $120=(($119)|0)==41;
      if ($120) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $122=$2;
      _p_bre($122, 92, 41);
      label = 21; break;
    case 21: 
      var $124=$subno;
      var $125=(($124)|0) < 10;
      if ($125) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $127=$2;
      var $128=(($127+20)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$subno;
      var $131=$2;
      var $132=(($131+72)|0);
      var $133=(($132+($130<<2))|0);
      HEAP32[(($133)>>2)]=$129;
      label = 23; break;
    case 23: 
      var $135=$2;
      var $136=$subno;
      _doemit($135, 1879048192, $136);
      var $137=$2;
      var $138=(($137)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=$2;
      var $141=(($140+4)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($139)>>>0) < (($142)>>>0);
      if ($143) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $145=$2;
      var $146=(($145)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($147+1)|0);
      var $149=$2;
      var $150=(($149+4)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($148)>>>0) < (($151)>>>0);
      if ($152) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $154=$2;
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=HEAP8[($156)];
      var $158=(($157 << 24) >> 24);
      var $159=(($158)|0)==92;
      if ($159) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $161=$2;
      var $162=(($161)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163+1)|0);
      var $165=HEAP8[($164)];
      var $166=(($165 << 24) >> 24);
      var $167=(($166)|0)==41;
      if ($167) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $169=$2;
      var $170=(($169)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+2)|0);
      HEAP32[(($170)>>2)]=$172;
      if (1) { var $179 = 1;label = 30; break; } else { label = 29; break; }
    case 28: 
      if (0) { var $179 = 1;label = 30; break; } else { label = 29; break; }
    case 29: 
      var $175=$2;
      var $176=_seterr($175, 8);
      var $177=(($176)|0)!=0;
      var $179 = $177;label = 30; break;
    case 30: 
      var $179;
      var $180=(($179)&1);
      label = 40; break;
    case 31: 
      var $182=$2;
      var $183=_seterr($182, 8);
      label = 40; break;
    case 32: 
      var $185=$c;
      var $186=$185 & -257;
      var $187=((($186)-(48))|0);
      $i=$187;
      var $188=$i;
      var $189=$2;
      var $190=(($189+72)|0);
      var $191=(($190+($188<<2))|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192)|0)!=0;
      if ($193) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $195=$2;
      var $196=$i;
      _doemit($195, 939524096, $196);
      var $197=$2;
      var $198=$i;
      var $199=$2;
      var $200=(($199+32)|0);
      var $201=(($200+($198<<2))|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=((($202)+(1))|0);
      var $204=$i;
      var $205=$2;
      var $206=(($205+72)|0);
      var $207=(($206+($204<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=_dupl($197, $203, $208);
      var $210=$2;
      var $211=$i;
      _doemit($210, 1073741824, $211);
      label = 35; break;
    case 34: 
      var $213=$2;
      var $214=_seterr($213, 6);
      label = 35; break;
    case 35: 
      var $216=$2;
      var $217=(($216+28)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+72)|0);
      HEAP32[(($219)>>2)]=1;
      label = 40; break;
    case 36: 
      var $221=$3;
      var $222=(($221)|0)!=0;
      if ($222) { var $228 = 1;label = 38; break; } else { label = 37; break; }
    case 37: 
      var $224=$2;
      var $225=_seterr($224, 13);
      var $226=(($225)|0)!=0;
      var $228 = $226;label = 38; break;
    case 38: 
      var $228;
      var $229=(($228)&1);
      label = 39; break;
    case 39: 
      var $231=$2;
      var $232=$c;
      var $233=(($232) & 255);
      var $234=(($233 << 24) >> 24);
      _ordinary($231, $234);
      label = 40; break;
    case 40: 
      var $236=$2;
      var $237=(($236)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$2;
      var $240=(($239+4)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($238)>>>0) < (($241)>>>0);
      if ($242) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $244=$2;
      var $245=(($244)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=HEAP8[($246)];
      var $248=(($247 << 24) >> 24);
      var $249=(($248)|0)==42;
      if ($249) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $251=$2;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+1)|0);
      HEAP32[(($252)>>2)]=$254;
      if (1) { label = 44; break; } else { label = 45; break; }
    case 43: 
      if (0) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $257=$2;
      var $258=$2;
      var $259=(($258+20)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$pos;
      var $262=((($260)-($261))|0);
      var $263=((($262)+(1))|0);
      var $264=$pos;
      _doinsert($257, 1207959552, $263, $264);
      var $265=$2;
      var $266=$2;
      var $267=(($266+20)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$pos;
      var $270=((($268)-($269))|0);
      _doemit($265, 1342177280, $270);
      var $271=$2;
      var $272=$2;
      var $273=(($272+20)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=$pos;
      var $276=((($274)-($275))|0);
      var $277=((($276)+(1))|0);
      var $278=$pos;
      _doinsert($271, 1476395008, $277, $278);
      var $279=$2;
      var $280=$2;
      var $281=(($280+20)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$pos;
      var $284=((($282)-($283))|0);
      _doemit($279, 1610612736, $284);
      label = 86; break;
    case 45: 
      var $286=$2;
      var $287=(($286)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$2;
      var $290=(($289+4)|0);
      var $291=HEAP32[(($290)>>2)];
      var $292=(($288)>>>0) < (($291)>>>0);
      if ($292) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $294=$2;
      var $295=(($294)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($296+1)|0);
      var $298=$2;
      var $299=(($298+4)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=(($297)>>>0) < (($300)>>>0);
      if ($301) { label = 47; break; } else { label = 50; break; }
    case 47: 
      var $303=$2;
      var $304=(($303)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=HEAP8[($305)];
      var $307=(($306 << 24) >> 24);
      var $308=(($307)|0)==92;
      if ($308) { label = 48; break; } else { label = 50; break; }
    case 48: 
      var $310=$2;
      var $311=(($310)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312+1)|0);
      var $314=HEAP8[($313)];
      var $315=(($314 << 24) >> 24);
      var $316=(($315)|0)==123;
      if ($316) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $318=$2;
      var $319=(($318)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=(($320+2)|0);
      HEAP32[(($319)>>2)]=$321;
      if (1) { label = 51; break; } else { label = 82; break; }
    case 50: 
      if (0) { label = 51; break; } else { label = 82; break; }
    case 51: 
      var $324=$2;
      var $325=_p_count($324);
      $count=$325;
      var $326=$2;
      var $327=(($326)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=$2;
      var $330=(($329+4)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=(($328)>>>0) < (($331)>>>0);
      if ($332) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $334=$2;
      var $335=(($334)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=HEAP8[($336)];
      var $338=(($337 << 24) >> 24);
      var $339=(($338)|0)==44;
      if ($339) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $341=$2;
      var $342=(($341)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=(($343+1)|0);
      HEAP32[(($342)>>2)]=$344;
      if (1) { label = 55; break; } else { label = 62; break; }
    case 54: 
      if (0) { label = 55; break; } else { label = 62; break; }
    case 55: 
      var $347=$2;
      var $348=(($347)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=$2;
      var $351=(($350+4)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=(($349)>>>0) < (($352)>>>0);
      if ($353) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $355=$2;
      var $356=(($355)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=HEAP8[($357)];
      var $359=(($358)&255);
      var $360=_isdigit($359);
      var $361=(($360)|0)!=0;
      if ($361) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $363=$2;
      var $364=_p_count($363);
      $count2=$364;
      var $365=$count;
      var $366=$count2;
      var $367=(($365)|0) <= (($366)|0);
      if ($367) { var $373 = 1;label = 59; break; } else { label = 58; break; }
    case 58: 
      var $369=$2;
      var $370=_seterr($369, 10);
      var $371=(($370)|0)!=0;
      var $373 = $371;label = 59; break;
    case 59: 
      var $373;
      var $374=(($373)&1);
      label = 61; break;
    case 60: 
      $count2=256;
      label = 61; break;
    case 61: 
      label = 63; break;
    case 62: 
      var $378=$count;
      $count2=$378;
      label = 63; break;
    case 63: 
      var $380=$2;
      var $381=$pos;
      var $382=$count;
      var $383=$count2;
      _repeat($380, $381, $382, $383);
      var $384=$2;
      var $385=(($384)|0);
      var $386=HEAP32[(($385)>>2)];
      var $387=$2;
      var $388=(($387+4)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($386)>>>0) < (($389)>>>0);
      if ($390) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $392=$2;
      var $393=(($392)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=(($394+1)|0);
      var $396=$2;
      var $397=(($396+4)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=(($395)>>>0) < (($398)>>>0);
      if ($399) { label = 65; break; } else { label = 68; break; }
    case 65: 
      var $401=$2;
      var $402=(($401)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=HEAP8[($403)];
      var $405=(($404 << 24) >> 24);
      var $406=(($405)|0)==92;
      if ($406) { label = 66; break; } else { label = 68; break; }
    case 66: 
      var $408=$2;
      var $409=(($408)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($410+1)|0);
      var $412=HEAP8[($411)];
      var $413=(($412 << 24) >> 24);
      var $414=(($413)|0)==125;
      if ($414) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $416=$2;
      var $417=(($416)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=(($418+2)|0);
      HEAP32[(($417)>>2)]=$419;
      if (1) { label = 81; break; } else { label = 69; break; }
    case 68: 
      if (0) { label = 81; break; } else { label = 69; break; }
    case 69: 
      label = 70; break;
    case 70: 
      var $423=$2;
      var $424=(($423)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=$2;
      var $427=(($426+4)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=(($425)>>>0) < (($428)>>>0);
      if ($429) { label = 71; break; } else { var $466 = 0;label = 76; break; }
    case 71: 
      var $431=$2;
      var $432=(($431)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=$2;
      var $435=(($434+4)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=(($433)>>>0) < (($436)>>>0);
      if ($437) { label = 72; break; } else { var $463 = 0;label = 75; break; }
    case 72: 
      var $439=$2;
      var $440=(($439)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442=(($441+1)|0);
      var $443=$2;
      var $444=(($443+4)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=(($442)>>>0) < (($445)>>>0);
      if ($446) { label = 73; break; } else { var $463 = 0;label = 75; break; }
    case 73: 
      var $448=$2;
      var $449=(($448)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=HEAP8[($450)];
      var $452=(($451 << 24) >> 24);
      var $453=(($452)|0)==92;
      if ($453) { label = 74; break; } else { var $463 = 0;label = 75; break; }
    case 74: 
      var $455=$2;
      var $456=(($455)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457+1)|0);
      var $459=HEAP8[($458)];
      var $460=(($459 << 24) >> 24);
      var $461=(($460)|0)==125;
      var $463 = $461;label = 75; break;
    case 75: 
      var $463;
      var $464=$463 ^ 1;
      var $466 = $464;label = 76; break;
    case 76: 
      var $466;
      if ($466) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $468=$2;
      var $469=(($468)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=(($470+1)|0);
      HEAP32[(($469)>>2)]=$471;
      label = 70; break;
    case 78: 
      var $473=$2;
      var $474=(($473)|0);
      var $475=HEAP32[(($474)>>2)];
      var $476=$2;
      var $477=(($476+4)|0);
      var $478=HEAP32[(($477)>>2)];
      var $479=(($475)>>>0) < (($478)>>>0);
      if ($479) { var $485 = 1;label = 80; break; } else { label = 79; break; }
    case 79: 
      var $481=$2;
      var $482=_seterr($481, 9);
      var $483=(($482)|0)!=0;
      var $485 = $483;label = 80; break;
    case 80: 
      var $485;
      var $486=(($485)&1);
      var $487=$2;
      var $488=_seterr($487, 10);
      label = 81; break;
    case 81: 
      label = 85; break;
    case 82: 
      var $491=$c;
      var $492=(($491)|0)==36;
      if ($492) { label = 83; break; } else { label = 84; break; }
    case 83: 
      $1=1;
      label = 87; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      $1=0;
      label = 87; break;
    case 87: 
      var $498=$1;

      return $498;
    default: assert(0, "bad label: " + label);
  }
}
_p_simp_re["X"]=1;

function _nonnewline($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $oldnext;
  var $oldend;
  var $bracket=__stackBase__;
  $1=$p;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  $oldnext=$4;
  var $5=$1;
  var $6=(($5+4)|0);
  var $7=HEAP32[(($6)>>2)];
  $oldend=$7;
  var $8=(($bracket)|0);
  var $9=$1;
  var $10=(($9)|0);
  HEAP32[(($10)>>2)]=$8;
  var $11=(($bracket)|0);
  var $12=(($11+3)|0);
  var $13=$1;
  var $14=(($13+4)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=(($bracket)|0);
  HEAP8[($15)]=94;
  var $16=(($bracket+1)|0);
  HEAP8[($16)]=10;
  var $17=(($bracket+2)|0);
  HEAP8[($17)]=93;
  var $18=(($bracket+3)|0);
  HEAP8[($18)]=0;
  var $19=$1;
  _p_bracket($19);
  var $20=$oldnext;
  var $21=$1;
  var $22=(($21)|0);
  HEAP32[(($22)>>2)]=$20;
  var $23=$oldend;
  var $24=$1;
  var $25=(($24+4)|0);
  HEAP32[(($25)>>2)]=$23;
  STACKTOP = __stackBase__;
  return;
}


function _p_bracket($p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $cs;
      var $invert;
      var $i;
      var $ci;
      var $i1;
      $1=$p;
      $invert=0;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+5)|0);
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=_strncmp($13, ((5271420)|0), 6);
      var $15=(($14)|0)==0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$1;
      _doemit($17, -1744830464, 0);
      var $18=$1;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+6)|0);
      HEAP32[(($19)>>2)]=$21;
      label = 75; break;
    case 5: 
      var $23=$1;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+5)|0);
      var $27=$1;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($26)>>>0) < (($29)>>>0);
      if ($30) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $32=$1;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=_strncmp($34, ((5272428)|0), 6);
      var $36=(($35)|0)==0;
      if ($36) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $38=$1;
      _doemit($38, -1610612736, 0);
      var $39=$1;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+6)|0);
      HEAP32[(($40)>>2)]=$42;
      label = 75; break;
    case 8: 
      var $44=$1;
      var $45=_allocset($44);
      $cs=$45;
      var $46=(($45)|0)==0;
      if ($46) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 75; break;
    case 10: 
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$1;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($51)>>>0) < (($54)>>>0);
      if ($55) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $57=$1;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=HEAP8[($59)];
      var $61=(($60 << 24) >> 24);
      var $62=(($61)|0)==94;
      if ($62) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $64=$1;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+1)|0);
      HEAP32[(($65)>>2)]=$67;
      if (1) { label = 14; break; } else { label = 15; break; }
    case 13: 
      if (0) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $70=$invert;
      var $71=((($70)+(1))|0);
      $invert=$71;
      label = 15; break;
    case 15: 
      var $73=$1;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$1;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($75)>>>0) < (($78)>>>0);
      if ($79) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $81=$1;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=HEAP8[($83)];
      var $85=(($84 << 24) >> 24);
      var $86=(($85)|0)==93;
      if ($86) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $88=$1;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+1)|0);
      HEAP32[(($89)>>2)]=$91;
      if (1) { label = 19; break; } else { label = 20; break; }
    case 18: 
      if (0) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $94=$cs;
      var $95=(($94+4)|0);
      var $96=HEAP8[($95)];
      var $97=(($96)&255);
      var $98=$cs;
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+93)|0);
      var $102=HEAP8[($101)];
      var $103=(($102)&255);
      var $104=$103 | $97;
      var $105=(($104) & 255);
      HEAP8[($101)]=$105;
      var $106=$cs;
      var $107=(($106+5)|0);
      var $108=HEAP8[($107)];
      var $109=(($108)&255);
      var $110=((($109)+(93))|0);
      var $111=(($110) & 255);
      HEAP8[($107)]=$111;
      label = 26; break;
    case 20: 
      var $113=$1;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$1;
      var $117=(($116+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($115)>>>0) < (($118)>>>0);
      if ($119) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $121=$1;
      var $122=(($121)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=HEAP8[($123)];
      var $125=(($124 << 24) >> 24);
      var $126=(($125)|0)==45;
      if ($126) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $128=$1;
      var $129=(($128)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+1)|0);
      HEAP32[(($129)>>2)]=$131;
      if (1) { label = 24; break; } else { label = 25; break; }
    case 23: 
      if (0) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $134=$cs;
      var $135=(($134+4)|0);
      var $136=HEAP8[($135)];
      var $137=(($136)&255);
      var $138=$cs;
      var $139=(($138)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+45)|0);
      var $142=HEAP8[($141)];
      var $143=(($142)&255);
      var $144=$143 | $137;
      var $145=(($144) & 255);
      HEAP8[($141)]=$145;
      var $146=$cs;
      var $147=(($146+5)|0);
      var $148=HEAP8[($147)];
      var $149=(($148)&255);
      var $150=((($149)+(45))|0);
      var $151=(($150) & 255);
      HEAP8[($147)]=$151;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $155=$1;
      var $156=(($155)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$1;
      var $159=(($158+4)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($157)>>>0) < (($160)>>>0);
      if ($161) { label = 28; break; } else { var $205 = 0;label = 34; break; }
    case 28: 
      var $163=$1;
      var $164=(($163)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=HEAP8[($165)];
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|0)!=93;
      if ($168) { label = 29; break; } else { var $205 = 0;label = 34; break; }
    case 29: 
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$1;
      var $174=(($173+4)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=(($172)>>>0) < (($175)>>>0);
      if ($176) { label = 30; break; } else { var $202 = 0;label = 33; break; }
    case 30: 
      var $178=$1;
      var $179=(($178)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180+1)|0);
      var $182=$1;
      var $183=(($182+4)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($181)>>>0) < (($184)>>>0);
      if ($185) { label = 31; break; } else { var $202 = 0;label = 33; break; }
    case 31: 
      var $187=$1;
      var $188=(($187)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=HEAP8[($189)];
      var $191=(($190 << 24) >> 24);
      var $192=(($191)|0)==45;
      if ($192) { label = 32; break; } else { var $202 = 0;label = 33; break; }
    case 32: 
      var $194=$1;
      var $195=(($194)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196+1)|0);
      var $198=HEAP8[($197)];
      var $199=(($198 << 24) >> 24);
      var $200=(($199)|0)==93;
      var $202 = $200;label = 33; break;
    case 33: 
      var $202;
      var $203=$202 ^ 1;
      var $205 = $203;label = 34; break;
    case 34: 
      var $205;
      if ($205) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $207=$1;
      var $208=$cs;
      _p_b_term($207, $208);
      label = 27; break;
    case 36: 
      var $210=$1;
      var $211=(($210)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$1;
      var $214=(($213+4)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($212)>>>0) < (($215)>>>0);
      if ($216) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $218=$1;
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=HEAP8[($220)];
      var $222=(($221 << 24) >> 24);
      var $223=(($222)|0)==45;
      if ($223) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $225=$1;
      var $226=(($225)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+1)|0);
      HEAP32[(($226)>>2)]=$228;
      if (1) { label = 40; break; } else { label = 41; break; }
    case 39: 
      if (0) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $231=$cs;
      var $232=(($231+4)|0);
      var $233=HEAP8[($232)];
      var $234=(($233)&255);
      var $235=$cs;
      var $236=(($235)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237+45)|0);
      var $239=HEAP8[($238)];
      var $240=(($239)&255);
      var $241=$240 | $234;
      var $242=(($241) & 255);
      HEAP8[($238)]=$242;
      var $243=$cs;
      var $244=(($243+5)|0);
      var $245=HEAP8[($244)];
      var $246=(($245)&255);
      var $247=((($246)+(45))|0);
      var $248=(($247) & 255);
      HEAP8[($244)]=$248;
      label = 41; break;
    case 41: 
      var $250=$1;
      var $251=(($250)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$1;
      var $254=(($253+4)|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=(($252)>>>0) < (($255)>>>0);
      if ($256) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $258=$1;
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260+1)|0);
      HEAP32[(($259)>>2)]=$261;
      var $262=HEAP8[($260)];
      var $263=(($262 << 24) >> 24);
      var $264=(($263)|0)==93;
      if ($264) { var $270 = 1;label = 44; break; } else { label = 43; break; }
    case 43: 
      var $266=$1;
      var $267=_seterr($266, 7);
      var $268=(($267)|0)!=0;
      var $270 = $268;label = 44; break;
    case 44: 
      var $270;
      var $271=(($270)&1);
      var $272=$1;
      var $273=(($272+8)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=(($274)|0)!=0;
      if ($275) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $277=$1;
      var $278=$cs;
      _freeset($277, $278);
      label = 75; break;
    case 46: 
      var $280=$1;
      var $281=(($280+28)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=(($282+24)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$284 & 2;
      var $286=(($285)|0)!=0;
      if ($286) { label = 47; break; } else { label = 59; break; }
    case 47: 
      var $288=$1;
      var $289=(($288+28)|0);
      var $290=HEAP32[(($289)>>2)];
      var $291=(($290+8)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=((($292)-(1))|0);
      $i=$293;
      label = 48; break;
    case 48: 
      var $295=$i;
      var $296=(($295)|0) >= 0;
      if ($296) { label = 49; break; } else { label = 56; break; }
    case 49: 
      var $298=$i;
      var $299=(($298) & 255);
      var $300=(($299)&255);
      var $301=$cs;
      var $302=(($301)|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=(($303+$300)|0);
      var $305=HEAP8[($304)];
      var $306=(($305)&255);
      var $307=$cs;
      var $308=(($307+4)|0);
      var $309=HEAP8[($308)];
      var $310=(($309)&255);
      var $311=$306 & $310;
      var $312=(($311)|0)!=0;
      if ($312) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $314=$i;
      var $315=_isalpha($314);
      var $316=(($315)|0)!=0;
      if ($316) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $318=$i;
      var $319=_othercase($318);
      var $320=(($319 << 24) >> 24);
      $ci=$320;
      var $321=$ci;
      var $322=$i;
      var $323=(($321)|0)!=(($322)|0);
      if ($323) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $325=$cs;
      var $326=(($325+4)|0);
      var $327=HEAP8[($326)];
      var $328=(($327)&255);
      var $329=$ci;
      var $330=(($329) & 255);
      var $331=(($330)&255);
      var $332=$cs;
      var $333=(($332)|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=(($334+$331)|0);
      var $336=HEAP8[($335)];
      var $337=(($336)&255);
      var $338=$337 | $328;
      var $339=(($338) & 255);
      HEAP8[($335)]=$339;
      var $340=$ci;
      var $341=$cs;
      var $342=(($341+5)|0);
      var $343=HEAP8[($342)];
      var $344=(($343)&255);
      var $345=((($344)+($340))|0);
      var $346=(($345) & 255);
      HEAP8[($342)]=$346;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $350=$i;
      var $351=((($350)-(1))|0);
      $i=$351;
      label = 48; break;
    case 56: 
      var $353=$cs;
      var $354=(($353+12)|0);
      var $355=HEAP32[(($354)>>2)];
      var $356=(($355)|0)!=0;
      if ($356) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $358=$1;
      var $359=$cs;
      _mccase($358, $359);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $362=$invert;
      var $363=(($362)|0)!=0;
      if ($363) { label = 60; break; } else { label = 72; break; }
    case 60: 
      var $365=$1;
      var $366=(($365+28)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=(($367+8)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=((($369)-(1))|0);
      $i1=$370;
      label = 61; break;
    case 61: 
      var $372=$i1;
      var $373=(($372)|0) >= 0;
      if ($373) { label = 62; break; } else { label = 67; break; }
    case 62: 
      var $375=$i1;
      var $376=(($375) & 255);
      var $377=(($376)&255);
      var $378=$cs;
      var $379=(($378)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=(($380+$377)|0);
      var $382=HEAP8[($381)];
      var $383=(($382)&255);
      var $384=$cs;
      var $385=(($384+4)|0);
      var $386=HEAP8[($385)];
      var $387=(($386)&255);
      var $388=$383 & $387;
      var $389=(($388)|0)!=0;
      if ($389) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $391=$cs;
      var $392=(($391+4)|0);
      var $393=HEAP8[($392)];
      var $394=(($393)&255);
      var $395=$394 ^ -1;
      var $396=$i1;
      var $397=(($396) & 255);
      var $398=(($397)&255);
      var $399=$cs;
      var $400=(($399)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=(($401+$398)|0);
      var $403=HEAP8[($402)];
      var $404=(($403)&255);
      var $405=$404 & $395;
      var $406=(($405) & 255);
      HEAP8[($402)]=$406;
      var $407=$i1;
      var $408=$cs;
      var $409=(($408+5)|0);
      var $410=HEAP8[($409)];
      var $411=(($410)&255);
      var $412=((($411)-($407))|0);
      var $413=(($412) & 255);
      HEAP8[($409)]=$413;
      label = 65; break;
    case 64: 
      var $415=$cs;
      var $416=(($415+4)|0);
      var $417=HEAP8[($416)];
      var $418=(($417)&255);
      var $419=$i1;
      var $420=(($419) & 255);
      var $421=(($420)&255);
      var $422=$cs;
      var $423=(($422)|0);
      var $424=HEAP32[(($423)>>2)];
      var $425=(($424+$421)|0);
      var $426=HEAP8[($425)];
      var $427=(($426)&255);
      var $428=$427 | $418;
      var $429=(($428) & 255);
      HEAP8[($425)]=$429;
      var $430=$i1;
      var $431=$cs;
      var $432=(($431+5)|0);
      var $433=HEAP8[($432)];
      var $434=(($433)&255);
      var $435=((($434)+($430))|0);
      var $436=(($435) & 255);
      HEAP8[($432)]=$436;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $439=$i1;
      var $440=((($439)-(1))|0);
      $i1=$440;
      label = 61; break;
    case 67: 
      var $442=$1;
      var $443=(($442+28)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=(($444+24)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=$446 & 8;
      var $448=(($447)|0)!=0;
      if ($448) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $450=$cs;
      var $451=(($450+4)|0);
      var $452=HEAP8[($451)];
      var $453=(($452)&255);
      var $454=$453 ^ -1;
      var $455=$cs;
      var $456=(($455)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457+10)|0);
      var $459=HEAP8[($458)];
      var $460=(($459)&255);
      var $461=$460 & $454;
      var $462=(($461) & 255);
      HEAP8[($458)]=$462;
      var $463=$cs;
      var $464=(($463+5)|0);
      var $465=HEAP8[($464)];
      var $466=(($465)&255);
      var $467=((($466)-(10))|0);
      var $468=(($467) & 255);
      HEAP8[($464)]=$468;
      label = 69; break;
    case 69: 
      var $470=$cs;
      var $471=(($470+12)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=(($472)|0)!=0;
      if ($473) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $475=$1;
      var $476=$cs;
      _mcinvert($475, $476);
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $479=$1;
      var $480=$cs;
      var $481=_nch($479, $480);
      var $482=(($481)|0)==1;
      if ($482) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $484=$1;
      var $485=$1;
      var $486=$cs;
      var $487=_firstch($485, $486);
      _ordinary($484, $487);
      var $488=$1;
      var $489=$cs;
      _freeset($488, $489);
      label = 75; break;
    case 74: 
      var $491=$1;
      var $492=$1;
      var $493=$cs;
      var $494=_freezeset($492, $493);
      _doemit($491, 805306368, $494);
      label = 75; break;
    case 75: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_p_bracket["X"]=1;

function _dupl($p, $start, $finish) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $len;
      $2=$p;
      $3=$start;
      $4=$finish;
      var $5=$2;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $ret=$7;
      var $8=$4;
      var $9=$3;
      var $10=((($8)-($9))|0);
      $len=$10;
      var $11=$len;
      var $12=(($11)|0)==0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$ret;
      $1=$14;
      label = 7; break;
    case 4: 
      var $16=$2;
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$len;
      var $21=((($19)+($20))|0);
      var $22=_enlarge($16, $21);
      var $23=(($22)|0)!=0;
      if ($23) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $25=$ret;
      $1=$25;
      label = 7; break;
    case 6: 
      var $27=$2;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$2;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29+($32<<2))|0);
      var $34=$33;
      var $35=$2;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$3;
      var $39=(($37+($38<<2))|0);
      var $40=$39;
      var $41=$len;
      var $42=((($41<<2))|0);
      assert($42 % 1 === 0);_memcpy($34, $40, $42);
      var $43=$len;
      var $44=$2;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+($43))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=$ret;
      $1=$48;
      label = 7; break;
    case 7: 
      var $50=$1;

      return $50;
    default: assert(0, "bad label: " + label);
  }
}
_dupl["X"]=1;

function _ordinary($p, $ch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $cap;
      $1=$p;
      $2=$ch;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+56)|0);
      var $7=HEAP32[(($6)>>2)];
      $cap=$7;
      var $8=$1;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+24)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 & 2;
      var $14=(($13)|0)!=0;
      if ($14) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $16=$2;
      var $17=(($16) & 255);
      var $18=(($17)&255);
      var $19=_isalpha($18);
      var $20=(($19)|0)!=0;
      if ($20) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $22=$2;
      var $23=_othercase($22);
      var $24=(($23 << 24) >> 24);
      var $25=$2;
      var $26=(($24)|0)!=(($25)|0);
      if ($26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $28=$1;
      var $29=$2;
      _bothcases($28, $29);
      label = 9; break;
    case 6: 
      var $31=$1;
      var $32=$2;
      var $33=(($32) & 255);
      var $34=(($33)&255);
      _doemit($31, 268435456, $34);
      var $35=$2;
      var $36=$cap;
      var $37=(($36+$35)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&255);
      var $40=(($39)|0)==0;
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=$1;
      var $43=(($42+28)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($46) & 255);
      var $49=$2;
      var $50=$cap;
      var $51=(($50+$49)|0);
      HEAP8[($51)]=$48;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_ordinary["X"]=1;

function _doinsert($p, $op, $opnd, $pos) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sn;
      var $s;
      var $i;
      $1=$p;
      $2=$op;
      $3=$opnd;
      $4=$pos;
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 13; break;
    case 4: 
      var $11=$1;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      $sn=$13;
      var $14=$1;
      var $15=$2;
      var $16=$3;
      _doemit($14, $15, $16);
      var $17=$sn;
      var $18=$1;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+($17<<2))|0);
      var $22=HEAP32[(($21)>>2)];
      $s=$22;
      $i=1;
      label = 5; break;
    case 5: 
      var $24=$i;
      var $25=(($24)|0) < 10;
      if ($25) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $27=$i;
      var $28=$1;
      var $29=(($28+32)|0);
      var $30=(($29+($27<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$4;
      var $33=(($31)|0) >= (($32)|0);
      if ($33) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $35=$i;
      var $36=$1;
      var $37=(($36+32)|0);
      var $38=(($37+($35<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)+(1))|0);
      HEAP32[(($38)>>2)]=$40;
      label = 8; break;
    case 8: 
      var $42=$i;
      var $43=$1;
      var $44=(($43+72)|0);
      var $45=(($44+($42<<2))|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$4;
      var $48=(($46)|0) >= (($47)|0);
      if ($48) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $50=$i;
      var $51=$1;
      var $52=(($51+72)|0);
      var $53=(($52+($50<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)+(1))|0);
      HEAP32[(($53)>>2)]=$55;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $58=$i;
      var $59=((($58)+(1))|0);
      $i=$59;
      label = 5; break;
    case 12: 
      var $61=$4;
      var $62=((($61)+(1))|0);
      var $63=$1;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+($62<<2))|0);
      var $67=$66;
      var $68=$4;
      var $69=$1;
      var $70=(($69+12)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+($68<<2))|0);
      var $73=$72;
      var $74=$1;
      var $75=(($74+20)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$4;
      var $78=((($76)-($77))|0);
      var $79=((($78)-(1))|0);
      var $80=((($79<<2))|0);
      _memmove($67, $73, $80, 1, 0);
      var $81=$s;
      var $82=$4;
      var $83=$1;
      var $84=(($83+12)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+($82<<2))|0);
      HEAP32[(($86)>>2)]=$81;
      label = 13; break;
    case 13: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_doinsert["X"]=1;

function _dofwd($p, $pos, $value) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$pos;
      $3=$value;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $10=$2;
      var $11=$1;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+($10<<2))|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -134217728;
      var $17=$3;
      var $18=$16 | $17;
      var $19=$2;
      var $20=$1;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+($19<<2))|0);
      HEAP32[(($23)>>2)]=$18;
      label = 5; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _p_count($p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $count;
      var $ndigits;
      $1=$p;
      $count=0;
      $ndigits=0;
      label = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { label = 4; break; } else { var $22 = 0;label = 6; break; }
    case 4: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=HEAP8[($13)];
      var $15=(($14)&255);
      var $16=_isdigit($15);
      var $17=(($16)|0)!=0;
      if ($17) { label = 5; break; } else { var $22 = 0;label = 6; break; }
    case 5: 
      var $19=$count;
      var $20=(($19)|0) <= 255;
      var $22 = $20;label = 6; break;
    case 6: 
      var $22;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$count;
      var $25=((($24)*(10))|0);
      var $26=$1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+1)|0);
      HEAP32[(($27)>>2)]=$29;
      var $30=HEAP8[($28)];
      var $31=(($30 << 24) >> 24);
      var $32=((($31)-(48))|0);
      var $33=((($25)+($32))|0);
      $count=$33;
      var $34=$ndigits;
      var $35=((($34)+(1))|0);
      $ndigits=$35;
      label = 3; break;
    case 8: 
      var $37=$ndigits;
      var $38=(($37)|0) > 0;
      if ($38) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $40=$count;
      var $41=(($40)|0) <= 255;
      if ($41) { var $47 = 1;label = 11; break; } else { label = 10; break; }
    case 10: 
      var $43=$1;
      var $44=_seterr($43, 10);
      var $45=(($44)|0)!=0;
      var $47 = $45;label = 11; break;
    case 11: 
      var $47;
      var $48=(($47)&1);
      var $49=$count;

      return $49;
    default: assert(0, "bad label: " + label);
  }
}
_p_count["X"]=1;

function _repeat($p, $start, $from, $to) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $finish;
      var $copy;
      $1=$p;
      $2=$start;
      $3=$from;
      $4=$to;
      var $5=$1;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $finish=$7;
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 19; break;
    case 4: 
      var $14=$3;
      var $15=(($14)|0) <= 1;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$3;
      var $23 = $17;label = 7; break;
    case 6: 
      var $19=$3;
      var $20=(($19)|0)==256;
      var $21=$20 ? 3 : 2;
      var $23 = $21;label = 7; break;
    case 7: 
      var $23;
      var $24=((($23<<3))|0);
      var $25=$4;
      var $26=(($25)|0) <= 1;
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $28=$4;
      var $34 = $28;label = 10; break;
    case 9: 
      var $30=$4;
      var $31=(($30)|0)==256;
      var $32=$31 ? 3 : 2;
      var $34 = $32;label = 10; break;
    case 10: 
      var $34;
      var $35=((($24)+($34))|0);
      if ((($35)|0) == 0) {
        label = 11; break;
      }
      else if ((($35)|0) == 1 || (($35)|0) == 2 || (($35)|0) == 3) {
        label = 12; break;
      }
      else if ((($35)|0) == 9) {
        label = 13; break;
      }
      else if ((($35)|0) == 10) {
        label = 14; break;
      }
      else if ((($35)|0) == 11) {
        label = 15; break;
      }
      else if ((($35)|0) == 18) {
        label = 16; break;
      }
      else if ((($35)|0) == 19) {
        label = 17; break;
      }
      else {
      label = 18; break;
      }
      
    case 11: 
      var $37=$finish;
      var $38=$2;
      var $39=((($37)-($38))|0);
      var $40=$1;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=((($42)-($39))|0);
      HEAP32[(($41)>>2)]=$43;
      label = 19; break;
    case 12: 
      var $45=$1;
      var $46=$1;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$2;
      var $50=((($48)-($49))|0);
      var $51=((($50)+(1))|0);
      var $52=$2;
      _doinsert($45, 2013265920, $51, $52);
      var $53=$1;
      var $54=$2;
      var $55=((($54)+(1))|0);
      var $56=$4;
      _repeat($53, $55, 1, $56);
      var $57=$1;
      var $58=$1;
      var $59=(($58+20)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$2;
      var $62=((($60)-($61))|0);
      _doemit($57, -2147483648, $62);
      var $63=$1;
      var $64=$2;
      var $65=$1;
      var $66=(($65+20)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$2;
      var $69=((($67)-($68))|0);
      _dofwd($63, $64, $69);
      var $70=$1;
      _doemit($70, -2013265920, 0);
      var $71=$1;
      var $72=$1;
      var $73=(($72+20)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)-(1))|0);
      var $76=$1;
      var $77=(($76+20)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$1;
      var $80=(($79+20)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)-(1))|0);
      var $83=((($78)-($82))|0);
      _dofwd($71, $75, $83);
      var $84=$1;
      var $85=$1;
      var $86=(($85+20)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$1;
      var $89=(($88+20)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=((($90)-(2))|0);
      var $92=((($87)-($91))|0);
      _doemit($84, -1879048192, $92);
      label = 19; break;
    case 13: 
      label = 19; break;
    case 14: 
      var $95=$1;
      var $96=$1;
      var $97=(($96+20)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$2;
      var $100=((($98)-($99))|0);
      var $101=((($100)+(1))|0);
      var $102=$2;
      _doinsert($95, 2013265920, $101, $102);
      var $103=$1;
      var $104=$1;
      var $105=(($104+20)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$2;
      var $108=((($106)-($107))|0);
      _doemit($103, -2147483648, $108);
      var $109=$1;
      var $110=$2;
      var $111=$1;
      var $112=(($111+20)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$2;
      var $115=((($113)-($114))|0);
      _dofwd($109, $110, $115);
      var $116=$1;
      _doemit($116, -2013265920, 0);
      var $117=$1;
      var $118=$1;
      var $119=(($118+20)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)-(1))|0);
      var $122=$1;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$1;
      var $126=(($125+20)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=((($127)-(1))|0);
      var $129=((($124)-($128))|0);
      _dofwd($117, $121, $129);
      var $130=$1;
      var $131=$1;
      var $132=(($131+20)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$1;
      var $135=(($134+20)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=((($136)-(2))|0);
      var $138=((($133)-($137))|0);
      _doemit($130, -1879048192, $138);
      var $139=$1;
      var $140=$2;
      var $141=((($140)+(1))|0);
      var $142=$finish;
      var $143=((($142)+(1))|0);
      var $144=_dupl($139, $141, $143);
      $copy=$144;
      var $145=$1;
      var $146=$copy;
      var $147=$4;
      var $148=((($147)-(1))|0);
      _repeat($145, $146, 1, $148);
      label = 19; break;
    case 15: 
      var $150=$1;
      var $151=$1;
      var $152=(($151+20)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$2;
      var $155=((($153)-($154))|0);
      var $156=((($155)+(1))|0);
      var $157=$2;
      _doinsert($150, 1207959552, $156, $157);
      var $158=$1;
      var $159=$1;
      var $160=(($159+20)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$2;
      var $163=((($161)-($162))|0);
      _doemit($158, 1342177280, $163);
      label = 19; break;
    case 16: 
      var $165=$1;
      var $166=$2;
      var $167=$finish;
      var $168=_dupl($165, $166, $167);
      $copy=$168;
      var $169=$1;
      var $170=$copy;
      var $171=$3;
      var $172=((($171)-(1))|0);
      var $173=$4;
      var $174=((($173)-(1))|0);
      _repeat($169, $170, $172, $174);
      label = 19; break;
    case 17: 
      var $176=$1;
      var $177=$2;
      var $178=$finish;
      var $179=_dupl($176, $177, $178);
      $copy=$179;
      var $180=$1;
      var $181=$copy;
      var $182=$3;
      var $183=((($182)-(1))|0);
      var $184=$4;
      _repeat($180, $181, $183, $184);
      label = 19; break;
    case 18: 
      var $186=$1;
      var $187=_seterr($186, 15);
      label = 19; break;
    case 19: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_repeat["X"]=1;

function _othercase($ch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $2=$ch;
      var $3=$2;
      var $4=(($3) & 255);
      var $5=(($4)&255);
      $2=$5;
      var $6=$2;
      var $7=_isupper($6);
      var $8=(($7)|0)!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$2;
      var $11=_tolower($10);
      var $12=(($11) & 255);
      $1=$12;
      label = 7; break;
    case 4: 
      var $14=$2;
      var $15=_islower($14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$2;
      var $19=_toupper($18);
      var $20=(($19) & 255);
      $1=$20;
      label = 7; break;
    case 6: 
      var $22=$2;
      var $23=(($22) & 255);
      $1=$23;
      label = 7; break;
    case 7: 
      var $25=$1;

      return $25;
    default: assert(0, "bad label: " + label);
  }
}


function _bothcases($p, $ch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $oldnext;
  var $oldend;
  var $bracket=__stackBase__;
  $1=$p;
  $2=$ch;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  $oldnext=$5;
  var $6=$1;
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  $oldend=$8;
  var $9=$2;
  var $10=(($9) & 255);
  var $11=(($10)&255);
  $2=$11;
  var $12=(($bracket)|0);
  var $13=$1;
  var $14=(($13)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=(($bracket)|0);
  var $16=(($15+2)|0);
  var $17=$1;
  var $18=(($17+4)|0);
  HEAP32[(($18)>>2)]=$16;
  var $19=$2;
  var $20=(($19) & 255);
  var $21=(($bracket)|0);
  HEAP8[($21)]=$20;
  var $22=(($bracket+1)|0);
  HEAP8[($22)]=93;
  var $23=(($bracket+2)|0);
  HEAP8[($23)]=0;
  var $24=$1;
  _p_bracket($24);
  var $25=$oldnext;
  var $26=$1;
  var $27=(($26)|0);
  HEAP32[(($27)>>2)]=$25;
  var $28=$oldend;
  var $29=$1;
  var $30=(($29+4)|0);
  HEAP32[(($30)>>2)]=$28;
  STACKTOP = __stackBase__;
  return;
}


function _allocset($p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $no;
      var $nc;
      var $nbytes;
      var $cs;
      var $css;
      var $i;
      var $ptr;
      $2=$p;
      var $3=$2;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=((($7)+(1))|0);
      HEAP32[(($6)>>2)]=$8;
      $no=$7;
      var $9=$2;
      var $10=(($9+28)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      $css=$13;
      var $14=$no;
      var $15=$2;
      var $16=(($15+24)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14)|0) >= (($17)|0);
      if ($18) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $20=$2;
      var $21=(($20+24)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($22)+(8))|0);
      HEAP32[(($21)>>2)]=$23;
      var $24=$2;
      var $25=(($24+24)|0);
      var $26=HEAP32[(($25)>>2)];
      $nc=$26;
      var $27=$nc;
      var $28=Math.floor(((($27)>>>0))/(8));
      var $29=$css;
      var $30=((($28)*($29))|0);
      $nbytes=$30;
      var $31=$2;
      var $32=(($31+28)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=$nc;
      var $38=((($37<<4))|0);
      var $39=_realloc($36, $38);
      var $40=$39;
      var $41=$40;
      $ptr=$41;
      var $42=$ptr;
      var $43=(($42)|0)==0;
      if ($43) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 16; break;
    case 5: 
      var $46=$ptr;
      var $47=$46;
      var $48=$2;
      var $49=(($48+28)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+16)|0);
      HEAP32[(($51)>>2)]=$47;
      var $52=$2;
      var $53=(($52+28)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+20)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$nbytes;
      var $58=_realloc($56, $57);
      $ptr=$58;
      var $59=$ptr;
      var $60=(($59)|0)==0;
      if ($60) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 16; break;
    case 7: 
      var $63=$ptr;
      var $64=$2;
      var $65=(($64+28)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+20)|0);
      HEAP32[(($67)>>2)]=$63;
      $i=0;
      label = 8; break;
    case 8: 
      var $69=$i;
      var $70=$no;
      var $71=(($69)|0) < (($70)|0);
      if ($71) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $73=$2;
      var $74=(($73+28)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$css;
      var $79=$i;
      var $80=((((($79)|0))/(8))&-1);
      var $81=((($78)*($80))|0);
      var $82=(($77+$81)|0);
      var $83=$i;
      var $84=$2;
      var $85=(($84+28)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+($83<<4))|0);
      var $90=(($89)|0);
      HEAP32[(($90)>>2)]=$82;
      label = 10; break;
    case 10: 
      var $92=$i;
      var $93=((($92)+(1))|0);
      $i=$93;
      label = 8; break;
    case 11: 
      var $95=$2;
      var $96=(($95+28)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$nbytes;
      var $101=$css;
      var $102=((($100)-($101))|0);
      var $103=(($99+$102)|0);
      var $104=$css;
      _memset($103, 0, $104, 1);
      label = 12; break;
    case 12: 
      var $106=$2;
      var $107=(($106+28)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+16)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|0)==0;
      if ($111) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $113=$2;
      var $114=(($113+28)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+20)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|0)==0;
      if ($118) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $121=$no;
      var $122=$2;
      var $123=(($122+28)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($124+16)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+($121<<4))|0);
      $cs=$127;
      var $128=$2;
      var $129=(($128+28)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130+20)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$css;
      var $134=$no;
      var $135=((((($134)|0))/(8))&-1);
      var $136=((($133)*($135))|0);
      var $137=(($132+$136)|0);
      var $138=$cs;
      var $139=(($138)|0);
      HEAP32[(($139)>>2)]=$137;
      var $140=$no;
      var $141=((($140)|0))%(8);
      var $142=1 << $141;
      var $143=(($142) & 255);
      var $144=$cs;
      var $145=(($144+4)|0);
      HEAP8[($145)]=$143;
      var $146=$cs;
      var $147=(($146+5)|0);
      HEAP8[($147)]=0;
      var $148=$cs;
      var $149=(($148+8)|0);
      HEAP32[(($149)>>2)]=0;
      var $150=$cs;
      var $151=(($150+12)|0);
      HEAP32[(($151)>>2)]=0;
      var $152=$cs;
      $1=$152;
      label = 17; break;
    case 16: 
      var $154=$2;
      var $155=(($154+28)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+16)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$158;
      _free($159);
      var $160=$2;
      var $161=(($160+28)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+16)|0);
      HEAP32[(($163)>>2)]=0;
      var $164=$2;
      var $165=(($164+28)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+20)|0);
      var $168=HEAP32[(($167)>>2)];
      _free($168);
      var $169=$2;
      var $170=(($169+28)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171+20)|0);
      HEAP32[(($172)>>2)]=0;
      var $173=$2;
      var $174=_seterr($173, 12);
      $1=0;
      label = 17; break;
    case 17: 
      var $176=$1;

      return $176;
    default: assert(0, "bad label: " + label);
  }
}
_allocset["X"]=1;

function _mccase($p, $cs) {
  var label = 0;


  var $1;
  var $2;
  $1=$p;
  $2=$cs;

  return;
}


function _mcinvert($p, $cs) {
  var label = 0;


  var $1;
  var $2;
  $1=$p;
  $2=$cs;

  return;
}


function _freeset($p, $cs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $top;
      var $css;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+($7<<4))|0);
      $top=$13;
      var $14=$1;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      $css=$18;
      $i=0;
      label = 3; break;
    case 3: 
      var $20=$i;
      var $21=$css;
      var $22=(($20)>>>0) < (($21)>>>0);
      if ($22) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $24=$2;
      var $25=(($24+4)|0);
      var $26=HEAP8[($25)];
      var $27=(($26)&255);
      var $28=$27 ^ -1;
      var $29=$i;
      var $30=(($29) & 255);
      var $31=(($30)&255);
      var $32=$2;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+$31)|0);
      var $36=HEAP8[($35)];
      var $37=(($36)&255);
      var $38=$37 & $28;
      var $39=(($38) & 255);
      HEAP8[($35)]=$39;
      var $40=$i;
      var $41=$2;
      var $42=(($41+5)|0);
      var $43=HEAP8[($42)];
      var $44=(($43)&255);
      var $45=((($44)-($40))|0);
      var $46=(($45) & 255);
      HEAP8[($42)]=$46;
      label = 5; break;
    case 5: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      $i=$49;
      label = 3; break;
    case 6: 
      var $51=$2;
      var $52=$top;
      var $53=((($52)-(16))|0);
      var $54=(($51)|0)==(($53)|0);
      if ($54) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $56=$1;
      var $57=(($56+28)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      label = 8; break;
    case 8: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_freeset["X"]=1;

function _nch($p, $cs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $css;
      var $n;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      $css=$7;
      $n=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $9=$i;
      var $10=$css;
      var $11=(($9)>>>0) < (($10)>>>0);
      if ($11) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $13=$i;
      var $14=(($13) & 255);
      var $15=(($14)&255);
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+$15)|0);
      var $20=HEAP8[($19)];
      var $21=(($20)&255);
      var $22=$2;
      var $23=(($22+4)|0);
      var $24=HEAP8[($23)];
      var $25=(($24)&255);
      var $26=$21 & $25;
      var $27=(($26)|0)!=0;
      if ($27) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $29=$n;
      var $30=((($29)+(1))|0);
      $n=$30;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $33=$i;
      var $34=((($33)+(1))|0);
      $i=$34;
      label = 3; break;
    case 8: 
      var $36=$n;

      return $36;
    default: assert(0, "bad label: " + label);
  }
}


function _firstch($p, $cs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $css;
      $2=$p;
      $3=$cs;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      $css=$8;
      $i=0;
      label = 3; break;
    case 3: 
      var $10=$i;
      var $11=$css;
      var $12=(($10)>>>0) < (($11)>>>0);
      if ($12) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $14=$i;
      var $15=(($14) & 255);
      var $16=(($15)&255);
      var $17=$3;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+$16)|0);
      var $21=HEAP8[($20)];
      var $22=(($21)&255);
      var $23=$3;
      var $24=(($23+4)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&255);
      var $27=$22 & $26;
      var $28=(($27)|0)!=0;
      if ($28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $30=$i;
      var $31=(($30) & 255);
      var $32=(($31 << 24) >> 24);
      $1=$32;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $35=$i;
      var $36=((($35)+(1))|0);
      $i=$36;
      label = 3; break;
    case 8: 
      $1=0;
      label = 9; break;
    case 9: 
      var $39=$1;

      return $39;
    default: assert(0, "bad label: " + label);
  }
}


function _p_b_term($p, $cs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $c;
      var $start;
      var $finish;
      var $i;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24);
      var $18 = $15;label = 5; break;
    case 4: 
      var $18 = 0;label = 5; break;
    case 5: 
      var $18;
      if ((($18)|0) == 91) {
        label = 6; break;
      }
      else if ((($18)|0) == 45) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
      
    case 6: 
      var $20=$1;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+1)|0);
      var $24=$1;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)>>>0) < (($26)>>>0);
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$1;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+1)|0);
      var $33=HEAP8[($32)];
      var $34=(($33 << 24) >> 24);
      var $37 = $34;label = 9; break;
    case 8: 
      var $37 = 0;label = 9; break;
    case 9: 
      var $37;
      var $38=(($37) & 255);
      $c=$38;
      label = 12; break;
    case 10: 
      var $40=$1;
      var $41=_seterr($40, 11);
      label = 62; break;
    case 11: 
      $c=0;
      label = 12; break;
    case 12: 
      var $44=$c;
      var $45=(($44 << 24) >> 24);
      if ((($45)|0) == 58) {
        label = 13; break;
      }
      else if ((($45)|0) == 61) {
        label = 28; break;
      }
      else {
      label = 43; break;
      }
      
    case 13: 
      var $47=$1;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+2)|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=$1;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($53)>>>0) < (($56)>>>0);
      if ($57) { var $63 = 1;label = 15; break; } else { label = 14; break; }
    case 14: 
      var $59=$1;
      var $60=_seterr($59, 7);
      var $61=(($60)|0)!=0;
      var $63 = $61;label = 15; break;
    case 15: 
      var $63;
      var $64=(($63)&1);
      var $65=$1;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=HEAP8[($67)];
      $c=$68;
      var $69=$c;
      var $70=(($69 << 24) >> 24);
      var $71=(($70)|0)!=45;
      if ($71) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $73=$c;
      var $74=(($73 << 24) >> 24);
      var $75=(($74)|0)!=93;
      if ($75) { var $81 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $77=$1;
      var $78=_seterr($77, 4);
      var $79=(($78)|0)!=0;
      var $81 = $79;label = 18; break;
    case 18: 
      var $81;
      var $82=(($81)&1);
      var $83=$1;
      var $84=$2;
      _p_b_cclass($83, $84);
      var $85=$1;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$1;
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($87)>>>0) < (($90)>>>0);
      if ($91) { var $97 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $93=$1;
      var $94=_seterr($93, 7);
      var $95=(($94)|0)!=0;
      var $97 = $95;label = 20; break;
    case 20: 
      var $97;
      var $98=(($97)&1);
      var $99=$1;
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$1;
      var $103=(($102+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) < (($104)>>>0);
      if ($105) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $107=$1;
      var $108=(($107)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+1)|0);
      var $111=$1;
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($110)>>>0) < (($113)>>>0);
      if ($114) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $116=$1;
      var $117=(($116)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=HEAP8[($118)];
      var $120=(($119 << 24) >> 24);
      var $121=(($120)|0)==58;
      if ($121) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $123=$1;
      var $124=(($123)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125+1)|0);
      var $127=HEAP8[($126)];
      var $128=(($127 << 24) >> 24);
      var $129=(($128)|0)==93;
      if ($129) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $131=$1;
      var $132=(($131)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+2)|0);
      HEAP32[(($132)>>2)]=$134;
      if (1) { var $141 = 1;label = 27; break; } else { label = 26; break; }
    case 25: 
      if (0) { var $141 = 1;label = 27; break; } else { label = 26; break; }
    case 26: 
      var $137=$1;
      var $138=_seterr($137, 4);
      var $139=(($138)|0)!=0;
      var $141 = $139;label = 27; break;
    case 27: 
      var $141;
      var $142=(($141)&1);
      label = 62; break;
    case 28: 
      var $144=$1;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+2)|0);
      HEAP32[(($145)>>2)]=$147;
      var $148=$1;
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=$1;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($150)>>>0) < (($153)>>>0);
      if ($154) { var $160 = 1;label = 30; break; } else { label = 29; break; }
    case 29: 
      var $156=$1;
      var $157=_seterr($156, 7);
      var $158=(($157)|0)!=0;
      var $160 = $158;label = 30; break;
    case 30: 
      var $160;
      var $161=(($160)&1);
      var $162=$1;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=HEAP8[($164)];
      $c=$165;
      var $166=$c;
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|0)!=45;
      if ($168) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $170=$c;
      var $171=(($170 << 24) >> 24);
      var $172=(($171)|0)!=93;
      if ($172) { var $178 = 1;label = 33; break; } else { label = 32; break; }
    case 32: 
      var $174=$1;
      var $175=_seterr($174, 3);
      var $176=(($175)|0)!=0;
      var $178 = $176;label = 33; break;
    case 33: 
      var $178;
      var $179=(($178)&1);
      var $180=$1;
      var $181=$2;
      _p_b_eclass($180, $181);
      var $182=$1;
      var $183=(($182)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=$1;
      var $186=(($185+4)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($184)>>>0) < (($187)>>>0);
      if ($188) { var $194 = 1;label = 35; break; } else { label = 34; break; }
    case 34: 
      var $190=$1;
      var $191=_seterr($190, 7);
      var $192=(($191)|0)!=0;
      var $194 = $192;label = 35; break;
    case 35: 
      var $194;
      var $195=(($194)&1);
      var $196=$1;
      var $197=(($196)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$1;
      var $200=(($199+4)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($198)>>>0) < (($201)>>>0);
      if ($202) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $204=$1;
      var $205=(($204)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($206+1)|0);
      var $208=$1;
      var $209=(($208+4)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($207)>>>0) < (($210)>>>0);
      if ($211) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $213=$1;
      var $214=(($213)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=HEAP8[($215)];
      var $217=(($216 << 24) >> 24);
      var $218=(($217)|0)==61;
      if ($218) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $220=$1;
      var $221=(($220)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=(($222+1)|0);
      var $224=HEAP8[($223)];
      var $225=(($224 << 24) >> 24);
      var $226=(($225)|0)==93;
      if ($226) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $228=$1;
      var $229=(($228)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($230+2)|0);
      HEAP32[(($229)>>2)]=$231;
      if (1) { var $238 = 1;label = 42; break; } else { label = 41; break; }
    case 40: 
      if (0) { var $238 = 1;label = 42; break; } else { label = 41; break; }
    case 41: 
      var $234=$1;
      var $235=_seterr($234, 3);
      var $236=(($235)|0)!=0;
      var $238 = $236;label = 42; break;
    case 42: 
      var $238;
      var $239=(($238)&1);
      label = 62; break;
    case 43: 
      var $241=$1;
      var $242=_p_b_symbol($241);
      $start=$242;
      var $243=$1;
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$1;
      var $247=(($246+4)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=(($245)>>>0) < (($248)>>>0);
      if ($249) { label = 44; break; } else { label = 54; break; }
    case 44: 
      var $251=$1;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=HEAP8[($253)];
      var $255=(($254 << 24) >> 24);
      var $256=(($255)|0)==45;
      if ($256) { label = 45; break; } else { label = 54; break; }
    case 45: 
      var $258=$1;
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260+1)|0);
      var $262=$1;
      var $263=(($262+4)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($261)>>>0) < (($264)>>>0);
      if ($265) { label = 46; break; } else { label = 54; break; }
    case 46: 
      var $267=$1;
      var $268=(($267)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($269+1)|0);
      var $271=HEAP8[($270)];
      var $272=(($271 << 24) >> 24);
      var $273=(($272)|0)!=93;
      if ($273) { label = 47; break; } else { label = 54; break; }
    case 47: 
      var $275=$1;
      var $276=(($275)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=(($277+1)|0);
      HEAP32[(($276)>>2)]=$278;
      var $279=$1;
      var $280=(($279)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=$1;
      var $283=(($282+4)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=(($281)>>>0) < (($284)>>>0);
      if ($285) { label = 48; break; } else { label = 50; break; }
    case 48: 
      var $287=$1;
      var $288=(($287)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=HEAP8[($289)];
      var $291=(($290 << 24) >> 24);
      var $292=(($291)|0)==45;
      if ($292) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $294=$1;
      var $295=(($294)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($296+1)|0);
      HEAP32[(($295)>>2)]=$297;
      if (1) { label = 51; break; } else { label = 52; break; }
    case 50: 
      if (0) { label = 51; break; } else { label = 52; break; }
    case 51: 
      $finish=45;
      label = 53; break;
    case 52: 
      var $301=$1;
      var $302=_p_b_symbol($301);
      $finish=$302;
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      var $305=$start;
      $finish=$305;
      label = 55; break;
    case 55: 
      var $307=$start;
      var $308=(($307 << 24) >> 24);
      var $309=$finish;
      var $310=(($309 << 24) >> 24);
      var $311=(($308)|0) <= (($310)|0);
      if ($311) { var $317 = 1;label = 57; break; } else { label = 56; break; }
    case 56: 
      var $313=$1;
      var $314=_seterr($313, 11);
      var $315=(($314)|0)!=0;
      var $317 = $315;label = 57; break;
    case 57: 
      var $317;
      var $318=(($317)&1);
      var $319=$start;
      var $320=(($319 << 24) >> 24);
      $i=$320;
      label = 58; break;
    case 58: 
      var $322=$i;
      var $323=$finish;
      var $324=(($323 << 24) >> 24);
      var $325=(($322)|0) <= (($324)|0);
      if ($325) { label = 59; break; } else { label = 61; break; }
    case 59: 
      var $327=$2;
      var $328=(($327+4)|0);
      var $329=HEAP8[($328)];
      var $330=(($329)&255);
      var $331=$i;
      var $332=(($331) & 255);
      var $333=(($332)&255);
      var $334=$2;
      var $335=(($334)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=(($336+$333)|0);
      var $338=HEAP8[($337)];
      var $339=(($338)&255);
      var $340=$339 | $330;
      var $341=(($340) & 255);
      HEAP8[($337)]=$341;
      var $342=$i;
      var $343=$2;
      var $344=(($343+5)|0);
      var $345=HEAP8[($344)];
      var $346=(($345)&255);
      var $347=((($346)+($342))|0);
      var $348=(($347) & 255);
      HEAP8[($344)]=$348;
      label = 60; break;
    case 60: 
      var $350=$i;
      var $351=((($350)+(1))|0);
      $i=$351;
      label = 58; break;
    case 61: 
      label = 62; break;
    case 62: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_p_b_term["X"]=1;

function _freezeset($p, $cs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $h;
      var $i;
      var $top;
      var $cs2;
      var $css;
      $1=$p;
      $2=$cs;
      var $3=$2;
      var $4=(($3+5)|0);
      var $5=HEAP8[($4)];
      $h=$5;
      var $6=$1;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$1;
      var $12=(($11+28)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($10<<4))|0);
      $top=$16;
      var $17=$1;
      var $18=(($17+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      $css=$21;
      var $22=$1;
      var $23=(($22+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0);
      $cs2=$27;
      label = 3; break;
    case 3: 
      var $29=$cs2;
      var $30=$top;
      var $31=(($29)>>>0) < (($30)>>>0);
      if ($31) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $33=$cs2;
      var $34=(($33+5)|0);
      var $35=HEAP8[($34)];
      var $36=(($35)&255);
      var $37=$h;
      var $38=(($37)&255);
      var $39=(($36)|0)==(($38)|0);
      if ($39) { label = 5; break; } else { label = 15; break; }
    case 5: 
      var $41=$cs2;
      var $42=$2;
      var $43=(($41)|0)!=(($42)|0);
      if ($43) { label = 6; break; } else { label = 15; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $46=$i;
      var $47=$css;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $50=$i;
      var $51=(($50) & 255);
      var $52=(($51)&255);
      var $53=$cs2;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+$52)|0);
      var $57=HEAP8[($56)];
      var $58=(($57)&255);
      var $59=$cs2;
      var $60=(($59+4)|0);
      var $61=HEAP8[($60)];
      var $62=(($61)&255);
      var $63=$58 & $62;
      var $64=(($63)|0)!=0;
      var $65=$64 ^ 1;
      var $66=$65 ^ 1;
      var $67=(($66)&1);
      var $68=$i;
      var $69=(($68) & 255);
      var $70=(($69)&255);
      var $71=$2;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=$2;
      var $78=(($77+4)|0);
      var $79=HEAP8[($78)];
      var $80=(($79)&255);
      var $81=$76 & $80;
      var $82=(($81)|0)!=0;
      var $83=$82 ^ 1;
      var $84=$83 ^ 1;
      var $85=(($84)&1);
      var $86=(($67)|0)!=(($85)|0);
      if ($86) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $90=$i;
      var $91=((($90)+(1))|0);
      $i=$91;
      label = 7; break;
    case 12: 
      var $93=$i;
      var $94=$css;
      var $95=(($93)|0)==(($94)|0);
      if ($95) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 17; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $100=$cs2;
      var $101=(($100+16)|0);
      $cs2=$101;
      label = 3; break;
    case 17: 
      var $103=$cs2;
      var $104=$top;
      var $105=(($103)>>>0) < (($104)>>>0);
      if ($105) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $107=$1;
      var $108=$2;
      _freeset($107, $108);
      var $109=$cs2;
      $2=$109;
      label = 19; break;
    case 19: 
      var $111=$2;
      var $112=$1;
      var $113=(($112+28)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+16)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$111;
      var $118=$116;
      var $119=((($117)-($118))|0);
      var $120=((((($119)|0))/(16))&-1);

      return $120;
    default: assert(0, "bad label: " + label);
  }
}
_freezeset["X"]=1;

function _p_b_cclass($p, $cs) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $sp;
      var $cp;
      var $len;
      var $u;
      var $c;
      $1=$p;
      $2=$cs;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      $sp=$5;
      label = 3; break;
    case 3: 
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$1;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)>>>0) < (($12)>>>0);
      if ($13) { label = 4; break; } else { var $23 = 0;label = 5; break; }
    case 4: 
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=_isalpha($19);
      var $21=(($20)|0)!=0;
      var $23 = $21;label = 5; break;
    case 5: 
      var $23;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+1)|0);
      HEAP32[(($26)>>2)]=$28;
      label = 3; break;
    case 7: 
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$sp;
      var $34=$32;
      var $35=$33;
      var $36=((($34)-($35))|0);
      $len=$36;
      $cp=((5259676)|0);
      label = 8; break;
    case 8: 
      var $38=$cp;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0)!=0;
      if ($41) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $43=$cp;
      var $44=(($43)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$sp;
      var $47=$len;
      var $48=_strncmp($45, $46, $47);
      var $49=(($48)|0)==0;
      if ($49) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $51=$len;
      var $52=$cp;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+$51)|0);
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $58=(($57)|0)==0;
      if ($58) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $62=$cp;
      var $63=(($62+12)|0);
      $cp=$63;
      label = 8; break;
    case 14: 
      var $65=$cp;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0)==0;
      if ($68) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $70=$1;
      var $71=_seterr($70, 4);
      label = 23; break;
    case 16: 
      var $73=$cp;
      var $74=(($73+4)|0);
      var $75=HEAP32[(($74)>>2)];
      $u=$75;
      label = 17; break;
    case 17: 
      var $77=$u;
      var $78=(($77+1)|0);
      $u=$78;
      var $79=HEAP8[($77)];
      $c=$79;
      var $80=(($79 << 24) >> 24);
      var $81=(($80)|0)!=0;
      if ($81) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $83=$2;
      var $84=(($83+4)|0);
      var $85=HEAP8[($84)];
      var $86=(($85)&255);
      var $87=$c;
      var $88=(($87)&255);
      var $89=$2;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+$88)|0);
      var $93=HEAP8[($92)];
      var $94=(($93)&255);
      var $95=$94 | $86;
      var $96=(($95) & 255);
      HEAP8[($92)]=$96;
      var $97=$c;
      var $98=(($97 << 24) >> 24);
      var $99=$2;
      var $100=(($99+5)|0);
      var $101=HEAP8[($100)];
      var $102=(($101)&255);
      var $103=((($102)+($98))|0);
      var $104=(($103) & 255);
      HEAP8[($100)]=$104;
      label = 17; break;
    case 19: 
      var $106=$cp;
      var $107=(($106+8)|0);
      var $108=HEAP32[(($107)>>2)];
      $u=$108;
      label = 20; break;
    case 20: 
      var $110=$u;
      var $111=HEAP8[($110)];
      var $112=(($111 << 24) >> 24);
      var $113=(($112)|0)!=0;
      if ($113) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $115=$1;
      var $116=$2;
      var $117=$u;
      _mcadd($115, $116, $117);
      label = 22; break;
    case 22: 
      var $119=$u;
      var $120=_strlen($119);
      var $121=((($120)+(1))|0);
      var $122=$u;
      var $123=(($122+$121)|0);
      $u=$123;
      label = 20; break;
    case 23: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_p_b_cclass["X"]=1;

function _p_b_eclass($p, $cs) {
  var label = 0;


  var $1;
  var $2;
  var $c;
  $1=$p;
  $2=$cs;
  var $3=$1;
  var $4=_p_b_coll_elem($3, 61);
  $c=$4;
  var $5=$2;
  var $6=(($5+4)|0);
  var $7=HEAP8[($6)];
  var $8=(($7)&255);
  var $9=$c;
  var $10=(($9)&255);
  var $11=$2;
  var $12=(($11)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13+$10)|0);
  var $15=HEAP8[($14)];
  var $16=(($15)&255);
  var $17=$16 | $8;
  var $18=(($17) & 255);
  HEAP8[($14)]=$18;
  var $19=$c;
  var $20=(($19 << 24) >> 24);
  var $21=$2;
  var $22=(($21+5)|0);
  var $23=HEAP8[($22)];
  var $24=(($23)&255);
  var $25=((($24)+($20))|0);
  var $26=(($25) & 255);
  HEAP8[($22)]=$26;

  return;
}


function _p_b_symbol($p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $value;
      $2=$p;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>0) < (($8)>>>0);
      if ($9) { var $15 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $11=$2;
      var $12=_seterr($11, 7);
      var $13=(($12)|0)!=0;
      var $15 = $13;label = 4; break;
    case 4: 
      var $15;
      var $16=(($15)&1);
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($19)>>>0) < (($22)>>>0);
      if ($23) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $25=$2;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+1)|0);
      var $29=$2;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($28)>>>0) < (($31)>>>0);
      if ($32) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $34=$2;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $39=(($38)|0)==91;
      if ($39) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+1)|0);
      var $45=HEAP8[($44)];
      var $46=(($45 << 24) >> 24);
      var $47=(($46)|0)==46;
      if ($47) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $49=$2;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+2)|0);
      HEAP32[(($50)>>2)]=$52;
      if (1) { label = 11; break; } else { label = 10; break; }
    case 9: 
      if (0) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $55=$2;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+1)|0);
      HEAP32[(($56)>>2)]=$58;
      var $59=HEAP8[($57)];
      $1=$59;
      label = 19; break;
    case 11: 
      var $61=$2;
      var $62=_p_b_coll_elem($61, 46);
      $value=$62;
      var $63=$2;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$2;
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($65)>>>0) < (($68)>>>0);
      if ($69) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $71=$2;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+1)|0);
      var $75=$2;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)>>>0) < (($77)>>>0);
      if ($78) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $80=$2;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=HEAP8[($82)];
      var $84=(($83 << 24) >> 24);
      var $85=(($84)|0)==46;
      if ($85) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $87=$2;
      var $88=(($87)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+1)|0);
      var $91=HEAP8[($90)];
      var $92=(($91 << 24) >> 24);
      var $93=(($92)|0)==93;
      if ($93) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $95=$2;
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+2)|0);
      HEAP32[(($96)>>2)]=$98;
      if (1) { var $105 = 1;label = 18; break; } else { label = 17; break; }
    case 16: 
      if (0) { var $105 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $101=$2;
      var $102=_seterr($101, 3);
      var $103=(($102)|0)!=0;
      var $105 = $103;label = 18; break;
    case 18: 
      var $105;
      var $106=(($105)&1);
      var $107=$value;
      $1=$107;
      label = 19; break;
    case 19: 
      var $109=$1;

      return $109;
    default: assert(0, "bad label: " + label);
  }
}
_p_b_symbol["X"]=1;

function _p_b_coll_elem($p, $endc) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      var $cp;
      var $len;
      $2=$p;
      $3=$endc;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      $sp=$6;
      label = 3; break;
    case 3: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10)>>>0) < (($13)>>>0);
      if ($14) { label = 4; break; } else { var $52 = 0;label = 9; break; }
    case 4: 
      var $16=$2;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18)>>>0) < (($21)>>>0);
      if ($22) { label = 5; break; } else { var $49 = 0;label = 8; break; }
    case 5: 
      var $24=$2;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+1)|0);
      var $28=$2;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($27)>>>0) < (($30)>>>0);
      if ($31) { label = 6; break; } else { var $49 = 0;label = 8; break; }
    case 6: 
      var $33=$2;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=HEAP8[($35)];
      var $37=(($36 << 24) >> 24);
      var $38=$3;
      var $39=(($37)|0)==(($38)|0);
      if ($39) { label = 7; break; } else { var $49 = 0;label = 8; break; }
    case 7: 
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+1)|0);
      var $45=HEAP8[($44)];
      var $46=(($45 << 24) >> 24);
      var $47=(($46)|0)==93;
      var $49 = $47;label = 8; break;
    case 8: 
      var $49;
      var $50=$49 ^ 1;
      var $52 = $50;label = 9; break;
    case 9: 
      var $52;
      if ($52) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $54=$2;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+1)|0);
      HEAP32[(($55)>>2)]=$57;
      label = 3; break;
    case 11: 
      var $59=$2;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$2;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($61)>>>0) < (($64)>>>0);
      if ($65) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $67=$2;
      var $68=_seterr($67, 7);
      $1=0;
      label = 23; break;
    case 13: 
      var $70=$2;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$sp;
      var $74=$72;
      var $75=$73;
      var $76=((($74)-($75))|0);
      $len=$76;
      $cp=((5258880)|0);
      label = 14; break;
    case 14: 
      var $78=$cp;
      var $79=(($78)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|0)!=0;
      if ($81) { label = 15; break; } else { label = 20; break; }
    case 15: 
      var $83=$cp;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$sp;
      var $87=$len;
      var $88=_strncmp($85, $86, $87);
      var $89=(($88)|0)==0;
      if ($89) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $91=$len;
      var $92=$cp;
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+$91)|0);
      var $96=HEAP8[($95)];
      var $97=(($96 << 24) >> 24);
      var $98=(($97)|0)==0;
      if ($98) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $100=$cp;
      var $101=(($100+4)|0);
      var $102=HEAP8[($101)];
      $1=$102;
      label = 23; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $105=$cp;
      var $106=(($105+8)|0);
      $cp=$106;
      label = 14; break;
    case 20: 
      var $108=$len;
      var $109=(($108)|0)==1;
      if ($109) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $111=$sp;
      var $112=HEAP8[($111)];
      $1=$112;
      label = 23; break;
    case 22: 
      var $114=$2;
      var $115=_seterr($114, 3);
      $1=0;
      label = 23; break;
    case 23: 
      var $117=$1;

      return $117;
    default: assert(0, "bad label: " + label);
  }
}
_p_b_coll_elem["X"]=1;

function _mcadd($p, $cs, $cp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $oldend;
      var $np;
      $1=$p;
      $2=$cs;
      $3=$cp;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $oldend=$6;
      var $7=$3;
      var $8=_strlen($7);
      var $9=((($8)+(1))|0);
      var $10=$2;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)+($9))|0);
      HEAP32[(($11)>>2)]=$13;
      var $14=$2;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$2;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_realloc($16, $19);
      $np=$20;
      var $21=$np;
      var $22=(($21)|0)==0;
      if ($22) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $24=$2;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)!=0;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      _free($31);
      label = 5; break;
    case 5: 
      var $33=$2;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=0;
      var $35=$1;
      var $36=_seterr($35, 12);
      label = 7; break;
    case 6: 
      var $38=$np;
      var $39=$2;
      var $40=(($39+12)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$2;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$oldend;
      var $45=(($43+$44)|0);
      var $46=((($45)-(1))|0);
      var $47=$3;
      var $48=$2;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$oldend;
      var $52=((($50)-($51))|0);
      var $53=((($52)+(1))|0);
      var $54=_strlcpy($46, $47, $53);
      label = 7; break;
    case 7: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_mcadd["X"]=1;

function _p_ere_exp($p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $c;
      var $pos;
      var $count;
      var $count2;
      var $subno;
      var $wascaret;
      $1=$p;
      $wascaret=0;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+1)|0);
      HEAP32[(($3)>>2)]=$5;
      var $6=HEAP8[($4)];
      $c=$6;
      var $7=$1;
      var $8=(($7+20)|0);
      var $9=HEAP32[(($8)>>2)];
      $pos=$9;
      var $10=$c;
      var $11=(($10 << 24) >> 24);
      if ((($11)|0) == 40) {
        label = 3; break;
      }
      else if ((($11)|0) == 94) {
        label = 16; break;
      }
      else if ((($11)|0) == 36) {
        label = 17; break;
      }
      else if ((($11)|0) == 124) {
        label = 18; break;
      }
      else if ((($11)|0) == 42 || (($11)|0) == 43 || (($11)|0) == 63) {
        label = 19; break;
      }
      else if ((($11)|0) == 46) {
        label = 20; break;
      }
      else if ((($11)|0) == 91) {
        label = 24; break;
      }
      else if ((($11)|0) == 92) {
        label = 25; break;
      }
      else if ((($11)|0) == 123) {
        label = 28; break;
      }
      else {
      label = 32; break;
      }
      
    case 3: 
      var $13=$1;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($15)>>>0) < (($18)>>>0);
      if ($19) { var $25 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $21=$1;
      var $22=_seterr($21, 8);
      var $23=(($22)|0)!=0;
      var $25 = $23;label = 5; break;
    case 5: 
      var $25;
      var $26=(($25)&1);
      var $27=$1;
      var $28=(($27+28)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+68)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=((($31)+(1))|0);
      HEAP32[(($30)>>2)]=$32;
      var $33=$1;
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+68)|0);
      var $37=HEAP32[(($36)>>2)];
      $subno=$37;
      var $38=$subno;
      var $39=(($38)|0) < 10;
      if ($39) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $41=$1;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$subno;
      var $45=$1;
      var $46=(($45+32)|0);
      var $47=(($46+($44<<2))|0);
      HEAP32[(($47)>>2)]=$43;
      label = 7; break;
    case 7: 
      var $49=$1;
      var $50=$subno;
      _doemit($49, 1744830464, $50);
      var $51=$1;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($53)>>>0) < (($56)>>>0);
      if ($57) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $59=$1;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=HEAP8[($61)];
      var $63=(($62 << 24) >> 24);
      var $64=(($63)|0)==41;
      if ($64) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $66=$1;
      _p_ere($66, 41);
      label = 10; break;
    case 10: 
      var $68=$subno;
      var $69=(($68)|0) < 10;
      if ($69) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $71=$1;
      var $72=(($71+20)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$subno;
      var $75=$1;
      var $76=(($75+72)|0);
      var $77=(($76+($74<<2))|0);
      HEAP32[(($77)>>2)]=$73;
      label = 12; break;
    case 12: 
      var $79=$1;
      var $80=$subno;
      _doemit($79, 1879048192, $80);
      var $81=$1;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$1;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($83)>>>0) < (($86)>>>0);
      if ($87) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $89=$1;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+1)|0);
      HEAP32[(($90)>>2)]=$92;
      var $93=HEAP8[($91)];
      var $94=(($93 << 24) >> 24);
      var $95=(($94)|0)==41;
      if ($95) { var $101 = 1;label = 15; break; } else { label = 14; break; }
    case 14: 
      var $97=$1;
      var $98=_seterr($97, 8);
      var $99=(($98)|0)!=0;
      var $101 = $99;label = 15; break;
    case 15: 
      var $101;
      var $102=(($101)&1);
      label = 33; break;
    case 16: 
      var $104=$1;
      _doemit($104, 402653184, 0);
      var $105=$1;
      var $106=(($105+28)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+40)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109 | 1;
      HEAP32[(($108)>>2)]=$110;
      var $111=$1;
      var $112=(($111+28)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+44)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=((($115)+(1))|0);
      HEAP32[(($114)>>2)]=$116;
      $wascaret=1;
      label = 33; break;
    case 17: 
      var $118=$1;
      _doemit($118, 536870912, 0);
      var $119=$1;
      var $120=(($119+28)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+40)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=$123 | 2;
      HEAP32[(($122)>>2)]=$124;
      var $125=$1;
      var $126=(($125+28)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+48)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)+(1))|0);
      HEAP32[(($128)>>2)]=$130;
      label = 33; break;
    case 18: 
      var $132=$1;
      var $133=_seterr($132, 14);
      label = 33; break;
    case 19: 
      var $135=$1;
      var $136=_seterr($135, 13);
      label = 33; break;
    case 20: 
      var $138=$1;
      var $139=(($138+28)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+24)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$142 & 8;
      var $144=(($143)|0)!=0;
      if ($144) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $146=$1;
      _nonnewline($146);
      label = 23; break;
    case 22: 
      var $148=$1;
      _doemit($148, 671088640, 0);
      label = 23; break;
    case 23: 
      label = 33; break;
    case 24: 
      var $151=$1;
      _p_bracket($151);
      label = 33; break;
    case 25: 
      var $153=$1;
      var $154=(($153)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$1;
      var $157=(($156+4)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($155)>>>0) < (($158)>>>0);
      if ($159) { var $165 = 1;label = 27; break; } else { label = 26; break; }
    case 26: 
      var $161=$1;
      var $162=_seterr($161, 5);
      var $163=(($162)|0)!=0;
      var $165 = $163;label = 27; break;
    case 27: 
      var $165;
      var $166=(($165)&1);
      var $167=$1;
      var $168=(($167)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=(($169+1)|0);
      HEAP32[(($168)>>2)]=$170;
      var $171=HEAP8[($169)];
      $c=$171;
      var $172=$1;
      var $173=$c;
      var $174=(($173 << 24) >> 24);
      _ordinary($172, $174);
      label = 33; break;
    case 28: 
      var $176=$1;
      var $177=(($176)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$1;
      var $180=(($179+4)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($178)>>>0) < (($181)>>>0);
      if ($182) { label = 29; break; } else { var $196 = 1;label = 31; break; }
    case 29: 
      var $184=$1;
      var $185=(($184)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=HEAP8[($186)];
      var $188=(($187)&255);
      var $189=_isdigit($188);
      var $190=(($189)|0)!=0;
      if ($190) { label = 30; break; } else { var $196 = 1;label = 31; break; }
    case 30: 
      var $192=$1;
      var $193=_seterr($192, 13);
      var $194=(($193)|0)!=0;
      var $196 = $194;label = 31; break;
    case 31: 
      var $196;
      var $197=(($196)&1);
      label = 32; break;
    case 32: 
      var $199=$1;
      var $200=$c;
      var $201=(($200 << 24) >> 24);
      _ordinary($199, $201);
      label = 33; break;
    case 33: 
      var $203=$1;
      var $204=(($203)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=$1;
      var $207=(($206+4)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=(($205)>>>0) < (($208)>>>0);
      if ($209) { label = 35; break; } else { label = 34; break; }
    case 34: 
      label = 82; break;
    case 35: 
      var $212=$1;
      var $213=(($212)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=HEAP8[($214)];
      $c=$215;
      var $216=$c;
      var $217=(($216 << 24) >> 24);
      var $218=(($217)|0)==42;
      if ($218) { label = 42; break; } else { label = 36; break; }
    case 36: 
      var $220=$c;
      var $221=(($220 << 24) >> 24);
      var $222=(($221)|0)==43;
      if ($222) { label = 42; break; } else { label = 37; break; }
    case 37: 
      var $224=$c;
      var $225=(($224 << 24) >> 24);
      var $226=(($225)|0)==63;
      if ($226) { label = 42; break; } else { label = 38; break; }
    case 38: 
      var $228=$c;
      var $229=(($228 << 24) >> 24);
      var $230=(($229)|0)==123;
      if ($230) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $232=$1;
      var $233=(($232)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=(($234+1)|0);
      var $236=$1;
      var $237=(($236+4)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($235)>>>0) < (($238)>>>0);
      if ($239) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $241=$1;
      var $242=(($241)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243+1)|0);
      var $245=HEAP8[($244)];
      var $246=(($245)&255);
      var $247=_isdigit($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 42; break; } else { label = 41; break; }
    case 41: 
      label = 82; break;
    case 42: 
      var $251=$1;
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+1)|0);
      HEAP32[(($252)>>2)]=$254;
      var $255=$wascaret;
      var $256=(($255)|0)!=0;
      if ($256) { label = 43; break; } else { var $262 = 1;label = 44; break; }
    case 43: 
      var $258=$1;
      var $259=_seterr($258, 13);
      var $260=(($259)|0)!=0;
      var $262 = $260;label = 44; break;
    case 44: 
      var $262;
      var $263=(($262)&1);
      var $264=$c;
      var $265=(($264 << 24) >> 24);
      if ((($265)|0) == 42) {
        label = 45; break;
      }
      else if ((($265)|0) == 43) {
        label = 46; break;
      }
      else if ((($265)|0) == 63) {
        label = 47; break;
      }
      else if ((($265)|0) == 123) {
        label = 48; break;
      }
      else {
      label = 72; break;
      }
      
    case 45: 
      var $267=$1;
      var $268=$1;
      var $269=(($268+20)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=$pos;
      var $272=((($270)-($271))|0);
      var $273=((($272)+(1))|0);
      var $274=$pos;
      _doinsert($267, 1207959552, $273, $274);
      var $275=$1;
      var $276=$1;
      var $277=(($276+20)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=$pos;
      var $280=((($278)-($279))|0);
      _doemit($275, 1342177280, $280);
      var $281=$1;
      var $282=$1;
      var $283=(($282+20)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=$pos;
      var $286=((($284)-($285))|0);
      var $287=((($286)+(1))|0);
      var $288=$pos;
      _doinsert($281, 1476395008, $287, $288);
      var $289=$1;
      var $290=$1;
      var $291=(($290+20)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=$pos;
      var $294=((($292)-($293))|0);
      _doemit($289, 1610612736, $294);
      label = 72; break;
    case 46: 
      var $296=$1;
      var $297=$1;
      var $298=(($297+20)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=$pos;
      var $301=((($299)-($300))|0);
      var $302=((($301)+(1))|0);
      var $303=$pos;
      _doinsert($296, 1207959552, $302, $303);
      var $304=$1;
      var $305=$1;
      var $306=(($305+20)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=$pos;
      var $309=((($307)-($308))|0);
      _doemit($304, 1342177280, $309);
      label = 72; break;
    case 47: 
      var $311=$1;
      var $312=$1;
      var $313=(($312+20)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$pos;
      var $316=((($314)-($315))|0);
      var $317=((($316)+(1))|0);
      var $318=$pos;
      _doinsert($311, 2013265920, $317, $318);
      var $319=$1;
      var $320=$1;
      var $321=(($320+20)|0);
      var $322=HEAP32[(($321)>>2)];
      var $323=$pos;
      var $324=((($322)-($323))|0);
      _doemit($319, -2147483648, $324);
      var $325=$1;
      var $326=$pos;
      var $327=$1;
      var $328=(($327+20)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=$pos;
      var $331=((($329)-($330))|0);
      _dofwd($325, $326, $331);
      var $332=$1;
      _doemit($332, -2013265920, 0);
      var $333=$1;
      var $334=$1;
      var $335=(($334+20)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=((($336)-(1))|0);
      var $338=$1;
      var $339=(($338+20)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=$1;
      var $342=(($341+20)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=((($343)-(1))|0);
      var $345=((($340)-($344))|0);
      _dofwd($333, $337, $345);
      var $346=$1;
      var $347=$1;
      var $348=(($347+20)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=$1;
      var $351=(($350+20)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=((($352)-(2))|0);
      var $354=((($349)-($353))|0);
      _doemit($346, -1879048192, $354);
      label = 72; break;
    case 48: 
      var $356=$1;
      var $357=_p_count($356);
      $count=$357;
      var $358=$1;
      var $359=(($358)|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=$1;
      var $362=(($361+4)|0);
      var $363=HEAP32[(($362)>>2)];
      var $364=(($360)>>>0) < (($363)>>>0);
      if ($364) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $366=$1;
      var $367=(($366)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=HEAP8[($368)];
      var $370=(($369 << 24) >> 24);
      var $371=(($370)|0)==44;
      if ($371) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $373=$1;
      var $374=(($373)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=(($375+1)|0);
      HEAP32[(($374)>>2)]=$376;
      if (1) { label = 52; break; } else { label = 58; break; }
    case 51: 
      if (0) { label = 52; break; } else { label = 58; break; }
    case 52: 
      var $379=$1;
      var $380=(($379)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=HEAP8[($381)];
      var $383=(($382)&255);
      var $384=_isdigit($383);
      var $385=(($384)|0)!=0;
      if ($385) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $387=$1;
      var $388=_p_count($387);
      $count2=$388;
      var $389=$count;
      var $390=$count2;
      var $391=(($389)|0) <= (($390)|0);
      if ($391) { var $397 = 1;label = 55; break; } else { label = 54; break; }
    case 54: 
      var $393=$1;
      var $394=_seterr($393, 10);
      var $395=(($394)|0)!=0;
      var $397 = $395;label = 55; break;
    case 55: 
      var $397;
      var $398=(($397)&1);
      label = 57; break;
    case 56: 
      $count2=256;
      label = 57; break;
    case 57: 
      label = 59; break;
    case 58: 
      var $402=$count;
      $count2=$402;
      label = 59; break;
    case 59: 
      var $404=$1;
      var $405=$pos;
      var $406=$count;
      var $407=$count2;
      _repeat($404, $405, $406, $407);
      var $408=$1;
      var $409=(($408)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=$1;
      var $412=(($411+4)|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=(($410)>>>0) < (($413)>>>0);
      if ($414) { label = 60; break; } else { label = 62; break; }
    case 60: 
      var $416=$1;
      var $417=(($416)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=HEAP8[($418)];
      var $420=(($419 << 24) >> 24);
      var $421=(($420)|0)==125;
      if ($421) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $423=$1;
      var $424=(($423)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=(($425+1)|0);
      HEAP32[(($424)>>2)]=$426;
      if (1) { label = 71; break; } else { label = 63; break; }
    case 62: 
      if (0) { label = 71; break; } else { label = 63; break; }
    case 63: 
      label = 64; break;
    case 64: 
      var $430=$1;
      var $431=(($430)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=$1;
      var $434=(($433+4)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=(($432)>>>0) < (($435)>>>0);
      if ($436) { label = 65; break; } else { var $445 = 0;label = 66; break; }
    case 65: 
      var $438=$1;
      var $439=(($438)|0);
      var $440=HEAP32[(($439)>>2)];
      var $441=HEAP8[($440)];
      var $442=(($441 << 24) >> 24);
      var $443=(($442)|0)!=125;
      var $445 = $443;label = 66; break;
    case 66: 
      var $445;
      if ($445) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $447=$1;
      var $448=(($447)|0);
      var $449=HEAP32[(($448)>>2)];
      var $450=(($449+1)|0);
      HEAP32[(($448)>>2)]=$450;
      label = 64; break;
    case 68: 
      var $452=$1;
      var $453=(($452)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=$1;
      var $456=(($455+4)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($454)>>>0) < (($457)>>>0);
      if ($458) { var $464 = 1;label = 70; break; } else { label = 69; break; }
    case 69: 
      var $460=$1;
      var $461=_seterr($460, 9);
      var $462=(($461)|0)!=0;
      var $464 = $462;label = 70; break;
    case 70: 
      var $464;
      var $465=(($464)&1);
      var $466=$1;
      var $467=_seterr($466, 10);
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $470=$1;
      var $471=(($470)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=$1;
      var $474=(($473+4)|0);
      var $475=HEAP32[(($474)>>2)];
      var $476=(($472)>>>0) < (($475)>>>0);
      if ($476) { label = 74; break; } else { label = 73; break; }
    case 73: 
      label = 82; break;
    case 74: 
      var $479=$1;
      var $480=(($479)|0);
      var $481=HEAP32[(($480)>>2)];
      var $482=HEAP8[($481)];
      $c=$482;
      var $483=$c;
      var $484=(($483 << 24) >> 24);
      var $485=(($484)|0)==42;
      if ($485) { label = 81; break; } else { label = 75; break; }
    case 75: 
      var $487=$c;
      var $488=(($487 << 24) >> 24);
      var $489=(($488)|0)==43;
      if ($489) { label = 81; break; } else { label = 76; break; }
    case 76: 
      var $491=$c;
      var $492=(($491 << 24) >> 24);
      var $493=(($492)|0)==63;
      if ($493) { label = 81; break; } else { label = 77; break; }
    case 77: 
      var $495=$c;
      var $496=(($495 << 24) >> 24);
      var $497=(($496)|0)==123;
      if ($497) { label = 78; break; } else { label = 80; break; }
    case 78: 
      var $499=$1;
      var $500=(($499)|0);
      var $501=HEAP32[(($500)>>2)];
      var $502=(($501+1)|0);
      var $503=$1;
      var $504=(($503+4)|0);
      var $505=HEAP32[(($504)>>2)];
      var $506=(($502)>>>0) < (($505)>>>0);
      if ($506) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $508=$1;
      var $509=(($508)|0);
      var $510=HEAP32[(($509)>>2)];
      var $511=(($510+1)|0);
      var $512=HEAP8[($511)];
      var $513=(($512)&255);
      var $514=_isdigit($513);
      var $515=(($514)|0)!=0;
      if ($515) { label = 81; break; } else { label = 80; break; }
    case 80: 
      label = 82; break;
    case 81: 
      var $518=$1;
      var $519=_seterr($518, 13);
      label = 82; break;
    case 82: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_p_ere_exp["X"]=1;

function _regerror($errcode, $preg, $errbuf, $errbuf_size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $r;
      var $len;
      var $target;
      var $s;
      var $convbuf=__stackBase__;
      $1=$errcode;
      $2=$preg;
      $3=$errbuf;
      $4=$errbuf_size;
      var $5=$1;
      var $6=$5 & -257;
      $target=$6;
      var $7=$1;
      var $8=(($7)|0)==255;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$2;
      var $11=(($convbuf)|0);
      var $12=_regatoi($10, $11, 50);
      $s=$12;
      label = 17; break;
    case 4: 
      $r=((5244776)|0);
      label = 5; break;
    case 5: 
      var $15=$r;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)!=0;
      if ($18) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $20=$r;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$target;
      var $24=(($22)|0)==(($23)|0);
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $28=$r;
      var $29=(($28+12)|0);
      $r=$29;
      label = 5; break;
    case 10: 
      var $31=$1;
      var $32=$31 & 256;
      var $33=(($32)|0)!=0;
      if ($33) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $35=$r;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|0)!=0;
      if ($38) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $40=(($convbuf)|0);
      var $41=$r;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=_strlcpy($40, $43, 50);
      label = 14; break;
    case 13: 
      var $46=(($convbuf)|0);
      var $47=$target;
      var $48=_snprintf($46, 50, ((5268220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$47,tempInt));
      label = 14; break;
    case 14: 
      var $50=(($convbuf)|0);
      $s=$50;
      label = 16; break;
    case 15: 
      var $52=$r;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      $s=$54;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $57=$s;
      var $58=_strlen($57);
      var $59=((($58)+(1))|0);
      $len=$59;
      var $60=$4;
      var $61=(($60)>>>0) > 0;
      if ($61) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $63=$3;
      var $64=$s;
      var $65=$4;
      var $66=_strlcpy($63, $64, $65);
      label = 19; break;
    case 19: 
      var $68=$len;
      STACKTOP = __stackBase__;
      return $68;
    default: assert(0, "bad label: " + label);
  }
}
_regerror["X"]=1;

function _regatoi($preg, $localbuf, $localbufsize) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $r;
      $2=$preg;
      $3=$localbuf;
      $4=$localbufsize;
      $r=((5244776)|0);
      label = 3; break;
    case 3: 
      var $6=$r;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $11=$r;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$2;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_strcmp($13, $16);
      var $18=(($17)|0)==0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $22=$r;
      var $23=(($22+12)|0);
      $r=$23;
      label = 3; break;
    case 8: 
      var $25=$r;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0)==0;
      if ($28) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=((5271896)|0);
      label = 11; break;
    case 10: 
      var $31=$3;
      var $32=$4;
      var $33=$r;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=_snprintf($31, $32, ((5268868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$35,tempInt));
      var $37=$3;
      $1=$37;
      label = 11; break;
    case 11: 
      var $39=$1;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}


function _regexec($preg, $string, $nmatch, $pmatch, $eflags) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $g;
      $2=$preg;
      $3=$string;
      $4=$nmatch;
      $5=$pmatch;
      $6=$eflags;
      var $7=$2;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      $g=$9;
      var $10=$2;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)!=62053;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $15=$g;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)!=53829;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=2;
      label = 11; break;
    case 5: 
      var $21=$g;
      var $22=(($21+40)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 4;
      var $25=(($24)|0)!=0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=2;
      label = 11; break;
    case 7: 
      var $28=$6;
      var $29=$28 & 7;
      $6=$29;
      var $30=$g;
      var $31=(($30+28)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)>>>0) <= 32;
      if ($33) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $35=$6;
      var $36=$35 & 512;
      var $37=(($36)|0)!=0;
      if ($37) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $39=$g;
      var $40=$3;
      var $41=$4;
      var $42=$5;
      var $43=$6;
      var $44=_smatcher($39, $40, $41, $42, $43);
      $1=$44;
      label = 11; break;
    case 10: 
      var $46=$g;
      var $47=$3;
      var $48=$4;
      var $49=$5;
      var $50=$6;
      var $51=_lmatcher($46, $47, $48, $49, $50);
      $1=$51;
      label = 11; break;
    case 11: 
      var $53=$1;

      return $53;
    default: assert(0, "bad label: " + label);
  }
}
_regexec["X"]=1;

function _smatcher($g, $string, $nmatch, $pmatch, $eflags) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $endp;
      var $i;
      var $mv=__stackBase__;
      var $m;
      var $dp;
      var $gf;
      var $gl;
      var $start;
      var $stop;
      $2=$g;
      $3=$string;
      $4=$nmatch;
      $5=$pmatch;
      $6=$eflags;
      $m=$mv;
      var $7=$2;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)+(1))|0);
      $gf=$10;
      var $11=$2;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      $gl=$13;
      var $14=$2;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 4;
      var $18=(($17)|0)!=0;
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $4=0;
      label = 4; break;
    case 4: 
      var $21=$6;
      var $22=$21 & 4;
      var $23=(($22)|0)!=0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$3;
      var $26=$5;
      var $27=(($26)|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($25+$29)|0);
      $start=$30;
      var $31=$3;
      var $32=$5;
      var $33=(($32)|0);
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($31+$35)|0);
      $stop=$36;
      label = 7; break;
    case 6: 
      var $38=$3;
      $start=$38;
      var $39=$start;
      var $40=$start;
      var $41=_strlen($40);
      var $42=(($39+$41)|0);
      $stop=$42;
      label = 7; break;
    case 7: 
      var $44=$stop;
      var $45=$start;
      var $46=(($44)>>>0) < (($45)>>>0);
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=16;
      label = 82; break;
    case 9: 
      var $49=$2;
      var $50=(($49+60)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51)|0)!=0;
      if ($52) { label = 10; break; } else { label = 21; break; }
    case 10: 
      var $54=$start;
      $dp=$54;
      label = 11; break;
    case 11: 
      var $56=$dp;
      var $57=$stop;
      var $58=(($56)>>>0) < (($57)>>>0);
      if ($58) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $60=$dp;
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$2;
      var $64=(($63+60)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0);
      var $67=HEAP8[($66)];
      var $68=(($67 << 24) >> 24);
      var $69=(($62)|0)==(($68)|0);
      if ($69) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $71=$stop;
      var $72=$dp;
      var $73=$71;
      var $74=$72;
      var $75=((($73)-($74))|0);
      var $76=$2;
      var $77=(($76+64)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($75)|0) >= (($78)|0);
      if ($79) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $81=$dp;
      var $82=$2;
      var $83=(($82+60)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+64)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=_memcmp($81, $84, $87);
      var $89=(($88)|0)==0;
      if ($89) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $93=$dp;
      var $94=(($93+1)|0);
      $dp=$94;
      label = 11; break;
    case 18: 
      var $96=$dp;
      var $97=$stop;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=1;
      label = 82; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $102=$2;
      var $103=$m;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$102;
      var $105=$6;
      var $106=$m;
      var $107=(($106+4)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$m;
      var $109=(($108+8)|0);
      HEAP32[(($109)>>2)]=0;
      var $110=$m;
      var $111=(($110+28)|0);
      HEAP32[(($111)>>2)]=0;
      var $112=$3;
      var $113=$m;
      var $114=(($113+12)|0);
      HEAP32[(($114)>>2)]=$112;
      var $115=$start;
      var $116=$m;
      var $117=(($116+16)|0);
      HEAP32[(($117)>>2)]=$115;
      var $118=$stop;
      var $119=$m;
      var $120=(($119+20)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$m;
      var $122=(($121+36)|0);
      HEAP32[(($122)>>2)]=0;
      var $123=$m;
      var $124=(($123+40)|0);
      HEAP32[(($124)>>2)]=0;
      var $125=$m;
      var $126=(($125+44)|0);
      HEAP32[(($126)>>2)]=0;
      var $127=$m;
      var $128=(($127+48)|0);
      HEAP32[(($128)>>2)]=0;
      var $129=$m;
      var $130=(($129+48)|0);
      HEAP32[(($130)>>2)]=0;
      label = 22; break;
    case 22: 
      var $132=$m;
      var $133=$start;
      var $134=$stop;
      var $135=$gf;
      var $136=$gl;
      var $137=_sfast($132, $133, $134, $135, $136);
      $endp=$137;
      var $138=$endp;
      var $139=(($138)|0)==0;
      if ($139) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $141=$m;
      var $142=(($141+8)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$143;
      _free($144);
      var $145=$m;
      var $146=(($145+28)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$147;
      _free($148);
      $1=1;
      label = 82; break;
    case 24: 
      var $150=$4;
      var $151=(($150)|0)==0;
      if ($151) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $153=$2;
      var $154=(($153+72)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|0)!=0;
      if ($156) { label = 27; break; } else { label = 26; break; }
    case 26: 
      label = 66; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $160=$m;
      var $161=$m;
      var $162=(($161+24)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$stop;
      var $165=$gf;
      var $166=$gl;
      var $167=_sslow($160, $163, $164, $165, $166);
      $endp=$167;
      var $168=$endp;
      var $169=(($168)|0)!=0;
      if ($169) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 31; break;
    case 30: 
      var $172=$m;
      var $173=(($172+24)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174+1)|0);
      HEAP32[(($173)>>2)]=$175;
      label = 28; break;
    case 31: 
      var $177=$4;
      var $178=(($177)|0)==1;
      if ($178) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $180=$2;
      var $181=(($180+72)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|0)!=0;
      if ($183) { label = 34; break; } else { label = 33; break; }
    case 33: 
      label = 66; break;
    case 34: 
      var $186=$m;
      var $187=(($186+8)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|0)==0;
      if ($189) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $191=$m;
      var $192=(($191)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+68)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=((($195)+(1))|0);
      var $197=((($196<<3))|0);
      var $198=_malloc($197);
      var $199=$198;
      var $200=$m;
      var $201=(($200+8)|0);
      HEAP32[(($201)>>2)]=$199;
      label = 36; break;
    case 36: 
      var $203=$m;
      var $204=(($203+8)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=(($205)|0)==0;
      if ($206) { label = 37; break; } else { label = 38; break; }
    case 37: 
      $1=12;
      label = 82; break;
    case 38: 
      $i=1;
      label = 39; break;
    case 39: 
      var $210=$i;
      var $211=$m;
      var $212=(($211)|0);
      var $213=HEAP32[(($212)>>2)];
      var $214=(($213+68)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($210)>>>0) <= (($215)>>>0);
      if ($216) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $218=$i;
      var $219=$m;
      var $220=(($219+8)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221+($218<<3))|0);
      var $223=(($222+4)|0);
      HEAP32[(($223)>>2)]=-1;
      var $224=$i;
      var $225=$m;
      var $226=(($225+8)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+($224<<3))|0);
      var $229=(($228)|0);
      HEAP32[(($229)>>2)]=-1;
      label = 41; break;
    case 41: 
      var $231=$i;
      var $232=((($231)+(1))|0);
      $i=$232;
      label = 39; break;
    case 42: 
      var $234=$2;
      var $235=(($234+72)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236)|0)!=0;
      if ($237) { label = 45; break; } else { label = 43; break; }
    case 43: 
      var $239=$m;
      var $240=(($239+4)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=$241 & 1024;
      var $243=(($242)|0)!=0;
      if ($243) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $245=$m;
      var $246=$m;
      var $247=(($246+24)|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=$endp;
      var $250=$gf;
      var $251=$gl;
      var $252=_sdissect($245, $248, $249, $250, $251);
      $dp=$252;
      label = 52; break;
    case 45: 
      var $254=$2;
      var $255=(($254+76)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256)|0) > 0;
      if ($257) { label = 46; break; } else { label = 48; break; }
    case 46: 
      var $259=$m;
      var $260=(($259+28)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=(($261)|0)==0;
      if ($262) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $264=$2;
      var $265=(($264+76)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=((($266)+(1))|0);
      var $268=((($267<<2))|0);
      var $269=_malloc($268);
      var $270=$269;
      var $271=$m;
      var $272=(($271+28)|0);
      HEAP32[(($272)>>2)]=$270;
      label = 48; break;
    case 48: 
      var $274=$2;
      var $275=(($274+76)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($276)|0) > 0;
      if ($277) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $279=$m;
      var $280=(($279+28)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281)|0)==0;
      if ($282) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $284=$m;
      var $285=(($284+8)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=$286;
      _free($287);
      $1=12;
      label = 82; break;
    case 51: 
      var $289=$m;
      var $290=$m;
      var $291=(($290+24)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=$endp;
      var $294=$gf;
      var $295=$gl;
      var $296=_sbackref($289, $292, $293, $294, $295, 0, 0);
      $dp=$296;
      label = 52; break;
    case 52: 
      var $298=$dp;
      var $299=(($298)|0)!=0;
      if ($299) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 66; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $303=$dp;
      var $304=(($303)|0)!=0;
      if ($304) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $306=$endp;
      var $307=$m;
      var $308=(($307+24)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=(($306)>>>0) <= (($309)>>>0);
      if ($310) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 61; break;
    case 58: 
      var $313=$m;
      var $314=$m;
      var $315=(($314+24)|0);
      var $316=HEAP32[(($315)>>2)];
      var $317=$endp;
      var $318=((($317)-(1))|0);
      var $319=$gf;
      var $320=$gl;
      var $321=_sslow($313, $316, $318, $319, $320);
      $endp=$321;
      var $322=$endp;
      var $323=(($322)|0)==0;
      if ($323) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 61; break;
    case 60: 
      var $326=$m;
      var $327=$m;
      var $328=(($327+24)|0);
      var $329=HEAP32[(($328)>>2)];
      var $330=$endp;
      var $331=$gf;
      var $332=$gl;
      var $333=_sbackref($326, $329, $330, $331, $332, 0, 0);
      $dp=$333;
      label = 55; break;
    case 61: 
      var $335=$dp;
      var $336=(($335)|0)!=0;
      if ($336) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 66; break;
    case 63: 
      var $339=$m;
      var $340=(($339+24)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$stop;
      var $343=(($341)|0)==(($342)|0);
      if ($343) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 66; break;
    case 65: 
      var $346=$m;
      var $347=(($346+24)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=(($348+1)|0);
      $start=$349;
      label = 22; break;
    case 66: 
      var $351=$4;
      var $352=(($351)>>>0) > 0;
      if ($352) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $354=$m;
      var $355=(($354+24)|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=$m;
      var $358=(($357+12)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=$356;
      var $361=$359;
      var $362=((($360)-($361))|0);
      var $363=$5;
      var $364=(($363)|0);
      var $365=(($364)|0);
      HEAP32[(($365)>>2)]=$362;
      var $366=$endp;
      var $367=$m;
      var $368=(($367+12)|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=$366;
      var $371=$369;
      var $372=((($370)-($371))|0);
      var $373=$5;
      var $374=(($373)|0);
      var $375=(($374+4)|0);
      HEAP32[(($375)>>2)]=$372;
      label = 68; break;
    case 68: 
      var $377=$4;
      var $378=(($377)>>>0) > 1;
      if ($378) { label = 69; break; } else { label = 77; break; }
    case 69: 
      $i=1;
      label = 70; break;
    case 70: 
      var $381=$i;
      var $382=$4;
      var $383=(($381)>>>0) < (($382)>>>0);
      if ($383) { label = 71; break; } else { label = 76; break; }
    case 71: 
      var $385=$i;
      var $386=$m;
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=(($388+68)|0);
      var $390=HEAP32[(($389)>>2)];
      var $391=(($385)>>>0) <= (($390)>>>0);
      if ($391) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $393=$i;
      var $394=$5;
      var $395=(($394+($393<<3))|0);
      var $396=$i;
      var $397=$m;
      var $398=(($397+8)|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=(($399+($396<<3))|0);
      var $401=$395;
      var $402=$400;
      assert(8 % 1 === 0);HEAP32[(($401)>>2)]=HEAP32[(($402)>>2)];HEAP32[((($401)+(4))>>2)]=HEAP32[((($402)+(4))>>2)];
      label = 74; break;
    case 73: 
      var $404=$i;
      var $405=$5;
      var $406=(($405+($404<<3))|0);
      var $407=(($406)|0);
      HEAP32[(($407)>>2)]=-1;
      var $408=$i;
      var $409=$5;
      var $410=(($409+($408<<3))|0);
      var $411=(($410+4)|0);
      HEAP32[(($411)>>2)]=-1;
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $414=$i;
      var $415=((($414)+(1))|0);
      $i=$415;
      label = 70; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $418=$m;
      var $419=(($418+8)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420)|0)!=0;
      if ($421) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $423=$m;
      var $424=(($423+8)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=$425;
      _free($426);
      label = 79; break;
    case 79: 
      var $428=$m;
      var $429=(($428+28)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=(($430)|0)!=0;
      if ($431) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $433=$m;
      var $434=(($433+28)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$435;
      _free($436);
      label = 81; break;
    case 81: 
      $1=0;
      label = 82; break;
    case 82: 
      var $439=$1;
      STACKTOP = __stackBase__;
      return $439;
    default: assert(0, "bad label: " + label);
  }
}
_smatcher["X"]=1;

function _lmatcher($g, $string, $nmatch, $pmatch, $eflags) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $endp;
      var $i;
      var $mv=__stackBase__;
      var $m;
      var $dp;
      var $gf;
      var $gl;
      var $start;
      var $stop;
      $2=$g;
      $3=$string;
      $4=$nmatch;
      $5=$pmatch;
      $6=$eflags;
      $m=$mv;
      var $7=$2;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)+(1))|0);
      $gf=$10;
      var $11=$2;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      $gl=$13;
      var $14=$2;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 & 4;
      var $18=(($17)|0)!=0;
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $4=0;
      label = 4; break;
    case 4: 
      var $21=$6;
      var $22=$21 & 4;
      var $23=(($22)|0)!=0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$3;
      var $26=$5;
      var $27=(($26)|0);
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($25+$29)|0);
      $start=$30;
      var $31=$3;
      var $32=$5;
      var $33=(($32)|0);
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($31+$35)|0);
      $stop=$36;
      label = 7; break;
    case 6: 
      var $38=$3;
      $start=$38;
      var $39=$start;
      var $40=$start;
      var $41=_strlen($40);
      var $42=(($39+$41)|0);
      $stop=$42;
      label = 7; break;
    case 7: 
      var $44=$stop;
      var $45=$start;
      var $46=(($44)>>>0) < (($45)>>>0);
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=16;
      label = 84; break;
    case 9: 
      var $49=$2;
      var $50=(($49+60)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51)|0)!=0;
      if ($52) { label = 10; break; } else { label = 21; break; }
    case 10: 
      var $54=$start;
      $dp=$54;
      label = 11; break;
    case 11: 
      var $56=$dp;
      var $57=$stop;
      var $58=(($56)>>>0) < (($57)>>>0);
      if ($58) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $60=$dp;
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$2;
      var $64=(($63+60)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0);
      var $67=HEAP8[($66)];
      var $68=(($67 << 24) >> 24);
      var $69=(($62)|0)==(($68)|0);
      if ($69) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $71=$stop;
      var $72=$dp;
      var $73=$71;
      var $74=$72;
      var $75=((($73)-($74))|0);
      var $76=$2;
      var $77=(($76+64)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($75)|0) >= (($78)|0);
      if ($79) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $81=$dp;
      var $82=$2;
      var $83=(($82+60)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$2;
      var $86=(($85+64)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=_memcmp($81, $84, $87);
      var $89=(($88)|0)==0;
      if ($89) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $93=$dp;
      var $94=(($93+1)|0);
      $dp=$94;
      label = 11; break;
    case 18: 
      var $96=$dp;
      var $97=$stop;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=1;
      label = 84; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $102=$2;
      var $103=$m;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$102;
      var $105=$6;
      var $106=$m;
      var $107=(($106+4)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$m;
      var $109=(($108+8)|0);
      HEAP32[(($109)>>2)]=0;
      var $110=$m;
      var $111=(($110+28)|0);
      HEAP32[(($111)>>2)]=0;
      var $112=$3;
      var $113=$m;
      var $114=(($113+12)|0);
      HEAP32[(($114)>>2)]=$112;
      var $115=$start;
      var $116=$m;
      var $117=(($116+16)|0);
      HEAP32[(($117)>>2)]=$115;
      var $118=$stop;
      var $119=$m;
      var $120=(($119+20)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$m;
      var $122=(($121)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+28)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=((($125<<2))|0);
      var $127=_malloc($126);
      var $128=$m;
      var $129=(($128+36)|0);
      HEAP32[(($129)>>2)]=$127;
      var $130=$m;
      var $131=(($130+36)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132)|0)==0;
      if ($133) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $1=12;
      label = 84; break;
    case 23: 
      var $136=$m;
      var $137=(($136+32)|0);
      HEAP32[(($137)>>2)]=0;
      var $138=$m;
      var $139=(($138+32)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=((($140)+(1))|0);
      HEAP32[(($139)>>2)]=$141;
      var $142=$m;
      var $143=(($142)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+28)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=((($140)*($146))|0);
      var $148=$m;
      var $149=(($148+36)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+$147)|0);
      var $152=$m;
      var $153=(($152+40)|0);
      HEAP32[(($153)>>2)]=$151;
      var $154=$m;
      var $155=(($154+32)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=((($156)+(1))|0);
      HEAP32[(($155)>>2)]=$157;
      var $158=$m;
      var $159=(($158)|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=(($160+28)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=((($156)*($162))|0);
      var $164=$m;
      var $165=(($164+36)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+$163)|0);
      var $168=$m;
      var $169=(($168+44)|0);
      HEAP32[(($169)>>2)]=$167;
      var $170=$m;
      var $171=(($170+32)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=((($172)+(1))|0);
      HEAP32[(($171)>>2)]=$173;
      var $174=$m;
      var $175=(($174)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176+28)|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=((($172)*($178))|0);
      var $180=$m;
      var $181=(($180+36)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182+$179)|0);
      var $184=$m;
      var $185=(($184+48)|0);
      HEAP32[(($185)>>2)]=$183;
      var $186=$m;
      var $187=(($186+32)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=((($188)+(1))|0);
      HEAP32[(($187)>>2)]=$189;
      var $190=$m;
      var $191=(($190)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192+28)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=((($188)*($194))|0);
      var $196=$m;
      var $197=(($196+36)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($198+$195)|0);
      var $200=$m;
      var $201=(($200+52)|0);
      HEAP32[(($201)>>2)]=$199;
      var $202=$m;
      var $203=(($202+52)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$m;
      var $206=(($205)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($207+28)|0);
      var $209=HEAP32[(($208)>>2)];
      _memset($204, 0, $209, 1);
      label = 24; break;
    case 24: 
      var $211=$m;
      var $212=$start;
      var $213=$stop;
      var $214=$gf;
      var $215=$gl;
      var $216=_lfast($211, $212, $213, $214, $215);
      $endp=$216;
      var $217=$endp;
      var $218=(($217)|0)==0;
      if ($218) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $220=$m;
      var $221=(($220+8)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$222;
      _free($223);
      var $224=$m;
      var $225=(($224+28)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$226;
      _free($227);
      var $228=$m;
      var $229=(($228+36)|0);
      var $230=HEAP32[(($229)>>2)];
      _free($230);
      $1=1;
      label = 84; break;
    case 26: 
      var $232=$4;
      var $233=(($232)|0)==0;
      if ($233) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $235=$2;
      var $236=(($235+72)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=(($237)|0)!=0;
      if ($238) { label = 29; break; } else { label = 28; break; }
    case 28: 
      label = 68; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $242=$m;
      var $243=$m;
      var $244=(($243+24)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$stop;
      var $247=$gf;
      var $248=$gl;
      var $249=_lslow($242, $245, $246, $247, $248);
      $endp=$249;
      var $250=$endp;
      var $251=(($250)|0)!=0;
      if ($251) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $254=$m;
      var $255=(($254+24)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+1)|0);
      HEAP32[(($255)>>2)]=$257;
      label = 30; break;
    case 33: 
      var $259=$4;
      var $260=(($259)|0)==1;
      if ($260) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $262=$2;
      var $263=(($262+72)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264)|0)!=0;
      if ($265) { label = 36; break; } else { label = 35; break; }
    case 35: 
      label = 68; break;
    case 36: 
      var $268=$m;
      var $269=(($268+8)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270)|0)==0;
      if ($271) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $273=$m;
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($275+68)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=((($277)+(1))|0);
      var $279=((($278<<3))|0);
      var $280=_malloc($279);
      var $281=$280;
      var $282=$m;
      var $283=(($282+8)|0);
      HEAP32[(($283)>>2)]=$281;
      label = 38; break;
    case 38: 
      var $285=$m;
      var $286=(($285+8)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=(($287)|0)==0;
      if ($288) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $290=$m;
      var $291=(($290+36)|0);
      var $292=HEAP32[(($291)>>2)];
      _free($292);
      $1=12;
      label = 84; break;
    case 40: 
      $i=1;
      label = 41; break;
    case 41: 
      var $295=$i;
      var $296=$m;
      var $297=(($296)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=(($298+68)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=(($295)>>>0) <= (($300)>>>0);
      if ($301) { label = 42; break; } else { label = 44; break; }
    case 42: 
      var $303=$i;
      var $304=$m;
      var $305=(($304+8)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+($303<<3))|0);
      var $308=(($307+4)|0);
      HEAP32[(($308)>>2)]=-1;
      var $309=$i;
      var $310=$m;
      var $311=(($310+8)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312+($309<<3))|0);
      var $314=(($313)|0);
      HEAP32[(($314)>>2)]=-1;
      label = 43; break;
    case 43: 
      var $316=$i;
      var $317=((($316)+(1))|0);
      $i=$317;
      label = 41; break;
    case 44: 
      var $319=$2;
      var $320=(($319+72)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($321)|0)!=0;
      if ($322) { label = 47; break; } else { label = 45; break; }
    case 45: 
      var $324=$m;
      var $325=(($324+4)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=$326 & 1024;
      var $328=(($327)|0)!=0;
      if ($328) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $330=$m;
      var $331=$m;
      var $332=(($331+24)|0);
      var $333=HEAP32[(($332)>>2)];
      var $334=$endp;
      var $335=$gf;
      var $336=$gl;
      var $337=_ldissect($330, $333, $334, $335, $336);
      $dp=$337;
      label = 54; break;
    case 47: 
      var $339=$2;
      var $340=(($339+76)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=(($341)|0) > 0;
      if ($342) { label = 48; break; } else { label = 50; break; }
    case 48: 
      var $344=$m;
      var $345=(($344+28)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=(($346)|0)==0;
      if ($347) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $349=$2;
      var $350=(($349+76)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=((($351)+(1))|0);
      var $353=((($352<<2))|0);
      var $354=_malloc($353);
      var $355=$354;
      var $356=$m;
      var $357=(($356+28)|0);
      HEAP32[(($357)>>2)]=$355;
      label = 50; break;
    case 50: 
      var $359=$2;
      var $360=(($359+76)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=(($361)|0) > 0;
      if ($362) { label = 51; break; } else { label = 53; break; }
    case 51: 
      var $364=$m;
      var $365=(($364+28)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=(($366)|0)==0;
      if ($367) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $369=$m;
      var $370=(($369+8)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$371;
      _free($372);
      var $373=$m;
      var $374=(($373+36)|0);
      var $375=HEAP32[(($374)>>2)];
      _free($375);
      $1=12;
      label = 84; break;
    case 53: 
      var $377=$m;
      var $378=$m;
      var $379=(($378+24)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=$endp;
      var $382=$gf;
      var $383=$gl;
      var $384=_lbackref($377, $380, $381, $382, $383, 0, 0);
      $dp=$384;
      label = 54; break;
    case 54: 
      var $386=$dp;
      var $387=(($386)|0)!=0;
      if ($387) { label = 55; break; } else { label = 56; break; }
    case 55: 
      label = 68; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $391=$dp;
      var $392=(($391)|0)!=0;
      if ($392) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $394=$endp;
      var $395=$m;
      var $396=(($395+24)|0);
      var $397=HEAP32[(($396)>>2)];
      var $398=(($394)>>>0) <= (($397)>>>0);
      if ($398) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 63; break;
    case 60: 
      var $401=$m;
      var $402=$m;
      var $403=(($402+24)|0);
      var $404=HEAP32[(($403)>>2)];
      var $405=$endp;
      var $406=((($405)-(1))|0);
      var $407=$gf;
      var $408=$gl;
      var $409=_lslow($401, $404, $406, $407, $408);
      $endp=$409;
      var $410=$endp;
      var $411=(($410)|0)==0;
      if ($411) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 63; break;
    case 62: 
      var $414=$m;
      var $415=$m;
      var $416=(($415+24)|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$endp;
      var $419=$gf;
      var $420=$gl;
      var $421=_lbackref($414, $417, $418, $419, $420, 0, 0);
      $dp=$421;
      label = 57; break;
    case 63: 
      var $423=$dp;
      var $424=(($423)|0)!=0;
      if ($424) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 68; break;
    case 65: 
      var $427=$m;
      var $428=(($427+24)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=$stop;
      var $431=(($429)|0)==(($430)|0);
      if ($431) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 68; break;
    case 67: 
      var $434=$m;
      var $435=(($434+24)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=(($436+1)|0);
      $start=$437;
      label = 24; break;
    case 68: 
      var $439=$4;
      var $440=(($439)>>>0) > 0;
      if ($440) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $442=$m;
      var $443=(($442+24)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=$m;
      var $446=(($445+12)|0);
      var $447=HEAP32[(($446)>>2)];
      var $448=$444;
      var $449=$447;
      var $450=((($448)-($449))|0);
      var $451=$5;
      var $452=(($451)|0);
      var $453=(($452)|0);
      HEAP32[(($453)>>2)]=$450;
      var $454=$endp;
      var $455=$m;
      var $456=(($455+12)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=$454;
      var $459=$457;
      var $460=((($458)-($459))|0);
      var $461=$5;
      var $462=(($461)|0);
      var $463=(($462+4)|0);
      HEAP32[(($463)>>2)]=$460;
      label = 70; break;
    case 70: 
      var $465=$4;
      var $466=(($465)>>>0) > 1;
      if ($466) { label = 71; break; } else { label = 79; break; }
    case 71: 
      $i=1;
      label = 72; break;
    case 72: 
      var $469=$i;
      var $470=$4;
      var $471=(($469)>>>0) < (($470)>>>0);
      if ($471) { label = 73; break; } else { label = 78; break; }
    case 73: 
      var $473=$i;
      var $474=$m;
      var $475=(($474)|0);
      var $476=HEAP32[(($475)>>2)];
      var $477=(($476+68)|0);
      var $478=HEAP32[(($477)>>2)];
      var $479=(($473)>>>0) <= (($478)>>>0);
      if ($479) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $481=$i;
      var $482=$5;
      var $483=(($482+($481<<3))|0);
      var $484=$i;
      var $485=$m;
      var $486=(($485+8)|0);
      var $487=HEAP32[(($486)>>2)];
      var $488=(($487+($484<<3))|0);
      var $489=$483;
      var $490=$488;
      assert(8 % 1 === 0);HEAP32[(($489)>>2)]=HEAP32[(($490)>>2)];HEAP32[((($489)+(4))>>2)]=HEAP32[((($490)+(4))>>2)];
      label = 76; break;
    case 75: 
      var $492=$i;
      var $493=$5;
      var $494=(($493+($492<<3))|0);
      var $495=(($494)|0);
      HEAP32[(($495)>>2)]=-1;
      var $496=$i;
      var $497=$5;
      var $498=(($497+($496<<3))|0);
      var $499=(($498+4)|0);
      HEAP32[(($499)>>2)]=-1;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $502=$i;
      var $503=((($502)+(1))|0);
      $i=$503;
      label = 72; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $506=$m;
      var $507=(($506+8)|0);
      var $508=HEAP32[(($507)>>2)];
      var $509=(($508)|0)!=0;
      if ($509) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $511=$m;
      var $512=(($511+8)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=$513;
      _free($514);
      label = 81; break;
    case 81: 
      var $516=$m;
      var $517=(($516+28)|0);
      var $518=HEAP32[(($517)>>2)];
      var $519=(($518)|0)!=0;
      if ($519) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $521=$m;
      var $522=(($521+28)|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=$523;
      _free($524);
      label = 83; break;
    case 83: 
      var $526=$m;
      var $527=(($526+36)|0);
      var $528=HEAP32[(($527)>>2)];
      _free($528);
      $1=0;
      label = 84; break;
    case 84: 
      var $530=$1;
      STACKTOP = __stackBase__;
      return $530;
    default: assert(0, "bad label: " + label);
  }
}
_lmatcher["X"]=1;

function _lfast($m, $start, $stop, $startst, $stopst) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $st;
      var $fresh;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $coldp;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      var $7=$2;
      var $8=(($7+40)|0);
      var $9=HEAP32[(($8)>>2)];
      $st=$9;
      var $10=$2;
      var $11=(($10+44)|0);
      var $12=HEAP32[(($11)>>2)];
      $fresh=$12;
      var $13=$2;
      var $14=(($13+48)|0);
      var $15=HEAP32[(($14)>>2)];
      $tmp=$15;
      var $16=$3;
      $p=$16;
      var $17=$3;
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|0)==(($20)|0);
      if ($21) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $29 = 128;label = 5; break;
    case 4: 
      var $24=$3;
      var $25=((($24)-(1))|0);
      var $26=HEAP8[($25)];
      var $27=(($26 << 24) >> 24);
      var $29 = $27;label = 5; break;
    case 5: 
      var $29;
      $c=$29;
      var $30=$st;
      var $31=$2;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      _memset($30, 0, $35, 1);
      var $36=$5;
      var $37=$st;
      var $38=(($37+$36)|0);
      HEAP8[($38)]=1;
      var $39=$2;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$5;
      var $43=$6;
      var $44=$st;
      var $45=$st;
      var $46=_lstep($41, $42, $43, $44, 132, $45);
      $st=$46;
      var $47=$fresh;
      var $48=$st;
      var $49=$2;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+28)|0);
      var $53=HEAP32[(($52)>>2)];
      assert($53 % 1 === 0);_memcpy($47, $48, $53);
      $coldp=0;
      label = 6; break;
    case 6: 
      var $55=$c;
      $lastc=$55;
      var $56=$p;
      var $57=$2;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($56)|0)==(($59)|0);
      if ($60) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $67 = 128;label = 9; break;
    case 8: 
      var $63=$p;
      var $64=HEAP8[($63)];
      var $65=(($64 << 24) >> 24);
      var $67 = $65;label = 9; break;
    case 9: 
      var $67;
      $c=$67;
      var $68=$st;
      var $69=$fresh;
      var $70=$2;
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+28)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=_memcmp($68, $69, $74);
      var $76=(($75)|0)==0;
      if ($76) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $78=$p;
      $coldp=$78;
      label = 11; break;
    case 11: 
      $flagch=0;
      $i=0;
      var $80=$lastc;
      var $81=(($80)|0)==10;
      if ($81) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $83=$2;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & 8;
      var $89=(($88)|0)!=0;
      if ($89) { label = 15; break; } else { label = 13; break; }
    case 13: 
      var $91=$lastc;
      var $92=(($91)|0)==128;
      if ($92) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96 & 1;
      var $98=(($97)|0)!=0;
      if ($98) { label = 16; break; } else { label = 15; break; }
    case 15: 
      $flagch=129;
      var $100=$2;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+44)|0);
      var $104=HEAP32[(($103)>>2)];
      $i=$104;
      label = 16; break;
    case 16: 
      var $106=$c;
      var $107=(($106)|0)==10;
      if ($107) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $109=$2;
      var $110=(($109)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$113 & 8;
      var $115=(($114)|0)!=0;
      if ($115) { label = 20; break; } else { label = 18; break; }
    case 18: 
      var $117=$c;
      var $118=(($117)|0)==128;
      if ($118) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $120=$2;
      var $121=(($120+4)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$122 & 2;
      var $124=(($123)|0)!=0;
      if ($124) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $126=$flagch;
      var $127=(($126)|0)==129;
      var $128=$127 ? 131 : 130;
      $flagch=$128;
      var $129=$2;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+48)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$i;
      var $135=((($134)+($133))|0);
      $i=$135;
      label = 21; break;
    case 21: 
      var $137=$i;
      var $138=(($137)|0)!=0;
      if ($138) { label = 22; break; } else { label = 27; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $141=$i;
      var $142=(($141)|0) > 0;
      if ($142) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $144=$2;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$5;
      var $148=$6;
      var $149=$st;
      var $150=$flagch;
      var $151=$st;
      var $152=_lstep($146, $147, $148, $149, $150, $151);
      $st=$152;
      label = 25; break;
    case 25: 
      var $154=$i;
      var $155=((($154)-(1))|0);
      $i=$155;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $158=$flagch;
      var $159=(($158)|0)==129;
      if ($159) { label = 31; break; } else { label = 28; break; }
    case 28: 
      var $161=$lastc;
      var $162=(($161)|0)!=128;
      if ($162) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $164=$lastc;
      var $165=_isalnum($164);
      var $166=(($165)|0)!=0;
      if ($166) { label = 35; break; } else { label = 30; break; }
    case 30: 
      var $168=$lastc;
      var $169=(($168)|0)==95;
      if ($169) { label = 35; break; } else { label = 31; break; }
    case 31: 
      var $171=$c;
      var $172=(($171)|0)!=128;
      if ($172) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $174=$c;
      var $175=_isalnum($174);
      var $176=(($175)|0)!=0;
      if ($176) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $178=$c;
      var $179=(($178)|0)==95;
      if ($179) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $flagch=133;
      label = 35; break;
    case 35: 
      var $182=$lastc;
      var $183=(($182)|0)!=128;
      if ($183) { label = 36; break; } else { label = 43; break; }
    case 36: 
      var $185=$lastc;
      var $186=_isalnum($185);
      var $187=(($186)|0)!=0;
      if ($187) { label = 38; break; } else { label = 37; break; }
    case 37: 
      var $189=$lastc;
      var $190=(($189)|0)==95;
      if ($190) { label = 38; break; } else { label = 43; break; }
    case 38: 
      var $192=$flagch;
      var $193=(($192)|0)==130;
      if ($193) { label = 42; break; } else { label = 39; break; }
    case 39: 
      var $195=$c;
      var $196=(($195)|0)!=128;
      if ($196) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $198=$c;
      var $199=_isalnum($198);
      var $200=(($199)|0)!=0;
      if ($200) { label = 43; break; } else { label = 41; break; }
    case 41: 
      var $202=$c;
      var $203=(($202)|0)==95;
      if ($203) { label = 43; break; } else { label = 42; break; }
    case 42: 
      $flagch=134;
      label = 43; break;
    case 43: 
      var $206=$flagch;
      var $207=(($206)|0)==133;
      if ($207) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $209=$flagch;
      var $210=(($209)|0)==134;
      if ($210) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $212=$2;
      var $213=(($212)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$5;
      var $216=$6;
      var $217=$st;
      var $218=$flagch;
      var $219=$st;
      var $220=_lstep($214, $215, $216, $217, $218, $219);
      $st=$220;
      label = 46; break;
    case 46: 
      var $222=$6;
      var $223=$st;
      var $224=(($223+$222)|0);
      var $225=HEAP8[($224)];
      var $226=(($225 << 24) >> 24);
      var $227=(($226)|0)!=0;
      if ($227) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $229=$p;
      var $230=$4;
      var $231=(($229)|0)==(($230)|0);
      if ($231) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 50; break;
    case 49: 
      var $234=$tmp;
      var $235=$st;
      var $236=$2;
      var $237=(($236)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=(($238+28)|0);
      var $240=HEAP32[(($239)>>2)];
      assert($240 % 1 === 0);_memcpy($234, $235, $240);
      var $241=$st;
      var $242=$fresh;
      var $243=$2;
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=(($245+28)|0);
      var $247=HEAP32[(($246)>>2)];
      assert($247 % 1 === 0);_memcpy($241, $242, $247);
      var $248=$2;
      var $249=(($248)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=$5;
      var $252=$6;
      var $253=$tmp;
      var $254=$c;
      var $255=$st;
      var $256=_lstep($250, $251, $252, $253, $254, $255);
      $st=$256;
      var $257=$p;
      var $258=(($257+1)|0);
      $p=$258;
      label = 6; break;
    case 50: 
      var $260=$coldp;
      var $261=$2;
      var $262=(($261+24)|0);
      HEAP32[(($262)>>2)]=$260;
      var $263=$6;
      var $264=$st;
      var $265=(($264+$263)|0);
      var $266=HEAP8[($265)];
      var $267=(($266 << 24) >> 24)!=0;
      if ($267) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $269=$p;
      var $270=(($269+1)|0);
      $1=$270;
      label = 53; break;
    case 52: 
      $1=0;
      label = 53; break;
    case 53: 
      var $273=$1;

      return $273;
    default: assert(0, "bad label: " + label);
  }
}
_lfast["X"]=1;

function _lslow($m, $start, $stop, $startst, $stopst) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $st;
      var $empty;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $matchp;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$1;
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      $st=$8;
      var $9=$1;
      var $10=(($9+52)|0);
      var $11=HEAP32[(($10)>>2)];
      $empty=$11;
      var $12=$1;
      var $13=(($12+48)|0);
      var $14=HEAP32[(($13)>>2)];
      $tmp=$14;
      var $15=$2;
      $p=$15;
      var $16=$2;
      var $17=$1;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0)==(($19)|0);
      if ($20) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $28 = 128;label = 5; break;
    case 4: 
      var $23=$2;
      var $24=((($23)-(1))|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $28 = $26;label = 5; break;
    case 5: 
      var $28;
      $c=$28;
      var $29=$st;
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+28)|0);
      var $34=HEAP32[(($33)>>2)];
      _memset($29, 0, $34, 1);
      var $35=$4;
      var $36=$st;
      var $37=(($36+$35)|0);
      HEAP8[($37)]=1;
      var $38=$1;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$4;
      var $42=$5;
      var $43=$st;
      var $44=$st;
      var $45=_lstep($40, $41, $42, $43, 132, $44);
      $st=$45;
      $matchp=0;
      label = 6; break;
    case 6: 
      var $47=$c;
      $lastc=$47;
      var $48=$p;
      var $49=$1;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($48)|0)==(($51)|0);
      if ($52) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $59 = 128;label = 9; break;
    case 8: 
      var $55=$p;
      var $56=HEAP8[($55)];
      var $57=(($56 << 24) >> 24);
      var $59 = $57;label = 9; break;
    case 9: 
      var $59;
      $c=$59;
      $flagch=0;
      $i=0;
      var $60=$lastc;
      var $61=(($60)|0)==10;
      if ($61) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $63=$1;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+24)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & 8;
      var $69=(($68)|0)!=0;
      if ($69) { label = 13; break; } else { label = 11; break; }
    case 11: 
      var $71=$lastc;
      var $72=(($71)|0)==128;
      if ($72) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $74=$1;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 & 1;
      var $78=(($77)|0)!=0;
      if ($78) { label = 14; break; } else { label = 13; break; }
    case 13: 
      $flagch=129;
      var $80=$1;
      var $81=(($80)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($82+44)|0);
      var $84=HEAP32[(($83)>>2)];
      $i=$84;
      label = 14; break;
    case 14: 
      var $86=$c;
      var $87=(($86)|0)==10;
      if ($87) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $89=$1;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$93 & 8;
      var $95=(($94)|0)!=0;
      if ($95) { label = 18; break; } else { label = 16; break; }
    case 16: 
      var $97=$c;
      var $98=(($97)|0)==128;
      if ($98) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $100=$1;
      var $101=(($100+4)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102 & 2;
      var $104=(($103)|0)!=0;
      if ($104) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $106=$flagch;
      var $107=(($106)|0)==129;
      var $108=$107 ? 131 : 130;
      $flagch=$108;
      var $109=$1;
      var $110=(($109)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+48)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$i;
      var $115=((($114)+($113))|0);
      $i=$115;
      label = 19; break;
    case 19: 
      var $117=$i;
      var $118=(($117)|0)!=0;
      if ($118) { label = 20; break; } else { label = 25; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $121=$i;
      var $122=(($121)|0) > 0;
      if ($122) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $124=$1;
      var $125=(($124)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$4;
      var $128=$5;
      var $129=$st;
      var $130=$flagch;
      var $131=$st;
      var $132=_lstep($126, $127, $128, $129, $130, $131);
      $st=$132;
      label = 23; break;
    case 23: 
      var $134=$i;
      var $135=((($134)-(1))|0);
      $i=$135;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $138=$flagch;
      var $139=(($138)|0)==129;
      if ($139) { label = 29; break; } else { label = 26; break; }
    case 26: 
      var $141=$lastc;
      var $142=(($141)|0)!=128;
      if ($142) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $144=$lastc;
      var $145=_isalnum($144);
      var $146=(($145)|0)!=0;
      if ($146) { label = 33; break; } else { label = 28; break; }
    case 28: 
      var $148=$lastc;
      var $149=(($148)|0)==95;
      if ($149) { label = 33; break; } else { label = 29; break; }
    case 29: 
      var $151=$c;
      var $152=(($151)|0)!=128;
      if ($152) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $154=$c;
      var $155=_isalnum($154);
      var $156=(($155)|0)!=0;
      if ($156) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $158=$c;
      var $159=(($158)|0)==95;
      if ($159) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $flagch=133;
      label = 33; break;
    case 33: 
      var $162=$lastc;
      var $163=(($162)|0)!=128;
      if ($163) { label = 34; break; } else { label = 41; break; }
    case 34: 
      var $165=$lastc;
      var $166=_isalnum($165);
      var $167=(($166)|0)!=0;
      if ($167) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $169=$lastc;
      var $170=(($169)|0)==95;
      if ($170) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $172=$flagch;
      var $173=(($172)|0)==130;
      if ($173) { label = 40; break; } else { label = 37; break; }
    case 37: 
      var $175=$c;
      var $176=(($175)|0)!=128;
      if ($176) { label = 38; break; } else { label = 41; break; }
    case 38: 
      var $178=$c;
      var $179=_isalnum($178);
      var $180=(($179)|0)!=0;
      if ($180) { label = 41; break; } else { label = 39; break; }
    case 39: 
      var $182=$c;
      var $183=(($182)|0)==95;
      if ($183) { label = 41; break; } else { label = 40; break; }
    case 40: 
      $flagch=134;
      label = 41; break;
    case 41: 
      var $186=$flagch;
      var $187=(($186)|0)==133;
      if ($187) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $189=$flagch;
      var $190=(($189)|0)==134;
      if ($190) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $192=$1;
      var $193=(($192)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=$4;
      var $196=$5;
      var $197=$st;
      var $198=$flagch;
      var $199=$st;
      var $200=_lstep($194, $195, $196, $197, $198, $199);
      $st=$200;
      label = 44; break;
    case 44: 
      var $202=$5;
      var $203=$st;
      var $204=(($203+$202)|0);
      var $205=HEAP8[($204)];
      var $206=(($205 << 24) >> 24)!=0;
      if ($206) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $208=$p;
      $matchp=$208;
      label = 46; break;
    case 46: 
      var $210=$st;
      var $211=$empty;
      var $212=$1;
      var $213=(($212)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+28)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=_memcmp($210, $211, $216);
      var $218=(($217)|0)==0;
      if ($218) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $220=$p;
      var $221=$3;
      var $222=(($220)|0)==(($221)|0);
      if ($222) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 50; break;
    case 49: 
      var $225=$tmp;
      var $226=$st;
      var $227=$1;
      var $228=(($227)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=(($229+28)|0);
      var $231=HEAP32[(($230)>>2)];
      assert($231 % 1 === 0);_memcpy($225, $226, $231);
      var $232=$st;
      var $233=$empty;
      var $234=$1;
      var $235=(($234)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($236+28)|0);
      var $238=HEAP32[(($237)>>2)];
      assert($238 % 1 === 0);_memcpy($232, $233, $238);
      var $239=$1;
      var $240=(($239)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=$4;
      var $243=$5;
      var $244=$tmp;
      var $245=$c;
      var $246=$st;
      var $247=_lstep($241, $242, $243, $244, $245, $246);
      $st=$247;
      var $248=$p;
      var $249=(($248+1)|0);
      $p=$249;
      label = 6; break;
    case 50: 
      var $251=$matchp;

      return $251;
    default: assert(0, "bad label: " + label);
  }
}
_lslow["X"]=1;

function _ldissect($m, $start, $stop, $startst, $stopst) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $ss;
      var $es;
      var $sp;
      var $stp;
      var $rest;
      var $tail;
      var $ssub;
      var $esub;
      var $ssp;
      var $sep;
      var $oldssp;
      var $dp;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$2;
      $sp=$6;
      var $7=$4;
      $ss=$7;
      label = 3; break;
    case 3: 
      var $9=$ss;
      var $10=$5;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { label = 4; break; } else { label = 54; break; }
    case 4: 
      var $13=$ss;
      $es=$13;
      var $14=$es;
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+($14<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & -134217728;
      if ((($22)|0) == 1207959552 || (($22)|0) == 1476395008) {
        label = 5; break;
      }
      else if ((($22)|0) == 2013265920) {
        label = 6; break;
      }
      else {
      label = 10; break;
      }
      
    case 5: 
      var $24=$es;
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($24<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 134217727;
      var $33=$es;
      var $34=((($33)+($32))|0);
      $es=$34;
      label = 10; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $37=$es;
      var $38=$1;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+($37<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & -134217728;
      var $46=(($45)|0)!=-1879048192;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$es;
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($48<<2))|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 134217727;
      var $57=$es;
      var $58=((($57)+($56))|0);
      $es=$58;
      label = 7; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $61=$es;
      var $62=((($61)+(1))|0);
      $es=$62;
      var $63=$ss;
      var $64=$1;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($63<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 & -134217728;
      if ((($71)|0) == 134217728) {
        label = 11; break;
      }
      else if ((($71)|0) == 268435456) {
        label = 12; break;
      }
      else if ((($71)|0) == 402653184 || (($71)|0) == 536870912 || (($71)|0) == -1744830464 || (($71)|0) == -1610612736) {
        label = 13; break;
      }
      else if ((($71)|0) == 671088640 || (($71)|0) == 805306368) {
        label = 14; break;
      }
      else if ((($71)|0) == 939524096 || (($71)|0) == 1073741824) {
        label = 15; break;
      }
      else if ((($71)|0) == 1476395008) {
        label = 16; break;
      }
      else if ((($71)|0) == 1207959552) {
        label = 24; break;
      }
      else if ((($71)|0) == 2013265920) {
        label = 36; break;
      }
      else if ((($71)|0) == 1342177280 || (($71)|0) == 1610612736 || (($71)|0) == -2147483648 || (($71)|0) == -2013265920 || (($71)|0) == -1879048192) {
        label = 48; break;
      }
      else if ((($71)|0) == 1744830464) {
        label = 49; break;
      }
      else if ((($71)|0) == 1879048192) {
        label = 50; break;
      }
      else {
      label = 51; break;
      }
      
    case 11: 
      label = 52; break;
    case 12: 
      var $74=$sp;
      var $75=(($74+1)|0);
      $sp=$75;
      label = 52; break;
    case 13: 
      label = 52; break;
    case 14: 
      var $78=$sp;
      var $79=(($78+1)|0);
      $sp=$79;
      label = 52; break;
    case 15: 
      label = 52; break;
    case 16: 
      var $82=$3;
      $stp=$82;
      label = 17; break;
    case 17: 
      var $84=$1;
      var $85=$sp;
      var $86=$stp;
      var $87=$ss;
      var $88=$es;
      var $89=_lslow($84, $85, $86, $87, $88);
      $rest=$89;
      var $90=$1;
      var $91=$rest;
      var $92=$3;
      var $93=$es;
      var $94=$5;
      var $95=_lslow($90, $91, $92, $93, $94);
      $tail=$95;
      var $96=$tail;
      var $97=$3;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $101=$rest;
      var $102=((($101)-(1))|0);
      $stp=$102;
      label = 17; break;
    case 20: 
      var $104=$ss;
      var $105=((($104)+(1))|0);
      $ssub=$105;
      var $106=$es;
      var $107=((($106)-(1))|0);
      $esub=$107;
      var $108=$1;
      var $109=$sp;
      var $110=$rest;
      var $111=$ssub;
      var $112=$esub;
      var $113=_lslow($108, $109, $110, $111, $112);
      var $114=(($113)|0)!=0;
      if ($114) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $116=$1;
      var $117=$sp;
      var $118=$rest;
      var $119=$ssub;
      var $120=$esub;
      var $121=_ldissect($116, $117, $118, $119, $120);
      $dp=$121;
      label = 23; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $124=$rest;
      $sp=$124;
      label = 52; break;
    case 24: 
      var $126=$3;
      $stp=$126;
      label = 25; break;
    case 25: 
      var $128=$1;
      var $129=$sp;
      var $130=$stp;
      var $131=$ss;
      var $132=$es;
      var $133=_lslow($128, $129, $130, $131, $132);
      $rest=$133;
      var $134=$1;
      var $135=$rest;
      var $136=$3;
      var $137=$es;
      var $138=$5;
      var $139=_lslow($134, $135, $136, $137, $138);
      $tail=$139;
      var $140=$tail;
      var $141=$3;
      var $142=(($140)|0)==(($141)|0);
      if ($142) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $145=$rest;
      var $146=((($145)-(1))|0);
      $stp=$146;
      label = 25; break;
    case 28: 
      var $148=$ss;
      var $149=((($148)+(1))|0);
      $ssub=$149;
      var $150=$es;
      var $151=((($150)-(1))|0);
      $esub=$151;
      var $152=$sp;
      $ssp=$152;
      var $153=$ssp;
      $oldssp=$153;
      label = 29; break;
    case 29: 
      var $155=$1;
      var $156=$ssp;
      var $157=$rest;
      var $158=$ssub;
      var $159=$esub;
      var $160=_lslow($155, $156, $157, $158, $159);
      $sep=$160;
      var $161=$sep;
      var $162=(($161)|0)==0;
      if ($162) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $164=$sep;
      var $165=$ssp;
      var $166=(($164)|0)==(($165)|0);
      if ($166) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $169=$ssp;
      $oldssp=$169;
      var $170=$sep;
      $ssp=$170;
      label = 29; break;
    case 33: 
      var $172=$sep;
      var $173=(($172)|0)==0;
      if ($173) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $175=$ssp;
      $sep=$175;
      var $176=$oldssp;
      $ssp=$176;
      label = 35; break;
    case 35: 
      var $178=$1;
      var $179=$ssp;
      var $180=$sep;
      var $181=$ssub;
      var $182=$esub;
      var $183=_ldissect($178, $179, $180, $181, $182);
      $dp=$183;
      var $184=$rest;
      $sp=$184;
      label = 52; break;
    case 36: 
      var $186=$3;
      $stp=$186;
      label = 37; break;
    case 37: 
      var $188=$1;
      var $189=$sp;
      var $190=$stp;
      var $191=$ss;
      var $192=$es;
      var $193=_lslow($188, $189, $190, $191, $192);
      $rest=$193;
      var $194=$1;
      var $195=$rest;
      var $196=$3;
      var $197=$es;
      var $198=$5;
      var $199=_lslow($194, $195, $196, $197, $198);
      $tail=$199;
      var $200=$tail;
      var $201=$3;
      var $202=(($200)|0)==(($201)|0);
      if ($202) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $205=$rest;
      var $206=((($205)-(1))|0);
      $stp=$206;
      label = 37; break;
    case 40: 
      var $208=$ss;
      var $209=((($208)+(1))|0);
      $ssub=$209;
      var $210=$ss;
      var $211=$ss;
      var $212=$1;
      var $213=(($212)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216+($211<<2))|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$218 & 134217727;
      var $220=((($210)+($219))|0);
      var $221=((($220)-(1))|0);
      $esub=$221;
      label = 41; break;
    case 41: 
      var $223=$1;
      var $224=$sp;
      var $225=$rest;
      var $226=$ssub;
      var $227=$esub;
      var $228=_lslow($223, $224, $225, $226, $227);
      var $229=$rest;
      var $230=(($228)|0)==(($229)|0);
      if ($230) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 47; break;
    case 43: 
      var $233=$esub;
      var $234=((($233)+(1))|0);
      $esub=$234;
      var $235=$esub;
      var $236=((($235)+(1))|0);
      $ssub=$236;
      var $237=$esub;
      var $238=$1;
      var $239=(($238)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=(($240+4)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=(($242+($237<<2))|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=$244 & 134217727;
      var $246=$esub;
      var $247=((($246)+($245))|0);
      $esub=$247;
      var $248=$esub;
      var $249=$1;
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+4)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+($248<<2))|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=$255 & -134217728;
      var $257=(($256)|0)==-2013265920;
      if ($257) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $259=$esub;
      var $260=((($259)-(1))|0);
      $esub=$260;
      label = 46; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 41; break;
    case 47: 
      var $264=$1;
      var $265=$sp;
      var $266=$rest;
      var $267=$ssub;
      var $268=$esub;
      var $269=_ldissect($264, $265, $266, $267, $268);
      $dp=$269;
      var $270=$rest;
      $sp=$270;
      label = 52; break;
    case 48: 
      label = 52; break;
    case 49: 
      var $273=$ss;
      var $274=$1;
      var $275=(($274)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($276+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+($273<<2))|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=$280 & 134217727;
      $i=$281;
      var $282=$sp;
      var $283=$1;
      var $284=(($283+12)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$282;
      var $287=$285;
      var $288=((($286)-($287))|0);
      var $289=$i;
      var $290=$1;
      var $291=(($290+8)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=(($292+($289<<3))|0);
      var $294=(($293)|0);
      HEAP32[(($294)>>2)]=$288;
      label = 52; break;
    case 50: 
      var $296=$ss;
      var $297=$1;
      var $298=(($297)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=(($299+4)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=(($301+($296<<2))|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=$303 & 134217727;
      $i=$304;
      var $305=$sp;
      var $306=$1;
      var $307=(($306+12)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=$305;
      var $310=$308;
      var $311=((($309)-($310))|0);
      var $312=$i;
      var $313=$1;
      var $314=(($313+8)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=(($315+($312<<3))|0);
      var $317=(($316+4)|0);
      HEAP32[(($317)>>2)]=$311;
      label = 52; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $321=$es;
      $ss=$321;
      label = 3; break;
    case 54: 
      var $323=$sp;

      return $323;
    default: assert(0, "bad label: " + label);
  }
}
_ldissect["X"]=1;

function _lbackref($m, $start, $stop, $startst, $stopst, $lev, $rec) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $ss;
      var $sp;
      var $ssub;
      var $esub;
      var $ssp;
      var $dp;
      var $len;
      var $hard;
      var $s;
      var $offsave;
      var $cs;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      $7=$lev;
      $8=$rec;
      var $9=$3;
      $sp=$9;
      $hard=0;
      var $10=$5;
      $ss=$10;
      label = 3; break;
    case 3: 
      var $12=$hard;
      var $13=(($12)|0)!=0;
      if ($13) { var $19 = 0;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $15=$ss;
      var $16=$6;
      var $17=(($15)|0) < (($16)|0);
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      if ($19) { label = 6; break; } else { label = 70; break; }
    case 6: 
      var $21=$ss;
      var $22=$2;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($21<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      $s=$28;
      var $29=$28 & -134217728;
      if ((($29)|0) == 268435456) {
        label = 7; break;
      }
      else if ((($29)|0) == 671088640) {
        label = 11; break;
      }
      else if ((($29)|0) == 805306368) {
        label = 14; break;
      }
      else if ((($29)|0) == 402653184) {
        label = 18; break;
      }
      else if ((($29)|0) == 536870912) {
        label = 26; break;
      }
      else if ((($29)|0) == -1744830464) {
        label = 34; break;
      }
      else if ((($29)|0) == -1610612736) {
        label = 48; break;
      }
      else if ((($29)|0) == 1610612736) {
        label = 62; break;
      }
      else if ((($29)|0) == -2147483648) {
        label = 63; break;
      }
      else {
      label = 67; break;
      }
      
    case 7: 
      var $31=$sp;
      var $32=$4;
      var $33=(($31)|0)==(($32)|0);
      if ($33) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $35=$sp;
      var $36=(($35+1)|0);
      $sp=$36;
      var $37=HEAP8[($35)];
      var $38=(($37 << 24) >> 24);
      var $39=$s;
      var $40=$39 & 134217727;
      var $41=(($40) & 255);
      var $42=(($41 << 24) >> 24);
      var $43=(($38)|0)!=(($42)|0);
      if ($43) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 113; break;
    case 10: 
      label = 68; break;
    case 11: 
      var $47=$sp;
      var $48=$4;
      var $49=(($47)|0)==(($48)|0);
      if ($49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=0;
      label = 113; break;
    case 13: 
      var $52=$sp;
      var $53=(($52+1)|0);
      $sp=$53;
      label = 68; break;
    case 14: 
      var $55=$s;
      var $56=$55 & 134217727;
      var $57=$2;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($56<<4))|0);
      $cs=$62;
      var $63=$sp;
      var $64=$4;
      var $65=(($63)|0)==(($64)|0);
      if ($65) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $67=$sp;
      var $68=(($67+1)|0);
      $sp=$68;
      var $69=HEAP8[($67)];
      var $70=(($69)&255);
      var $71=$cs;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=$cs;
      var $78=(($77+4)|0);
      var $79=HEAP8[($78)];
      var $80=(($79)&255);
      var $81=$76 & $80;
      var $82=(($81)|0)!=0;
      if ($82) { label = 17; break; } else { label = 16; break; }
    case 16: 
      $1=0;
      label = 113; break;
    case 17: 
      label = 68; break;
    case 18: 
      var $86=$sp;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($86)|0)==(($89)|0);
      if ($90) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$94 & 1;
      var $96=(($95)|0)!=0;
      if ($96) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $98=$sp;
      var $99=$2;
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($98)>>>0) < (($101)>>>0);
      if ($102) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $104=$sp;
      var $105=((($104)-(1))|0);
      var $106=HEAP8[($105)];
      var $107=(($106 << 24) >> 24);
      var $108=(($107)|0)==10;
      if ($108) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $110=$2;
      var $111=(($110)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & 8;
      var $116=(($115)|0)!=0;
      if ($116) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      $1=0;
      label = 113; break;
    case 25: 
      label = 68; break;
    case 26: 
      var $121=$sp;
      var $122=$2;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($121)|0)==(($124)|0);
      if ($125) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $127=$2;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129 & 2;
      var $131=(($130)|0)!=0;
      if ($131) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $133=$sp;
      var $134=$2;
      var $135=(($134+20)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($133)>>>0) < (($136)>>>0);
      if ($137) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $139=$sp;
      var $140=HEAP8[($139)];
      var $141=(($140 << 24) >> 24);
      var $142=(($141)|0)==10;
      if ($142) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $144=$2;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+24)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148 & 8;
      var $150=(($149)|0)!=0;
      if ($150) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      $1=0;
      label = 113; break;
    case 33: 
      label = 68; break;
    case 34: 
      var $155=$sp;
      var $156=$2;
      var $157=(($156+16)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($155)|0)==(($158)|0);
      if ($159) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $161=$2;
      var $162=(($161+4)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$163 & 1;
      var $165=(($164)|0)!=0;
      if ($165) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $167=$sp;
      var $168=$2;
      var $169=(($168+20)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($167)>>>0) < (($170)>>>0);
      if ($171) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $173=$sp;
      var $174=((($173)-(1))|0);
      var $175=HEAP8[($174)];
      var $176=(($175 << 24) >> 24);
      var $177=(($176)|0)==10;
      if ($177) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $179=$2;
      var $180=(($179)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+24)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$183 & 8;
      var $185=(($184)|0)!=0;
      if ($185) { label = 42; break; } else { label = 39; break; }
    case 39: 
      var $187=$sp;
      var $188=$2;
      var $189=(($188+16)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($187)>>>0) > (($190)>>>0);
      if ($191) { label = 40; break; } else { label = 46; break; }
    case 40: 
      var $193=$sp;
      var $194=((($193)-(1))|0);
      var $195=HEAP8[($194)];
      var $196=(($195 << 24) >> 24);
      var $197=_isalnum($196);
      var $198=(($197)|0)!=0;
      if ($198) { label = 46; break; } else { label = 41; break; }
    case 41: 
      var $200=$sp;
      var $201=((($200)-(1))|0);
      var $202=HEAP8[($201)];
      var $203=(($202 << 24) >> 24);
      var $204=(($203)|0)==95;
      if ($204) { label = 46; break; } else { label = 42; break; }
    case 42: 
      var $206=$sp;
      var $207=$2;
      var $208=(($207+20)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=(($206)>>>0) < (($209)>>>0);
      if ($210) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $212=$sp;
      var $213=HEAP8[($212)];
      var $214=(($213 << 24) >> 24);
      var $215=_isalnum($214);
      var $216=(($215)|0)!=0;
      if ($216) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $218=$sp;
      var $219=HEAP8[($218)];
      var $220=(($219 << 24) >> 24);
      var $221=(($220)|0)==95;
      if ($221) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      $1=0;
      label = 113; break;
    case 47: 
      label = 68; break;
    case 48: 
      var $226=$sp;
      var $227=$2;
      var $228=(($227+20)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=(($226)|0)==(($229)|0);
      if ($230) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $232=$2;
      var $233=(($232+4)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=$234 & 2;
      var $236=(($235)|0)!=0;
      if ($236) { label = 50; break; } else { label = 56; break; }
    case 50: 
      var $238=$sp;
      var $239=$2;
      var $240=(($239+20)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($238)>>>0) < (($241)>>>0);
      if ($242) { label = 51; break; } else { label = 53; break; }
    case 51: 
      var $244=$sp;
      var $245=HEAP8[($244)];
      var $246=(($245 << 24) >> 24);
      var $247=(($246)|0)==10;
      if ($247) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $249=$2;
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+24)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$253 & 8;
      var $255=(($254)|0)!=0;
      if ($255) { label = 56; break; } else { label = 53; break; }
    case 53: 
      var $257=$sp;
      var $258=$2;
      var $259=(($258+20)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($257)>>>0) < (($260)>>>0);
      if ($261) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $263=$sp;
      var $264=HEAP8[($263)];
      var $265=(($264 << 24) >> 24);
      var $266=_isalnum($265);
      var $267=(($266)|0)!=0;
      if ($267) { label = 60; break; } else { label = 55; break; }
    case 55: 
      var $269=$sp;
      var $270=HEAP8[($269)];
      var $271=(($270 << 24) >> 24);
      var $272=(($271)|0)==95;
      if ($272) { label = 60; break; } else { label = 56; break; }
    case 56: 
      var $274=$sp;
      var $275=$2;
      var $276=(($275+16)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=(($274)>>>0) > (($277)>>>0);
      if ($278) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $280=$sp;
      var $281=((($280)-(1))|0);
      var $282=HEAP8[($281)];
      var $283=(($282 << 24) >> 24);
      var $284=_isalnum($283);
      var $285=(($284)|0)!=0;
      if ($285) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $287=$sp;
      var $288=((($287)-(1))|0);
      var $289=HEAP8[($288)];
      var $290=(($289 << 24) >> 24);
      var $291=(($290)|0)==95;
      if ($291) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 61; break;
    case 60: 
      $1=0;
      label = 113; break;
    case 61: 
      label = 68; break;
    case 62: 
      label = 68; break;
    case 63: 
      var $297=$ss;
      var $298=((($297)+(1))|0);
      $ss=$298;
      var $299=$ss;
      var $300=$2;
      var $301=(($300)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302+4)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=(($304+($299<<2))|0);
      var $306=HEAP32[(($305)>>2)];
      $s=$306;
      label = 64; break;
    case 64: 
      var $308=$s;
      var $309=$308 & 134217727;
      var $310=$ss;
      var $311=((($310)+($309))|0);
      $ss=$311;
      label = 65; break;
    case 65: 
      var $313=$ss;
      var $314=$2;
      var $315=(($314)|0);
      var $316=HEAP32[(($315)>>2)];
      var $317=(($316+4)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=(($318+($313<<2))|0);
      var $320=HEAP32[(($319)>>2)];
      $s=$320;
      var $321=$320 & -134217728;
      var $322=(($321)|0)!=-1879048192;
      if ($322) { label = 64; break; } else { label = 66; break; }
    case 66: 
      label = 68; break;
    case 67: 
      $hard=1;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $327=$ss;
      var $328=((($327)+(1))|0);
      $ss=$328;
      label = 3; break;
    case 70: 
      var $330=$hard;
      var $331=(($330)|0)!=0;
      if ($331) { label = 74; break; } else { label = 71; break; }
    case 71: 
      var $333=$sp;
      var $334=$4;
      var $335=(($333)|0)!=(($334)|0);
      if ($335) { label = 72; break; } else { label = 73; break; }
    case 72: 
      $1=0;
      label = 113; break;
    case 73: 
      var $338=$sp;
      $1=$338;
      label = 113; break;
    case 74: 
      var $340=$ss;
      var $341=((($340)-(1))|0);
      $ss=$341;
      var $342=$ss;
      var $343=$2;
      var $344=(($343)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=(($345+4)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=(($347+($342<<2))|0);
      var $349=HEAP32[(($348)>>2)];
      $s=$349;
      var $350=$s;
      var $351=$350 & -134217728;
      if ((($351)|0) == 939524096) {
        label = 75; break;
      }
      else if ((($351)|0) == 1476395008) {
        label = 88; break;
      }
      else if ((($351)|0) == 1207959552) {
        label = 91; break;
      }
      else if ((($351)|0) == 1342177280) {
        label = 92; break;
      }
      else if ((($351)|0) == 2013265920) {
        label = 97; break;
      }
      else if ((($351)|0) == 1744830464) {
        label = 106; break;
      }
      else if ((($351)|0) == 1879048192) {
        label = 109; break;
      }
      else {
      label = 112; break;
      }
      
    case 75: 
      var $353=$s;
      var $354=$353 & 134217727;
      $i=$354;
      var $355=$i;
      var $356=$2;
      var $357=(($356+8)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=(($358+($355<<3))|0);
      var $360=(($359+4)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=(($361)|0)==-1;
      if ($362) { label = 76; break; } else { label = 77; break; }
    case 76: 
      $1=0;
      label = 113; break;
    case 77: 
      var $365=$i;
      var $366=$2;
      var $367=(($366+8)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=(($368+($365<<3))|0);
      var $370=(($369+4)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$i;
      var $373=$2;
      var $374=(($373+8)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=(($375+($372<<3))|0);
      var $377=(($376)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=((($371)-($378))|0);
      $len=$379;
      var $380=$len;
      var $381=(($380)|0)==0;
      if ($381) { label = 78; break; } else { label = 80; break; }
    case 78: 
      var $383=$8;
      var $384=((($383)+(1))|0);
      $8=$384;
      var $385=(($383)|0) > 100;
      if ($385) { label = 79; break; } else { label = 80; break; }
    case 79: 
      $1=0;
      label = 113; break;
    case 80: 
      var $388=$sp;
      var $389=$4;
      var $390=$len;
      var $391=(((-$390))|0);
      var $392=(($389+$391)|0);
      var $393=(($388)>>>0) > (($392)>>>0);
      if ($393) { label = 81; break; } else { label = 82; break; }
    case 81: 
      $1=0;
      label = 113; break;
    case 82: 
      var $396=$2;
      var $397=(($396+12)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=$i;
      var $400=$2;
      var $401=(($400+8)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=(($402+($399<<3))|0);
      var $404=(($403)|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=(($398+$405)|0);
      $ssp=$406;
      var $407=$sp;
      var $408=$ssp;
      var $409=$len;
      var $410=_memcmp($407, $408, $409);
      var $411=(($410)|0)!=0;
      if ($411) { label = 83; break; } else { label = 84; break; }
    case 83: 
      $1=0;
      label = 113; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $415=$ss;
      var $416=$2;
      var $417=(($416)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=(($418+4)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420+($415<<2))|0);
      var $422=HEAP32[(($421)>>2)];
      var $423=$i;
      var $424=1073741824 | $423;
      var $425=(($422)|0)!=(($424)|0);
      if ($425) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $427=$ss;
      var $428=((($427)+(1))|0);
      $ss=$428;
      label = 85; break;
    case 87: 
      var $430=$2;
      var $431=$sp;
      var $432=$len;
      var $433=(($431+$432)|0);
      var $434=$4;
      var $435=$ss;
      var $436=((($435)+(1))|0);
      var $437=$6;
      var $438=$7;
      var $439=$8;
      var $440=_lbackref($430, $433, $434, $436, $437, $438, $439);
      $1=$440;
      label = 113; break;
    case 88: 
      var $442=$2;
      var $443=$sp;
      var $444=$4;
      var $445=$ss;
      var $446=((($445)+(1))|0);
      var $447=$6;
      var $448=$7;
      var $449=$8;
      var $450=_lbackref($442, $443, $444, $446, $447, $448, $449);
      $dp=$450;
      var $451=$dp;
      var $452=(($451)|0)!=0;
      if ($452) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $454=$dp;
      $1=$454;
      label = 113; break;
    case 90: 
      var $456=$2;
      var $457=$sp;
      var $458=$4;
      var $459=$ss;
      var $460=$s;
      var $461=$460 & 134217727;
      var $462=((($459)+($461))|0);
      var $463=((($462)+(1))|0);
      var $464=$6;
      var $465=$7;
      var $466=$8;
      var $467=_lbackref($456, $457, $458, $463, $464, $465, $466);
      $1=$467;
      label = 113; break;
    case 91: 
      var $469=$sp;
      var $470=$7;
      var $471=((($470)+(1))|0);
      var $472=$2;
      var $473=(($472+28)|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=(($474+($471<<2))|0);
      HEAP32[(($475)>>2)]=$469;
      var $476=$2;
      var $477=$sp;
      var $478=$4;
      var $479=$ss;
      var $480=((($479)+(1))|0);
      var $481=$6;
      var $482=$7;
      var $483=((($482)+(1))|0);
      var $484=$8;
      var $485=_lbackref($476, $477, $478, $480, $481, $483, $484);
      $1=$485;
      label = 113; break;
    case 92: 
      var $487=$sp;
      var $488=$7;
      var $489=$2;
      var $490=(($489+28)|0);
      var $491=HEAP32[(($490)>>2)];
      var $492=(($491+($488<<2))|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=(($487)|0)==(($493)|0);
      if ($494) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $496=$2;
      var $497=$sp;
      var $498=$4;
      var $499=$ss;
      var $500=((($499)+(1))|0);
      var $501=$6;
      var $502=$7;
      var $503=((($502)-(1))|0);
      var $504=$8;
      var $505=_lbackref($496, $497, $498, $500, $501, $503, $504);
      $1=$505;
      label = 113; break;
    case 94: 
      var $507=$sp;
      var $508=$7;
      var $509=$2;
      var $510=(($509+28)|0);
      var $511=HEAP32[(($510)>>2)];
      var $512=(($511+($508<<2))|0);
      HEAP32[(($512)>>2)]=$507;
      var $513=$2;
      var $514=$sp;
      var $515=$4;
      var $516=$ss;
      var $517=$s;
      var $518=$517 & 134217727;
      var $519=((($516)-($518))|0);
      var $520=((($519)+(1))|0);
      var $521=$6;
      var $522=$7;
      var $523=$8;
      var $524=_lbackref($513, $514, $515, $520, $521, $522, $523);
      $dp=$524;
      var $525=$dp;
      var $526=(($525)|0)==0;
      if ($526) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $528=$2;
      var $529=$sp;
      var $530=$4;
      var $531=$ss;
      var $532=((($531)+(1))|0);
      var $533=$6;
      var $534=$7;
      var $535=((($534)-(1))|0);
      var $536=$8;
      var $537=_lbackref($528, $529, $530, $532, $533, $535, $536);
      $1=$537;
      label = 113; break;
    case 96: 
      var $539=$dp;
      $1=$539;
      label = 113; break;
    case 97: 
      var $541=$ss;
      var $542=((($541)+(1))|0);
      $ssub=$542;
      var $543=$ss;
      var $544=$s;
      var $545=$544 & 134217727;
      var $546=((($543)+($545))|0);
      var $547=((($546)-(1))|0);
      $esub=$547;
      label = 98; break;
    case 98: 
      var $549=$2;
      var $550=$sp;
      var $551=$4;
      var $552=$ssub;
      var $553=$esub;
      var $554=$7;
      var $555=$8;
      var $556=_lbackref($549, $550, $551, $552, $553, $554, $555);
      $dp=$556;
      var $557=$dp;
      var $558=(($557)|0)!=0;
      if ($558) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $560=$dp;
      $1=$560;
      label = 113; break;
    case 100: 
      var $562=$esub;
      var $563=$2;
      var $564=(($563)|0);
      var $565=HEAP32[(($564)>>2)];
      var $566=(($565+4)|0);
      var $567=HEAP32[(($566)>>2)];
      var $568=(($567+($562<<2))|0);
      var $569=HEAP32[(($568)>>2)];
      var $570=$569 & -134217728;
      var $571=(($570)|0)==-1879048192;
      if ($571) { label = 101; break; } else { label = 102; break; }
    case 101: 
      $1=0;
      label = 113; break;
    case 102: 
      var $574=$esub;
      var $575=((($574)+(1))|0);
      $esub=$575;
      var $576=$esub;
      var $577=((($576)+(1))|0);
      $ssub=$577;
      var $578=$esub;
      var $579=$2;
      var $580=(($579)|0);
      var $581=HEAP32[(($580)>>2)];
      var $582=(($581+4)|0);
      var $583=HEAP32[(($582)>>2)];
      var $584=(($583+($578<<2))|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=$585 & 134217727;
      var $587=$esub;
      var $588=((($587)+($586))|0);
      $esub=$588;
      var $589=$esub;
      var $590=$2;
      var $591=(($590)|0);
      var $592=HEAP32[(($591)>>2)];
      var $593=(($592+4)|0);
      var $594=HEAP32[(($593)>>2)];
      var $595=(($594+($589<<2))|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=$596 & -134217728;
      var $598=(($597)|0)==-2013265920;
      if ($598) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $600=$esub;
      var $601=((($600)-(1))|0);
      $esub=$601;
      label = 105; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 98; break;
    case 106: 
      var $605=$s;
      var $606=$605 & 134217727;
      $i=$606;
      var $607=$i;
      var $608=$2;
      var $609=(($608+8)|0);
      var $610=HEAP32[(($609)>>2)];
      var $611=(($610+($607<<3))|0);
      var $612=(($611)|0);
      var $613=HEAP32[(($612)>>2)];
      $offsave=$613;
      var $614=$sp;
      var $615=$2;
      var $616=(($615+12)|0);
      var $617=HEAP32[(($616)>>2)];
      var $618=$614;
      var $619=$617;
      var $620=((($618)-($619))|0);
      var $621=$i;
      var $622=$2;
      var $623=(($622+8)|0);
      var $624=HEAP32[(($623)>>2)];
      var $625=(($624+($621<<3))|0);
      var $626=(($625)|0);
      HEAP32[(($626)>>2)]=$620;
      var $627=$2;
      var $628=$sp;
      var $629=$4;
      var $630=$ss;
      var $631=((($630)+(1))|0);
      var $632=$6;
      var $633=$7;
      var $634=$8;
      var $635=_lbackref($627, $628, $629, $631, $632, $633, $634);
      $dp=$635;
      var $636=$dp;
      var $637=(($636)|0)!=0;
      if ($637) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $639=$dp;
      $1=$639;
      label = 113; break;
    case 108: 
      var $641=$offsave;
      var $642=$i;
      var $643=$2;
      var $644=(($643+8)|0);
      var $645=HEAP32[(($644)>>2)];
      var $646=(($645+($642<<3))|0);
      var $647=(($646)|0);
      HEAP32[(($647)>>2)]=$641;
      $1=0;
      label = 113; break;
    case 109: 
      var $649=$s;
      var $650=$649 & 134217727;
      $i=$650;
      var $651=$i;
      var $652=$2;
      var $653=(($652+8)|0);
      var $654=HEAP32[(($653)>>2)];
      var $655=(($654+($651<<3))|0);
      var $656=(($655+4)|0);
      var $657=HEAP32[(($656)>>2)];
      $offsave=$657;
      var $658=$sp;
      var $659=$2;
      var $660=(($659+12)|0);
      var $661=HEAP32[(($660)>>2)];
      var $662=$658;
      var $663=$661;
      var $664=((($662)-($663))|0);
      var $665=$i;
      var $666=$2;
      var $667=(($666+8)|0);
      var $668=HEAP32[(($667)>>2)];
      var $669=(($668+($665<<3))|0);
      var $670=(($669+4)|0);
      HEAP32[(($670)>>2)]=$664;
      var $671=$2;
      var $672=$sp;
      var $673=$4;
      var $674=$ss;
      var $675=((($674)+(1))|0);
      var $676=$6;
      var $677=$7;
      var $678=$8;
      var $679=_lbackref($671, $672, $673, $675, $676, $677, $678);
      $dp=$679;
      var $680=$dp;
      var $681=(($680)|0)!=0;
      if ($681) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $683=$dp;
      $1=$683;
      label = 113; break;
    case 111: 
      var $685=$offsave;
      var $686=$i;
      var $687=$2;
      var $688=(($687+8)|0);
      var $689=HEAP32[(($688)>>2)];
      var $690=(($689+($686<<3))|0);
      var $691=(($690+4)|0);
      HEAP32[(($691)>>2)]=$685;
      $1=0;
      label = 113; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $694=$1;

      return $694;
    default: assert(0, "bad label: " + label);
  }
}
_lbackref["X"]=1;

function _lstep($g, $start, $stop, $bef, $ch, $aft) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cs;
      var $s;
      var $pc;
      var $here;
      var $look;
      var $i;
      $1=$g;
      $2=$start;
      $3=$stop;
      $4=$bef;
      $5=$ch;
      $6=$aft;
      var $7=$2;
      $pc=$7;
      var $8=$pc;
      $here=$8;
      label = 3; break;
    case 3: 
      var $10=$pc;
      var $11=$3;
      var $12=(($10)|0)!=(($11)|0);
      if ($12) { label = 4; break; } else { label = 54; break; }
    case 4: 
      var $14=$pc;
      var $15=$1;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+($14<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      $s=$19;
      var $20=$s;
      var $21=$20 & -134217728;
      if ((($21)|0) == 134217728) {
        label = 5; break;
      }
      else if ((($21)|0) == 268435456) {
        label = 6; break;
      }
      else if ((($21)|0) == 402653184) {
        label = 9; break;
      }
      else if ((($21)|0) == 536870912) {
        label = 13; break;
      }
      else if ((($21)|0) == -1744830464) {
        label = 17; break;
      }
      else if ((($21)|0) == -1610612736) {
        label = 20; break;
      }
      else if ((($21)|0) == 671088640) {
        label = 23; break;
      }
      else if ((($21)|0) == 805306368) {
        label = 26; break;
      }
      else if ((($21)|0) == 939524096 || (($21)|0) == 1073741824) {
        label = 30; break;
      }
      else if ((($21)|0) == 1207959552) {
        label = 31; break;
      }
      else if ((($21)|0) == 1342177280) {
        label = 32; break;
      }
      else if ((($21)|0) == 1476395008) {
        label = 36; break;
      }
      else if ((($21)|0) == 1610612736) {
        label = 37; break;
      }
      else if ((($21)|0) == 1744830464 || (($21)|0) == 1879048192) {
        label = 38; break;
      }
      else if ((($21)|0) == 2013265920) {
        label = 39; break;
      }
      else if ((($21)|0) == -2147483648) {
        label = 40; break;
      }
      else if ((($21)|0) == -2013265920) {
        label = 47; break;
      }
      else if ((($21)|0) == -1879048192) {
        label = 50; break;
      }
      else {
      label = 51; break;
      }
      
    case 5: 
      label = 52; break;
    case 6: 
      var $24=$5;
      var $25=$s;
      var $26=$25 & 134217727;
      var $27=(($26) & 255);
      var $28=(($27 << 24) >> 24);
      var $29=(($24)|0)==(($28)|0);
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$here;
      var $32=$4;
      var $33=(($32+$31)|0);
      var $34=HEAP8[($33)];
      var $35=(($34 << 24) >> 24);
      var $36=$here;
      var $37=((($36)+(1))|0);
      var $38=$6;
      var $39=(($38+$37)|0);
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=$41 | $35;
      var $43=(($42) & 255);
      HEAP8[($39)]=$43;
      label = 8; break;
    case 8: 
      label = 52; break;
    case 9: 
      var $46=$5;
      var $47=(($46)|0)==129;
      if ($47) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $49=$5;
      var $50=(($49)|0)==131;
      if ($50) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $52=$here;
      var $53=$4;
      var $54=(($53+$52)|0);
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24);
      var $57=$here;
      var $58=((($57)+(1))|0);
      var $59=$6;
      var $60=(($59+$58)|0);
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24);
      var $63=$62 | $56;
      var $64=(($63) & 255);
      HEAP8[($60)]=$64;
      label = 12; break;
    case 12: 
      label = 52; break;
    case 13: 
      var $67=$5;
      var $68=(($67)|0)==130;
      if ($68) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $70=$5;
      var $71=(($70)|0)==131;
      if ($71) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $73=$here;
      var $74=$4;
      var $75=(($74+$73)|0);
      var $76=HEAP8[($75)];
      var $77=(($76 << 24) >> 24);
      var $78=$here;
      var $79=((($78)+(1))|0);
      var $80=$6;
      var $81=(($80+$79)|0);
      var $82=HEAP8[($81)];
      var $83=(($82 << 24) >> 24);
      var $84=$83 | $77;
      var $85=(($84) & 255);
      HEAP8[($81)]=$85;
      label = 16; break;
    case 16: 
      label = 52; break;
    case 17: 
      var $88=$5;
      var $89=(($88)|0)==133;
      if ($89) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $91=$here;
      var $92=$4;
      var $93=(($92+$91)|0);
      var $94=HEAP8[($93)];
      var $95=(($94 << 24) >> 24);
      var $96=$here;
      var $97=((($96)+(1))|0);
      var $98=$6;
      var $99=(($98+$97)|0);
      var $100=HEAP8[($99)];
      var $101=(($100 << 24) >> 24);
      var $102=$101 | $95;
      var $103=(($102) & 255);
      HEAP8[($99)]=$103;
      label = 19; break;
    case 19: 
      label = 52; break;
    case 20: 
      var $106=$5;
      var $107=(($106)|0)==134;
      if ($107) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $109=$here;
      var $110=$4;
      var $111=(($110+$109)|0);
      var $112=HEAP8[($111)];
      var $113=(($112 << 24) >> 24);
      var $114=$here;
      var $115=((($114)+(1))|0);
      var $116=$6;
      var $117=(($116+$115)|0);
      var $118=HEAP8[($117)];
      var $119=(($118 << 24) >> 24);
      var $120=$119 | $113;
      var $121=(($120) & 255);
      HEAP8[($117)]=$121;
      label = 22; break;
    case 22: 
      label = 52; break;
    case 23: 
      var $124=$5;
      var $125=(($124)|0) > 127;
      if ($125) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $127=$here;
      var $128=$4;
      var $129=(($128+$127)|0);
      var $130=HEAP8[($129)];
      var $131=(($130 << 24) >> 24);
      var $132=$here;
      var $133=((($132)+(1))|0);
      var $134=$6;
      var $135=(($134+$133)|0);
      var $136=HEAP8[($135)];
      var $137=(($136 << 24) >> 24);
      var $138=$137 | $131;
      var $139=(($138) & 255);
      HEAP8[($135)]=$139;
      label = 25; break;
    case 25: 
      label = 52; break;
    case 26: 
      var $142=$s;
      var $143=$142 & 134217727;
      var $144=$1;
      var $145=(($144+16)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+($143<<4))|0);
      $cs=$147;
      var $148=$5;
      var $149=(($148)|0) > 127;
      if ($149) { label = 29; break; } else { label = 27; break; }
    case 27: 
      var $151=$5;
      var $152=(($151) & 255);
      var $153=(($152)&255);
      var $154=$cs;
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+$153)|0);
      var $158=HEAP8[($157)];
      var $159=(($158)&255);
      var $160=$cs;
      var $161=(($160+4)|0);
      var $162=HEAP8[($161)];
      var $163=(($162)&255);
      var $164=$159 & $163;
      var $165=(($164)|0)!=0;
      if ($165) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $167=$here;
      var $168=$4;
      var $169=(($168+$167)|0);
      var $170=HEAP8[($169)];
      var $171=(($170 << 24) >> 24);
      var $172=$here;
      var $173=((($172)+(1))|0);
      var $174=$6;
      var $175=(($174+$173)|0);
      var $176=HEAP8[($175)];
      var $177=(($176 << 24) >> 24);
      var $178=$177 | $171;
      var $179=(($178) & 255);
      HEAP8[($175)]=$179;
      label = 29; break;
    case 29: 
      label = 52; break;
    case 30: 
      var $182=$here;
      var $183=$6;
      var $184=(($183+$182)|0);
      var $185=HEAP8[($184)];
      var $186=(($185 << 24) >> 24);
      var $187=$here;
      var $188=((($187)+(1))|0);
      var $189=$6;
      var $190=(($189+$188)|0);
      var $191=HEAP8[($190)];
      var $192=(($191 << 24) >> 24);
      var $193=$192 | $186;
      var $194=(($193) & 255);
      HEAP8[($190)]=$194;
      label = 52; break;
    case 31: 
      var $196=$here;
      var $197=$6;
      var $198=(($197+$196)|0);
      var $199=HEAP8[($198)];
      var $200=(($199 << 24) >> 24);
      var $201=$here;
      var $202=((($201)+(1))|0);
      var $203=$6;
      var $204=(($203+$202)|0);
      var $205=HEAP8[($204)];
      var $206=(($205 << 24) >> 24);
      var $207=$206 | $200;
      var $208=(($207) & 255);
      HEAP8[($204)]=$208;
      label = 52; break;
    case 32: 
      var $210=$here;
      var $211=$6;
      var $212=(($211+$210)|0);
      var $213=HEAP8[($212)];
      var $214=(($213 << 24) >> 24);
      var $215=$here;
      var $216=((($215)+(1))|0);
      var $217=$6;
      var $218=(($217+$216)|0);
      var $219=HEAP8[($218)];
      var $220=(($219 << 24) >> 24);
      var $221=$220 | $214;
      var $222=(($221) & 255);
      HEAP8[($218)]=$222;
      var $223=$here;
      var $224=$s;
      var $225=$224 & 134217727;
      var $226=((($223)-($225))|0);
      var $227=$6;
      var $228=(($227+$226)|0);
      var $229=HEAP8[($228)];
      var $230=(($229 << 24) >> 24);
      $i=$230;
      var $231=$here;
      var $232=$6;
      var $233=(($232+$231)|0);
      var $234=HEAP8[($233)];
      var $235=(($234 << 24) >> 24);
      var $236=$here;
      var $237=$s;
      var $238=$237 & 134217727;
      var $239=((($236)-($238))|0);
      var $240=$6;
      var $241=(($240+$239)|0);
      var $242=HEAP8[($241)];
      var $243=(($242 << 24) >> 24);
      var $244=$243 | $235;
      var $245=(($244) & 255);
      HEAP8[($241)]=$245;
      var $246=$i;
      var $247=(($246)|0)!=0;
      if ($247) { label = 35; break; } else { label = 33; break; }
    case 33: 
      var $249=$here;
      var $250=$s;
      var $251=$250 & 134217727;
      var $252=((($249)-($251))|0);
      var $253=$6;
      var $254=(($253+$252)|0);
      var $255=HEAP8[($254)];
      var $256=(($255 << 24) >> 24);
      var $257=(($256)|0)!=0;
      if ($257) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $259=$s;
      var $260=$259 & 134217727;
      var $261=((($260)+(1))|0);
      var $262=$pc;
      var $263=((($262)-($261))|0);
      $pc=$263;
      var $264=$pc;
      $here=$264;
      label = 35; break;
    case 35: 
      label = 52; break;
    case 36: 
      var $267=$here;
      var $268=$6;
      var $269=(($268+$267)|0);
      var $270=HEAP8[($269)];
      var $271=(($270 << 24) >> 24);
      var $272=$here;
      var $273=((($272)+(1))|0);
      var $274=$6;
      var $275=(($274+$273)|0);
      var $276=HEAP8[($275)];
      var $277=(($276 << 24) >> 24);
      var $278=$277 | $271;
      var $279=(($278) & 255);
      HEAP8[($275)]=$279;
      var $280=$here;
      var $281=$6;
      var $282=(($281+$280)|0);
      var $283=HEAP8[($282)];
      var $284=(($283 << 24) >> 24);
      var $285=$here;
      var $286=$s;
      var $287=$286 & 134217727;
      var $288=((($285)+($287))|0);
      var $289=$6;
      var $290=(($289+$288)|0);
      var $291=HEAP8[($290)];
      var $292=(($291 << 24) >> 24);
      var $293=$292 | $284;
      var $294=(($293) & 255);
      HEAP8[($290)]=$294;
      label = 52; break;
    case 37: 
      var $296=$here;
      var $297=$6;
      var $298=(($297+$296)|0);
      var $299=HEAP8[($298)];
      var $300=(($299 << 24) >> 24);
      var $301=$here;
      var $302=((($301)+(1))|0);
      var $303=$6;
      var $304=(($303+$302)|0);
      var $305=HEAP8[($304)];
      var $306=(($305 << 24) >> 24);
      var $307=$306 | $300;
      var $308=(($307) & 255);
      HEAP8[($304)]=$308;
      label = 52; break;
    case 38: 
      var $310=$here;
      var $311=$6;
      var $312=(($311+$310)|0);
      var $313=HEAP8[($312)];
      var $314=(($313 << 24) >> 24);
      var $315=$here;
      var $316=((($315)+(1))|0);
      var $317=$6;
      var $318=(($317+$316)|0);
      var $319=HEAP8[($318)];
      var $320=(($319 << 24) >> 24);
      var $321=$320 | $314;
      var $322=(($321) & 255);
      HEAP8[($318)]=$322;
      label = 52; break;
    case 39: 
      var $324=$here;
      var $325=$6;
      var $326=(($325+$324)|0);
      var $327=HEAP8[($326)];
      var $328=(($327 << 24) >> 24);
      var $329=$here;
      var $330=((($329)+(1))|0);
      var $331=$6;
      var $332=(($331+$330)|0);
      var $333=HEAP8[($332)];
      var $334=(($333 << 24) >> 24);
      var $335=$334 | $328;
      var $336=(($335) & 255);
      HEAP8[($332)]=$336;
      var $337=$here;
      var $338=$6;
      var $339=(($338+$337)|0);
      var $340=HEAP8[($339)];
      var $341=(($340 << 24) >> 24);
      var $342=$here;
      var $343=$s;
      var $344=$343 & 134217727;
      var $345=((($342)+($344))|0);
      var $346=$6;
      var $347=(($346+$345)|0);
      var $348=HEAP8[($347)];
      var $349=(($348 << 24) >> 24);
      var $350=$349 | $341;
      var $351=(($350) & 255);
      HEAP8[($347)]=$351;
      label = 52; break;
    case 40: 
      var $353=$here;
      var $354=$6;
      var $355=(($354+$353)|0);
      var $356=HEAP8[($355)];
      var $357=(($356 << 24) >> 24)!=0;
      if ($357) { label = 41; break; } else { label = 46; break; }
    case 41: 
      $look=1;
      label = 42; break;
    case 42: 
      var $360=$pc;
      var $361=$look;
      var $362=((($360)+($361))|0);
      var $363=$1;
      var $364=(($363+4)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=(($365+($362<<2))|0);
      var $367=HEAP32[(($366)>>2)];
      $s=$367;
      var $368=$367 & -134217728;
      var $369=(($368)|0)!=-1879048192;
      if ($369) { label = 43; break; } else { label = 45; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $372=$s;
      var $373=$372 & 134217727;
      var $374=$look;
      var $375=((($374)+($373))|0);
      $look=$375;
      label = 42; break;
    case 45: 
      var $377=$here;
      var $378=$6;
      var $379=(($378+$377)|0);
      var $380=HEAP8[($379)];
      var $381=(($380 << 24) >> 24);
      var $382=$here;
      var $383=$look;
      var $384=((($382)+($383))|0);
      var $385=$6;
      var $386=(($385+$384)|0);
      var $387=HEAP8[($386)];
      var $388=(($387 << 24) >> 24);
      var $389=$388 | $381;
      var $390=(($389) & 255);
      HEAP8[($386)]=$390;
      label = 46; break;
    case 46: 
      label = 52; break;
    case 47: 
      var $393=$here;
      var $394=$6;
      var $395=(($394+$393)|0);
      var $396=HEAP8[($395)];
      var $397=(($396 << 24) >> 24);
      var $398=$here;
      var $399=((($398)+(1))|0);
      var $400=$6;
      var $401=(($400+$399)|0);
      var $402=HEAP8[($401)];
      var $403=(($402 << 24) >> 24);
      var $404=$403 | $397;
      var $405=(($404) & 255);
      HEAP8[($401)]=$405;
      var $406=$pc;
      var $407=$s;
      var $408=$407 & 134217727;
      var $409=((($406)+($408))|0);
      var $410=$1;
      var $411=(($410+4)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($412+($409<<2))|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=$414 & -134217728;
      var $416=(($415)|0)!=-1879048192;
      if ($416) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $418=$here;
      var $419=$6;
      var $420=(($419+$418)|0);
      var $421=HEAP8[($420)];
      var $422=(($421 << 24) >> 24);
      var $423=$here;
      var $424=$s;
      var $425=$424 & 134217727;
      var $426=((($423)+($425))|0);
      var $427=$6;
      var $428=(($427+$426)|0);
      var $429=HEAP8[($428)];
      var $430=(($429 << 24) >> 24);
      var $431=$430 | $422;
      var $432=(($431) & 255);
      HEAP8[($428)]=$432;
      label = 49; break;
    case 49: 
      label = 52; break;
    case 50: 
      var $435=$here;
      var $436=$6;
      var $437=(($436+$435)|0);
      var $438=HEAP8[($437)];
      var $439=(($438 << 24) >> 24);
      var $440=$here;
      var $441=((($440)+(1))|0);
      var $442=$6;
      var $443=(($442+$441)|0);
      var $444=HEAP8[($443)];
      var $445=(($444 << 24) >> 24);
      var $446=$445 | $439;
      var $447=(($446) & 255);
      HEAP8[($443)]=$447;
      label = 52; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $451=$pc;
      var $452=((($451)+(1))|0);
      $pc=$452;
      var $453=$here;
      var $454=((($453)+(1))|0);
      $here=$454;
      label = 3; break;
    case 54: 
      var $456=$6;

      return $456;
    default: assert(0, "bad label: " + label);
  }
}
_lstep["X"]=1;

function _sfast($m, $start, $stop, $startst, $stopst) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $st;
      var $fresh;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $coldp;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      var $7=$2;
      var $8=(($7+36)|0);
      var $9=HEAP32[(($8)>>2)];
      $st=$9;
      var $10=$2;
      var $11=(($10+40)|0);
      var $12=HEAP32[(($11)>>2)];
      $fresh=$12;
      var $13=$2;
      var $14=(($13+44)|0);
      var $15=HEAP32[(($14)>>2)];
      $tmp=$15;
      var $16=$3;
      $p=$16;
      var $17=$3;
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|0)==(($20)|0);
      if ($21) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $29 = 128;label = 5; break;
    case 4: 
      var $24=$3;
      var $25=((($24)-(1))|0);
      var $26=HEAP8[($25)];
      var $27=(($26 << 24) >> 24);
      var $29 = $27;label = 5; break;
    case 5: 
      var $29;
      $c=$29;
      $st=0;
      var $30=$5;
      var $31=1 << $30;
      var $32=$st;
      var $33=$32 | $31;
      $st=$33;
      var $34=$2;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$5;
      var $38=$6;
      var $39=$st;
      var $40=$st;
      var $41=_sstep($36, $37, $38, $39, 132, $40);
      $st=$41;
      var $42=$st;
      $fresh=$42;
      $coldp=0;
      label = 6; break;
    case 6: 
      var $44=$c;
      $lastc=$44;
      var $45=$p;
      var $46=$2;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($45)|0)==(($48)|0);
      if ($49) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $56 = 128;label = 9; break;
    case 8: 
      var $52=$p;
      var $53=HEAP8[($52)];
      var $54=(($53 << 24) >> 24);
      var $56 = $54;label = 9; break;
    case 9: 
      var $56;
      $c=$56;
      var $57=$st;
      var $58=$fresh;
      var $59=(($57)|0)==(($58)|0);
      if ($59) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $61=$p;
      $coldp=$61;
      label = 11; break;
    case 11: 
      $flagch=0;
      $i=0;
      var $63=$lastc;
      var $64=(($63)|0)==10;
      if ($64) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $66=$2;
      var $67=(($66)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 & 8;
      var $72=(($71)|0)!=0;
      if ($72) { label = 15; break; } else { label = 13; break; }
    case 13: 
      var $74=$lastc;
      var $75=(($74)|0)==128;
      if ($75) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $77=$2;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$79 & 1;
      var $81=(($80)|0)!=0;
      if ($81) { label = 16; break; } else { label = 15; break; }
    case 15: 
      $flagch=129;
      var $83=$2;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+44)|0);
      var $87=HEAP32[(($86)>>2)];
      $i=$87;
      label = 16; break;
    case 16: 
      var $89=$c;
      var $90=(($89)|0)==10;
      if ($90) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $92=$2;
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96 & 8;
      var $98=(($97)|0)!=0;
      if ($98) { label = 20; break; } else { label = 18; break; }
    case 18: 
      var $100=$c;
      var $101=(($100)|0)==128;
      if ($101) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $103=$2;
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 & 2;
      var $107=(($106)|0)!=0;
      if ($107) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $109=$flagch;
      var $110=(($109)|0)==129;
      var $111=$110 ? 131 : 130;
      $flagch=$111;
      var $112=$2;
      var $113=(($112)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+48)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$i;
      var $118=((($117)+($116))|0);
      $i=$118;
      label = 21; break;
    case 21: 
      var $120=$i;
      var $121=(($120)|0)!=0;
      if ($121) { label = 22; break; } else { label = 27; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $124=$i;
      var $125=(($124)|0) > 0;
      if ($125) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $127=$2;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$5;
      var $131=$6;
      var $132=$st;
      var $133=$flagch;
      var $134=$st;
      var $135=_sstep($129, $130, $131, $132, $133, $134);
      $st=$135;
      label = 25; break;
    case 25: 
      var $137=$i;
      var $138=((($137)-(1))|0);
      $i=$138;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $141=$flagch;
      var $142=(($141)|0)==129;
      if ($142) { label = 31; break; } else { label = 28; break; }
    case 28: 
      var $144=$lastc;
      var $145=(($144)|0)!=128;
      if ($145) { label = 29; break; } else { label = 35; break; }
    case 29: 
      var $147=$lastc;
      var $148=_isalnum($147);
      var $149=(($148)|0)!=0;
      if ($149) { label = 35; break; } else { label = 30; break; }
    case 30: 
      var $151=$lastc;
      var $152=(($151)|0)==95;
      if ($152) { label = 35; break; } else { label = 31; break; }
    case 31: 
      var $154=$c;
      var $155=(($154)|0)!=128;
      if ($155) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $157=$c;
      var $158=_isalnum($157);
      var $159=(($158)|0)!=0;
      if ($159) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $161=$c;
      var $162=(($161)|0)==95;
      if ($162) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $flagch=133;
      label = 35; break;
    case 35: 
      var $165=$lastc;
      var $166=(($165)|0)!=128;
      if ($166) { label = 36; break; } else { label = 43; break; }
    case 36: 
      var $168=$lastc;
      var $169=_isalnum($168);
      var $170=(($169)|0)!=0;
      if ($170) { label = 38; break; } else { label = 37; break; }
    case 37: 
      var $172=$lastc;
      var $173=(($172)|0)==95;
      if ($173) { label = 38; break; } else { label = 43; break; }
    case 38: 
      var $175=$flagch;
      var $176=(($175)|0)==130;
      if ($176) { label = 42; break; } else { label = 39; break; }
    case 39: 
      var $178=$c;
      var $179=(($178)|0)!=128;
      if ($179) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $181=$c;
      var $182=_isalnum($181);
      var $183=(($182)|0)!=0;
      if ($183) { label = 43; break; } else { label = 41; break; }
    case 41: 
      var $185=$c;
      var $186=(($185)|0)==95;
      if ($186) { label = 43; break; } else { label = 42; break; }
    case 42: 
      $flagch=134;
      label = 43; break;
    case 43: 
      var $189=$flagch;
      var $190=(($189)|0)==133;
      if ($190) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $192=$flagch;
      var $193=(($192)|0)==134;
      if ($193) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $195=$2;
      var $196=(($195)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$5;
      var $199=$6;
      var $200=$st;
      var $201=$flagch;
      var $202=$st;
      var $203=_sstep($197, $198, $199, $200, $201, $202);
      $st=$203;
      label = 46; break;
    case 46: 
      var $205=$st;
      var $206=$6;
      var $207=1 << $206;
      var $208=$205 & $207;
      var $209=(($208)|0)!=0;
      if ($209) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $211=$p;
      var $212=$4;
      var $213=(($211)|0)==(($212)|0);
      if ($213) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 50; break;
    case 49: 
      var $216=$st;
      $tmp=$216;
      var $217=$fresh;
      $st=$217;
      var $218=$2;
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$5;
      var $222=$6;
      var $223=$tmp;
      var $224=$c;
      var $225=$st;
      var $226=_sstep($220, $221, $222, $223, $224, $225);
      $st=$226;
      var $227=$p;
      var $228=(($227+1)|0);
      $p=$228;
      label = 6; break;
    case 50: 
      var $230=$coldp;
      var $231=$2;
      var $232=(($231+24)|0);
      HEAP32[(($232)>>2)]=$230;
      var $233=$st;
      var $234=$6;
      var $235=1 << $234;
      var $236=$233 & $235;
      var $237=(($236)|0)!=0;
      if ($237) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $239=$p;
      var $240=(($239+1)|0);
      $1=$240;
      label = 53; break;
    case 52: 
      $1=0;
      label = 53; break;
    case 53: 
      var $243=$1;

      return $243;
    default: assert(0, "bad label: " + label);
  }
}
_sfast["X"]=1;

function _sslow($m, $start, $stop, $startst, $stopst) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $st;
      var $empty;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $matchp;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$1;
      var $7=(($6+36)|0);
      var $8=HEAP32[(($7)>>2)];
      $st=$8;
      var $9=$1;
      var $10=(($9+48)|0);
      var $11=HEAP32[(($10)>>2)];
      $empty=$11;
      var $12=$1;
      var $13=(($12+44)|0);
      var $14=HEAP32[(($13)>>2)];
      $tmp=$14;
      var $15=$2;
      $p=$15;
      var $16=$2;
      var $17=$1;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|0)==(($19)|0);
      if ($20) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $28 = 128;label = 5; break;
    case 4: 
      var $23=$2;
      var $24=((($23)-(1))|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $28 = $26;label = 5; break;
    case 5: 
      var $28;
      $c=$28;
      $st=0;
      var $29=$4;
      var $30=1 << $29;
      var $31=$st;
      var $32=$31 | $30;
      $st=$32;
      var $33=$1;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$4;
      var $37=$5;
      var $38=$st;
      var $39=$st;
      var $40=_sstep($35, $36, $37, $38, 132, $39);
      $st=$40;
      $matchp=0;
      label = 6; break;
    case 6: 
      var $42=$c;
      $lastc=$42;
      var $43=$p;
      var $44=$1;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($43)|0)==(($46)|0);
      if ($47) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $54 = 128;label = 9; break;
    case 8: 
      var $50=$p;
      var $51=HEAP8[($50)];
      var $52=(($51 << 24) >> 24);
      var $54 = $52;label = 9; break;
    case 9: 
      var $54;
      $c=$54;
      $flagch=0;
      $i=0;
      var $55=$lastc;
      var $56=(($55)|0)==10;
      if ($56) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $58=$1;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & 8;
      var $64=(($63)|0)!=0;
      if ($64) { label = 13; break; } else { label = 11; break; }
    case 11: 
      var $66=$lastc;
      var $67=(($66)|0)==128;
      if ($67) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 & 1;
      var $73=(($72)|0)!=0;
      if ($73) { label = 14; break; } else { label = 13; break; }
    case 13: 
      $flagch=129;
      var $75=$1;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+44)|0);
      var $79=HEAP32[(($78)>>2)];
      $i=$79;
      label = 14; break;
    case 14: 
      var $81=$c;
      var $82=(($81)|0)==10;
      if ($82) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $84=$1;
      var $85=(($84)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+24)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & 8;
      var $90=(($89)|0)!=0;
      if ($90) { label = 18; break; } else { label = 16; break; }
    case 16: 
      var $92=$c;
      var $93=(($92)|0)==128;
      if ($93) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $95=$1;
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 & 2;
      var $99=(($98)|0)!=0;
      if ($99) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $101=$flagch;
      var $102=(($101)|0)==129;
      var $103=$102 ? 131 : 130;
      $flagch=$103;
      var $104=$1;
      var $105=(($104)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+48)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$i;
      var $110=((($109)+($108))|0);
      $i=$110;
      label = 19; break;
    case 19: 
      var $112=$i;
      var $113=(($112)|0)!=0;
      if ($113) { label = 20; break; } else { label = 25; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $116=$i;
      var $117=(($116)|0) > 0;
      if ($117) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $119=$1;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$4;
      var $123=$5;
      var $124=$st;
      var $125=$flagch;
      var $126=$st;
      var $127=_sstep($121, $122, $123, $124, $125, $126);
      $st=$127;
      label = 23; break;
    case 23: 
      var $129=$i;
      var $130=((($129)-(1))|0);
      $i=$130;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $133=$flagch;
      var $134=(($133)|0)==129;
      if ($134) { label = 29; break; } else { label = 26; break; }
    case 26: 
      var $136=$lastc;
      var $137=(($136)|0)!=128;
      if ($137) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $139=$lastc;
      var $140=_isalnum($139);
      var $141=(($140)|0)!=0;
      if ($141) { label = 33; break; } else { label = 28; break; }
    case 28: 
      var $143=$lastc;
      var $144=(($143)|0)==95;
      if ($144) { label = 33; break; } else { label = 29; break; }
    case 29: 
      var $146=$c;
      var $147=(($146)|0)!=128;
      if ($147) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $149=$c;
      var $150=_isalnum($149);
      var $151=(($150)|0)!=0;
      if ($151) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $153=$c;
      var $154=(($153)|0)==95;
      if ($154) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $flagch=133;
      label = 33; break;
    case 33: 
      var $157=$lastc;
      var $158=(($157)|0)!=128;
      if ($158) { label = 34; break; } else { label = 41; break; }
    case 34: 
      var $160=$lastc;
      var $161=_isalnum($160);
      var $162=(($161)|0)!=0;
      if ($162) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $164=$lastc;
      var $165=(($164)|0)==95;
      if ($165) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $167=$flagch;
      var $168=(($167)|0)==130;
      if ($168) { label = 40; break; } else { label = 37; break; }
    case 37: 
      var $170=$c;
      var $171=(($170)|0)!=128;
      if ($171) { label = 38; break; } else { label = 41; break; }
    case 38: 
      var $173=$c;
      var $174=_isalnum($173);
      var $175=(($174)|0)!=0;
      if ($175) { label = 41; break; } else { label = 39; break; }
    case 39: 
      var $177=$c;
      var $178=(($177)|0)==95;
      if ($178) { label = 41; break; } else { label = 40; break; }
    case 40: 
      $flagch=134;
      label = 41; break;
    case 41: 
      var $181=$flagch;
      var $182=(($181)|0)==133;
      if ($182) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $184=$flagch;
      var $185=(($184)|0)==134;
      if ($185) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $187=$1;
      var $188=(($187)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$4;
      var $191=$5;
      var $192=$st;
      var $193=$flagch;
      var $194=$st;
      var $195=_sstep($189, $190, $191, $192, $193, $194);
      $st=$195;
      label = 44; break;
    case 44: 
      var $197=$st;
      var $198=$5;
      var $199=1 << $198;
      var $200=$197 & $199;
      var $201=(($200)|0)!=0;
      if ($201) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $203=$p;
      $matchp=$203;
      label = 46; break;
    case 46: 
      var $205=$st;
      var $206=$empty;
      var $207=(($205)|0)==(($206)|0);
      if ($207) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $209=$p;
      var $210=$3;
      var $211=(($209)|0)==(($210)|0);
      if ($211) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 50; break;
    case 49: 
      var $214=$st;
      $tmp=$214;
      var $215=$empty;
      $st=$215;
      var $216=$1;
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$4;
      var $220=$5;
      var $221=$tmp;
      var $222=$c;
      var $223=$st;
      var $224=_sstep($218, $219, $220, $221, $222, $223);
      $st=$224;
      var $225=$p;
      var $226=(($225+1)|0);
      $p=$226;
      label = 6; break;
    case 50: 
      var $228=$matchp;

      return $228;
    default: assert(0, "bad label: " + label);
  }
}
_sslow["X"]=1;

function _sdissect($m, $start, $stop, $startst, $stopst) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $ss;
      var $es;
      var $sp;
      var $stp;
      var $rest;
      var $tail;
      var $ssub;
      var $esub;
      var $ssp;
      var $sep;
      var $oldssp;
      var $dp;
      $1=$m;
      $2=$start;
      $3=$stop;
      $4=$startst;
      $5=$stopst;
      var $6=$2;
      $sp=$6;
      var $7=$4;
      $ss=$7;
      label = 3; break;
    case 3: 
      var $9=$ss;
      var $10=$5;
      var $11=(($9)|0) < (($10)|0);
      if ($11) { label = 4; break; } else { label = 54; break; }
    case 4: 
      var $13=$ss;
      $es=$13;
      var $14=$es;
      var $15=$1;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+($14<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & -134217728;
      if ((($22)|0) == 1207959552 || (($22)|0) == 1476395008) {
        label = 5; break;
      }
      else if ((($22)|0) == 2013265920) {
        label = 6; break;
      }
      else {
      label = 10; break;
      }
      
    case 5: 
      var $24=$es;
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($24<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 134217727;
      var $33=$es;
      var $34=((($33)+($32))|0);
      $es=$34;
      label = 10; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $37=$es;
      var $38=$1;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+($37<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & -134217728;
      var $46=(($45)|0)!=-1879048192;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$es;
      var $49=$1;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+($48<<2))|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 134217727;
      var $57=$es;
      var $58=((($57)+($56))|0);
      $es=$58;
      label = 7; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $61=$es;
      var $62=((($61)+(1))|0);
      $es=$62;
      var $63=$ss;
      var $64=$1;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($63<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 & -134217728;
      if ((($71)|0) == 134217728) {
        label = 11; break;
      }
      else if ((($71)|0) == 268435456) {
        label = 12; break;
      }
      else if ((($71)|0) == 402653184 || (($71)|0) == 536870912 || (($71)|0) == -1744830464 || (($71)|0) == -1610612736) {
        label = 13; break;
      }
      else if ((($71)|0) == 671088640 || (($71)|0) == 805306368) {
        label = 14; break;
      }
      else if ((($71)|0) == 939524096 || (($71)|0) == 1073741824) {
        label = 15; break;
      }
      else if ((($71)|0) == 1476395008) {
        label = 16; break;
      }
      else if ((($71)|0) == 1207959552) {
        label = 24; break;
      }
      else if ((($71)|0) == 2013265920) {
        label = 36; break;
      }
      else if ((($71)|0) == 1342177280 || (($71)|0) == 1610612736 || (($71)|0) == -2147483648 || (($71)|0) == -2013265920 || (($71)|0) == -1879048192) {
        label = 48; break;
      }
      else if ((($71)|0) == 1744830464) {
        label = 49; break;
      }
      else if ((($71)|0) == 1879048192) {
        label = 50; break;
      }
      else {
      label = 51; break;
      }
      
    case 11: 
      label = 52; break;
    case 12: 
      var $74=$sp;
      var $75=(($74+1)|0);
      $sp=$75;
      label = 52; break;
    case 13: 
      label = 52; break;
    case 14: 
      var $78=$sp;
      var $79=(($78+1)|0);
      $sp=$79;
      label = 52; break;
    case 15: 
      label = 52; break;
    case 16: 
      var $82=$3;
      $stp=$82;
      label = 17; break;
    case 17: 
      var $84=$1;
      var $85=$sp;
      var $86=$stp;
      var $87=$ss;
      var $88=$es;
      var $89=_sslow($84, $85, $86, $87, $88);
      $rest=$89;
      var $90=$1;
      var $91=$rest;
      var $92=$3;
      var $93=$es;
      var $94=$5;
      var $95=_sslow($90, $91, $92, $93, $94);
      $tail=$95;
      var $96=$tail;
      var $97=$3;
      var $98=(($96)|0)==(($97)|0);
      if ($98) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $101=$rest;
      var $102=((($101)-(1))|0);
      $stp=$102;
      label = 17; break;
    case 20: 
      var $104=$ss;
      var $105=((($104)+(1))|0);
      $ssub=$105;
      var $106=$es;
      var $107=((($106)-(1))|0);
      $esub=$107;
      var $108=$1;
      var $109=$sp;
      var $110=$rest;
      var $111=$ssub;
      var $112=$esub;
      var $113=_sslow($108, $109, $110, $111, $112);
      var $114=(($113)|0)!=0;
      if ($114) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $116=$1;
      var $117=$sp;
      var $118=$rest;
      var $119=$ssub;
      var $120=$esub;
      var $121=_sdissect($116, $117, $118, $119, $120);
      $dp=$121;
      label = 23; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $124=$rest;
      $sp=$124;
      label = 52; break;
    case 24: 
      var $126=$3;
      $stp=$126;
      label = 25; break;
    case 25: 
      var $128=$1;
      var $129=$sp;
      var $130=$stp;
      var $131=$ss;
      var $132=$es;
      var $133=_sslow($128, $129, $130, $131, $132);
      $rest=$133;
      var $134=$1;
      var $135=$rest;
      var $136=$3;
      var $137=$es;
      var $138=$5;
      var $139=_sslow($134, $135, $136, $137, $138);
      $tail=$139;
      var $140=$tail;
      var $141=$3;
      var $142=(($140)|0)==(($141)|0);
      if ($142) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 28; break;
    case 27: 
      var $145=$rest;
      var $146=((($145)-(1))|0);
      $stp=$146;
      label = 25; break;
    case 28: 
      var $148=$ss;
      var $149=((($148)+(1))|0);
      $ssub=$149;
      var $150=$es;
      var $151=((($150)-(1))|0);
      $esub=$151;
      var $152=$sp;
      $ssp=$152;
      var $153=$ssp;
      $oldssp=$153;
      label = 29; break;
    case 29: 
      var $155=$1;
      var $156=$ssp;
      var $157=$rest;
      var $158=$ssub;
      var $159=$esub;
      var $160=_sslow($155, $156, $157, $158, $159);
      $sep=$160;
      var $161=$sep;
      var $162=(($161)|0)==0;
      if ($162) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $164=$sep;
      var $165=$ssp;
      var $166=(($164)|0)==(($165)|0);
      if ($166) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      var $169=$ssp;
      $oldssp=$169;
      var $170=$sep;
      $ssp=$170;
      label = 29; break;
    case 33: 
      var $172=$sep;
      var $173=(($172)|0)==0;
      if ($173) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $175=$ssp;
      $sep=$175;
      var $176=$oldssp;
      $ssp=$176;
      label = 35; break;
    case 35: 
      var $178=$1;
      var $179=$ssp;
      var $180=$sep;
      var $181=$ssub;
      var $182=$esub;
      var $183=_sdissect($178, $179, $180, $181, $182);
      $dp=$183;
      var $184=$rest;
      $sp=$184;
      label = 52; break;
    case 36: 
      var $186=$3;
      $stp=$186;
      label = 37; break;
    case 37: 
      var $188=$1;
      var $189=$sp;
      var $190=$stp;
      var $191=$ss;
      var $192=$es;
      var $193=_sslow($188, $189, $190, $191, $192);
      $rest=$193;
      var $194=$1;
      var $195=$rest;
      var $196=$3;
      var $197=$es;
      var $198=$5;
      var $199=_sslow($194, $195, $196, $197, $198);
      $tail=$199;
      var $200=$tail;
      var $201=$3;
      var $202=(($200)|0)==(($201)|0);
      if ($202) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 40; break;
    case 39: 
      var $205=$rest;
      var $206=((($205)-(1))|0);
      $stp=$206;
      label = 37; break;
    case 40: 
      var $208=$ss;
      var $209=((($208)+(1))|0);
      $ssub=$209;
      var $210=$ss;
      var $211=$ss;
      var $212=$1;
      var $213=(($212)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216+($211<<2))|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$218 & 134217727;
      var $220=((($210)+($219))|0);
      var $221=((($220)-(1))|0);
      $esub=$221;
      label = 41; break;
    case 41: 
      var $223=$1;
      var $224=$sp;
      var $225=$rest;
      var $226=$ssub;
      var $227=$esub;
      var $228=_sslow($223, $224, $225, $226, $227);
      var $229=$rest;
      var $230=(($228)|0)==(($229)|0);
      if ($230) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 47; break;
    case 43: 
      var $233=$esub;
      var $234=((($233)+(1))|0);
      $esub=$234;
      var $235=$esub;
      var $236=((($235)+(1))|0);
      $ssub=$236;
      var $237=$esub;
      var $238=$1;
      var $239=(($238)|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=(($240+4)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=(($242+($237<<2))|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=$244 & 134217727;
      var $246=$esub;
      var $247=((($246)+($245))|0);
      $esub=$247;
      var $248=$esub;
      var $249=$1;
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+4)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=(($253+($248<<2))|0);
      var $255=HEAP32[(($254)>>2)];
      var $256=$255 & -134217728;
      var $257=(($256)|0)==-2013265920;
      if ($257) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $259=$esub;
      var $260=((($259)-(1))|0);
      $esub=$260;
      label = 46; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 41; break;
    case 47: 
      var $264=$1;
      var $265=$sp;
      var $266=$rest;
      var $267=$ssub;
      var $268=$esub;
      var $269=_sdissect($264, $265, $266, $267, $268);
      $dp=$269;
      var $270=$rest;
      $sp=$270;
      label = 52; break;
    case 48: 
      label = 52; break;
    case 49: 
      var $273=$ss;
      var $274=$1;
      var $275=(($274)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=(($276+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+($273<<2))|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=$280 & 134217727;
      $i=$281;
      var $282=$sp;
      var $283=$1;
      var $284=(($283+12)|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=$282;
      var $287=$285;
      var $288=((($286)-($287))|0);
      var $289=$i;
      var $290=$1;
      var $291=(($290+8)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=(($292+($289<<3))|0);
      var $294=(($293)|0);
      HEAP32[(($294)>>2)]=$288;
      label = 52; break;
    case 50: 
      var $296=$ss;
      var $297=$1;
      var $298=(($297)|0);
      var $299=HEAP32[(($298)>>2)];
      var $300=(($299+4)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=(($301+($296<<2))|0);
      var $303=HEAP32[(($302)>>2)];
      var $304=$303 & 134217727;
      $i=$304;
      var $305=$sp;
      var $306=$1;
      var $307=(($306+12)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=$305;
      var $310=$308;
      var $311=((($309)-($310))|0);
      var $312=$i;
      var $313=$1;
      var $314=(($313+8)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=(($315+($312<<3))|0);
      var $317=(($316+4)|0);
      HEAP32[(($317)>>2)]=$311;
      label = 52; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $321=$es;
      $ss=$321;
      label = 3; break;
    case 54: 
      var $323=$sp;

      return $323;
    default: assert(0, "bad label: " + label);
  }
}
_sdissect["X"]=1;

function _sbackref($m, $start, $stop, $startst, $stopst, $lev, $rec) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $ss;
      var $sp;
      var $ssub;
      var $esub;
      var $ssp;
      var $dp;
      var $len;
      var $hard;
      var $s;
      var $offsave;
      var $cs;
      $2=$m;
      $3=$start;
      $4=$stop;
      $5=$startst;
      $6=$stopst;
      $7=$lev;
      $8=$rec;
      var $9=$3;
      $sp=$9;
      $hard=0;
      var $10=$5;
      $ss=$10;
      label = 3; break;
    case 3: 
      var $12=$hard;
      var $13=(($12)|0)!=0;
      if ($13) { var $19 = 0;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $15=$ss;
      var $16=$6;
      var $17=(($15)|0) < (($16)|0);
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      if ($19) { label = 6; break; } else { label = 70; break; }
    case 6: 
      var $21=$ss;
      var $22=$2;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($21<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      $s=$28;
      var $29=$28 & -134217728;
      if ((($29)|0) == 268435456) {
        label = 7; break;
      }
      else if ((($29)|0) == 671088640) {
        label = 11; break;
      }
      else if ((($29)|0) == 805306368) {
        label = 14; break;
      }
      else if ((($29)|0) == 402653184) {
        label = 18; break;
      }
      else if ((($29)|0) == 536870912) {
        label = 26; break;
      }
      else if ((($29)|0) == -1744830464) {
        label = 34; break;
      }
      else if ((($29)|0) == -1610612736) {
        label = 48; break;
      }
      else if ((($29)|0) == 1610612736) {
        label = 62; break;
      }
      else if ((($29)|0) == -2147483648) {
        label = 63; break;
      }
      else {
      label = 67; break;
      }
      
    case 7: 
      var $31=$sp;
      var $32=$4;
      var $33=(($31)|0)==(($32)|0);
      if ($33) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $35=$sp;
      var $36=(($35+1)|0);
      $sp=$36;
      var $37=HEAP8[($35)];
      var $38=(($37 << 24) >> 24);
      var $39=$s;
      var $40=$39 & 134217727;
      var $41=(($40) & 255);
      var $42=(($41 << 24) >> 24);
      var $43=(($38)|0)!=(($42)|0);
      if ($43) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=0;
      label = 113; break;
    case 10: 
      label = 68; break;
    case 11: 
      var $47=$sp;
      var $48=$4;
      var $49=(($47)|0)==(($48)|0);
      if ($49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=0;
      label = 113; break;
    case 13: 
      var $52=$sp;
      var $53=(($52+1)|0);
      $sp=$53;
      label = 68; break;
    case 14: 
      var $55=$s;
      var $56=$55 & 134217727;
      var $57=$2;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+16)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($56<<4))|0);
      $cs=$62;
      var $63=$sp;
      var $64=$4;
      var $65=(($63)|0)==(($64)|0);
      if ($65) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $67=$sp;
      var $68=(($67+1)|0);
      $sp=$68;
      var $69=HEAP8[($67)];
      var $70=(($69)&255);
      var $71=$cs;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=$cs;
      var $78=(($77+4)|0);
      var $79=HEAP8[($78)];
      var $80=(($79)&255);
      var $81=$76 & $80;
      var $82=(($81)|0)!=0;
      if ($82) { label = 17; break; } else { label = 16; break; }
    case 16: 
      $1=0;
      label = 113; break;
    case 17: 
      label = 68; break;
    case 18: 
      var $86=$sp;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($86)|0)==(($89)|0);
      if ($90) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $92=$2;
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$94 & 1;
      var $96=(($95)|0)!=0;
      if ($96) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $98=$sp;
      var $99=$2;
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($98)>>>0) < (($101)>>>0);
      if ($102) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $104=$sp;
      var $105=((($104)-(1))|0);
      var $106=HEAP8[($105)];
      var $107=(($106 << 24) >> 24);
      var $108=(($107)|0)==10;
      if ($108) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $110=$2;
      var $111=(($110)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & 8;
      var $116=(($115)|0)!=0;
      if ($116) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 25; break;
    case 24: 
      $1=0;
      label = 113; break;
    case 25: 
      label = 68; break;
    case 26: 
      var $121=$sp;
      var $122=$2;
      var $123=(($122+20)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=(($121)|0)==(($124)|0);
      if ($125) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $127=$2;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129 & 2;
      var $131=(($130)|0)!=0;
      if ($131) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $133=$sp;
      var $134=$2;
      var $135=(($134+20)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($133)>>>0) < (($136)>>>0);
      if ($137) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $139=$sp;
      var $140=HEAP8[($139)];
      var $141=(($140 << 24) >> 24);
      var $142=(($141)|0)==10;
      if ($142) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $144=$2;
      var $145=(($144)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+24)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$148 & 8;
      var $150=(($149)|0)!=0;
      if ($150) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 33; break;
    case 32: 
      $1=0;
      label = 113; break;
    case 33: 
      label = 68; break;
    case 34: 
      var $155=$sp;
      var $156=$2;
      var $157=(($156+16)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($155)|0)==(($158)|0);
      if ($159) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $161=$2;
      var $162=(($161+4)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$163 & 1;
      var $165=(($164)|0)!=0;
      if ($165) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $167=$sp;
      var $168=$2;
      var $169=(($168+20)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($167)>>>0) < (($170)>>>0);
      if ($171) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $173=$sp;
      var $174=((($173)-(1))|0);
      var $175=HEAP8[($174)];
      var $176=(($175 << 24) >> 24);
      var $177=(($176)|0)==10;
      if ($177) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $179=$2;
      var $180=(($179)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181+24)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$183 & 8;
      var $185=(($184)|0)!=0;
      if ($185) { label = 42; break; } else { label = 39; break; }
    case 39: 
      var $187=$sp;
      var $188=$2;
      var $189=(($188+16)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($187)>>>0) > (($190)>>>0);
      if ($191) { label = 40; break; } else { label = 46; break; }
    case 40: 
      var $193=$sp;
      var $194=((($193)-(1))|0);
      var $195=HEAP8[($194)];
      var $196=(($195 << 24) >> 24);
      var $197=_isalnum($196);
      var $198=(($197)|0)!=0;
      if ($198) { label = 46; break; } else { label = 41; break; }
    case 41: 
      var $200=$sp;
      var $201=((($200)-(1))|0);
      var $202=HEAP8[($201)];
      var $203=(($202 << 24) >> 24);
      var $204=(($203)|0)==95;
      if ($204) { label = 46; break; } else { label = 42; break; }
    case 42: 
      var $206=$sp;
      var $207=$2;
      var $208=(($207+20)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=(($206)>>>0) < (($209)>>>0);
      if ($210) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $212=$sp;
      var $213=HEAP8[($212)];
      var $214=(($213 << 24) >> 24);
      var $215=_isalnum($214);
      var $216=(($215)|0)!=0;
      if ($216) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $218=$sp;
      var $219=HEAP8[($218)];
      var $220=(($219 << 24) >> 24);
      var $221=(($220)|0)==95;
      if ($221) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      $1=0;
      label = 113; break;
    case 47: 
      label = 68; break;
    case 48: 
      var $226=$sp;
      var $227=$2;
      var $228=(($227+20)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=(($226)|0)==(($229)|0);
      if ($230) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $232=$2;
      var $233=(($232+4)|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=$234 & 2;
      var $236=(($235)|0)!=0;
      if ($236) { label = 50; break; } else { label = 56; break; }
    case 50: 
      var $238=$sp;
      var $239=$2;
      var $240=(($239+20)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($238)>>>0) < (($241)>>>0);
      if ($242) { label = 51; break; } else { label = 53; break; }
    case 51: 
      var $244=$sp;
      var $245=HEAP8[($244)];
      var $246=(($245 << 24) >> 24);
      var $247=(($246)|0)==10;
      if ($247) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $249=$2;
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=(($251+24)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$253 & 8;
      var $255=(($254)|0)!=0;
      if ($255) { label = 56; break; } else { label = 53; break; }
    case 53: 
      var $257=$sp;
      var $258=$2;
      var $259=(($258+20)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($257)>>>0) < (($260)>>>0);
      if ($261) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $263=$sp;
      var $264=HEAP8[($263)];
      var $265=(($264 << 24) >> 24);
      var $266=_isalnum($265);
      var $267=(($266)|0)!=0;
      if ($267) { label = 60; break; } else { label = 55; break; }
    case 55: 
      var $269=$sp;
      var $270=HEAP8[($269)];
      var $271=(($270 << 24) >> 24);
      var $272=(($271)|0)==95;
      if ($272) { label = 60; break; } else { label = 56; break; }
    case 56: 
      var $274=$sp;
      var $275=$2;
      var $276=(($275+16)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=(($274)>>>0) > (($277)>>>0);
      if ($278) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $280=$sp;
      var $281=((($280)-(1))|0);
      var $282=HEAP8[($281)];
      var $283=(($282 << 24) >> 24);
      var $284=_isalnum($283);
      var $285=(($284)|0)!=0;
      if ($285) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $287=$sp;
      var $288=((($287)-(1))|0);
      var $289=HEAP8[($288)];
      var $290=(($289 << 24) >> 24);
      var $291=(($290)|0)==95;
      if ($291) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 61; break;
    case 60: 
      $1=0;
      label = 113; break;
    case 61: 
      label = 68; break;
    case 62: 
      label = 68; break;
    case 63: 
      var $297=$ss;
      var $298=((($297)+(1))|0);
      $ss=$298;
      var $299=$ss;
      var $300=$2;
      var $301=(($300)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($302+4)|0);
      var $304=HEAP32[(($303)>>2)];
      var $305=(($304+($299<<2))|0);
      var $306=HEAP32[(($305)>>2)];
      $s=$306;
      label = 64; break;
    case 64: 
      var $308=$s;
      var $309=$308 & 134217727;
      var $310=$ss;
      var $311=((($310)+($309))|0);
      $ss=$311;
      label = 65; break;
    case 65: 
      var $313=$ss;
      var $314=$2;
      var $315=(($314)|0);
      var $316=HEAP32[(($315)>>2)];
      var $317=(($316+4)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=(($318+($313<<2))|0);
      var $320=HEAP32[(($319)>>2)];
      $s=$320;
      var $321=$320 & -134217728;
      var $322=(($321)|0)!=-1879048192;
      if ($322) { label = 64; break; } else { label = 66; break; }
    case 66: 
      label = 68; break;
    case 67: 
      $hard=1;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $327=$ss;
      var $328=((($327)+(1))|0);
      $ss=$328;
      label = 3; break;
    case 70: 
      var $330=$hard;
      var $331=(($330)|0)!=0;
      if ($331) { label = 74; break; } else { label = 71; break; }
    case 71: 
      var $333=$sp;
      var $334=$4;
      var $335=(($333)|0)!=(($334)|0);
      if ($335) { label = 72; break; } else { label = 73; break; }
    case 72: 
      $1=0;
      label = 113; break;
    case 73: 
      var $338=$sp;
      $1=$338;
      label = 113; break;
    case 74: 
      var $340=$ss;
      var $341=((($340)-(1))|0);
      $ss=$341;
      var $342=$ss;
      var $343=$2;
      var $344=(($343)|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=(($345+4)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=(($347+($342<<2))|0);
      var $349=HEAP32[(($348)>>2)];
      $s=$349;
      var $350=$s;
      var $351=$350 & -134217728;
      if ((($351)|0) == 939524096) {
        label = 75; break;
      }
      else if ((($351)|0) == 1476395008) {
        label = 88; break;
      }
      else if ((($351)|0) == 1207959552) {
        label = 91; break;
      }
      else if ((($351)|0) == 1342177280) {
        label = 92; break;
      }
      else if ((($351)|0) == 2013265920) {
        label = 97; break;
      }
      else if ((($351)|0) == 1744830464) {
        label = 106; break;
      }
      else if ((($351)|0) == 1879048192) {
        label = 109; break;
      }
      else {
      label = 112; break;
      }
      
    case 75: 
      var $353=$s;
      var $354=$353 & 134217727;
      $i=$354;
      var $355=$i;
      var $356=$2;
      var $357=(($356+8)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=(($358+($355<<3))|0);
      var $360=(($359+4)|0);
      var $361=HEAP32[(($360)>>2)];
      var $362=(($361)|0)==-1;
      if ($362) { label = 76; break; } else { label = 77; break; }
    case 76: 
      $1=0;
      label = 113; break;
    case 77: 
      var $365=$i;
      var $366=$2;
      var $367=(($366+8)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=(($368+($365<<3))|0);
      var $370=(($369+4)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$i;
      var $373=$2;
      var $374=(($373+8)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=(($375+($372<<3))|0);
      var $377=(($376)|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=((($371)-($378))|0);
      $len=$379;
      var $380=$len;
      var $381=(($380)|0)==0;
      if ($381) { label = 78; break; } else { label = 80; break; }
    case 78: 
      var $383=$8;
      var $384=((($383)+(1))|0);
      $8=$384;
      var $385=(($383)|0) > 100;
      if ($385) { label = 79; break; } else { label = 80; break; }
    case 79: 
      $1=0;
      label = 113; break;
    case 80: 
      var $388=$sp;
      var $389=$4;
      var $390=$len;
      var $391=(((-$390))|0);
      var $392=(($389+$391)|0);
      var $393=(($388)>>>0) > (($392)>>>0);
      if ($393) { label = 81; break; } else { label = 82; break; }
    case 81: 
      $1=0;
      label = 113; break;
    case 82: 
      var $396=$2;
      var $397=(($396+12)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=$i;
      var $400=$2;
      var $401=(($400+8)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=(($402+($399<<3))|0);
      var $404=(($403)|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=(($398+$405)|0);
      $ssp=$406;
      var $407=$sp;
      var $408=$ssp;
      var $409=$len;
      var $410=_memcmp($407, $408, $409);
      var $411=(($410)|0)!=0;
      if ($411) { label = 83; break; } else { label = 84; break; }
    case 83: 
      $1=0;
      label = 113; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $415=$ss;
      var $416=$2;
      var $417=(($416)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=(($418+4)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420+($415<<2))|0);
      var $422=HEAP32[(($421)>>2)];
      var $423=$i;
      var $424=1073741824 | $423;
      var $425=(($422)|0)!=(($424)|0);
      if ($425) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $427=$ss;
      var $428=((($427)+(1))|0);
      $ss=$428;
      label = 85; break;
    case 87: 
      var $430=$2;
      var $431=$sp;
      var $432=$len;
      var $433=(($431+$432)|0);
      var $434=$4;
      var $435=$ss;
      var $436=((($435)+(1))|0);
      var $437=$6;
      var $438=$7;
      var $439=$8;
      var $440=_sbackref($430, $433, $434, $436, $437, $438, $439);
      $1=$440;
      label = 113; break;
    case 88: 
      var $442=$2;
      var $443=$sp;
      var $444=$4;
      var $445=$ss;
      var $446=((($445)+(1))|0);
      var $447=$6;
      var $448=$7;
      var $449=$8;
      var $450=_sbackref($442, $443, $444, $446, $447, $448, $449);
      $dp=$450;
      var $451=$dp;
      var $452=(($451)|0)!=0;
      if ($452) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $454=$dp;
      $1=$454;
      label = 113; break;
    case 90: 
      var $456=$2;
      var $457=$sp;
      var $458=$4;
      var $459=$ss;
      var $460=$s;
      var $461=$460 & 134217727;
      var $462=((($459)+($461))|0);
      var $463=((($462)+(1))|0);
      var $464=$6;
      var $465=$7;
      var $466=$8;
      var $467=_sbackref($456, $457, $458, $463, $464, $465, $466);
      $1=$467;
      label = 113; break;
    case 91: 
      var $469=$sp;
      var $470=$7;
      var $471=((($470)+(1))|0);
      var $472=$2;
      var $473=(($472+28)|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=(($474+($471<<2))|0);
      HEAP32[(($475)>>2)]=$469;
      var $476=$2;
      var $477=$sp;
      var $478=$4;
      var $479=$ss;
      var $480=((($479)+(1))|0);
      var $481=$6;
      var $482=$7;
      var $483=((($482)+(1))|0);
      var $484=$8;
      var $485=_sbackref($476, $477, $478, $480, $481, $483, $484);
      $1=$485;
      label = 113; break;
    case 92: 
      var $487=$sp;
      var $488=$7;
      var $489=$2;
      var $490=(($489+28)|0);
      var $491=HEAP32[(($490)>>2)];
      var $492=(($491+($488<<2))|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=(($487)|0)==(($493)|0);
      if ($494) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $496=$2;
      var $497=$sp;
      var $498=$4;
      var $499=$ss;
      var $500=((($499)+(1))|0);
      var $501=$6;
      var $502=$7;
      var $503=((($502)-(1))|0);
      var $504=$8;
      var $505=_sbackref($496, $497, $498, $500, $501, $503, $504);
      $1=$505;
      label = 113; break;
    case 94: 
      var $507=$sp;
      var $508=$7;
      var $509=$2;
      var $510=(($509+28)|0);
      var $511=HEAP32[(($510)>>2)];
      var $512=(($511+($508<<2))|0);
      HEAP32[(($512)>>2)]=$507;
      var $513=$2;
      var $514=$sp;
      var $515=$4;
      var $516=$ss;
      var $517=$s;
      var $518=$517 & 134217727;
      var $519=((($516)-($518))|0);
      var $520=((($519)+(1))|0);
      var $521=$6;
      var $522=$7;
      var $523=$8;
      var $524=_sbackref($513, $514, $515, $520, $521, $522, $523);
      $dp=$524;
      var $525=$dp;
      var $526=(($525)|0)==0;
      if ($526) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $528=$2;
      var $529=$sp;
      var $530=$4;
      var $531=$ss;
      var $532=((($531)+(1))|0);
      var $533=$6;
      var $534=$7;
      var $535=((($534)-(1))|0);
      var $536=$8;
      var $537=_sbackref($528, $529, $530, $532, $533, $535, $536);
      $1=$537;
      label = 113; break;
    case 96: 
      var $539=$dp;
      $1=$539;
      label = 113; break;
    case 97: 
      var $541=$ss;
      var $542=((($541)+(1))|0);
      $ssub=$542;
      var $543=$ss;
      var $544=$s;
      var $545=$544 & 134217727;
      var $546=((($543)+($545))|0);
      var $547=((($546)-(1))|0);
      $esub=$547;
      label = 98; break;
    case 98: 
      var $549=$2;
      var $550=$sp;
      var $551=$4;
      var $552=$ssub;
      var $553=$esub;
      var $554=$7;
      var $555=$8;
      var $556=_sbackref($549, $550, $551, $552, $553, $554, $555);
      $dp=$556;
      var $557=$dp;
      var $558=(($557)|0)!=0;
      if ($558) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $560=$dp;
      $1=$560;
      label = 113; break;
    case 100: 
      var $562=$esub;
      var $563=$2;
      var $564=(($563)|0);
      var $565=HEAP32[(($564)>>2)];
      var $566=(($565+4)|0);
      var $567=HEAP32[(($566)>>2)];
      var $568=(($567+($562<<2))|0);
      var $569=HEAP32[(($568)>>2)];
      var $570=$569 & -134217728;
      var $571=(($570)|0)==-1879048192;
      if ($571) { label = 101; break; } else { label = 102; break; }
    case 101: 
      $1=0;
      label = 113; break;
    case 102: 
      var $574=$esub;
      var $575=((($574)+(1))|0);
      $esub=$575;
      var $576=$esub;
      var $577=((($576)+(1))|0);
      $ssub=$577;
      var $578=$esub;
      var $579=$2;
      var $580=(($579)|0);
      var $581=HEAP32[(($580)>>2)];
      var $582=(($581+4)|0);
      var $583=HEAP32[(($582)>>2)];
      var $584=(($583+($578<<2))|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=$585 & 134217727;
      var $587=$esub;
      var $588=((($587)+($586))|0);
      $esub=$588;
      var $589=$esub;
      var $590=$2;
      var $591=(($590)|0);
      var $592=HEAP32[(($591)>>2)];
      var $593=(($592+4)|0);
      var $594=HEAP32[(($593)>>2)];
      var $595=(($594+($589<<2))|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=$596 & -134217728;
      var $598=(($597)|0)==-2013265920;
      if ($598) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $600=$esub;
      var $601=((($600)-(1))|0);
      $esub=$601;
      label = 105; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 98; break;
    case 106: 
      var $605=$s;
      var $606=$605 & 134217727;
      $i=$606;
      var $607=$i;
      var $608=$2;
      var $609=(($608+8)|0);
      var $610=HEAP32[(($609)>>2)];
      var $611=(($610+($607<<3))|0);
      var $612=(($611)|0);
      var $613=HEAP32[(($612)>>2)];
      $offsave=$613;
      var $614=$sp;
      var $615=$2;
      var $616=(($615+12)|0);
      var $617=HEAP32[(($616)>>2)];
      var $618=$614;
      var $619=$617;
      var $620=((($618)-($619))|0);
      var $621=$i;
      var $622=$2;
      var $623=(($622+8)|0);
      var $624=HEAP32[(($623)>>2)];
      var $625=(($624+($621<<3))|0);
      var $626=(($625)|0);
      HEAP32[(($626)>>2)]=$620;
      var $627=$2;
      var $628=$sp;
      var $629=$4;
      var $630=$ss;
      var $631=((($630)+(1))|0);
      var $632=$6;
      var $633=$7;
      var $634=$8;
      var $635=_sbackref($627, $628, $629, $631, $632, $633, $634);
      $dp=$635;
      var $636=$dp;
      var $637=(($636)|0)!=0;
      if ($637) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $639=$dp;
      $1=$639;
      label = 113; break;
    case 108: 
      var $641=$offsave;
      var $642=$i;
      var $643=$2;
      var $644=(($643+8)|0);
      var $645=HEAP32[(($644)>>2)];
      var $646=(($645+($642<<3))|0);
      var $647=(($646)|0);
      HEAP32[(($647)>>2)]=$641;
      $1=0;
      label = 113; break;
    case 109: 
      var $649=$s;
      var $650=$649 & 134217727;
      $i=$650;
      var $651=$i;
      var $652=$2;
      var $653=(($652+8)|0);
      var $654=HEAP32[(($653)>>2)];
      var $655=(($654+($651<<3))|0);
      var $656=(($655+4)|0);
      var $657=HEAP32[(($656)>>2)];
      $offsave=$657;
      var $658=$sp;
      var $659=$2;
      var $660=(($659+12)|0);
      var $661=HEAP32[(($660)>>2)];
      var $662=$658;
      var $663=$661;
      var $664=((($662)-($663))|0);
      var $665=$i;
      var $666=$2;
      var $667=(($666+8)|0);
      var $668=HEAP32[(($667)>>2)];
      var $669=(($668+($665<<3))|0);
      var $670=(($669+4)|0);
      HEAP32[(($670)>>2)]=$664;
      var $671=$2;
      var $672=$sp;
      var $673=$4;
      var $674=$ss;
      var $675=((($674)+(1))|0);
      var $676=$6;
      var $677=$7;
      var $678=$8;
      var $679=_sbackref($671, $672, $673, $675, $676, $677, $678);
      $dp=$679;
      var $680=$dp;
      var $681=(($680)|0)!=0;
      if ($681) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $683=$dp;
      $1=$683;
      label = 113; break;
    case 111: 
      var $685=$offsave;
      var $686=$i;
      var $687=$2;
      var $688=(($687+8)|0);
      var $689=HEAP32[(($688)>>2)];
      var $690=(($689+($686<<3))|0);
      var $691=(($690+4)|0);
      HEAP32[(($691)>>2)]=$685;
      $1=0;
      label = 113; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $694=$1;

      return $694;
    default: assert(0, "bad label: " + label);
  }
}
_sbackref["X"]=1;

function _sstep($g, $start, $stop, $bef, $ch, $aft) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cs;
      var $s;
      var $pc;
      var $here;
      var $look;
      var $i;
      $1=$g;
      $2=$start;
      $3=$stop;
      $4=$bef;
      $5=$ch;
      $6=$aft;
      var $7=$2;
      $pc=$7;
      var $8=$pc;
      var $9=1 << $8;
      $here=$9;
      label = 3; break;
    case 3: 
      var $11=$pc;
      var $12=$3;
      var $13=(($11)|0)!=(($12)|0);
      if ($13) { label = 4; break; } else { label = 54; break; }
    case 4: 
      var $15=$pc;
      var $16=$1;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($15<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      $s=$20;
      var $21=$s;
      var $22=$21 & -134217728;
      if ((($22)|0) == 134217728) {
        label = 5; break;
      }
      else if ((($22)|0) == 268435456) {
        label = 6; break;
      }
      else if ((($22)|0) == 402653184) {
        label = 9; break;
      }
      else if ((($22)|0) == 536870912) {
        label = 13; break;
      }
      else if ((($22)|0) == -1744830464) {
        label = 17; break;
      }
      else if ((($22)|0) == -1610612736) {
        label = 20; break;
      }
      else if ((($22)|0) == 671088640) {
        label = 23; break;
      }
      else if ((($22)|0) == 805306368) {
        label = 26; break;
      }
      else if ((($22)|0) == 939524096 || (($22)|0) == 1073741824) {
        label = 30; break;
      }
      else if ((($22)|0) == 1207959552) {
        label = 31; break;
      }
      else if ((($22)|0) == 1342177280) {
        label = 32; break;
      }
      else if ((($22)|0) == 1476395008) {
        label = 36; break;
      }
      else if ((($22)|0) == 1610612736) {
        label = 37; break;
      }
      else if ((($22)|0) == 1744830464 || (($22)|0) == 1879048192) {
        label = 38; break;
      }
      else if ((($22)|0) == 2013265920) {
        label = 39; break;
      }
      else if ((($22)|0) == -2147483648) {
        label = 40; break;
      }
      else if ((($22)|0) == -2013265920) {
        label = 47; break;
      }
      else if ((($22)|0) == -1879048192) {
        label = 50; break;
      }
      else {
      label = 51; break;
      }
      
    case 5: 
      label = 52; break;
    case 6: 
      var $25=$5;
      var $26=$s;
      var $27=$26 & 134217727;
      var $28=(($27) & 255);
      var $29=(($28 << 24) >> 24);
      var $30=(($25)|0)==(($29)|0);
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$4;
      var $33=$here;
      var $34=$32 & $33;
      var $35=$34 << 1;
      var $36=$6;
      var $37=$36 | $35;
      $6=$37;
      label = 8; break;
    case 8: 
      label = 52; break;
    case 9: 
      var $40=$5;
      var $41=(($40)|0)==129;
      if ($41) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $43=$5;
      var $44=(($43)|0)==131;
      if ($44) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $46=$4;
      var $47=$here;
      var $48=$46 & $47;
      var $49=$48 << 1;
      var $50=$6;
      var $51=$50 | $49;
      $6=$51;
      label = 12; break;
    case 12: 
      label = 52; break;
    case 13: 
      var $54=$5;
      var $55=(($54)|0)==130;
      if ($55) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $57=$5;
      var $58=(($57)|0)==131;
      if ($58) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $60=$4;
      var $61=$here;
      var $62=$60 & $61;
      var $63=$62 << 1;
      var $64=$6;
      var $65=$64 | $63;
      $6=$65;
      label = 16; break;
    case 16: 
      label = 52; break;
    case 17: 
      var $68=$5;
      var $69=(($68)|0)==133;
      if ($69) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $71=$4;
      var $72=$here;
      var $73=$71 & $72;
      var $74=$73 << 1;
      var $75=$6;
      var $76=$75 | $74;
      $6=$76;
      label = 19; break;
    case 19: 
      label = 52; break;
    case 20: 
      var $79=$5;
      var $80=(($79)|0)==134;
      if ($80) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $82=$4;
      var $83=$here;
      var $84=$82 & $83;
      var $85=$84 << 1;
      var $86=$6;
      var $87=$86 | $85;
      $6=$87;
      label = 22; break;
    case 22: 
      label = 52; break;
    case 23: 
      var $90=$5;
      var $91=(($90)|0) > 127;
      if ($91) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $93=$4;
      var $94=$here;
      var $95=$93 & $94;
      var $96=$95 << 1;
      var $97=$6;
      var $98=$97 | $96;
      $6=$98;
      label = 25; break;
    case 25: 
      label = 52; break;
    case 26: 
      var $101=$s;
      var $102=$101 & 134217727;
      var $103=$1;
      var $104=(($103+16)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+($102<<4))|0);
      $cs=$106;
      var $107=$5;
      var $108=(($107)|0) > 127;
      if ($108) { label = 29; break; } else { label = 27; break; }
    case 27: 
      var $110=$5;
      var $111=(($110) & 255);
      var $112=(($111)&255);
      var $113=$cs;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+$112)|0);
      var $117=HEAP8[($116)];
      var $118=(($117)&255);
      var $119=$cs;
      var $120=(($119+4)|0);
      var $121=HEAP8[($120)];
      var $122=(($121)&255);
      var $123=$118 & $122;
      var $124=(($123)|0)!=0;
      if ($124) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $126=$4;
      var $127=$here;
      var $128=$126 & $127;
      var $129=$128 << 1;
      var $130=$6;
      var $131=$130 | $129;
      $6=$131;
      label = 29; break;
    case 29: 
      label = 52; break;
    case 30: 
      var $134=$6;
      var $135=$here;
      var $136=$134 & $135;
      var $137=$136 << 1;
      var $138=$6;
      var $139=$138 | $137;
      $6=$139;
      label = 52; break;
    case 31: 
      var $141=$6;
      var $142=$here;
      var $143=$141 & $142;
      var $144=$143 << 1;
      var $145=$6;
      var $146=$145 | $144;
      $6=$146;
      label = 52; break;
    case 32: 
      var $148=$6;
      var $149=$here;
      var $150=$148 & $149;
      var $151=$150 << 1;
      var $152=$6;
      var $153=$152 | $151;
      $6=$153;
      var $154=$6;
      var $155=$here;
      var $156=$s;
      var $157=$156 & 134217727;
      var $158=$155 >>> (($157)>>>0);
      var $159=$154 & $158;
      var $160=(($159)|0)!=0;
      var $161=(($160)&1);
      $i=$161;
      var $162=$6;
      var $163=$here;
      var $164=$162 & $163;
      var $165=$s;
      var $166=$165 & 134217727;
      var $167=$164 >>> (($166)>>>0);
      var $168=$6;
      var $169=$168 | $167;
      $6=$169;
      var $170=$i;
      var $171=(($170)|0)!=0;
      if ($171) { label = 35; break; } else { label = 33; break; }
    case 33: 
      var $173=$6;
      var $174=$here;
      var $175=$s;
      var $176=$175 & 134217727;
      var $177=$174 >>> (($176)>>>0);
      var $178=$173 & $177;
      var $179=(($178)|0)!=0;
      if ($179) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $181=$s;
      var $182=$181 & 134217727;
      var $183=((($182)+(1))|0);
      var $184=$pc;
      var $185=((($184)-($183))|0);
      $pc=$185;
      var $186=$pc;
      var $187=1 << $186;
      $here=$187;
      label = 35; break;
    case 35: 
      label = 52; break;
    case 36: 
      var $190=$6;
      var $191=$here;
      var $192=$190 & $191;
      var $193=$192 << 1;
      var $194=$6;
      var $195=$194 | $193;
      $6=$195;
      var $196=$6;
      var $197=$here;
      var $198=$196 & $197;
      var $199=$s;
      var $200=$199 & 134217727;
      var $201=$198 << $200;
      var $202=$6;
      var $203=$202 | $201;
      $6=$203;
      label = 52; break;
    case 37: 
      var $205=$6;
      var $206=$here;
      var $207=$205 & $206;
      var $208=$207 << 1;
      var $209=$6;
      var $210=$209 | $208;
      $6=$210;
      label = 52; break;
    case 38: 
      var $212=$6;
      var $213=$here;
      var $214=$212 & $213;
      var $215=$214 << 1;
      var $216=$6;
      var $217=$216 | $215;
      $6=$217;
      label = 52; break;
    case 39: 
      var $219=$6;
      var $220=$here;
      var $221=$219 & $220;
      var $222=$221 << 1;
      var $223=$6;
      var $224=$223 | $222;
      $6=$224;
      var $225=$6;
      var $226=$here;
      var $227=$225 & $226;
      var $228=$s;
      var $229=$228 & 134217727;
      var $230=$227 << $229;
      var $231=$6;
      var $232=$231 | $230;
      $6=$232;
      label = 52; break;
    case 40: 
      var $234=$6;
      var $235=$here;
      var $236=$234 & $235;
      var $237=(($236)|0)!=0;
      if ($237) { label = 41; break; } else { label = 46; break; }
    case 41: 
      $look=1;
      label = 42; break;
    case 42: 
      var $240=$pc;
      var $241=$look;
      var $242=((($240)+($241))|0);
      var $243=$1;
      var $244=(($243+4)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=(($245+($242<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      $s=$247;
      var $248=$247 & -134217728;
      var $249=(($248)|0)!=-1879048192;
      if ($249) { label = 43; break; } else { label = 45; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $252=$s;
      var $253=$252 & 134217727;
      var $254=$look;
      var $255=((($254)+($253))|0);
      $look=$255;
      label = 42; break;
    case 45: 
      var $257=$6;
      var $258=$here;
      var $259=$257 & $258;
      var $260=$look;
      var $261=$259 << $260;
      var $262=$6;
      var $263=$262 | $261;
      $6=$263;
      label = 46; break;
    case 46: 
      label = 52; break;
    case 47: 
      var $266=$6;
      var $267=$here;
      var $268=$266 & $267;
      var $269=$268 << 1;
      var $270=$6;
      var $271=$270 | $269;
      $6=$271;
      var $272=$pc;
      var $273=$s;
      var $274=$273 & 134217727;
      var $275=((($272)+($274))|0);
      var $276=$1;
      var $277=(($276+4)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278+($275<<2))|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=$280 & -134217728;
      var $282=(($281)|0)!=-1879048192;
      if ($282) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $284=$6;
      var $285=$here;
      var $286=$284 & $285;
      var $287=$s;
      var $288=$287 & 134217727;
      var $289=$286 << $288;
      var $290=$6;
      var $291=$290 | $289;
      $6=$291;
      label = 49; break;
    case 49: 
      label = 52; break;
    case 50: 
      var $294=$6;
      var $295=$here;
      var $296=$294 & $295;
      var $297=$296 << 1;
      var $298=$6;
      var $299=$298 | $297;
      $6=$299;
      label = 52; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $303=$pc;
      var $304=((($303)+(1))|0);
      $pc=$304;
      var $305=$here;
      var $306=$305 << 1;
      $here=$306;
      label = 3; break;
    case 54: 
      var $308=$6;

      return $308;
    default: assert(0, "bad label: " + label);
  }
}
_sstep["X"]=1;

function _inflateResetKeep($strm) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $state;
      $2=$strm;
      var $3=$2;
      var $4=(($3)|0)==0;
      if ($4) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$2;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-2;
      label = 8; break;
    case 5: 
      var $12=$2;
      var $13=(($12+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      $state=$15;
      var $16=$state;
      var $17=(($16+28)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=$2;
      var $19=(($18+20)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=$2;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=0;
      var $22=$2;
      var $23=(($22+24)|0);
      HEAP32[(($23)>>2)]=0;
      var $24=$state;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)!=0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$state;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 1;
      var $33=$2;
      var $34=(($33+48)|0);
      HEAP32[(($34)>>2)]=$32;
      label = 7; break;
    case 7: 
      var $36=$state;
      var $37=(($36)|0);
      HEAP32[(($37)>>2)]=0;
      var $38=$state;
      var $39=(($38+4)|0);
      HEAP32[(($39)>>2)]=0;
      var $40=$state;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=0;
      var $42=$state;
      var $43=(($42+20)|0);
      HEAP32[(($43)>>2)]=32768;
      var $44=$state;
      var $45=(($44+32)|0);
      HEAP32[(($45)>>2)]=0;
      var $46=$state;
      var $47=(($46+56)|0);
      HEAP32[(($47)>>2)]=0;
      var $48=$state;
      var $49=(($48+60)|0);
      HEAP32[(($49)>>2)]=0;
      var $50=$state;
      var $51=(($50+1328)|0);
      var $52=(($51)|0);
      var $53=$state;
      var $54=(($53+108)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=$state;
      var $56=(($55+80)|0);
      HEAP32[(($56)>>2)]=$52;
      var $57=$state;
      var $58=(($57+76)|0);
      HEAP32[(($58)>>2)]=$52;
      var $59=$state;
      var $60=(($59+7104)|0);
      HEAP32[(($60)>>2)]=1;
      var $61=$state;
      var $62=(($61+7108)|0);
      HEAP32[(($62)>>2)]=-1;
      $1=0;
      label = 8; break;
    case 8: 
      var $64=$1;

      return $64;
    default: assert(0, "bad label: " + label);
  }
}
_inflateResetKeep["X"]=1;

function _regfree($preg) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $g;
      $1=$preg;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)!=62053;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 16; break;
    case 4: 
      var $8=$1;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      $g=$10;
      var $11=$g;
      var $12=(($11)|0)==0;
      if ($12) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $14=$g;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)!=53829;
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 16; break;
    case 7: 
      var $20=$1;
      var $21=(($20)|0);
      HEAP32[(($21)>>2)]=0;
      var $22=$g;
      var $23=(($22)|0);
      HEAP32[(($23)>>2)]=0;
      var $24=$g;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)!=0;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $29=$g;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      _free($32);
      label = 9; break;
    case 9: 
      var $34=$g;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0)!=0;
      if ($37) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $39=$g;
      var $40=(($39+16)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      _free($42);
      label = 11; break;
    case 11: 
      var $44=$g;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|0)!=0;
      if ($47) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $49=$g;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      _free($51);
      label = 13; break;
    case 13: 
      var $53=$g;
      var $54=(($53+60)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0)!=0;
      if ($56) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $58=$g;
      var $59=(($58+60)|0);
      var $60=HEAP32[(($59)>>2)];
      _free($60);
      label = 15; break;
    case 15: 
      var $62=$g;
      var $63=$62;
      _free($63);
      label = 16; break;
    case 16: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_regfree["X"]=1;

function _inflateReset($strm) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $state;
      $2=$strm;
      var $3=$2;
      var $4=(($3)|0)==0;
      if ($4) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$2;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-2;
      label = 6; break;
    case 5: 
      var $12=$2;
      var $13=(($12+28)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      $state=$15;
      var $16=$state;
      var $17=(($16+40)|0);
      HEAP32[(($17)>>2)]=0;
      var $18=$state;
      var $19=(($18+44)|0);
      HEAP32[(($19)>>2)]=0;
      var $20=$state;
      var $21=(($20+48)|0);
      HEAP32[(($21)>>2)]=0;
      var $22=$2;
      var $23=_inflateResetKeep($22);
      $1=$23;
      label = 6; break;
    case 6: 
      var $25=$1;

      return $25;
    default: assert(0, "bad label: " + label);
  }
}


function _inflateReset2($strm, $windowBits) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $wrap;
      var $state;
      $2=$strm;
      $3=$windowBits;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$2;
      var $8=(($7+28)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==0;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-2;
      label = 18; break;
    case 5: 
      var $13=$2;
      var $14=(($13+28)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      $state=$16;
      var $17=$3;
      var $18=(($17)|0) < 0;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $wrap=0;
      var $20=$3;
      var $21=(((-$20))|0);
      $3=$21;
      label = 10; break;
    case 7: 
      var $23=$3;
      var $24=$23 >> 4;
      var $25=((($24)+(1))|0);
      $wrap=$25;
      var $26=$3;
      var $27=(($26)|0) < 48;
      if ($27) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $29=$3;
      var $30=$29 & 15;
      $3=$30;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $33=$3;
      var $34=(($33)|0)!=0;
      if ($34) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $36=$3;
      var $37=(($36)|0) < 8;
      if ($37) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $39=$3;
      var $40=(($39)|0) > 15;
      if ($40) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=-2;
      label = 18; break;
    case 14: 
      var $43=$state;
      var $44=(($43+52)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0)!=0;
      if ($46) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $48=$state;
      var $49=(($48+36)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$3;
      var $52=(($50)|0)!=(($51)|0);
      if ($52) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $54=$2;
      var $55=(($54+36)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$2;
      var $58=(($57+40)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$state;
      var $61=(($60+52)|0);
      var $62=HEAP32[(($61)>>2)];
      FUNCTION_TABLE[$56]($59, $62);
      var $63=$state;
      var $64=(($63+52)|0);
      HEAP32[(($64)>>2)]=0;
      label = 17; break;
    case 17: 
      var $66=$wrap;
      var $67=$state;
      var $68=(($67+8)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$3;
      var $70=$state;
      var $71=(($70+36)|0);
      HEAP32[(($71)>>2)]=$69;
      var $72=$2;
      var $73=_inflateReset($72);
      $1=$73;
      label = 18; break;
    case 18: 
      var $75=$1;

      return $75;
    default: assert(0, "bad label: " + label);
  }
}
_inflateReset2["X"]=1;

function _inflateInit2_($strm, $windowBits, $version, $stream_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $ret;
      var $state;
      $2=$strm;
      $3=$windowBits;
      $4=$version;
      $5=$stream_size;
      var $6=$4;
      var $7=(($6)|0)==0;
      if ($7) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $9=$4;
      var $10=(($9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      var $13=HEAP8[(((5267516)|0))];
      var $14=(($13 << 24) >> 24);
      var $15=(($12)|0)!=(($14)|0);
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=$5;
      var $18=(($17)|0)!=56;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-6;
      label = 17; break;
    case 6: 
      var $21=$2;
      var $22=(($21)|0)==0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-2;
      label = 17; break;
    case 8: 
      var $25=$2;
      var $26=(($25+24)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=$2;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0)==0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$2;
      var $33=(($32+32)|0);
      HEAP32[(($33)>>2)]=10;
      var $34=$2;
      var $35=(($34+40)|0);
      HEAP32[(($35)>>2)]=0;
      label = 10; break;
    case 10: 
      var $37=$2;
      var $38=(($37+36)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0)==0;
      if ($40) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $42=$2;
      var $43=(($42+36)|0);
      HEAP32[(($43)>>2)]=14;
      label = 12; break;
    case 12: 
      var $45=$2;
      var $46=(($45+32)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$2;
      var $49=(($48+40)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=FUNCTION_TABLE[$47]($50, 1, 7116);
      var $52=$51;
      $state=$52;
      var $53=$state;
      var $54=(($53)|0)==0;
      if ($54) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $1=-4;
      label = 17; break;
    case 14: 
      var $57=$state;
      var $58=$57;
      var $59=$2;
      var $60=(($59+28)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$state;
      var $62=(($61+52)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$2;
      var $64=$3;
      var $65=_inflateReset2($63, $64);
      $ret=$65;
      var $66=$ret;
      var $67=(($66)|0)!=0;
      if ($67) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $69=$2;
      var $70=(($69+36)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$2;
      var $73=(($72+40)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$state;
      var $76=$75;
      FUNCTION_TABLE[$71]($74, $76);
      var $77=$2;
      var $78=(($77+28)|0);
      HEAP32[(($78)>>2)]=0;
      label = 16; break;
    case 16: 
      var $80=$ret;
      $1=$80;
      label = 17; break;
    case 17: 
      var $82=$1;

      return $82;
    default: assert(0, "bad label: " + label);
  }
}
_inflateInit2_["X"]=1;


function _inflate($strm, $flush) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $state;
      var $next;
      var $put;
      var $have;
      var $left;
      var $hold;
      var $bits;
      var $in;
      var $out;
      var $copy;
      var $from;
      var $here=__stackBase__;
      var $last=(__stackBase__)+(4);
      var $len;
      var $ret;
      var $hbuf=(__stackBase__)+(8);
      $2=$strm;
      $3=$flush;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 7; break; } else { label = 3; break; }
    case 3: 
      var $7=$2;
      var $8=(($7+28)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)==0;
      if ($10) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)==0;
      if ($15) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)==0;
      if ($20) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $22=$2;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)!=0;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-2;
      label = 590; break;
    case 8: 
      var $28=$2;
      var $29=(($28+28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      $state=$31;
      var $32=$state;
      var $33=(($32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34)|0)==11;
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $37=$state;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=12;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $41=$2;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      $put=$43;
      var $44=$2;
      var $45=(($44+16)|0);
      var $46=HEAP32[(($45)>>2)];
      $left=$46;
      var $47=$2;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      $next=$49;
      var $50=$2;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      $have=$52;
      var $53=$state;
      var $54=(($53+56)|0);
      var $55=HEAP32[(($54)>>2)];
      $hold=$55;
      var $56=$state;
      var $57=(($56+60)|0);
      var $58=HEAP32[(($57)>>2)];
      $bits=$58;
      label = 12; break;
    case 12: 
      var $60=$have;
      $in=$60;
      var $61=$left;
      $out=$61;
      $ret=0;
      label = 13; break;
    case 13: 
      var $63=$state;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      if ((($65)|0) == 0) {
        label = 14; break;
      }
      else if ((($65)|0) == 1) {
        label = 49; break;
      }
      else if ((($65)|0) == 2) {
        label = 71; break;
      }
      else if ((($65)|0) == 3) {
        label = 89; break;
      }
      else if ((($65)|0) == 4) {
        label = 107; break;
      }
      else if ((($65)|0) == 5) {
        label = 130; break;
      }
      else if ((($65)|0) == 6) {
        label = 147; break;
      }
      else if ((($65)|0) == 7) {
        label = 168; break;
      }
      else if ((($65)|0) == 8) {
        label = 189; break;
      }
      else if ((($65)|0) == 9) {
        label = 207; break;
      }
      else if ((($65)|0) == 10) {
        label = 219; break;
      }
      else if ((($65)|0) == 11) {
        label = 224; break;
      }
      else if ((($65)|0) == 12) {
        label = 228; break;
      }
      else if ((($65)|0) == 13) {
        label = 255; break;
      }
      else if ((($65)|0) == 14) {
        label = 273; break;
      }
      else if ((($65)|0) == 15) {
        label = 274; break;
      }
      else if ((($65)|0) == 16) {
        label = 283; break;
      }
      else if ((($65)|0) == 17) {
        label = 302; break;
      }
      else if ((($65)|0) == 18) {
        label = 322; break;
      }
      else if ((($65)|0) == 19) {
        label = 401; break;
      }
      else if ((($65)|0) == 20) {
        label = 402; break;
      }
      else if ((($65)|0) == 21) {
        label = 441; break;
      }
      else if ((($65)|0) == 22) {
        label = 455; break;
      }
      else if ((($65)|0) == 23) {
        label = 480; break;
      }
      else if ((($65)|0) == 24) {
        label = 494; break;
      }
      else if ((($65)|0) == 25) {
        label = 516; break;
      }
      else if ((($65)|0) == 26) {
        label = 519; break;
      }
      else if ((($65)|0) == 27) {
        label = 543; break;
      }
      else if ((($65)|0) == 28) {
        label = 560; break;
      }
      else if ((($65)|0) == 29) {
        label = 561; break;
      }
      else if ((($65)|0) == 30) {
        label = 562; break;
      }
      else if ((($65)|0) == 31) {
        label = 563; break;
      }
      else {
      label = 564; break;
      }
      
    case 14: 
      var $67=$state;
      var $68=(($67+8)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|0)==0;
      if ($70) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $72=$state;
      var $73=(($72)|0);
      HEAP32[(($73)>>2)]=12;
      label = 565; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $77=$bits;
      var $78=(($77)>>>0) < 16;
      if ($78) { label = 19; break; } else { label = 24; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $81=$have;
      var $82=(($81)|0)==0;
      if ($82) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 566; break;
    case 22: 
      var $85=$have;
      var $86=((($85)-(1))|0);
      $have=$86;
      var $87=$next;
      var $88=(($87+1)|0);
      $next=$88;
      var $89=HEAP8[($87)];
      var $90=(($89)&255);
      var $91=$bits;
      var $92=$90 << $91;
      var $93=$hold;
      var $94=((($93)+($92))|0);
      $hold=$94;
      var $95=$bits;
      var $96=((($95)+(8))|0);
      $bits=$96;
      label = 23; break;
    case 23: 
      label = 18; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $100=$state;
      var $101=(($100+8)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102 & 2;
      var $104=(($103)|0)!=0;
      if ($104) { label = 26; break; } else { label = 32; break; }
    case 26: 
      var $106=$hold;
      var $107=(($106)|0)==35615;
      if ($107) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $109=_crc32(0, 0, 0);
      var $110=$state;
      var $111=(($110+24)|0);
      HEAP32[(($111)>>2)]=$109;
      label = 28; break;
    case 28: 
      var $113=$hold;
      var $114=(($113) & 255);
      var $115=(($hbuf)|0);
      HEAP8[($115)]=$114;
      var $116=$hold;
      var $117=$116 >>> 8;
      var $118=(($117) & 255);
      var $119=(($hbuf+1)|0);
      HEAP8[($119)]=$118;
      var $120=$state;
      var $121=(($120+24)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($hbuf)|0);
      var $124=_crc32($122, $123, 2);
      var $125=$state;
      var $126=(($125+24)|0);
      HEAP32[(($126)>>2)]=$124;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      $hold=0;
      $bits=0;
      label = 31; break;
    case 31: 
      var $130=$state;
      var $131=(($130)|0);
      HEAP32[(($131)>>2)]=1;
      label = 565; break;
    case 32: 
      var $133=$state;
      var $134=(($133+16)|0);
      HEAP32[(($134)>>2)]=0;
      var $135=$state;
      var $136=(($135+32)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137)|0)!=0;
      if ($138) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $140=$state;
      var $141=(($140+32)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+48)|0);
      HEAP32[(($143)>>2)]=-1;
      label = 34; break;
    case 34: 
      var $145=$state;
      var $146=(($145+8)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$147 & 1;
      var $149=(($148)|0)!=0;
      if ($149) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $151=$hold;
      var $152=$151 & 255;
      var $153=$152 << 8;
      var $154=$hold;
      var $155=$154 >>> 8;
      var $156=((($153)+($155))|0);
      var $157=((($156)>>>0))%(31);
      var $158=(($157)|0)!=0;
      if ($158) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $160=$2;
      var $161=(($160+24)|0);
      HEAP32[(($161)>>2)]=((5271852)|0);
      var $162=$state;
      var $163=(($162)|0);
      HEAP32[(($163)>>2)]=29;
      label = 565; break;
    case 37: 
      var $165=$hold;
      var $166=$165 & 15;
      var $167=(($166)|0)!=8;
      if ($167) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $169=$2;
      var $170=(($169+24)|0);
      HEAP32[(($170)>>2)]=((5268832)|0);
      var $171=$state;
      var $172=(($171)|0);
      HEAP32[(($172)>>2)]=29;
      label = 565; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $175=$hold;
      var $176=$175 >>> 4;
      $hold=$176;
      var $177=$bits;
      var $178=((($177)-(4))|0);
      $bits=$178;
      label = 41; break;
    case 41: 
      var $180=$hold;
      var $181=$180 & 15;
      var $182=((($181)+(8))|0);
      $len=$182;
      var $183=$state;
      var $184=(($183+36)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=(($185)|0)==0;
      if ($186) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $188=$len;
      var $189=$state;
      var $190=(($189+36)|0);
      HEAP32[(($190)>>2)]=$188;
      label = 46; break;
    case 43: 
      var $192=$len;
      var $193=$state;
      var $194=(($193+36)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=(($192)>>>0) > (($195)>>>0);
      if ($196) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $198=$2;
      var $199=(($198+24)|0);
      HEAP32[(($199)>>2)]=((5266936)|0);
      var $200=$state;
      var $201=(($200)|0);
      HEAP32[(($201)>>2)]=29;
      label = 565; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $204=$len;
      var $205=1 << $204;
      var $206=$state;
      var $207=(($206+20)|0);
      HEAP32[(($207)>>2)]=$205;
      var $208=_adler32(0, 0, 0);
      var $209=$state;
      var $210=(($209+24)|0);
      HEAP32[(($210)>>2)]=$208;
      var $211=$2;
      var $212=(($211+48)|0);
      HEAP32[(($212)>>2)]=$208;
      var $213=$hold;
      var $214=$213 & 512;
      var $215=(($214)|0)!=0;
      var $216=$215 ? 9 : 11;
      var $217=$state;
      var $218=(($217)|0);
      HEAP32[(($218)>>2)]=$216;
      label = 47; break;
    case 47: 
      $hold=0;
      $bits=0;
      label = 48; break;
    case 48: 
      label = 565; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $224=$bits;
      var $225=(($224)>>>0) < 16;
      if ($225) { label = 52; break; } else { label = 57; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $228=$have;
      var $229=(($228)|0)==0;
      if ($229) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 566; break;
    case 55: 
      var $232=$have;
      var $233=((($232)-(1))|0);
      $have=$233;
      var $234=$next;
      var $235=(($234+1)|0);
      $next=$235;
      var $236=HEAP8[($234)];
      var $237=(($236)&255);
      var $238=$bits;
      var $239=$237 << $238;
      var $240=$hold;
      var $241=((($240)+($239))|0);
      $hold=$241;
      var $242=$bits;
      var $243=((($242)+(8))|0);
      $bits=$243;
      label = 56; break;
    case 56: 
      label = 51; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $247=$hold;
      var $248=$state;
      var $249=(($248+16)|0);
      HEAP32[(($249)>>2)]=$247;
      var $250=$state;
      var $251=(($250+16)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$252 & 255;
      var $254=(($253)|0)!=8;
      if ($254) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $256=$2;
      var $257=(($256+24)|0);
      HEAP32[(($257)>>2)]=((5268832)|0);
      var $258=$state;
      var $259=(($258)|0);
      HEAP32[(($259)>>2)]=29;
      label = 565; break;
    case 60: 
      var $261=$state;
      var $262=(($261+16)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=$263 & 57344;
      var $265=(($264)|0)!=0;
      if ($265) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $267=$2;
      var $268=(($267+24)|0);
      HEAP32[(($268)>>2)]=((5265852)|0);
      var $269=$state;
      var $270=(($269)|0);
      HEAP32[(($270)>>2)]=29;
      label = 565; break;
    case 62: 
      var $272=$state;
      var $273=(($272+32)|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=(($274)|0)!=0;
      if ($275) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $277=$hold;
      var $278=$277 >>> 8;
      var $279=$278 & 1;
      var $280=$state;
      var $281=(($280+32)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=(($282)|0);
      HEAP32[(($283)>>2)]=$279;
      label = 64; break;
    case 64: 
      var $285=$state;
      var $286=(($285+16)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=$287 & 512;
      var $289=(($288)|0)!=0;
      if ($289) { label = 65; break; } else { label = 68; break; }
    case 65: 
      label = 66; break;
    case 66: 
      var $292=$hold;
      var $293=(($292) & 255);
      var $294=(($hbuf)|0);
      HEAP8[($294)]=$293;
      var $295=$hold;
      var $296=$295 >>> 8;
      var $297=(($296) & 255);
      var $298=(($hbuf+1)|0);
      HEAP8[($298)]=$297;
      var $299=$state;
      var $300=(($299+24)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=(($hbuf)|0);
      var $303=_crc32($301, $302, 2);
      var $304=$state;
      var $305=(($304+24)|0);
      HEAP32[(($305)>>2)]=$303;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      $hold=0;
      $bits=0;
      label = 70; break;
    case 70: 
      var $310=$state;
      var $311=(($310)|0);
      HEAP32[(($311)>>2)]=2;
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $315=$bits;
      var $316=(($315)>>>0) < 32;
      if ($316) { label = 74; break; } else { label = 79; break; }
    case 74: 
      label = 75; break;
    case 75: 
      var $319=$have;
      var $320=(($319)|0)==0;
      if ($320) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 566; break;
    case 77: 
      var $323=$have;
      var $324=((($323)-(1))|0);
      $have=$324;
      var $325=$next;
      var $326=(($325+1)|0);
      $next=$326;
      var $327=HEAP8[($325)];
      var $328=(($327)&255);
      var $329=$bits;
      var $330=$328 << $329;
      var $331=$hold;
      var $332=((($331)+($330))|0);
      $hold=$332;
      var $333=$bits;
      var $334=((($333)+(8))|0);
      $bits=$334;
      label = 78; break;
    case 78: 
      label = 73; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $338=$state;
      var $339=(($338+32)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=(($340)|0)!=0;
      if ($341) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $343=$hold;
      var $344=$state;
      var $345=(($344+32)|0);
      var $346=HEAP32[(($345)>>2)];
      var $347=(($346+4)|0);
      HEAP32[(($347)>>2)]=$343;
      label = 82; break;
    case 82: 
      var $349=$state;
      var $350=(($349+16)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$351 & 512;
      var $353=(($352)|0)!=0;
      if ($353) { label = 83; break; } else { label = 86; break; }
    case 83: 
      label = 84; break;
    case 84: 
      var $356=$hold;
      var $357=(($356) & 255);
      var $358=(($hbuf)|0);
      HEAP8[($358)]=$357;
      var $359=$hold;
      var $360=$359 >>> 8;
      var $361=(($360) & 255);
      var $362=(($hbuf+1)|0);
      HEAP8[($362)]=$361;
      var $363=$hold;
      var $364=$363 >>> 16;
      var $365=(($364) & 255);
      var $366=(($hbuf+2)|0);
      HEAP8[($366)]=$365;
      var $367=$hold;
      var $368=$367 >>> 24;
      var $369=(($368) & 255);
      var $370=(($hbuf+3)|0);
      HEAP8[($370)]=$369;
      var $371=$state;
      var $372=(($371+24)|0);
      var $373=HEAP32[(($372)>>2)];
      var $374=(($hbuf)|0);
      var $375=_crc32($373, $374, 4);
      var $376=$state;
      var $377=(($376+24)|0);
      HEAP32[(($377)>>2)]=$375;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      $hold=0;
      $bits=0;
      label = 88; break;
    case 88: 
      var $382=$state;
      var $383=(($382)|0);
      HEAP32[(($383)>>2)]=3;
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $387=$bits;
      var $388=(($387)>>>0) < 16;
      if ($388) { label = 92; break; } else { label = 97; break; }
    case 92: 
      label = 93; break;
    case 93: 
      var $391=$have;
      var $392=(($391)|0)==0;
      if ($392) { label = 94; break; } else { label = 95; break; }
    case 94: 
      label = 566; break;
    case 95: 
      var $395=$have;
      var $396=((($395)-(1))|0);
      $have=$396;
      var $397=$next;
      var $398=(($397+1)|0);
      $next=$398;
      var $399=HEAP8[($397)];
      var $400=(($399)&255);
      var $401=$bits;
      var $402=$400 << $401;
      var $403=$hold;
      var $404=((($403)+($402))|0);
      $hold=$404;
      var $405=$bits;
      var $406=((($405)+(8))|0);
      $bits=$406;
      label = 96; break;
    case 96: 
      label = 91; break;
    case 97: 
      label = 98; break;
    case 98: 
      var $410=$state;
      var $411=(($410+32)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($412)|0)!=0;
      if ($413) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $415=$hold;
      var $416=$415 & 255;
      var $417=$state;
      var $418=(($417+32)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=(($419+8)|0);
      HEAP32[(($420)>>2)]=$416;
      var $421=$hold;
      var $422=$421 >>> 8;
      var $423=$state;
      var $424=(($423+32)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=(($425+12)|0);
      HEAP32[(($426)>>2)]=$422;
      label = 100; break;
    case 100: 
      var $428=$state;
      var $429=(($428+16)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=$430 & 512;
      var $432=(($431)|0)!=0;
      if ($432) { label = 101; break; } else { label = 104; break; }
    case 101: 
      label = 102; break;
    case 102: 
      var $435=$hold;
      var $436=(($435) & 255);
      var $437=(($hbuf)|0);
      HEAP8[($437)]=$436;
      var $438=$hold;
      var $439=$438 >>> 8;
      var $440=(($439) & 255);
      var $441=(($hbuf+1)|0);
      HEAP8[($441)]=$440;
      var $442=$state;
      var $443=(($442+24)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=(($hbuf)|0);
      var $446=_crc32($444, $445, 2);
      var $447=$state;
      var $448=(($447+24)|0);
      HEAP32[(($448)>>2)]=$446;
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      $hold=0;
      $bits=0;
      label = 106; break;
    case 106: 
      var $453=$state;
      var $454=(($453)|0);
      HEAP32[(($454)>>2)]=4;
      label = 107; break;
    case 107: 
      var $456=$state;
      var $457=(($456+16)|0);
      var $458=HEAP32[(($457)>>2)];
      var $459=$458 & 1024;
      var $460=(($459)|0)!=0;
      if ($460) { label = 108; break; } else { label = 126; break; }
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $464=$bits;
      var $465=(($464)>>>0) < 16;
      if ($465) { label = 111; break; } else { label = 116; break; }
    case 111: 
      label = 112; break;
    case 112: 
      var $468=$have;
      var $469=(($468)|0)==0;
      if ($469) { label = 113; break; } else { label = 114; break; }
    case 113: 
      label = 566; break;
    case 114: 
      var $472=$have;
      var $473=((($472)-(1))|0);
      $have=$473;
      var $474=$next;
      var $475=(($474+1)|0);
      $next=$475;
      var $476=HEAP8[($474)];
      var $477=(($476)&255);
      var $478=$bits;
      var $479=$477 << $478;
      var $480=$hold;
      var $481=((($480)+($479))|0);
      $hold=$481;
      var $482=$bits;
      var $483=((($482)+(8))|0);
      $bits=$483;
      label = 115; break;
    case 115: 
      label = 110; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $487=$hold;
      var $488=$state;
      var $489=(($488+64)|0);
      HEAP32[(($489)>>2)]=$487;
      var $490=$state;
      var $491=(($490+32)|0);
      var $492=HEAP32[(($491)>>2)];
      var $493=(($492)|0)!=0;
      if ($493) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $495=$hold;
      var $496=$state;
      var $497=(($496+32)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=(($498+20)|0);
      HEAP32[(($499)>>2)]=$495;
      label = 119; break;
    case 119: 
      var $501=$state;
      var $502=(($501+16)|0);
      var $503=HEAP32[(($502)>>2)];
      var $504=$503 & 512;
      var $505=(($504)|0)!=0;
      if ($505) { label = 120; break; } else { label = 123; break; }
    case 120: 
      label = 121; break;
    case 121: 
      var $508=$hold;
      var $509=(($508) & 255);
      var $510=(($hbuf)|0);
      HEAP8[($510)]=$509;
      var $511=$hold;
      var $512=$511 >>> 8;
      var $513=(($512) & 255);
      var $514=(($hbuf+1)|0);
      HEAP8[($514)]=$513;
      var $515=$state;
      var $516=(($515+24)|0);
      var $517=HEAP32[(($516)>>2)];
      var $518=(($hbuf)|0);
      var $519=_crc32($517, $518, 2);
      var $520=$state;
      var $521=(($520+24)|0);
      HEAP32[(($521)>>2)]=$519;
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      $hold=0;
      $bits=0;
      label = 125; break;
    case 125: 
      label = 129; break;
    case 126: 
      var $527=$state;
      var $528=(($527+32)|0);
      var $529=HEAP32[(($528)>>2)];
      var $530=(($529)|0)!=0;
      if ($530) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $532=$state;
      var $533=(($532+32)|0);
      var $534=HEAP32[(($533)>>2)];
      var $535=(($534+16)|0);
      HEAP32[(($535)>>2)]=0;
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $538=$state;
      var $539=(($538)|0);
      HEAP32[(($539)>>2)]=5;
      label = 130; break;
    case 130: 
      var $541=$state;
      var $542=(($541+16)|0);
      var $543=HEAP32[(($542)>>2)];
      var $544=$543 & 1024;
      var $545=(($544)|0)!=0;
      if ($545) { label = 131; break; } else { label = 146; break; }
    case 131: 
      var $547=$state;
      var $548=(($547+64)|0);
      var $549=HEAP32[(($548)>>2)];
      $copy=$549;
      var $550=$copy;
      var $551=$have;
      var $552=(($550)>>>0) > (($551)>>>0);
      if ($552) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $554=$have;
      $copy=$554;
      label = 133; break;
    case 133: 
      var $556=$copy;
      var $557=(($556)|0)!=0;
      if ($557) { label = 134; break; } else { label = 143; break; }
    case 134: 
      var $559=$state;
      var $560=(($559+32)|0);
      var $561=HEAP32[(($560)>>2)];
      var $562=(($561)|0)!=0;
      if ($562) { label = 135; break; } else { label = 140; break; }
    case 135: 
      var $564=$state;
      var $565=(($564+32)|0);
      var $566=HEAP32[(($565)>>2)];
      var $567=(($566+16)|0);
      var $568=HEAP32[(($567)>>2)];
      var $569=(($568)|0)!=0;
      if ($569) { label = 136; break; } else { label = 140; break; }
    case 136: 
      var $571=$state;
      var $572=(($571+32)|0);
      var $573=HEAP32[(($572)>>2)];
      var $574=(($573+20)|0);
      var $575=HEAP32[(($574)>>2)];
      var $576=$state;
      var $577=(($576+64)|0);
      var $578=HEAP32[(($577)>>2)];
      var $579=((($575)-($578))|0);
      $len=$579;
      var $580=$state;
      var $581=(($580+32)|0);
      var $582=HEAP32[(($581)>>2)];
      var $583=(($582+16)|0);
      var $584=HEAP32[(($583)>>2)];
      var $585=$len;
      var $586=(($584+$585)|0);
      var $587=$next;
      var $588=$len;
      var $589=$copy;
      var $590=((($588)+($589))|0);
      var $591=$state;
      var $592=(($591+32)|0);
      var $593=HEAP32[(($592)>>2)];
      var $594=(($593+24)|0);
      var $595=HEAP32[(($594)>>2)];
      var $596=(($590)>>>0) > (($595)>>>0);
      if ($596) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $598=$state;
      var $599=(($598+32)|0);
      var $600=HEAP32[(($599)>>2)];
      var $601=(($600+24)|0);
      var $602=HEAP32[(($601)>>2)];
      var $603=$len;
      var $604=((($602)-($603))|0);
      var $608 = $604;label = 139; break;
    case 138: 
      var $606=$copy;
      var $608 = $606;label = 139; break;
    case 139: 
      var $608;
      assert($608 % 1 === 0);_memcpy($586, $587, $608);
      label = 140; break;
    case 140: 
      var $610=$state;
      var $611=(($610+16)|0);
      var $612=HEAP32[(($611)>>2)];
      var $613=$612 & 512;
      var $614=(($613)|0)!=0;
      if ($614) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $616=$state;
      var $617=(($616+24)|0);
      var $618=HEAP32[(($617)>>2)];
      var $619=$next;
      var $620=$copy;
      var $621=_crc32($618, $619, $620);
      var $622=$state;
      var $623=(($622+24)|0);
      HEAP32[(($623)>>2)]=$621;
      label = 142; break;
    case 142: 
      var $625=$copy;
      var $626=$have;
      var $627=((($626)-($625))|0);
      $have=$627;
      var $628=$copy;
      var $629=$next;
      var $630=(($629+$628)|0);
      $next=$630;
      var $631=$copy;
      var $632=$state;
      var $633=(($632+64)|0);
      var $634=HEAP32[(($633)>>2)];
      var $635=((($634)-($631))|0);
      HEAP32[(($633)>>2)]=$635;
      label = 143; break;
    case 143: 
      var $637=$state;
      var $638=(($637+64)|0);
      var $639=HEAP32[(($638)>>2)];
      var $640=(($639)|0)!=0;
      if ($640) { label = 144; break; } else { label = 145; break; }
    case 144: 
      label = 566; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $644=$state;
      var $645=(($644+64)|0);
      HEAP32[(($645)>>2)]=0;
      var $646=$state;
      var $647=(($646)|0);
      HEAP32[(($647)>>2)]=6;
      label = 147; break;
    case 147: 
      var $649=$state;
      var $650=(($649+16)|0);
      var $651=HEAP32[(($650)>>2)];
      var $652=$651 & 2048;
      var $653=(($652)|0)!=0;
      if ($653) { label = 148; break; } else { label = 164; break; }
    case 148: 
      var $655=$have;
      var $656=(($655)|0)==0;
      if ($656) { label = 149; break; } else { label = 150; break; }
    case 149: 
      label = 566; break;
    case 150: 
      $copy=0;
      label = 151; break;
    case 151: 
      var $660=$copy;
      var $661=((($660)+(1))|0);
      $copy=$661;
      var $662=$next;
      var $663=(($662+$660)|0);
      var $664=HEAP8[($663)];
      var $665=(($664)&255);
      $len=$665;
      var $666=$state;
      var $667=(($666+32)|0);
      var $668=HEAP32[(($667)>>2)];
      var $669=(($668)|0)!=0;
      if ($669) { label = 152; break; } else { label = 155; break; }
    case 152: 
      var $671=$state;
      var $672=(($671+32)|0);
      var $673=HEAP32[(($672)>>2)];
      var $674=(($673+28)|0);
      var $675=HEAP32[(($674)>>2)];
      var $676=(($675)|0)!=0;
      if ($676) { label = 153; break; } else { label = 155; break; }
    case 153: 
      var $678=$state;
      var $679=(($678+64)|0);
      var $680=HEAP32[(($679)>>2)];
      var $681=$state;
      var $682=(($681+32)|0);
      var $683=HEAP32[(($682)>>2)];
      var $684=(($683+32)|0);
      var $685=HEAP32[(($684)>>2)];
      var $686=(($680)>>>0) < (($685)>>>0);
      if ($686) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $688=$len;
      var $689=(($688) & 255);
      var $690=$state;
      var $691=(($690+64)|0);
      var $692=HEAP32[(($691)>>2)];
      var $693=((($692)+(1))|0);
      HEAP32[(($691)>>2)]=$693;
      var $694=$state;
      var $695=(($694+32)|0);
      var $696=HEAP32[(($695)>>2)];
      var $697=(($696+28)|0);
      var $698=HEAP32[(($697)>>2)];
      var $699=(($698+$692)|0);
      HEAP8[($699)]=$689;
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      var $702=$len;
      var $703=(($702)|0)!=0;
      if ($703) { label = 157; break; } else { var $709 = 0;label = 158; break; }
    case 157: 
      var $705=$copy;
      var $706=$have;
      var $707=(($705)>>>0) < (($706)>>>0);
      var $709 = $707;label = 158; break;
    case 158: 
      var $709;
      if ($709) { label = 151; break; } else { label = 159; break; }
    case 159: 
      var $711=$state;
      var $712=(($711+16)|0);
      var $713=HEAP32[(($712)>>2)];
      var $714=$713 & 512;
      var $715=(($714)|0)!=0;
      if ($715) { label = 160; break; } else { label = 161; break; }
    case 160: 
      var $717=$state;
      var $718=(($717+24)|0);
      var $719=HEAP32[(($718)>>2)];
      var $720=$next;
      var $721=$copy;
      var $722=_crc32($719, $720, $721);
      var $723=$state;
      var $724=(($723+24)|0);
      HEAP32[(($724)>>2)]=$722;
      label = 161; break;
    case 161: 
      var $726=$copy;
      var $727=$have;
      var $728=((($727)-($726))|0);
      $have=$728;
      var $729=$copy;
      var $730=$next;
      var $731=(($730+$729)|0);
      $next=$731;
      var $732=$len;
      var $733=(($732)|0)!=0;
      if ($733) { label = 162; break; } else { label = 163; break; }
    case 162: 
      label = 566; break;
    case 163: 
      label = 167; break;
    case 164: 
      var $737=$state;
      var $738=(($737+32)|0);
      var $739=HEAP32[(($738)>>2)];
      var $740=(($739)|0)!=0;
      if ($740) { label = 165; break; } else { label = 166; break; }
    case 165: 
      var $742=$state;
      var $743=(($742+32)|0);
      var $744=HEAP32[(($743)>>2)];
      var $745=(($744+28)|0);
      HEAP32[(($745)>>2)]=0;
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      var $748=$state;
      var $749=(($748+64)|0);
      HEAP32[(($749)>>2)]=0;
      var $750=$state;
      var $751=(($750)|0);
      HEAP32[(($751)>>2)]=7;
      label = 168; break;
    case 168: 
      var $753=$state;
      var $754=(($753+16)|0);
      var $755=HEAP32[(($754)>>2)];
      var $756=$755 & 4096;
      var $757=(($756)|0)!=0;
      if ($757) { label = 169; break; } else { label = 185; break; }
    case 169: 
      var $759=$have;
      var $760=(($759)|0)==0;
      if ($760) { label = 170; break; } else { label = 171; break; }
    case 170: 
      label = 566; break;
    case 171: 
      $copy=0;
      label = 172; break;
    case 172: 
      var $764=$copy;
      var $765=((($764)+(1))|0);
      $copy=$765;
      var $766=$next;
      var $767=(($766+$764)|0);
      var $768=HEAP8[($767)];
      var $769=(($768)&255);
      $len=$769;
      var $770=$state;
      var $771=(($770+32)|0);
      var $772=HEAP32[(($771)>>2)];
      var $773=(($772)|0)!=0;
      if ($773) { label = 173; break; } else { label = 176; break; }
    case 173: 
      var $775=$state;
      var $776=(($775+32)|0);
      var $777=HEAP32[(($776)>>2)];
      var $778=(($777+36)|0);
      var $779=HEAP32[(($778)>>2)];
      var $780=(($779)|0)!=0;
      if ($780) { label = 174; break; } else { label = 176; break; }
    case 174: 
      var $782=$state;
      var $783=(($782+64)|0);
      var $784=HEAP32[(($783)>>2)];
      var $785=$state;
      var $786=(($785+32)|0);
      var $787=HEAP32[(($786)>>2)];
      var $788=(($787+40)|0);
      var $789=HEAP32[(($788)>>2)];
      var $790=(($784)>>>0) < (($789)>>>0);
      if ($790) { label = 175; break; } else { label = 176; break; }
    case 175: 
      var $792=$len;
      var $793=(($792) & 255);
      var $794=$state;
      var $795=(($794+64)|0);
      var $796=HEAP32[(($795)>>2)];
      var $797=((($796)+(1))|0);
      HEAP32[(($795)>>2)]=$797;
      var $798=$state;
      var $799=(($798+32)|0);
      var $800=HEAP32[(($799)>>2)];
      var $801=(($800+36)|0);
      var $802=HEAP32[(($801)>>2)];
      var $803=(($802+$796)|0);
      HEAP8[($803)]=$793;
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      var $806=$len;
      var $807=(($806)|0)!=0;
      if ($807) { label = 178; break; } else { var $813 = 0;label = 179; break; }
    case 178: 
      var $809=$copy;
      var $810=$have;
      var $811=(($809)>>>0) < (($810)>>>0);
      var $813 = $811;label = 179; break;
    case 179: 
      var $813;
      if ($813) { label = 172; break; } else { label = 180; break; }
    case 180: 
      var $815=$state;
      var $816=(($815+16)|0);
      var $817=HEAP32[(($816)>>2)];
      var $818=$817 & 512;
      var $819=(($818)|0)!=0;
      if ($819) { label = 181; break; } else { label = 182; break; }
    case 181: 
      var $821=$state;
      var $822=(($821+24)|0);
      var $823=HEAP32[(($822)>>2)];
      var $824=$next;
      var $825=$copy;
      var $826=_crc32($823, $824, $825);
      var $827=$state;
      var $828=(($827+24)|0);
      HEAP32[(($828)>>2)]=$826;
      label = 182; break;
    case 182: 
      var $830=$copy;
      var $831=$have;
      var $832=((($831)-($830))|0);
      $have=$832;
      var $833=$copy;
      var $834=$next;
      var $835=(($834+$833)|0);
      $next=$835;
      var $836=$len;
      var $837=(($836)|0)!=0;
      if ($837) { label = 183; break; } else { label = 184; break; }
    case 183: 
      label = 566; break;
    case 184: 
      label = 188; break;
    case 185: 
      var $841=$state;
      var $842=(($841+32)|0);
      var $843=HEAP32[(($842)>>2)];
      var $844=(($843)|0)!=0;
      if ($844) { label = 186; break; } else { label = 187; break; }
    case 186: 
      var $846=$state;
      var $847=(($846+32)|0);
      var $848=HEAP32[(($847)>>2)];
      var $849=(($848+36)|0);
      HEAP32[(($849)>>2)]=0;
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      var $852=$state;
      var $853=(($852)|0);
      HEAP32[(($853)>>2)]=8;
      label = 189; break;
    case 189: 
      var $855=$state;
      var $856=(($855+16)|0);
      var $857=HEAP32[(($856)>>2)];
      var $858=$857 & 512;
      var $859=(($858)|0)!=0;
      if ($859) { label = 190; break; } else { label = 204; break; }
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      var $863=$bits;
      var $864=(($863)>>>0) < 16;
      if ($864) { label = 193; break; } else { label = 198; break; }
    case 193: 
      label = 194; break;
    case 194: 
      var $867=$have;
      var $868=(($867)|0)==0;
      if ($868) { label = 195; break; } else { label = 196; break; }
    case 195: 
      label = 566; break;
    case 196: 
      var $871=$have;
      var $872=((($871)-(1))|0);
      $have=$872;
      var $873=$next;
      var $874=(($873+1)|0);
      $next=$874;
      var $875=HEAP8[($873)];
      var $876=(($875)&255);
      var $877=$bits;
      var $878=$876 << $877;
      var $879=$hold;
      var $880=((($879)+($878))|0);
      $hold=$880;
      var $881=$bits;
      var $882=((($881)+(8))|0);
      $bits=$882;
      label = 197; break;
    case 197: 
      label = 192; break;
    case 198: 
      label = 199; break;
    case 199: 
      var $886=$hold;
      var $887=$state;
      var $888=(($887+24)|0);
      var $889=HEAP32[(($888)>>2)];
      var $890=$889 & 65535;
      var $891=(($886)|0)!=(($890)|0);
      if ($891) { label = 200; break; } else { label = 201; break; }
    case 200: 
      var $893=$2;
      var $894=(($893+24)|0);
      HEAP32[(($894)>>2)]=((5264624)|0);
      var $895=$state;
      var $896=(($895)|0);
      HEAP32[(($896)>>2)]=29;
      label = 565; break;
    case 201: 
      label = 202; break;
    case 202: 
      $hold=0;
      $bits=0;
      label = 203; break;
    case 203: 
      label = 204; break;
    case 204: 
      var $901=$state;
      var $902=(($901+32)|0);
      var $903=HEAP32[(($902)>>2)];
      var $904=(($903)|0)!=0;
      if ($904) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $906=$state;
      var $907=(($906+16)|0);
      var $908=HEAP32[(($907)>>2)];
      var $909=$908 >> 9;
      var $910=$909 & 1;
      var $911=$state;
      var $912=(($911+32)|0);
      var $913=HEAP32[(($912)>>2)];
      var $914=(($913+44)|0);
      HEAP32[(($914)>>2)]=$910;
      var $915=$state;
      var $916=(($915+32)|0);
      var $917=HEAP32[(($916)>>2)];
      var $918=(($917+48)|0);
      HEAP32[(($918)>>2)]=1;
      label = 206; break;
    case 206: 
      var $920=_crc32(0, 0, 0);
      var $921=$state;
      var $922=(($921+24)|0);
      HEAP32[(($922)>>2)]=$920;
      var $923=$2;
      var $924=(($923+48)|0);
      HEAP32[(($924)>>2)]=$920;
      var $925=$state;
      var $926=(($925)|0);
      HEAP32[(($926)>>2)]=11;
      label = 565; break;
    case 207: 
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      var $930=$bits;
      var $931=(($930)>>>0) < 32;
      if ($931) { label = 210; break; } else { label = 215; break; }
    case 210: 
      label = 211; break;
    case 211: 
      var $934=$have;
      var $935=(($934)|0)==0;
      if ($935) { label = 212; break; } else { label = 213; break; }
    case 212: 
      label = 566; break;
    case 213: 
      var $938=$have;
      var $939=((($938)-(1))|0);
      $have=$939;
      var $940=$next;
      var $941=(($940+1)|0);
      $next=$941;
      var $942=HEAP8[($940)];
      var $943=(($942)&255);
      var $944=$bits;
      var $945=$943 << $944;
      var $946=$hold;
      var $947=((($946)+($945))|0);
      $hold=$947;
      var $948=$bits;
      var $949=((($948)+(8))|0);
      $bits=$949;
      label = 214; break;
    case 214: 
      label = 209; break;
    case 215: 
      label = 216; break;
    case 216: 
      var $953=$hold;
      var $954=$953 >>> 24;
      var $955=$954 & 255;
      var $956=$hold;
      var $957=$956 >>> 8;
      var $958=$957 & 65280;
      var $959=((($955)+($958))|0);
      var $960=$hold;
      var $961=$960 & 65280;
      var $962=$961 << 8;
      var $963=((($959)+($962))|0);
      var $964=$hold;
      var $965=$964 & 255;
      var $966=$965 << 24;
      var $967=((($963)+($966))|0);
      var $968=$state;
      var $969=(($968+24)|0);
      HEAP32[(($969)>>2)]=$967;
      var $970=$2;
      var $971=(($970+48)|0);
      HEAP32[(($971)>>2)]=$967;
      label = 217; break;
    case 217: 
      $hold=0;
      $bits=0;
      label = 218; break;
    case 218: 
      var $974=$state;
      var $975=(($974)|0);
      HEAP32[(($975)>>2)]=10;
      label = 219; break;
    case 219: 
      var $977=$state;
      var $978=(($977+12)|0);
      var $979=HEAP32[(($978)>>2)];
      var $980=(($979)|0)==0;
      if ($980) { label = 220; break; } else { label = 223; break; }
    case 220: 
      label = 221; break;
    case 221: 
      var $983=$put;
      var $984=$2;
      var $985=(($984+12)|0);
      HEAP32[(($985)>>2)]=$983;
      var $986=$left;
      var $987=$2;
      var $988=(($987+16)|0);
      HEAP32[(($988)>>2)]=$986;
      var $989=$next;
      var $990=$2;
      var $991=(($990)|0);
      HEAP32[(($991)>>2)]=$989;
      var $992=$have;
      var $993=$2;
      var $994=(($993+4)|0);
      HEAP32[(($994)>>2)]=$992;
      var $995=$hold;
      var $996=$state;
      var $997=(($996+56)|0);
      HEAP32[(($997)>>2)]=$995;
      var $998=$bits;
      var $999=$state;
      var $1000=(($999+60)|0);
      HEAP32[(($1000)>>2)]=$998;
      label = 222; break;
    case 222: 
      $1=2;
      label = 590; break;
    case 223: 
      var $1003=_adler32(0, 0, 0);
      var $1004=$state;
      var $1005=(($1004+24)|0);
      HEAP32[(($1005)>>2)]=$1003;
      var $1006=$2;
      var $1007=(($1006+48)|0);
      HEAP32[(($1007)>>2)]=$1003;
      var $1008=$state;
      var $1009=(($1008)|0);
      HEAP32[(($1009)>>2)]=11;
      label = 224; break;
    case 224: 
      var $1011=$3;
      var $1012=(($1011)|0)==5;
      if ($1012) { label = 226; break; } else { label = 225; break; }
    case 225: 
      var $1014=$3;
      var $1015=(($1014)|0)==6;
      if ($1015) { label = 226; break; } else { label = 227; break; }
    case 226: 
      label = 566; break;
    case 227: 
      label = 228; break;
    case 228: 
      var $1019=$state;
      var $1020=(($1019+4)|0);
      var $1021=HEAP32[(($1020)>>2)];
      var $1022=(($1021)|0)!=0;
      if ($1022) { label = 229; break; } else { label = 232; break; }
    case 229: 
      label = 230; break;
    case 230: 
      var $1025=$bits;
      var $1026=$1025 & 7;
      var $1027=$hold;
      var $1028=$1027 >>> (($1026)>>>0);
      $hold=$1028;
      var $1029=$bits;
      var $1030=$1029 & 7;
      var $1031=$bits;
      var $1032=((($1031)-($1030))|0);
      $bits=$1032;
      label = 231; break;
    case 231: 
      var $1034=$state;
      var $1035=(($1034)|0);
      HEAP32[(($1035)>>2)]=26;
      label = 565; break;
    case 232: 
      label = 233; break;
    case 233: 
      label = 234; break;
    case 234: 
      var $1039=$bits;
      var $1040=(($1039)>>>0) < 3;
      if ($1040) { label = 235; break; } else { label = 240; break; }
    case 235: 
      label = 236; break;
    case 236: 
      var $1043=$have;
      var $1044=(($1043)|0)==0;
      if ($1044) { label = 237; break; } else { label = 238; break; }
    case 237: 
      label = 566; break;
    case 238: 
      var $1047=$have;
      var $1048=((($1047)-(1))|0);
      $have=$1048;
      var $1049=$next;
      var $1050=(($1049+1)|0);
      $next=$1050;
      var $1051=HEAP8[($1049)];
      var $1052=(($1051)&255);
      var $1053=$bits;
      var $1054=$1052 << $1053;
      var $1055=$hold;
      var $1056=((($1055)+($1054))|0);
      $hold=$1056;
      var $1057=$bits;
      var $1058=((($1057)+(8))|0);
      $bits=$1058;
      label = 239; break;
    case 239: 
      label = 234; break;
    case 240: 
      label = 241; break;
    case 241: 
      var $1062=$hold;
      var $1063=$1062 & 1;
      var $1064=$state;
      var $1065=(($1064+4)|0);
      HEAP32[(($1065)>>2)]=$1063;
      label = 242; break;
    case 242: 
      var $1067=$hold;
      var $1068=$1067 >>> 1;
      $hold=$1068;
      var $1069=$bits;
      var $1070=((($1069)-(1))|0);
      $bits=$1070;
      label = 243; break;
    case 243: 
      var $1072=$hold;
      var $1073=$1072 & 3;
      if ((($1073)|0) == 0) {
        label = 244; break;
      }
      else if ((($1073)|0) == 1) {
        label = 245; break;
      }
      else if ((($1073)|0) == 2) {
        label = 250; break;
      }
      else if ((($1073)|0) == 3) {
        label = 251; break;
      }
      else {
      label = 252; break;
      }
      
    case 244: 
      var $1075=$state;
      var $1076=(($1075)|0);
      HEAP32[(($1076)>>2)]=13;
      label = 252; break;
    case 245: 
      var $1078=$state;
      _fixedtables($1078);
      var $1079=$state;
      var $1080=(($1079)|0);
      HEAP32[(($1080)>>2)]=19;
      var $1081=$3;
      var $1082=(($1081)|0)==6;
      if ($1082) { label = 246; break; } else { label = 249; break; }
    case 246: 
      label = 247; break;
    case 247: 
      var $1085=$hold;
      var $1086=$1085 >>> 2;
      $hold=$1086;
      var $1087=$bits;
      var $1088=((($1087)-(2))|0);
      $bits=$1088;
      label = 248; break;
    case 248: 
      label = 566; break;
    case 249: 
      label = 252; break;
    case 250: 
      var $1092=$state;
      var $1093=(($1092)|0);
      HEAP32[(($1093)>>2)]=16;
      label = 252; break;
    case 251: 
      var $1095=$2;
      var $1096=(($1095+24)|0);
      HEAP32[(($1096)>>2)]=((5263552)|0);
      var $1097=$state;
      var $1098=(($1097)|0);
      HEAP32[(($1098)>>2)]=29;
      label = 252; break;
    case 252: 
      label = 253; break;
    case 253: 
      var $1101=$hold;
      var $1102=$1101 >>> 2;
      $hold=$1102;
      var $1103=$bits;
      var $1104=((($1103)-(2))|0);
      $bits=$1104;
      label = 254; break;
    case 254: 
      label = 565; break;
    case 255: 
      label = 256; break;
    case 256: 
      var $1108=$bits;
      var $1109=$1108 & 7;
      var $1110=$hold;
      var $1111=$1110 >>> (($1109)>>>0);
      $hold=$1111;
      var $1112=$bits;
      var $1113=$1112 & 7;
      var $1114=$bits;
      var $1115=((($1114)-($1113))|0);
      $bits=$1115;
      label = 257; break;
    case 257: 
      label = 258; break;
    case 258: 
      label = 259; break;
    case 259: 
      var $1119=$bits;
      var $1120=(($1119)>>>0) < 32;
      if ($1120) { label = 260; break; } else { label = 265; break; }
    case 260: 
      label = 261; break;
    case 261: 
      var $1123=$have;
      var $1124=(($1123)|0)==0;
      if ($1124) { label = 262; break; } else { label = 263; break; }
    case 262: 
      label = 566; break;
    case 263: 
      var $1127=$have;
      var $1128=((($1127)-(1))|0);
      $have=$1128;
      var $1129=$next;
      var $1130=(($1129+1)|0);
      $next=$1130;
      var $1131=HEAP8[($1129)];
      var $1132=(($1131)&255);
      var $1133=$bits;
      var $1134=$1132 << $1133;
      var $1135=$hold;
      var $1136=((($1135)+($1134))|0);
      $hold=$1136;
      var $1137=$bits;
      var $1138=((($1137)+(8))|0);
      $bits=$1138;
      label = 264; break;
    case 264: 
      label = 259; break;
    case 265: 
      label = 266; break;
    case 266: 
      var $1142=$hold;
      var $1143=$1142 & 65535;
      var $1144=$hold;
      var $1145=$1144 >>> 16;
      var $1146=$1145 ^ 65535;
      var $1147=(($1143)|0)!=(($1146)|0);
      if ($1147) { label = 267; break; } else { label = 268; break; }
    case 267: 
      var $1149=$2;
      var $1150=(($1149+24)|0);
      HEAP32[(($1150)>>2)]=((5262452)|0);
      var $1151=$state;
      var $1152=(($1151)|0);
      HEAP32[(($1152)>>2)]=29;
      label = 565; break;
    case 268: 
      var $1154=$hold;
      var $1155=$1154 & 65535;
      var $1156=$state;
      var $1157=(($1156+64)|0);
      HEAP32[(($1157)>>2)]=$1155;
      label = 269; break;
    case 269: 
      $hold=0;
      $bits=0;
      label = 270; break;
    case 270: 
      var $1160=$state;
      var $1161=(($1160)|0);
      HEAP32[(($1161)>>2)]=14;
      var $1162=$3;
      var $1163=(($1162)|0)==6;
      if ($1163) { label = 271; break; } else { label = 272; break; }
    case 271: 
      label = 566; break;
    case 272: 
      label = 273; break;
    case 273: 
      var $1167=$state;
      var $1168=(($1167)|0);
      HEAP32[(($1168)>>2)]=15;
      label = 274; break;
    case 274: 
      var $1170=$state;
      var $1171=(($1170+64)|0);
      var $1172=HEAP32[(($1171)>>2)];
      $copy=$1172;
      var $1173=$copy;
      var $1174=(($1173)|0)!=0;
      if ($1174) { label = 275; break; } else { label = 282; break; }
    case 275: 
      var $1176=$copy;
      var $1177=$have;
      var $1178=(($1176)>>>0) > (($1177)>>>0);
      if ($1178) { label = 276; break; } else { label = 277; break; }
    case 276: 
      var $1180=$have;
      $copy=$1180;
      label = 277; break;
    case 277: 
      var $1182=$copy;
      var $1183=$left;
      var $1184=(($1182)>>>0) > (($1183)>>>0);
      if ($1184) { label = 278; break; } else { label = 279; break; }
    case 278: 
      var $1186=$left;
      $copy=$1186;
      label = 279; break;
    case 279: 
      var $1188=$copy;
      var $1189=(($1188)|0)==0;
      if ($1189) { label = 280; break; } else { label = 281; break; }
    case 280: 
      label = 566; break;
    case 281: 
      var $1192=$put;
      var $1193=$next;
      var $1194=$copy;
      assert($1194 % 1 === 0);_memcpy($1192, $1193, $1194);
      var $1195=$copy;
      var $1196=$have;
      var $1197=((($1196)-($1195))|0);
      $have=$1197;
      var $1198=$copy;
      var $1199=$next;
      var $1200=(($1199+$1198)|0);
      $next=$1200;
      var $1201=$copy;
      var $1202=$left;
      var $1203=((($1202)-($1201))|0);
      $left=$1203;
      var $1204=$copy;
      var $1205=$put;
      var $1206=(($1205+$1204)|0);
      $put=$1206;
      var $1207=$copy;
      var $1208=$state;
      var $1209=(($1208+64)|0);
      var $1210=HEAP32[(($1209)>>2)];
      var $1211=((($1210)-($1207))|0);
      HEAP32[(($1209)>>2)]=$1211;
      label = 565; break;
    case 282: 
      var $1213=$state;
      var $1214=(($1213)|0);
      HEAP32[(($1214)>>2)]=11;
      label = 565; break;
    case 283: 
      label = 284; break;
    case 284: 
      label = 285; break;
    case 285: 
      var $1218=$bits;
      var $1219=(($1218)>>>0) < 14;
      if ($1219) { label = 286; break; } else { label = 291; break; }
    case 286: 
      label = 287; break;
    case 287: 
      var $1222=$have;
      var $1223=(($1222)|0)==0;
      if ($1223) { label = 288; break; } else { label = 289; break; }
    case 288: 
      label = 566; break;
    case 289: 
      var $1226=$have;
      var $1227=((($1226)-(1))|0);
      $have=$1227;
      var $1228=$next;
      var $1229=(($1228+1)|0);
      $next=$1229;
      var $1230=HEAP8[($1228)];
      var $1231=(($1230)&255);
      var $1232=$bits;
      var $1233=$1231 << $1232;
      var $1234=$hold;
      var $1235=((($1234)+($1233))|0);
      $hold=$1235;
      var $1236=$bits;
      var $1237=((($1236)+(8))|0);
      $bits=$1237;
      label = 290; break;
    case 290: 
      label = 285; break;
    case 291: 
      label = 292; break;
    case 292: 
      var $1241=$hold;
      var $1242=$1241 & 31;
      var $1243=((($1242)+(257))|0);
      var $1244=$state;
      var $1245=(($1244+96)|0);
      HEAP32[(($1245)>>2)]=$1243;
      label = 293; break;
    case 293: 
      var $1247=$hold;
      var $1248=$1247 >>> 5;
      $hold=$1248;
      var $1249=$bits;
      var $1250=((($1249)-(5))|0);
      $bits=$1250;
      label = 294; break;
    case 294: 
      var $1252=$hold;
      var $1253=$1252 & 31;
      var $1254=((($1253)+(1))|0);
      var $1255=$state;
      var $1256=(($1255+100)|0);
      HEAP32[(($1256)>>2)]=$1254;
      label = 295; break;
    case 295: 
      var $1258=$hold;
      var $1259=$1258 >>> 5;
      $hold=$1259;
      var $1260=$bits;
      var $1261=((($1260)-(5))|0);
      $bits=$1261;
      label = 296; break;
    case 296: 
      var $1263=$hold;
      var $1264=$1263 & 15;
      var $1265=((($1264)+(4))|0);
      var $1266=$state;
      var $1267=(($1266+92)|0);
      HEAP32[(($1267)>>2)]=$1265;
      label = 297; break;
    case 297: 
      var $1269=$hold;
      var $1270=$1269 >>> 4;
      $hold=$1270;
      var $1271=$bits;
      var $1272=((($1271)-(4))|0);
      $bits=$1272;
      label = 298; break;
    case 298: 
      var $1274=$state;
      var $1275=(($1274+96)|0);
      var $1276=HEAP32[(($1275)>>2)];
      var $1277=(($1276)>>>0) > 286;
      if ($1277) { label = 300; break; } else { label = 299; break; }
    case 299: 
      var $1279=$state;
      var $1280=(($1279+100)|0);
      var $1281=HEAP32[(($1280)>>2)];
      var $1282=(($1281)>>>0) > 30;
      if ($1282) { label = 300; break; } else { label = 301; break; }
    case 300: 
      var $1284=$2;
      var $1285=(($1284+24)|0);
      HEAP32[(($1285)>>2)]=((5261588)|0);
      var $1286=$state;
      var $1287=(($1286)|0);
      HEAP32[(($1287)>>2)]=29;
      label = 565; break;
    case 301: 
      var $1289=$state;
      var $1290=(($1289+104)|0);
      HEAP32[(($1290)>>2)]=0;
      var $1291=$state;
      var $1292=(($1291)|0);
      HEAP32[(($1292)>>2)]=17;
      label = 302; break;
    case 302: 
      label = 303; break;
    case 303: 
      var $1295=$state;
      var $1296=(($1295+104)|0);
      var $1297=HEAP32[(($1296)>>2)];
      var $1298=$state;
      var $1299=(($1298+92)|0);
      var $1300=HEAP32[(($1299)>>2)];
      var $1301=(($1297)>>>0) < (($1300)>>>0);
      if ($1301) { label = 304; break; } else { label = 316; break; }
    case 304: 
      label = 305; break;
    case 305: 
      label = 306; break;
    case 306: 
      var $1305=$bits;
      var $1306=(($1305)>>>0) < 3;
      if ($1306) { label = 307; break; } else { label = 312; break; }
    case 307: 
      label = 308; break;
    case 308: 
      var $1309=$have;
      var $1310=(($1309)|0)==0;
      if ($1310) { label = 309; break; } else { label = 310; break; }
    case 309: 
      label = 566; break;
    case 310: 
      var $1313=$have;
      var $1314=((($1313)-(1))|0);
      $have=$1314;
      var $1315=$next;
      var $1316=(($1315+1)|0);
      $next=$1316;
      var $1317=HEAP8[($1315)];
      var $1318=(($1317)&255);
      var $1319=$bits;
      var $1320=$1318 << $1319;
      var $1321=$hold;
      var $1322=((($1321)+($1320))|0);
      $hold=$1322;
      var $1323=$bits;
      var $1324=((($1323)+(8))|0);
      $bits=$1324;
      label = 311; break;
    case 311: 
      label = 306; break;
    case 312: 
      label = 313; break;
    case 313: 
      var $1328=$hold;
      var $1329=$1328 & 7;
      var $1330=(($1329) & 65535);
      var $1331=$state;
      var $1332=(($1331+104)|0);
      var $1333=HEAP32[(($1332)>>2)];
      var $1334=((($1333)+(1))|0);
      HEAP32[(($1332)>>2)]=$1334;
      var $1335=((5247364+($1333<<1))|0);
      var $1336=HEAP16[(($1335)>>1)];
      var $1337=(($1336)&65535);
      var $1338=$state;
      var $1339=(($1338+112)|0);
      var $1340=(($1339+($1337<<1))|0);
      HEAP16[(($1340)>>1)]=$1330;
      label = 314; break;
    case 314: 
      var $1342=$hold;
      var $1343=$1342 >>> 3;
      $hold=$1343;
      var $1344=$bits;
      var $1345=((($1344)-(3))|0);
      $bits=$1345;
      label = 315; break;
    case 315: 
      label = 303; break;
    case 316: 
      label = 317; break;
    case 317: 
      var $1349=$state;
      var $1350=(($1349+104)|0);
      var $1351=HEAP32[(($1350)>>2)];
      var $1352=(($1351)>>>0) < 19;
      if ($1352) { label = 318; break; } else { label = 319; break; }
    case 318: 
      var $1354=$state;
      var $1355=(($1354+104)|0);
      var $1356=HEAP32[(($1355)>>2)];
      var $1357=((($1356)+(1))|0);
      HEAP32[(($1355)>>2)]=$1357;
      var $1358=((5247364+($1356<<1))|0);
      var $1359=HEAP16[(($1358)>>1)];
      var $1360=(($1359)&65535);
      var $1361=$state;
      var $1362=(($1361+112)|0);
      var $1363=(($1362+($1360<<1))|0);
      HEAP16[(($1363)>>1)]=0;
      label = 317; break;
    case 319: 
      var $1365=$state;
      var $1366=(($1365+1328)|0);
      var $1367=(($1366)|0);
      var $1368=$state;
      var $1369=(($1368+108)|0);
      HEAP32[(($1369)>>2)]=$1367;
      var $1370=$state;
      var $1371=(($1370+108)|0);
      var $1372=HEAP32[(($1371)>>2)];
      var $1373=$state;
      var $1374=(($1373+76)|0);
      HEAP32[(($1374)>>2)]=$1372;
      var $1375=$state;
      var $1376=(($1375+84)|0);
      HEAP32[(($1376)>>2)]=7;
      var $1377=$state;
      var $1378=(($1377+112)|0);
      var $1379=(($1378)|0);
      var $1380=$state;
      var $1381=(($1380+108)|0);
      var $1382=$state;
      var $1383=(($1382+84)|0);
      var $1384=$state;
      var $1385=(($1384+752)|0);
      var $1386=(($1385)|0);
      var $1387=_inflate_table(0, $1379, 19, $1381, $1383, $1386);
      $ret=$1387;
      var $1388=$ret;
      var $1389=(($1388)|0)!=0;
      if ($1389) { label = 320; break; } else { label = 321; break; }
    case 320: 
      var $1391=$2;
      var $1392=(($1391+24)|0);
      HEAP32[(($1392)>>2)]=((5260708)|0);
      var $1393=$state;
      var $1394=(($1393)|0);
      HEAP32[(($1394)>>2)]=29;
      label = 565; break;
    case 321: 
      var $1396=$state;
      var $1397=(($1396+104)|0);
      HEAP32[(($1397)>>2)]=0;
      var $1398=$state;
      var $1399=(($1398)|0);
      HEAP32[(($1399)>>2)]=18;
      label = 322; break;
    case 322: 
      label = 323; break;
    case 323: 
      var $1402=$state;
      var $1403=(($1402+104)|0);
      var $1404=HEAP32[(($1403)>>2)];
      var $1405=$state;
      var $1406=(($1405+96)|0);
      var $1407=HEAP32[(($1406)>>2)];
      var $1408=$state;
      var $1409=(($1408+100)|0);
      var $1410=HEAP32[(($1409)>>2)];
      var $1411=((($1407)+($1410))|0);
      var $1412=(($1404)>>>0) < (($1411)>>>0);
      if ($1412) { label = 324; break; } else { label = 390; break; }
    case 324: 
      label = 325; break;
    case 325: 
      var $1415=$hold;
      var $1416=$state;
      var $1417=(($1416+84)|0);
      var $1418=HEAP32[(($1417)>>2)];
      var $1419=1 << $1418;
      var $1420=((($1419)-(1))|0);
      var $1421=$1415 & $1420;
      var $1422=$state;
      var $1423=(($1422+76)|0);
      var $1424=HEAP32[(($1423)>>2)];
      var $1425=(($1424+($1421<<2))|0);
      var $1426=$here;
      var $1427=$1425;
      assert(4 % 1 === 0);HEAP16[(($1426)>>1)]=HEAP16[(($1427)>>1)];HEAP16[((($1426)+(2))>>1)]=HEAP16[((($1427)+(2))>>1)];
      var $1428=(($here+1)|0);
      var $1429=HEAP8[($1428)];
      var $1430=(($1429)&255);
      var $1431=$bits;
      var $1432=(($1430)>>>0) <= (($1431)>>>0);
      if ($1432) { label = 326; break; } else { label = 327; break; }
    case 326: 
      label = 332; break;
    case 327: 
      label = 328; break;
    case 328: 
      var $1436=$have;
      var $1437=(($1436)|0)==0;
      if ($1437) { label = 329; break; } else { label = 330; break; }
    case 329: 
      label = 566; break;
    case 330: 
      var $1440=$have;
      var $1441=((($1440)-(1))|0);
      $have=$1441;
      var $1442=$next;
      var $1443=(($1442+1)|0);
      $next=$1443;
      var $1444=HEAP8[($1442)];
      var $1445=(($1444)&255);
      var $1446=$bits;
      var $1447=$1445 << $1446;
      var $1448=$hold;
      var $1449=((($1448)+($1447))|0);
      $hold=$1449;
      var $1450=$bits;
      var $1451=((($1450)+(8))|0);
      $bits=$1451;
      label = 331; break;
    case 331: 
      label = 325; break;
    case 332: 
      var $1454=(($here+2)|0);
      var $1455=HEAP16[(($1454)>>1)];
      var $1456=(($1455)&65535);
      var $1457=(($1456)|0) < 16;
      if ($1457) { label = 333; break; } else { label = 336; break; }
    case 333: 
      label = 334; break;
    case 334: 
      var $1460=(($here+1)|0);
      var $1461=HEAP8[($1460)];
      var $1462=(($1461)&255);
      var $1463=$hold;
      var $1464=$1463 >>> (($1462)>>>0);
      $hold=$1464;
      var $1465=(($here+1)|0);
      var $1466=HEAP8[($1465)];
      var $1467=(($1466)&255);
      var $1468=$bits;
      var $1469=((($1468)-($1467))|0);
      $bits=$1469;
      label = 335; break;
    case 335: 
      var $1471=(($here+2)|0);
      var $1472=HEAP16[(($1471)>>1)];
      var $1473=$state;
      var $1474=(($1473+104)|0);
      var $1475=HEAP32[(($1474)>>2)];
      var $1476=((($1475)+(1))|0);
      HEAP32[(($1474)>>2)]=$1476;
      var $1477=$state;
      var $1478=(($1477+112)|0);
      var $1479=(($1478+($1475<<1))|0);
      HEAP16[(($1479)>>1)]=$1472;
      label = 389; break;
    case 336: 
      var $1481=(($here+2)|0);
      var $1482=HEAP16[(($1481)>>1)];
      var $1483=(($1482)&65535);
      var $1484=(($1483)|0)==16;
      if ($1484) { label = 337; break; } else { label = 353; break; }
    case 337: 
      label = 338; break;
    case 338: 
      label = 339; break;
    case 339: 
      var $1488=$bits;
      var $1489=(($here+1)|0);
      var $1490=HEAP8[($1489)];
      var $1491=(($1490)&255);
      var $1492=((($1491)+(2))|0);
      var $1493=(($1488)>>>0) < (($1492)>>>0);
      if ($1493) { label = 340; break; } else { label = 345; break; }
    case 340: 
      label = 341; break;
    case 341: 
      var $1496=$have;
      var $1497=(($1496)|0)==0;
      if ($1497) { label = 342; break; } else { label = 343; break; }
    case 342: 
      label = 566; break;
    case 343: 
      var $1500=$have;
      var $1501=((($1500)-(1))|0);
      $have=$1501;
      var $1502=$next;
      var $1503=(($1502+1)|0);
      $next=$1503;
      var $1504=HEAP8[($1502)];
      var $1505=(($1504)&255);
      var $1506=$bits;
      var $1507=$1505 << $1506;
      var $1508=$hold;
      var $1509=((($1508)+($1507))|0);
      $hold=$1509;
      var $1510=$bits;
      var $1511=((($1510)+(8))|0);
      $bits=$1511;
      label = 344; break;
    case 344: 
      label = 339; break;
    case 345: 
      label = 346; break;
    case 346: 
      label = 347; break;
    case 347: 
      var $1516=(($here+1)|0);
      var $1517=HEAP8[($1516)];
      var $1518=(($1517)&255);
      var $1519=$hold;
      var $1520=$1519 >>> (($1518)>>>0);
      $hold=$1520;
      var $1521=(($here+1)|0);
      var $1522=HEAP8[($1521)];
      var $1523=(($1522)&255);
      var $1524=$bits;
      var $1525=((($1524)-($1523))|0);
      $bits=$1525;
      label = 348; break;
    case 348: 
      var $1527=$state;
      var $1528=(($1527+104)|0);
      var $1529=HEAP32[(($1528)>>2)];
      var $1530=(($1529)|0)==0;
      if ($1530) { label = 349; break; } else { label = 350; break; }
    case 349: 
      var $1532=$2;
      var $1533=(($1532+24)|0);
      HEAP32[(($1533)>>2)]=((5273172)|0);
      var $1534=$state;
      var $1535=(($1534)|0);
      HEAP32[(($1535)>>2)]=29;
      label = 390; break;
    case 350: 
      var $1537=$state;
      var $1538=(($1537+104)|0);
      var $1539=HEAP32[(($1538)>>2)];
      var $1540=((($1539)-(1))|0);
      var $1541=$state;
      var $1542=(($1541+112)|0);
      var $1543=(($1542+($1540<<1))|0);
      var $1544=HEAP16[(($1543)>>1)];
      var $1545=(($1544)&65535);
      $len=$1545;
      var $1546=$hold;
      var $1547=$1546 & 3;
      var $1548=((($1547)+(3))|0);
      $copy=$1548;
      label = 351; break;
    case 351: 
      var $1550=$hold;
      var $1551=$1550 >>> 2;
      $hold=$1551;
      var $1552=$bits;
      var $1553=((($1552)-(2))|0);
      $bits=$1553;
      label = 352; break;
    case 352: 
      label = 383; break;
    case 353: 
      var $1556=(($here+2)|0);
      var $1557=HEAP16[(($1556)>>1)];
      var $1558=(($1557)&65535);
      var $1559=(($1558)|0)==17;
      if ($1559) { label = 354; break; } else { label = 368; break; }
    case 354: 
      label = 355; break;
    case 355: 
      label = 356; break;
    case 356: 
      var $1563=$bits;
      var $1564=(($here+1)|0);
      var $1565=HEAP8[($1564)];
      var $1566=(($1565)&255);
      var $1567=((($1566)+(3))|0);
      var $1568=(($1563)>>>0) < (($1567)>>>0);
      if ($1568) { label = 357; break; } else { label = 362; break; }
    case 357: 
      label = 358; break;
    case 358: 
      var $1571=$have;
      var $1572=(($1571)|0)==0;
      if ($1572) { label = 359; break; } else { label = 360; break; }
    case 359: 
      label = 566; break;
    case 360: 
      var $1575=$have;
      var $1576=((($1575)-(1))|0);
      $have=$1576;
      var $1577=$next;
      var $1578=(($1577+1)|0);
      $next=$1578;
      var $1579=HEAP8[($1577)];
      var $1580=(($1579)&255);
      var $1581=$bits;
      var $1582=$1580 << $1581;
      var $1583=$hold;
      var $1584=((($1583)+($1582))|0);
      $hold=$1584;
      var $1585=$bits;
      var $1586=((($1585)+(8))|0);
      $bits=$1586;
      label = 361; break;
    case 361: 
      label = 356; break;
    case 362: 
      label = 363; break;
    case 363: 
      label = 364; break;
    case 364: 
      var $1591=(($here+1)|0);
      var $1592=HEAP8[($1591)];
      var $1593=(($1592)&255);
      var $1594=$hold;
      var $1595=$1594 >>> (($1593)>>>0);
      $hold=$1595;
      var $1596=(($here+1)|0);
      var $1597=HEAP8[($1596)];
      var $1598=(($1597)&255);
      var $1599=$bits;
      var $1600=((($1599)-($1598))|0);
      $bits=$1600;
      label = 365; break;
    case 365: 
      $len=0;
      var $1602=$hold;
      var $1603=$1602 & 7;
      var $1604=((($1603)+(3))|0);
      $copy=$1604;
      label = 366; break;
    case 366: 
      var $1606=$hold;
      var $1607=$1606 >>> 3;
      $hold=$1607;
      var $1608=$bits;
      var $1609=((($1608)-(3))|0);
      $bits=$1609;
      label = 367; break;
    case 367: 
      label = 382; break;
    case 368: 
      label = 369; break;
    case 369: 
      label = 370; break;
    case 370: 
      var $1614=$bits;
      var $1615=(($here+1)|0);
      var $1616=HEAP8[($1615)];
      var $1617=(($1616)&255);
      var $1618=((($1617)+(7))|0);
      var $1619=(($1614)>>>0) < (($1618)>>>0);
      if ($1619) { label = 371; break; } else { label = 376; break; }
    case 371: 
      label = 372; break;
    case 372: 
      var $1622=$have;
      var $1623=(($1622)|0)==0;
      if ($1623) { label = 373; break; } else { label = 374; break; }
    case 373: 
      label = 566; break;
    case 374: 
      var $1626=$have;
      var $1627=((($1626)-(1))|0);
      $have=$1627;
      var $1628=$next;
      var $1629=(($1628+1)|0);
      $next=$1629;
      var $1630=HEAP8[($1628)];
      var $1631=(($1630)&255);
      var $1632=$bits;
      var $1633=$1631 << $1632;
      var $1634=$hold;
      var $1635=((($1634)+($1633))|0);
      $hold=$1635;
      var $1636=$bits;
      var $1637=((($1636)+(8))|0);
      $bits=$1637;
      label = 375; break;
    case 375: 
      label = 370; break;
    case 376: 
      label = 377; break;
    case 377: 
      label = 378; break;
    case 378: 
      var $1642=(($here+1)|0);
      var $1643=HEAP8[($1642)];
      var $1644=(($1643)&255);
      var $1645=$hold;
      var $1646=$1645 >>> (($1644)>>>0);
      $hold=$1646;
      var $1647=(($here+1)|0);
      var $1648=HEAP8[($1647)];
      var $1649=(($1648)&255);
      var $1650=$bits;
      var $1651=((($1650)-($1649))|0);
      $bits=$1651;
      label = 379; break;
    case 379: 
      $len=0;
      var $1653=$hold;
      var $1654=$1653 & 127;
      var $1655=((($1654)+(11))|0);
      $copy=$1655;
      label = 380; break;
    case 380: 
      var $1657=$hold;
      var $1658=$1657 >>> 7;
      $hold=$1658;
      var $1659=$bits;
      var $1660=((($1659)-(7))|0);
      $bits=$1660;
      label = 381; break;
    case 381: 
      label = 382; break;
    case 382: 
      label = 383; break;
    case 383: 
      var $1664=$state;
      var $1665=(($1664+104)|0);
      var $1666=HEAP32[(($1665)>>2)];
      var $1667=$copy;
      var $1668=((($1666)+($1667))|0);
      var $1669=$state;
      var $1670=(($1669+96)|0);
      var $1671=HEAP32[(($1670)>>2)];
      var $1672=$state;
      var $1673=(($1672+100)|0);
      var $1674=HEAP32[(($1673)>>2)];
      var $1675=((($1671)+($1674))|0);
      var $1676=(($1668)>>>0) > (($1675)>>>0);
      if ($1676) { label = 384; break; } else { label = 385; break; }
    case 384: 
      var $1678=$2;
      var $1679=(($1678+24)|0);
      HEAP32[(($1679)>>2)]=((5273172)|0);
      var $1680=$state;
      var $1681=(($1680)|0);
      HEAP32[(($1681)>>2)]=29;
      label = 390; break;
    case 385: 
      label = 386; break;
    case 386: 
      var $1684=$copy;
      var $1685=((($1684)-(1))|0);
      $copy=$1685;
      var $1686=(($1684)|0)!=0;
      if ($1686) { label = 387; break; } else { label = 388; break; }
    case 387: 
      var $1688=$len;
      var $1689=(($1688) & 65535);
      var $1690=$state;
      var $1691=(($1690+104)|0);
      var $1692=HEAP32[(($1691)>>2)];
      var $1693=((($1692)+(1))|0);
      HEAP32[(($1691)>>2)]=$1693;
      var $1694=$state;
      var $1695=(($1694+112)|0);
      var $1696=(($1695+($1692<<1))|0);
      HEAP16[(($1696)>>1)]=$1689;
      label = 386; break;
    case 388: 
      label = 389; break;
    case 389: 
      label = 323; break;
    case 390: 
      var $1700=$state;
      var $1701=(($1700)|0);
      var $1702=HEAP32[(($1701)>>2)];
      var $1703=(($1702)|0)==29;
      if ($1703) { label = 391; break; } else { label = 392; break; }
    case 391: 
      label = 565; break;
    case 392: 
      var $1706=$state;
      var $1707=(($1706+112)|0);
      var $1708=(($1707+512)|0);
      var $1709=HEAP16[(($1708)>>1)];
      var $1710=(($1709)&65535);
      var $1711=(($1710)|0)==0;
      if ($1711) { label = 393; break; } else { label = 394; break; }
    case 393: 
      var $1713=$2;
      var $1714=(($1713+24)|0);
      HEAP32[(($1714)>>2)]=((5272456)|0);
      var $1715=$state;
      var $1716=(($1715)|0);
      HEAP32[(($1716)>>2)]=29;
      label = 565; break;
    case 394: 
      var $1718=$state;
      var $1719=(($1718+1328)|0);
      var $1720=(($1719)|0);
      var $1721=$state;
      var $1722=(($1721+108)|0);
      HEAP32[(($1722)>>2)]=$1720;
      var $1723=$state;
      var $1724=(($1723+108)|0);
      var $1725=HEAP32[(($1724)>>2)];
      var $1726=$state;
      var $1727=(($1726+76)|0);
      HEAP32[(($1727)>>2)]=$1725;
      var $1728=$state;
      var $1729=(($1728+84)|0);
      HEAP32[(($1729)>>2)]=9;
      var $1730=$state;
      var $1731=(($1730+112)|0);
      var $1732=(($1731)|0);
      var $1733=$state;
      var $1734=(($1733+96)|0);
      var $1735=HEAP32[(($1734)>>2)];
      var $1736=$state;
      var $1737=(($1736+108)|0);
      var $1738=$state;
      var $1739=(($1738+84)|0);
      var $1740=$state;
      var $1741=(($1740+752)|0);
      var $1742=(($1741)|0);
      var $1743=_inflate_table(1, $1732, $1735, $1737, $1739, $1742);
      $ret=$1743;
      var $1744=$ret;
      var $1745=(($1744)|0)!=0;
      if ($1745) { label = 395; break; } else { label = 396; break; }
    case 395: 
      var $1747=$2;
      var $1748=(($1747+24)|0);
      HEAP32[(($1748)>>2)]=((5271944)|0);
      var $1749=$state;
      var $1750=(($1749)|0);
      HEAP32[(($1750)>>2)]=29;
      label = 565; break;
    case 396: 
      var $1752=$state;
      var $1753=(($1752+108)|0);
      var $1754=HEAP32[(($1753)>>2)];
      var $1755=$state;
      var $1756=(($1755+80)|0);
      HEAP32[(($1756)>>2)]=$1754;
      var $1757=$state;
      var $1758=(($1757+88)|0);
      HEAP32[(($1758)>>2)]=6;
      var $1759=$state;
      var $1760=(($1759+112)|0);
      var $1761=(($1760)|0);
      var $1762=$state;
      var $1763=(($1762+96)|0);
      var $1764=HEAP32[(($1763)>>2)];
      var $1765=(($1761+($1764<<1))|0);
      var $1766=$state;
      var $1767=(($1766+100)|0);
      var $1768=HEAP32[(($1767)>>2)];
      var $1769=$state;
      var $1770=(($1769+108)|0);
      var $1771=$state;
      var $1772=(($1771+88)|0);
      var $1773=$state;
      var $1774=(($1773+752)|0);
      var $1775=(($1774)|0);
      var $1776=_inflate_table(2, $1765, $1768, $1770, $1772, $1775);
      $ret=$1776;
      var $1777=$ret;
      var $1778=(($1777)|0)!=0;
      if ($1778) { label = 397; break; } else { label = 398; break; }
    case 397: 
      var $1780=$2;
      var $1781=(($1780+24)|0);
      HEAP32[(($1781)>>2)]=((5271528)|0);
      var $1782=$state;
      var $1783=(($1782)|0);
      HEAP32[(($1783)>>2)]=29;
      label = 565; break;
    case 398: 
      var $1785=$state;
      var $1786=(($1785)|0);
      HEAP32[(($1786)>>2)]=19;
      var $1787=$3;
      var $1788=(($1787)|0)==6;
      if ($1788) { label = 399; break; } else { label = 400; break; }
    case 399: 
      label = 566; break;
    case 400: 
      label = 401; break;
    case 401: 
      var $1792=$state;
      var $1793=(($1792)|0);
      HEAP32[(($1793)>>2)]=20;
      label = 402; break;
    case 402: 
      var $1795=$have;
      var $1796=(($1795)>>>0) >= 6;
      if ($1796) { label = 403; break; } else { label = 411; break; }
    case 403: 
      var $1798=$left;
      var $1799=(($1798)>>>0) >= 258;
      if ($1799) { label = 404; break; } else { label = 411; break; }
    case 404: 
      label = 405; break;
    case 405: 
      var $1802=$put;
      var $1803=$2;
      var $1804=(($1803+12)|0);
      HEAP32[(($1804)>>2)]=$1802;
      var $1805=$left;
      var $1806=$2;
      var $1807=(($1806+16)|0);
      HEAP32[(($1807)>>2)]=$1805;
      var $1808=$next;
      var $1809=$2;
      var $1810=(($1809)|0);
      HEAP32[(($1810)>>2)]=$1808;
      var $1811=$have;
      var $1812=$2;
      var $1813=(($1812+4)|0);
      HEAP32[(($1813)>>2)]=$1811;
      var $1814=$hold;
      var $1815=$state;
      var $1816=(($1815+56)|0);
      HEAP32[(($1816)>>2)]=$1814;
      var $1817=$bits;
      var $1818=$state;
      var $1819=(($1818+60)|0);
      HEAP32[(($1819)>>2)]=$1817;
      label = 406; break;
    case 406: 
      var $1821=$2;
      var $1822=$out;
      _inflate_fast($1821, $1822);
      label = 407; break;
    case 407: 
      var $1824=$2;
      var $1825=(($1824+12)|0);
      var $1826=HEAP32[(($1825)>>2)];
      $put=$1826;
      var $1827=$2;
      var $1828=(($1827+16)|0);
      var $1829=HEAP32[(($1828)>>2)];
      $left=$1829;
      var $1830=$2;
      var $1831=(($1830)|0);
      var $1832=HEAP32[(($1831)>>2)];
      $next=$1832;
      var $1833=$2;
      var $1834=(($1833+4)|0);
      var $1835=HEAP32[(($1834)>>2)];
      $have=$1835;
      var $1836=$state;
      var $1837=(($1836+56)|0);
      var $1838=HEAP32[(($1837)>>2)];
      $hold=$1838;
      var $1839=$state;
      var $1840=(($1839+60)|0);
      var $1841=HEAP32[(($1840)>>2)];
      $bits=$1841;
      label = 408; break;
    case 408: 
      var $1843=$state;
      var $1844=(($1843)|0);
      var $1845=HEAP32[(($1844)>>2)];
      var $1846=(($1845)|0)==11;
      if ($1846) { label = 409; break; } else { label = 410; break; }
    case 409: 
      var $1848=$state;
      var $1849=(($1848+7108)|0);
      HEAP32[(($1849)>>2)]=-1;
      label = 410; break;
    case 410: 
      label = 565; break;
    case 411: 
      var $1852=$state;
      var $1853=(($1852+7108)|0);
      HEAP32[(($1853)>>2)]=0;
      label = 412; break;
    case 412: 
      var $1855=$hold;
      var $1856=$state;
      var $1857=(($1856+84)|0);
      var $1858=HEAP32[(($1857)>>2)];
      var $1859=1 << $1858;
      var $1860=((($1859)-(1))|0);
      var $1861=$1855 & $1860;
      var $1862=$state;
      var $1863=(($1862+76)|0);
      var $1864=HEAP32[(($1863)>>2)];
      var $1865=(($1864+($1861<<2))|0);
      var $1866=$here;
      var $1867=$1865;
      assert(4 % 1 === 0);HEAP16[(($1866)>>1)]=HEAP16[(($1867)>>1)];HEAP16[((($1866)+(2))>>1)]=HEAP16[((($1867)+(2))>>1)];
      var $1868=(($here+1)|0);
      var $1869=HEAP8[($1868)];
      var $1870=(($1869)&255);
      var $1871=$bits;
      var $1872=(($1870)>>>0) <= (($1871)>>>0);
      if ($1872) { label = 413; break; } else { label = 414; break; }
    case 413: 
      label = 419; break;
    case 414: 
      label = 415; break;
    case 415: 
      var $1876=$have;
      var $1877=(($1876)|0)==0;
      if ($1877) { label = 416; break; } else { label = 417; break; }
    case 416: 
      label = 566; break;
    case 417: 
      var $1880=$have;
      var $1881=((($1880)-(1))|0);
      $have=$1881;
      var $1882=$next;
      var $1883=(($1882+1)|0);
      $next=$1883;
      var $1884=HEAP8[($1882)];
      var $1885=(($1884)&255);
      var $1886=$bits;
      var $1887=$1885 << $1886;
      var $1888=$hold;
      var $1889=((($1888)+($1887))|0);
      $hold=$1889;
      var $1890=$bits;
      var $1891=((($1890)+(8))|0);
      $bits=$1891;
      label = 418; break;
    case 418: 
      label = 412; break;
    case 419: 
      var $1894=(($here)|0);
      var $1895=HEAP8[($1894)];
      var $1896=(($1895)&255);
      var $1897=(($1896)|0)!=0;
      if ($1897) { label = 420; break; } else { label = 432; break; }
    case 420: 
      var $1899=(($here)|0);
      var $1900=HEAP8[($1899)];
      var $1901=(($1900)&255);
      var $1902=$1901 & 240;
      var $1903=(($1902)|0)==0;
      if ($1903) { label = 421; break; } else { label = 432; break; }
    case 421: 
      var $1905=$last;
      var $1906=$here;
      assert(4 % 1 === 0);HEAP16[(($1905)>>1)]=HEAP16[(($1906)>>1)];HEAP16[((($1905)+(2))>>1)]=HEAP16[((($1906)+(2))>>1)];
      label = 422; break;
    case 422: 
      var $1908=(($last+2)|0);
      var $1909=HEAP16[(($1908)>>1)];
      var $1910=(($1909)&65535);
      var $1911=$hold;
      var $1912=(($last+1)|0);
      var $1913=HEAP8[($1912)];
      var $1914=(($1913)&255);
      var $1915=(($last)|0);
      var $1916=HEAP8[($1915)];
      var $1917=(($1916)&255);
      var $1918=((($1914)+($1917))|0);
      var $1919=1 << $1918;
      var $1920=((($1919)-(1))|0);
      var $1921=$1911 & $1920;
      var $1922=(($last+1)|0);
      var $1923=HEAP8[($1922)];
      var $1924=(($1923)&255);
      var $1925=$1921 >>> (($1924)>>>0);
      var $1926=((($1910)+($1925))|0);
      var $1927=$state;
      var $1928=(($1927+76)|0);
      var $1929=HEAP32[(($1928)>>2)];
      var $1930=(($1929+($1926<<2))|0);
      var $1931=$here;
      var $1932=$1930;
      assert(4 % 1 === 0);HEAP16[(($1931)>>1)]=HEAP16[(($1932)>>1)];HEAP16[((($1931)+(2))>>1)]=HEAP16[((($1932)+(2))>>1)];
      var $1933=(($last+1)|0);
      var $1934=HEAP8[($1933)];
      var $1935=(($1934)&255);
      var $1936=(($here+1)|0);
      var $1937=HEAP8[($1936)];
      var $1938=(($1937)&255);
      var $1939=((($1935)+($1938))|0);
      var $1940=$bits;
      var $1941=(($1939)>>>0) <= (($1940)>>>0);
      if ($1941) { label = 423; break; } else { label = 424; break; }
    case 423: 
      label = 429; break;
    case 424: 
      label = 425; break;
    case 425: 
      var $1945=$have;
      var $1946=(($1945)|0)==0;
      if ($1946) { label = 426; break; } else { label = 427; break; }
    case 426: 
      label = 566; break;
    case 427: 
      var $1949=$have;
      var $1950=((($1949)-(1))|0);
      $have=$1950;
      var $1951=$next;
      var $1952=(($1951+1)|0);
      $next=$1952;
      var $1953=HEAP8[($1951)];
      var $1954=(($1953)&255);
      var $1955=$bits;
      var $1956=$1954 << $1955;
      var $1957=$hold;
      var $1958=((($1957)+($1956))|0);
      $hold=$1958;
      var $1959=$bits;
      var $1960=((($1959)+(8))|0);
      $bits=$1960;
      label = 428; break;
    case 428: 
      label = 422; break;
    case 429: 
      label = 430; break;
    case 430: 
      var $1964=(($last+1)|0);
      var $1965=HEAP8[($1964)];
      var $1966=(($1965)&255);
      var $1967=$hold;
      var $1968=$1967 >>> (($1966)>>>0);
      $hold=$1968;
      var $1969=(($last+1)|0);
      var $1970=HEAP8[($1969)];
      var $1971=(($1970)&255);
      var $1972=$bits;
      var $1973=((($1972)-($1971))|0);
      $bits=$1973;
      label = 431; break;
    case 431: 
      var $1975=(($last+1)|0);
      var $1976=HEAP8[($1975)];
      var $1977=(($1976)&255);
      var $1978=$state;
      var $1979=(($1978+7108)|0);
      var $1980=HEAP32[(($1979)>>2)];
      var $1981=((($1980)+($1977))|0);
      HEAP32[(($1979)>>2)]=$1981;
      label = 432; break;
    case 432: 
      label = 433; break;
    case 433: 
      var $1984=(($here+1)|0);
      var $1985=HEAP8[($1984)];
      var $1986=(($1985)&255);
      var $1987=$hold;
      var $1988=$1987 >>> (($1986)>>>0);
      $hold=$1988;
      var $1989=(($here+1)|0);
      var $1990=HEAP8[($1989)];
      var $1991=(($1990)&255);
      var $1992=$bits;
      var $1993=((($1992)-($1991))|0);
      $bits=$1993;
      label = 434; break;
    case 434: 
      var $1995=(($here+1)|0);
      var $1996=HEAP8[($1995)];
      var $1997=(($1996)&255);
      var $1998=$state;
      var $1999=(($1998+7108)|0);
      var $2000=HEAP32[(($1999)>>2)];
      var $2001=((($2000)+($1997))|0);
      HEAP32[(($1999)>>2)]=$2001;
      var $2002=(($here+2)|0);
      var $2003=HEAP16[(($2002)>>1)];
      var $2004=(($2003)&65535);
      var $2005=$state;
      var $2006=(($2005+64)|0);
      HEAP32[(($2006)>>2)]=$2004;
      var $2007=(($here)|0);
      var $2008=HEAP8[($2007)];
      var $2009=(($2008)&255);
      var $2010=(($2009)|0)==0;
      if ($2010) { label = 435; break; } else { label = 436; break; }
    case 435: 
      var $2012=$state;
      var $2013=(($2012)|0);
      HEAP32[(($2013)>>2)]=25;
      label = 565; break;
    case 436: 
      var $2015=(($here)|0);
      var $2016=HEAP8[($2015)];
      var $2017=(($2016)&255);
      var $2018=$2017 & 32;
      var $2019=(($2018)|0)!=0;
      if ($2019) { label = 437; break; } else { label = 438; break; }
    case 437: 
      var $2021=$state;
      var $2022=(($2021+7108)|0);
      HEAP32[(($2022)>>2)]=-1;
      var $2023=$state;
      var $2024=(($2023)|0);
      HEAP32[(($2024)>>2)]=11;
      label = 565; break;
    case 438: 
      var $2026=(($here)|0);
      var $2027=HEAP8[($2026)];
      var $2028=(($2027)&255);
      var $2029=$2028 & 64;
      var $2030=(($2029)|0)!=0;
      if ($2030) { label = 439; break; } else { label = 440; break; }
    case 439: 
      var $2032=$2;
      var $2033=(($2032+24)|0);
      HEAP32[(($2033)>>2)]=((5271244)|0);
      var $2034=$state;
      var $2035=(($2034)|0);
      HEAP32[(($2035)>>2)]=29;
      label = 565; break;
    case 440: 
      var $2037=(($here)|0);
      var $2038=HEAP8[($2037)];
      var $2039=(($2038)&255);
      var $2040=$2039 & 15;
      var $2041=$state;
      var $2042=(($2041+72)|0);
      HEAP32[(($2042)>>2)]=$2040;
      var $2043=$state;
      var $2044=(($2043)|0);
      HEAP32[(($2044)>>2)]=21;
      label = 441; break;
    case 441: 
      var $2046=$state;
      var $2047=(($2046+72)|0);
      var $2048=HEAP32[(($2047)>>2)];
      var $2049=(($2048)|0)!=0;
      if ($2049) { label = 442; break; } else { label = 454; break; }
    case 442: 
      label = 443; break;
    case 443: 
      label = 444; break;
    case 444: 
      var $2053=$bits;
      var $2054=$state;
      var $2055=(($2054+72)|0);
      var $2056=HEAP32[(($2055)>>2)];
      var $2057=(($2053)>>>0) < (($2056)>>>0);
      if ($2057) { label = 445; break; } else { label = 450; break; }
    case 445: 
      label = 446; break;
    case 446: 
      var $2060=$have;
      var $2061=(($2060)|0)==0;
      if ($2061) { label = 447; break; } else { label = 448; break; }
    case 447: 
      label = 566; break;
    case 448: 
      var $2064=$have;
      var $2065=((($2064)-(1))|0);
      $have=$2065;
      var $2066=$next;
      var $2067=(($2066+1)|0);
      $next=$2067;
      var $2068=HEAP8[($2066)];
      var $2069=(($2068)&255);
      var $2070=$bits;
      var $2071=$2069 << $2070;
      var $2072=$hold;
      var $2073=((($2072)+($2071))|0);
      $hold=$2073;
      var $2074=$bits;
      var $2075=((($2074)+(8))|0);
      $bits=$2075;
      label = 449; break;
    case 449: 
      label = 444; break;
    case 450: 
      label = 451; break;
    case 451: 
      var $2079=$hold;
      var $2080=$state;
      var $2081=(($2080+72)|0);
      var $2082=HEAP32[(($2081)>>2)];
      var $2083=1 << $2082;
      var $2084=((($2083)-(1))|0);
      var $2085=$2079 & $2084;
      var $2086=$state;
      var $2087=(($2086+64)|0);
      var $2088=HEAP32[(($2087)>>2)];
      var $2089=((($2088)+($2085))|0);
      HEAP32[(($2087)>>2)]=$2089;
      label = 452; break;
    case 452: 
      var $2091=$state;
      var $2092=(($2091+72)|0);
      var $2093=HEAP32[(($2092)>>2)];
      var $2094=$hold;
      var $2095=$2094 >>> (($2093)>>>0);
      $hold=$2095;
      var $2096=$state;
      var $2097=(($2096+72)|0);
      var $2098=HEAP32[(($2097)>>2)];
      var $2099=$bits;
      var $2100=((($2099)-($2098))|0);
      $bits=$2100;
      label = 453; break;
    case 453: 
      var $2102=$state;
      var $2103=(($2102+72)|0);
      var $2104=HEAP32[(($2103)>>2)];
      var $2105=$state;
      var $2106=(($2105+7108)|0);
      var $2107=HEAP32[(($2106)>>2)];
      var $2108=((($2107)+($2104))|0);
      HEAP32[(($2106)>>2)]=$2108;
      label = 454; break;
    case 454: 
      var $2110=$state;
      var $2111=(($2110+64)|0);
      var $2112=HEAP32[(($2111)>>2)];
      var $2113=$state;
      var $2114=(($2113+7112)|0);
      HEAP32[(($2114)>>2)]=$2112;
      var $2115=$state;
      var $2116=(($2115)|0);
      HEAP32[(($2116)>>2)]=22;
      label = 455; break;
    case 455: 
      label = 456; break;
    case 456: 
      var $2119=$hold;
      var $2120=$state;
      var $2121=(($2120+88)|0);
      var $2122=HEAP32[(($2121)>>2)];
      var $2123=1 << $2122;
      var $2124=((($2123)-(1))|0);
      var $2125=$2119 & $2124;
      var $2126=$state;
      var $2127=(($2126+80)|0);
      var $2128=HEAP32[(($2127)>>2)];
      var $2129=(($2128+($2125<<2))|0);
      var $2130=$here;
      var $2131=$2129;
      assert(4 % 1 === 0);HEAP16[(($2130)>>1)]=HEAP16[(($2131)>>1)];HEAP16[((($2130)+(2))>>1)]=HEAP16[((($2131)+(2))>>1)];
      var $2132=(($here+1)|0);
      var $2133=HEAP8[($2132)];
      var $2134=(($2133)&255);
      var $2135=$bits;
      var $2136=(($2134)>>>0) <= (($2135)>>>0);
      if ($2136) { label = 457; break; } else { label = 458; break; }
    case 457: 
      label = 463; break;
    case 458: 
      label = 459; break;
    case 459: 
      var $2140=$have;
      var $2141=(($2140)|0)==0;
      if ($2141) { label = 460; break; } else { label = 461; break; }
    case 460: 
      label = 566; break;
    case 461: 
      var $2144=$have;
      var $2145=((($2144)-(1))|0);
      $have=$2145;
      var $2146=$next;
      var $2147=(($2146+1)|0);
      $next=$2147;
      var $2148=HEAP8[($2146)];
      var $2149=(($2148)&255);
      var $2150=$bits;
      var $2151=$2149 << $2150;
      var $2152=$hold;
      var $2153=((($2152)+($2151))|0);
      $hold=$2153;
      var $2154=$bits;
      var $2155=((($2154)+(8))|0);
      $bits=$2155;
      label = 462; break;
    case 462: 
      label = 456; break;
    case 463: 
      var $2158=(($here)|0);
      var $2159=HEAP8[($2158)];
      var $2160=(($2159)&255);
      var $2161=$2160 & 240;
      var $2162=(($2161)|0)==0;
      if ($2162) { label = 464; break; } else { label = 475; break; }
    case 464: 
      var $2164=$last;
      var $2165=$here;
      assert(4 % 1 === 0);HEAP16[(($2164)>>1)]=HEAP16[(($2165)>>1)];HEAP16[((($2164)+(2))>>1)]=HEAP16[((($2165)+(2))>>1)];
      label = 465; break;
    case 465: 
      var $2167=(($last+2)|0);
      var $2168=HEAP16[(($2167)>>1)];
      var $2169=(($2168)&65535);
      var $2170=$hold;
      var $2171=(($last+1)|0);
      var $2172=HEAP8[($2171)];
      var $2173=(($2172)&255);
      var $2174=(($last)|0);
      var $2175=HEAP8[($2174)];
      var $2176=(($2175)&255);
      var $2177=((($2173)+($2176))|0);
      var $2178=1 << $2177;
      var $2179=((($2178)-(1))|0);
      var $2180=$2170 & $2179;
      var $2181=(($last+1)|0);
      var $2182=HEAP8[($2181)];
      var $2183=(($2182)&255);
      var $2184=$2180 >>> (($2183)>>>0);
      var $2185=((($2169)+($2184))|0);
      var $2186=$state;
      var $2187=(($2186+80)|0);
      var $2188=HEAP32[(($2187)>>2)];
      var $2189=(($2188+($2185<<2))|0);
      var $2190=$here;
      var $2191=$2189;
      assert(4 % 1 === 0);HEAP16[(($2190)>>1)]=HEAP16[(($2191)>>1)];HEAP16[((($2190)+(2))>>1)]=HEAP16[((($2191)+(2))>>1)];
      var $2192=(($last+1)|0);
      var $2193=HEAP8[($2192)];
      var $2194=(($2193)&255);
      var $2195=(($here+1)|0);
      var $2196=HEAP8[($2195)];
      var $2197=(($2196)&255);
      var $2198=((($2194)+($2197))|0);
      var $2199=$bits;
      var $2200=(($2198)>>>0) <= (($2199)>>>0);
      if ($2200) { label = 466; break; } else { label = 467; break; }
    case 466: 
      label = 472; break;
    case 467: 
      label = 468; break;
    case 468: 
      var $2204=$have;
      var $2205=(($2204)|0)==0;
      if ($2205) { label = 469; break; } else { label = 470; break; }
    case 469: 
      label = 566; break;
    case 470: 
      var $2208=$have;
      var $2209=((($2208)-(1))|0);
      $have=$2209;
      var $2210=$next;
      var $2211=(($2210+1)|0);
      $next=$2211;
      var $2212=HEAP8[($2210)];
      var $2213=(($2212)&255);
      var $2214=$bits;
      var $2215=$2213 << $2214;
      var $2216=$hold;
      var $2217=((($2216)+($2215))|0);
      $hold=$2217;
      var $2218=$bits;
      var $2219=((($2218)+(8))|0);
      $bits=$2219;
      label = 471; break;
    case 471: 
      label = 465; break;
    case 472: 
      label = 473; break;
    case 473: 
      var $2223=(($last+1)|0);
      var $2224=HEAP8[($2223)];
      var $2225=(($2224)&255);
      var $2226=$hold;
      var $2227=$2226 >>> (($2225)>>>0);
      $hold=$2227;
      var $2228=(($last+1)|0);
      var $2229=HEAP8[($2228)];
      var $2230=(($2229)&255);
      var $2231=$bits;
      var $2232=((($2231)-($2230))|0);
      $bits=$2232;
      label = 474; break;
    case 474: 
      var $2234=(($last+1)|0);
      var $2235=HEAP8[($2234)];
      var $2236=(($2235)&255);
      var $2237=$state;
      var $2238=(($2237+7108)|0);
      var $2239=HEAP32[(($2238)>>2)];
      var $2240=((($2239)+($2236))|0);
      HEAP32[(($2238)>>2)]=$2240;
      label = 475; break;
    case 475: 
      label = 476; break;
    case 476: 
      var $2243=(($here+1)|0);
      var $2244=HEAP8[($2243)];
      var $2245=(($2244)&255);
      var $2246=$hold;
      var $2247=$2246 >>> (($2245)>>>0);
      $hold=$2247;
      var $2248=(($here+1)|0);
      var $2249=HEAP8[($2248)];
      var $2250=(($2249)&255);
      var $2251=$bits;
      var $2252=((($2251)-($2250))|0);
      $bits=$2252;
      label = 477; break;
    case 477: 
      var $2254=(($here+1)|0);
      var $2255=HEAP8[($2254)];
      var $2256=(($2255)&255);
      var $2257=$state;
      var $2258=(($2257+7108)|0);
      var $2259=HEAP32[(($2258)>>2)];
      var $2260=((($2259)+($2256))|0);
      HEAP32[(($2258)>>2)]=$2260;
      var $2261=(($here)|0);
      var $2262=HEAP8[($2261)];
      var $2263=(($2262)&255);
      var $2264=$2263 & 64;
      var $2265=(($2264)|0)!=0;
      if ($2265) { label = 478; break; } else { label = 479; break; }
    case 478: 
      var $2267=$2;
      var $2268=(($2267+24)|0);
      HEAP32[(($2268)>>2)]=((5270948)|0);
      var $2269=$state;
      var $2270=(($2269)|0);
      HEAP32[(($2270)>>2)]=29;
      label = 565; break;
    case 479: 
      var $2272=(($here+2)|0);
      var $2273=HEAP16[(($2272)>>1)];
      var $2274=(($2273)&65535);
      var $2275=$state;
      var $2276=(($2275+68)|0);
      HEAP32[(($2276)>>2)]=$2274;
      var $2277=(($here)|0);
      var $2278=HEAP8[($2277)];
      var $2279=(($2278)&255);
      var $2280=$2279 & 15;
      var $2281=$state;
      var $2282=(($2281+72)|0);
      HEAP32[(($2282)>>2)]=$2280;
      var $2283=$state;
      var $2284=(($2283)|0);
      HEAP32[(($2284)>>2)]=23;
      label = 480; break;
    case 480: 
      var $2286=$state;
      var $2287=(($2286+72)|0);
      var $2288=HEAP32[(($2287)>>2)];
      var $2289=(($2288)|0)!=0;
      if ($2289) { label = 481; break; } else { label = 493; break; }
    case 481: 
      label = 482; break;
    case 482: 
      label = 483; break;
    case 483: 
      var $2293=$bits;
      var $2294=$state;
      var $2295=(($2294+72)|0);
      var $2296=HEAP32[(($2295)>>2)];
      var $2297=(($2293)>>>0) < (($2296)>>>0);
      if ($2297) { label = 484; break; } else { label = 489; break; }
    case 484: 
      label = 485; break;
    case 485: 
      var $2300=$have;
      var $2301=(($2300)|0)==0;
      if ($2301) { label = 486; break; } else { label = 487; break; }
    case 486: 
      label = 566; break;
    case 487: 
      var $2304=$have;
      var $2305=((($2304)-(1))|0);
      $have=$2305;
      var $2306=$next;
      var $2307=(($2306+1)|0);
      $next=$2307;
      var $2308=HEAP8[($2306)];
      var $2309=(($2308)&255);
      var $2310=$bits;
      var $2311=$2309 << $2310;
      var $2312=$hold;
      var $2313=((($2312)+($2311))|0);
      $hold=$2313;
      var $2314=$bits;
      var $2315=((($2314)+(8))|0);
      $bits=$2315;
      label = 488; break;
    case 488: 
      label = 483; break;
    case 489: 
      label = 490; break;
    case 490: 
      var $2319=$hold;
      var $2320=$state;
      var $2321=(($2320+72)|0);
      var $2322=HEAP32[(($2321)>>2)];
      var $2323=1 << $2322;
      var $2324=((($2323)-(1))|0);
      var $2325=$2319 & $2324;
      var $2326=$state;
      var $2327=(($2326+68)|0);
      var $2328=HEAP32[(($2327)>>2)];
      var $2329=((($2328)+($2325))|0);
      HEAP32[(($2327)>>2)]=$2329;
      label = 491; break;
    case 491: 
      var $2331=$state;
      var $2332=(($2331+72)|0);
      var $2333=HEAP32[(($2332)>>2)];
      var $2334=$hold;
      var $2335=$2334 >>> (($2333)>>>0);
      $hold=$2335;
      var $2336=$state;
      var $2337=(($2336+72)|0);
      var $2338=HEAP32[(($2337)>>2)];
      var $2339=$bits;
      var $2340=((($2339)-($2338))|0);
      $bits=$2340;
      label = 492; break;
    case 492: 
      var $2342=$state;
      var $2343=(($2342+72)|0);
      var $2344=HEAP32[(($2343)>>2)];
      var $2345=$state;
      var $2346=(($2345+7108)|0);
      var $2347=HEAP32[(($2346)>>2)];
      var $2348=((($2347)+($2344))|0);
      HEAP32[(($2346)>>2)]=$2348;
      label = 493; break;
    case 493: 
      var $2350=$state;
      var $2351=(($2350)|0);
      HEAP32[(($2351)>>2)]=24;
      label = 494; break;
    case 494: 
      var $2353=$left;
      var $2354=(($2353)|0)==0;
      if ($2354) { label = 495; break; } else { label = 496; break; }
    case 495: 
      label = 566; break;
    case 496: 
      var $2357=$out;
      var $2358=$left;
      var $2359=((($2357)-($2358))|0);
      $copy=$2359;
      var $2360=$state;
      var $2361=(($2360+68)|0);
      var $2362=HEAP32[(($2361)>>2)];
      var $2363=$copy;
      var $2364=(($2362)>>>0) > (($2363)>>>0);
      if ($2364) { label = 497; break; } else { label = 507; break; }
    case 497: 
      var $2366=$state;
      var $2367=(($2366+68)|0);
      var $2368=HEAP32[(($2367)>>2)];
      var $2369=$copy;
      var $2370=((($2368)-($2369))|0);
      $copy=$2370;
      var $2371=$copy;
      var $2372=$state;
      var $2373=(($2372+44)|0);
      var $2374=HEAP32[(($2373)>>2)];
      var $2375=(($2371)>>>0) > (($2374)>>>0);
      if ($2375) { label = 498; break; } else { label = 501; break; }
    case 498: 
      var $2377=$state;
      var $2378=(($2377+7104)|0);
      var $2379=HEAP32[(($2378)>>2)];
      var $2380=(($2379)|0)!=0;
      if ($2380) { label = 499; break; } else { label = 500; break; }
    case 499: 
      var $2382=$2;
      var $2383=(($2382+24)|0);
      HEAP32[(($2383)>>2)]=((5270684)|0);
      var $2384=$state;
      var $2385=(($2384)|0);
      HEAP32[(($2385)>>2)]=29;
      label = 565; break;
    case 500: 
      label = 501; break;
    case 501: 
      var $2388=$copy;
      var $2389=$state;
      var $2390=(($2389+48)|0);
      var $2391=HEAP32[(($2390)>>2)];
      var $2392=(($2388)>>>0) > (($2391)>>>0);
      if ($2392) { label = 502; break; } else { label = 503; break; }
    case 502: 
      var $2394=$state;
      var $2395=(($2394+48)|0);
      var $2396=HEAP32[(($2395)>>2)];
      var $2397=$copy;
      var $2398=((($2397)-($2396))|0);
      $copy=$2398;
      var $2399=$state;
      var $2400=(($2399+52)|0);
      var $2401=HEAP32[(($2400)>>2)];
      var $2402=$state;
      var $2403=(($2402+40)|0);
      var $2404=HEAP32[(($2403)>>2)];
      var $2405=$copy;
      var $2406=((($2404)-($2405))|0);
      var $2407=(($2401+$2406)|0);
      $from=$2407;
      label = 504; break;
    case 503: 
      var $2409=$state;
      var $2410=(($2409+52)|0);
      var $2411=HEAP32[(($2410)>>2)];
      var $2412=$state;
      var $2413=(($2412+48)|0);
      var $2414=HEAP32[(($2413)>>2)];
      var $2415=$copy;
      var $2416=((($2414)-($2415))|0);
      var $2417=(($2411+$2416)|0);
      $from=$2417;
      label = 504; break;
    case 504: 
      var $2419=$copy;
      var $2420=$state;
      var $2421=(($2420+64)|0);
      var $2422=HEAP32[(($2421)>>2)];
      var $2423=(($2419)>>>0) > (($2422)>>>0);
      if ($2423) { label = 505; break; } else { label = 506; break; }
    case 505: 
      var $2425=$state;
      var $2426=(($2425+64)|0);
      var $2427=HEAP32[(($2426)>>2)];
      $copy=$2427;
      label = 506; break;
    case 506: 
      label = 508; break;
    case 507: 
      var $2430=$put;
      var $2431=$state;
      var $2432=(($2431+68)|0);
      var $2433=HEAP32[(($2432)>>2)];
      var $2434=(((-$2433))|0);
      var $2435=(($2430+$2434)|0);
      $from=$2435;
      var $2436=$state;
      var $2437=(($2436+64)|0);
      var $2438=HEAP32[(($2437)>>2)];
      $copy=$2438;
      label = 508; break;
    case 508: 
      var $2440=$copy;
      var $2441=$left;
      var $2442=(($2440)>>>0) > (($2441)>>>0);
      if ($2442) { label = 509; break; } else { label = 510; break; }
    case 509: 
      var $2444=$left;
      $copy=$2444;
      label = 510; break;
    case 510: 
      var $2446=$copy;
      var $2447=$left;
      var $2448=((($2447)-($2446))|0);
      $left=$2448;
      var $2449=$copy;
      var $2450=$state;
      var $2451=(($2450+64)|0);
      var $2452=HEAP32[(($2451)>>2)];
      var $2453=((($2452)-($2449))|0);
      HEAP32[(($2451)>>2)]=$2453;
      label = 511; break;
    case 511: 
      var $2455=$from;
      var $2456=(($2455+1)|0);
      $from=$2456;
      var $2457=HEAP8[($2455)];
      var $2458=$put;
      var $2459=(($2458+1)|0);
      $put=$2459;
      HEAP8[($2458)]=$2457;
      label = 512; break;
    case 512: 
      var $2461=$copy;
      var $2462=((($2461)-(1))|0);
      $copy=$2462;
      var $2463=(($2462)|0)!=0;
      if ($2463) { label = 511; break; } else { label = 513; break; }
    case 513: 
      var $2465=$state;
      var $2466=(($2465+64)|0);
      var $2467=HEAP32[(($2466)>>2)];
      var $2468=(($2467)|0)==0;
      if ($2468) { label = 514; break; } else { label = 515; break; }
    case 514: 
      var $2470=$state;
      var $2471=(($2470)|0);
      HEAP32[(($2471)>>2)]=20;
      label = 515; break;
    case 515: 
      label = 565; break;
    case 516: 
      var $2474=$left;
      var $2475=(($2474)|0)==0;
      if ($2475) { label = 517; break; } else { label = 518; break; }
    case 517: 
      label = 566; break;
    case 518: 
      var $2478=$state;
      var $2479=(($2478+64)|0);
      var $2480=HEAP32[(($2479)>>2)];
      var $2481=(($2480) & 255);
      var $2482=$put;
      var $2483=(($2482+1)|0);
      $put=$2483;
      HEAP8[($2482)]=$2481;
      var $2484=$left;
      var $2485=((($2484)-(1))|0);
      $left=$2485;
      var $2486=$state;
      var $2487=(($2486)|0);
      HEAP32[(($2487)>>2)]=20;
      label = 565; break;
    case 519: 
      var $2489=$state;
      var $2490=(($2489+8)|0);
      var $2491=HEAP32[(($2490)>>2)];
      var $2492=(($2491)|0)!=0;
      if ($2492) { label = 520; break; } else { label = 542; break; }
    case 520: 
      label = 521; break;
    case 521: 
      label = 522; break;
    case 522: 
      var $2496=$bits;
      var $2497=(($2496)>>>0) < 32;
      if ($2497) { label = 523; break; } else { label = 528; break; }
    case 523: 
      label = 524; break;
    case 524: 
      var $2500=$have;
      var $2501=(($2500)|0)==0;
      if ($2501) { label = 525; break; } else { label = 526; break; }
    case 525: 
      label = 566; break;
    case 526: 
      var $2504=$have;
      var $2505=((($2504)-(1))|0);
      $have=$2505;
      var $2506=$next;
      var $2507=(($2506+1)|0);
      $next=$2507;
      var $2508=HEAP8[($2506)];
      var $2509=(($2508)&255);
      var $2510=$bits;
      var $2511=$2509 << $2510;
      var $2512=$hold;
      var $2513=((($2512)+($2511))|0);
      $hold=$2513;
      var $2514=$bits;
      var $2515=((($2514)+(8))|0);
      $bits=$2515;
      label = 527; break;
    case 527: 
      label = 522; break;
    case 528: 
      label = 529; break;
    case 529: 
      var $2519=$left;
      var $2520=$out;
      var $2521=((($2520)-($2519))|0);
      $out=$2521;
      var $2522=$out;
      var $2523=$2;
      var $2524=(($2523+20)|0);
      var $2525=HEAP32[(($2524)>>2)];
      var $2526=((($2525)+($2522))|0);
      HEAP32[(($2524)>>2)]=$2526;
      var $2527=$out;
      var $2528=$state;
      var $2529=(($2528+28)|0);
      var $2530=HEAP32[(($2529)>>2)];
      var $2531=((($2530)+($2527))|0);
      HEAP32[(($2529)>>2)]=$2531;
      var $2532=$out;
      var $2533=(($2532)|0)!=0;
      if ($2533) { label = 530; break; } else { label = 534; break; }
    case 530: 
      var $2535=$state;
      var $2536=(($2535+16)|0);
      var $2537=HEAP32[(($2536)>>2)];
      var $2538=(($2537)|0)!=0;
      if ($2538) { label = 531; break; } else { label = 532; break; }
    case 531: 
      var $2540=$state;
      var $2541=(($2540+24)|0);
      var $2542=HEAP32[(($2541)>>2)];
      var $2543=$put;
      var $2544=$out;
      var $2545=(((-$2544))|0);
      var $2546=(($2543+$2545)|0);
      var $2547=$out;
      var $2548=_crc32($2542, $2546, $2547);
      var $2560 = $2548;label = 533; break;
    case 532: 
      var $2550=$state;
      var $2551=(($2550+24)|0);
      var $2552=HEAP32[(($2551)>>2)];
      var $2553=$put;
      var $2554=$out;
      var $2555=(((-$2554))|0);
      var $2556=(($2553+$2555)|0);
      var $2557=$out;
      var $2558=_adler32($2552, $2556, $2557);
      var $2560 = $2558;label = 533; break;
    case 533: 
      var $2560;
      var $2561=$state;
      var $2562=(($2561+24)|0);
      HEAP32[(($2562)>>2)]=$2560;
      var $2563=$2;
      var $2564=(($2563+48)|0);
      HEAP32[(($2564)>>2)]=$2560;
      label = 534; break;
    case 534: 
      var $2566=$left;
      $out=$2566;
      var $2567=$state;
      var $2568=(($2567+16)|0);
      var $2569=HEAP32[(($2568)>>2)];
      var $2570=(($2569)|0)!=0;
      if ($2570) { label = 535; break; } else { label = 536; break; }
    case 535: 
      var $2572=$hold;
      var $2590 = $2572;label = 537; break;
    case 536: 
      var $2574=$hold;
      var $2575=$2574 >>> 24;
      var $2576=$2575 & 255;
      var $2577=$hold;
      var $2578=$2577 >>> 8;
      var $2579=$2578 & 65280;
      var $2580=((($2576)+($2579))|0);
      var $2581=$hold;
      var $2582=$2581 & 65280;
      var $2583=$2582 << 8;
      var $2584=((($2580)+($2583))|0);
      var $2585=$hold;
      var $2586=$2585 & 255;
      var $2587=$2586 << 24;
      var $2588=((($2584)+($2587))|0);
      var $2590 = $2588;label = 537; break;
    case 537: 
      var $2590;
      var $2591=$state;
      var $2592=(($2591+24)|0);
      var $2593=HEAP32[(($2592)>>2)];
      var $2594=(($2590)|0)!=(($2593)|0);
      if ($2594) { label = 538; break; } else { label = 539; break; }
    case 538: 
      var $2596=$2;
      var $2597=(($2596+24)|0);
      HEAP32[(($2597)>>2)]=((5270392)|0);
      var $2598=$state;
      var $2599=(($2598)|0);
      HEAP32[(($2599)>>2)]=29;
      label = 565; break;
    case 539: 
      label = 540; break;
    case 540: 
      $hold=0;
      $bits=0;
      label = 541; break;
    case 541: 
      label = 542; break;
    case 542: 
      var $2604=$state;
      var $2605=(($2604)|0);
      HEAP32[(($2605)>>2)]=27;
      label = 543; break;
    case 543: 
      var $2607=$state;
      var $2608=(($2607+8)|0);
      var $2609=HEAP32[(($2608)>>2)];
      var $2610=(($2609)|0)!=0;
      if ($2610) { label = 544; break; } else { label = 559; break; }
    case 544: 
      var $2612=$state;
      var $2613=(($2612+16)|0);
      var $2614=HEAP32[(($2613)>>2)];
      var $2615=(($2614)|0)!=0;
      if ($2615) { label = 545; break; } else { label = 559; break; }
    case 545: 
      label = 546; break;
    case 546: 
      label = 547; break;
    case 547: 
      var $2619=$bits;
      var $2620=(($2619)>>>0) < 32;
      if ($2620) { label = 548; break; } else { label = 553; break; }
    case 548: 
      label = 549; break;
    case 549: 
      var $2623=$have;
      var $2624=(($2623)|0)==0;
      if ($2624) { label = 550; break; } else { label = 551; break; }
    case 550: 
      label = 566; break;
    case 551: 
      var $2627=$have;
      var $2628=((($2627)-(1))|0);
      $have=$2628;
      var $2629=$next;
      var $2630=(($2629+1)|0);
      $next=$2630;
      var $2631=HEAP8[($2629)];
      var $2632=(($2631)&255);
      var $2633=$bits;
      var $2634=$2632 << $2633;
      var $2635=$hold;
      var $2636=((($2635)+($2634))|0);
      $hold=$2636;
      var $2637=$bits;
      var $2638=((($2637)+(8))|0);
      $bits=$2638;
      label = 552; break;
    case 552: 
      label = 547; break;
    case 553: 
      label = 554; break;
    case 554: 
      var $2642=$hold;
      var $2643=$state;
      var $2644=(($2643+28)|0);
      var $2645=HEAP32[(($2644)>>2)];
      var $2646=(($2642)|0)!=(($2645)|0);
      if ($2646) { label = 555; break; } else { label = 556; break; }
    case 555: 
      var $2648=$2;
      var $2649=(($2648+24)|0);
      HEAP32[(($2649)>>2)]=((5270100)|0);
      var $2650=$state;
      var $2651=(($2650)|0);
      HEAP32[(($2651)>>2)]=29;
      label = 565; break;
    case 556: 
      label = 557; break;
    case 557: 
      $hold=0;
      $bits=0;
      label = 558; break;
    case 558: 
      label = 559; break;
    case 559: 
      var $2656=$state;
      var $2657=(($2656)|0);
      HEAP32[(($2657)>>2)]=28;
      label = 560; break;
    case 560: 
      $ret=1;
      label = 566; break;
    case 561: 
      $ret=-3;
      label = 566; break;
    case 562: 
      $1=-4;
      label = 590; break;
    case 563: 
      label = 564; break;
    case 564: 
      $1=-2;
      label = 590; break;
    case 565: 
      label = 13; break;
    case 566: 
      label = 567; break;
    case 567: 
      var $2666=$put;
      var $2667=$2;
      var $2668=(($2667+12)|0);
      HEAP32[(($2668)>>2)]=$2666;
      var $2669=$left;
      var $2670=$2;
      var $2671=(($2670+16)|0);
      HEAP32[(($2671)>>2)]=$2669;
      var $2672=$next;
      var $2673=$2;
      var $2674=(($2673)|0);
      HEAP32[(($2674)>>2)]=$2672;
      var $2675=$have;
      var $2676=$2;
      var $2677=(($2676+4)|0);
      HEAP32[(($2677)>>2)]=$2675;
      var $2678=$hold;
      var $2679=$state;
      var $2680=(($2679+56)|0);
      HEAP32[(($2680)>>2)]=$2678;
      var $2681=$bits;
      var $2682=$state;
      var $2683=(($2682+60)|0);
      HEAP32[(($2683)>>2)]=$2681;
      label = 568; break;
    case 568: 
      var $2685=$state;
      var $2686=(($2685+40)|0);
      var $2687=HEAP32[(($2686)>>2)];
      var $2688=(($2687)|0)!=0;
      if ($2688) { label = 573; break; } else { label = 569; break; }
    case 569: 
      var $2690=$out;
      var $2691=$2;
      var $2692=(($2691+16)|0);
      var $2693=HEAP32[(($2692)>>2)];
      var $2694=(($2690)|0)!=(($2693)|0);
      if ($2694) { label = 570; break; } else { label = 576; break; }
    case 570: 
      var $2696=$state;
      var $2697=(($2696)|0);
      var $2698=HEAP32[(($2697)>>2)];
      var $2699=(($2698)>>>0) < 29;
      if ($2699) { label = 571; break; } else { label = 576; break; }
    case 571: 
      var $2701=$state;
      var $2702=(($2701)|0);
      var $2703=HEAP32[(($2702)>>2)];
      var $2704=(($2703)>>>0) < 26;
      if ($2704) { label = 573; break; } else { label = 572; break; }
    case 572: 
      var $2706=$3;
      var $2707=(($2706)|0)!=4;
      if ($2707) { label = 573; break; } else { label = 576; break; }
    case 573: 
      var $2709=$2;
      var $2710=$out;
      var $2711=_updatewindow($2709, $2710);
      var $2712=(($2711)|0)!=0;
      if ($2712) { label = 574; break; } else { label = 575; break; }
    case 574: 
      var $2714=$state;
      var $2715=(($2714)|0);
      HEAP32[(($2715)>>2)]=30;
      $1=-4;
      label = 590; break;
    case 575: 
      label = 576; break;
    case 576: 
      var $2718=$2;
      var $2719=(($2718+4)|0);
      var $2720=HEAP32[(($2719)>>2)];
      var $2721=$in;
      var $2722=((($2721)-($2720))|0);
      $in=$2722;
      var $2723=$2;
      var $2724=(($2723+16)|0);
      var $2725=HEAP32[(($2724)>>2)];
      var $2726=$out;
      var $2727=((($2726)-($2725))|0);
      $out=$2727;
      var $2728=$in;
      var $2729=$2;
      var $2730=(($2729+8)|0);
      var $2731=HEAP32[(($2730)>>2)];
      var $2732=((($2731)+($2728))|0);
      HEAP32[(($2730)>>2)]=$2732;
      var $2733=$out;
      var $2734=$2;
      var $2735=(($2734+20)|0);
      var $2736=HEAP32[(($2735)>>2)];
      var $2737=((($2736)+($2733))|0);
      HEAP32[(($2735)>>2)]=$2737;
      var $2738=$out;
      var $2739=$state;
      var $2740=(($2739+28)|0);
      var $2741=HEAP32[(($2740)>>2)];
      var $2742=((($2741)+($2738))|0);
      HEAP32[(($2740)>>2)]=$2742;
      var $2743=$state;
      var $2744=(($2743+8)|0);
      var $2745=HEAP32[(($2744)>>2)];
      var $2746=(($2745)|0)!=0;
      if ($2746) { label = 577; break; } else { label = 582; break; }
    case 577: 
      var $2748=$out;
      var $2749=(($2748)|0)!=0;
      if ($2749) { label = 578; break; } else { label = 582; break; }
    case 578: 
      var $2751=$state;
      var $2752=(($2751+16)|0);
      var $2753=HEAP32[(($2752)>>2)];
      var $2754=(($2753)|0)!=0;
      if ($2754) { label = 579; break; } else { label = 580; break; }
    case 579: 
      var $2756=$state;
      var $2757=(($2756+24)|0);
      var $2758=HEAP32[(($2757)>>2)];
      var $2759=$2;
      var $2760=(($2759+12)|0);
      var $2761=HEAP32[(($2760)>>2)];
      var $2762=$out;
      var $2763=(((-$2762))|0);
      var $2764=(($2761+$2763)|0);
      var $2765=$out;
      var $2766=_crc32($2758, $2764, $2765);
      var $2780 = $2766;label = 581; break;
    case 580: 
      var $2768=$state;
      var $2769=(($2768+24)|0);
      var $2770=HEAP32[(($2769)>>2)];
      var $2771=$2;
      var $2772=(($2771+12)|0);
      var $2773=HEAP32[(($2772)>>2)];
      var $2774=$out;
      var $2775=(((-$2774))|0);
      var $2776=(($2773+$2775)|0);
      var $2777=$out;
      var $2778=_adler32($2770, $2776, $2777);
      var $2780 = $2778;label = 581; break;
    case 581: 
      var $2780;
      var $2781=$state;
      var $2782=(($2781+24)|0);
      HEAP32[(($2782)>>2)]=$2780;
      var $2783=$2;
      var $2784=(($2783+48)|0);
      HEAP32[(($2784)>>2)]=$2780;
      label = 582; break;
    case 582: 
      var $2786=$state;
      var $2787=(($2786+60)|0);
      var $2788=HEAP32[(($2787)>>2)];
      var $2789=$state;
      var $2790=(($2789+4)|0);
      var $2791=HEAP32[(($2790)>>2)];
      var $2792=(($2791)|0)!=0;
      var $2793=$2792 ? 64 : 0;
      var $2794=((($2788)+($2793))|0);
      var $2795=$state;
      var $2796=(($2795)|0);
      var $2797=HEAP32[(($2796)>>2)];
      var $2798=(($2797)|0)==11;
      var $2799=$2798 ? 128 : 0;
      var $2800=((($2794)+($2799))|0);
      var $2801=$state;
      var $2802=(($2801)|0);
      var $2803=HEAP32[(($2802)>>2)];
      var $2804=(($2803)|0)==19;
      if ($2804) { var $2811 = 1;label = 584; break; } else { label = 583; break; }
    case 583: 
      var $2806=$state;
      var $2807=(($2806)|0);
      var $2808=HEAP32[(($2807)>>2)];
      var $2809=(($2808)|0)==14;
      var $2811 = $2809;label = 584; break;
    case 584: 
      var $2811;
      var $2812=$2811 ? 256 : 0;
      var $2813=((($2800)+($2812))|0);
      var $2814=$2;
      var $2815=(($2814+44)|0);
      HEAP32[(($2815)>>2)]=$2813;
      var $2816=$in;
      var $2817=(($2816)|0)==0;
      if ($2817) { label = 585; break; } else { label = 586; break; }
    case 585: 
      var $2819=$out;
      var $2820=(($2819)|0)==0;
      if ($2820) { label = 587; break; } else { label = 586; break; }
    case 586: 
      var $2822=$3;
      var $2823=(($2822)|0)==4;
      if ($2823) { label = 587; break; } else { label = 589; break; }
    case 587: 
      var $2825=$ret;
      var $2826=(($2825)|0)==0;
      if ($2826) { label = 588; break; } else { label = 589; break; }
    case 588: 
      $ret=-5;
      label = 589; break;
    case 589: 
      var $2829=$ret;
      $1=$2829;
      label = 590; break;
    case 590: 
      var $2831=$1;
      STACKTOP = __stackBase__;
      return $2831;
    default: assert(0, "bad label: " + label);
  }
}
_inflate["X"]=1;

function _fixedtables($state) {
  var label = 0;


  var $1;
  $1=$state;
  var $2=$1;
  var $3=(($2+76)|0);
  HEAP32[(($3)>>2)]=((5247540)|0);
  var $4=$1;
  var $5=(($4+84)|0);
  HEAP32[(($5)>>2)]=9;
  var $6=$1;
  var $7=(($6+80)|0);
  HEAP32[(($7)>>2)]=((5249588)|0);
  var $8=$1;
  var $9=(($8+88)|0);
  HEAP32[(($9)>>2)]=5;

  return;
}


function _updatewindow($strm, $out) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $state;
      var $copy;
      var $dist;
      $2=$strm;
      $3=$out;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $state=$7;
      var $8=$state;
      var $9=(($8+52)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0)==0;
      if ($11) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $13=$2;
      var $14=(($13+32)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$2;
      var $17=(($16+40)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$state;
      var $20=(($19+36)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=1 << $21;
      var $23=FUNCTION_TABLE[$15]($18, $22, 1);
      var $24=$state;
      var $25=(($24+52)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$state;
      var $27=(($26+52)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==0;
      if ($29) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 21; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $33=$state;
      var $34=(($33+40)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0)==0;
      if ($36) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $38=$state;
      var $39=(($38+36)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=1 << $40;
      var $42=$state;
      var $43=(($42+40)|0);
      HEAP32[(($43)>>2)]=$41;
      var $44=$state;
      var $45=(($44+48)|0);
      HEAP32[(($45)>>2)]=0;
      var $46=$state;
      var $47=(($46+44)|0);
      HEAP32[(($47)>>2)]=0;
      label = 8; break;
    case 8: 
      var $49=$3;
      var $50=$2;
      var $51=(($50+16)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($49)-($52))|0);
      $copy=$53;
      var $54=$copy;
      var $55=$state;
      var $56=(($55+40)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($54)>>>0) >= (($57)>>>0);
      if ($58) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $60=$state;
      var $61=(($60+52)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$2;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$state;
      var $67=(($66+40)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(((-$68))|0);
      var $70=(($65+$69)|0);
      var $71=$state;
      var $72=(($71+40)|0);
      var $73=HEAP32[(($72)>>2)];
      assert($73 % 1 === 0);_memcpy($62, $70, $73);
      var $74=$state;
      var $75=(($74+48)|0);
      HEAP32[(($75)>>2)]=0;
      var $76=$state;
      var $77=(($76+40)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$state;
      var $80=(($79+44)|0);
      HEAP32[(($80)>>2)]=$78;
      label = 20; break;
    case 10: 
      var $82=$state;
      var $83=(($82+40)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$state;
      var $86=(($85+48)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($84)-($87))|0);
      $dist=$88;
      var $89=$dist;
      var $90=$copy;
      var $91=(($89)>>>0) > (($90)>>>0);
      if ($91) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $93=$copy;
      $dist=$93;
      label = 12; break;
    case 12: 
      var $95=$state;
      var $96=(($95+52)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$state;
      var $99=(($98+48)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($97+$100)|0);
      var $102=$2;
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$copy;
      var $106=(((-$105))|0);
      var $107=(($104+$106)|0);
      var $108=$dist;
      assert($108 % 1 === 0);_memcpy($101, $107, $108);
      var $109=$dist;
      var $110=$copy;
      var $111=((($110)-($109))|0);
      $copy=$111;
      var $112=$copy;
      var $113=(($112)|0)!=0;
      if ($113) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $115=$state;
      var $116=(($115+52)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$2;
      var $119=(($118+12)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$copy;
      var $122=(((-$121))|0);
      var $123=(($120+$122)|0);
      var $124=$copy;
      assert($124 % 1 === 0);_memcpy($117, $123, $124);
      var $125=$copy;
      var $126=$state;
      var $127=(($126+48)|0);
      HEAP32[(($127)>>2)]=$125;
      var $128=$state;
      var $129=(($128+40)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$state;
      var $132=(($131+44)|0);
      HEAP32[(($132)>>2)]=$130;
      label = 19; break;
    case 14: 
      var $134=$dist;
      var $135=$state;
      var $136=(($135+48)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=((($137)+($134))|0);
      HEAP32[(($136)>>2)]=$138;
      var $139=$state;
      var $140=(($139+48)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=$state;
      var $143=(($142+40)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($141)|0)==(($144)|0);
      if ($145) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $147=$state;
      var $148=(($147+48)|0);
      HEAP32[(($148)>>2)]=0;
      label = 16; break;
    case 16: 
      var $150=$state;
      var $151=(($150+44)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$state;
      var $154=(($153+40)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($152)>>>0) < (($155)>>>0);
      if ($156) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $158=$dist;
      var $159=$state;
      var $160=(($159+44)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)+($158))|0);
      HEAP32[(($160)>>2)]=$162;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $1=0;
      label = 21; break;
    case 21: 
      var $167=$1;

      return $167;
    default: assert(0, "bad label: " + label);
  }
}
_updatewindow["X"]=1;

function _inflateEnd($strm) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $state;
      $2=$strm;
      var $3=$2;
      var $4=(($3)|0)==0;
      if ($4) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $6=$2;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0)==0;
      if ($9) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $11=$2;
      var $12=(($11+36)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)==0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=-2;
      label = 9; break;
    case 6: 
      var $17=$2;
      var $18=(($17+28)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      $state=$20;
      var $21=$state;
      var $22=(($21+52)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0)!=0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$2;
      var $27=(($26+36)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=(($29+40)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$state;
      var $33=(($32+52)|0);
      var $34=HEAP32[(($33)>>2)];
      FUNCTION_TABLE[$28]($31, $34);
      label = 8; break;
    case 8: 
      var $36=$2;
      var $37=(($36+36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+40)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$2;
      var $43=(($42+28)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      FUNCTION_TABLE[$38]($41, $45);
      var $46=$2;
      var $47=(($46+28)|0);
      HEAP32[(($47)>>2)]=0;
      $1=0;
      label = 9; break;
    case 9: 
      var $49=$1;

      return $49;
    default: assert(0, "bad label: " + label);
  }
}
_inflateEnd["X"]=1;

function _inflate_table($type, $lens, $codes, $table, $bits, $work) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 68)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $len;
      var $sym;
      var $min;
      var $max;
      var $root;
      var $curr;
      var $drop;
      var $left;
      var $used;
      var $huff;
      var $incr;
      var $fill;
      var $low;
      var $mask;
      var $here=__stackBase__;
      var $next;
      var $base;
      var $extra;
      var $end;
      var $count=(__stackBase__)+(4);
      var $offs=(__stackBase__)+(36);
      $2=$type;
      $3=$lens;
      $4=$codes;
      $5=$table;
      $6=$bits;
      $7=$work;
      $len=0;
      label = 3; break;
    case 3: 
      var $9=$len;
      var $10=(($9)>>>0) <= 15;
      if ($10) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $12=$len;
      var $13=(($count+($12<<1))|0);
      HEAP16[(($13)>>1)]=0;
      label = 5; break;
    case 5: 
      var $15=$len;
      var $16=((($15)+(1))|0);
      $len=$16;
      label = 3; break;
    case 6: 
      $sym=0;
      label = 7; break;
    case 7: 
      var $19=$sym;
      var $20=$4;
      var $21=(($19)>>>0) < (($20)>>>0);
      if ($21) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $23=$sym;
      var $24=$3;
      var $25=(($24+($23<<1))|0);
      var $26=HEAP16[(($25)>>1)];
      var $27=(($26)&65535);
      var $28=(($count+($27<<1))|0);
      var $29=HEAP16[(($28)>>1)];
      var $30=((($29)+(1))&65535);
      HEAP16[(($28)>>1)]=$30;
      label = 9; break;
    case 9: 
      var $32=$sym;
      var $33=((($32)+(1))|0);
      $sym=$33;
      label = 7; break;
    case 10: 
      var $35=$6;
      var $36=HEAP32[(($35)>>2)];
      $root=$36;
      $max=15;
      label = 11; break;
    case 11: 
      var $38=$max;
      var $39=(($38)>>>0) >= 1;
      if ($39) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $41=$max;
      var $42=(($count+($41<<1))|0);
      var $43=HEAP16[(($42)>>1)];
      var $44=(($43)&65535);
      var $45=(($44)|0)!=0;
      if ($45) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $49=$max;
      var $50=((($49)-(1))|0);
      $max=$50;
      label = 11; break;
    case 16: 
      var $52=$root;
      var $53=$max;
      var $54=(($52)>>>0) > (($53)>>>0);
      if ($54) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $56=$max;
      $root=$56;
      label = 18; break;
    case 18: 
      var $58=$max;
      var $59=(($58)|0)==0;
      if ($59) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $61=(($here)|0);
      HEAP8[($61)]=64;
      var $62=(($here+1)|0);
      HEAP8[($62)]=1;
      var $63=(($here+2)|0);
      HEAP16[(($63)>>1)]=0;
      var $64=$5;
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+4)|0);
      HEAP32[(($64)>>2)]=$66;
      var $67=$65;
      var $68=$here;
      assert(4 % 1 === 0);HEAP16[(($67)>>1)]=HEAP16[(($68)>>1)];HEAP16[((($67)+(2))>>1)]=HEAP16[((($68)+(2))>>1)];
      var $69=$5;
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+4)|0);
      HEAP32[(($69)>>2)]=$71;
      var $72=$70;
      var $73=$here;
      assert(4 % 1 === 0);HEAP16[(($72)>>1)]=HEAP16[(($73)>>1)];HEAP16[((($72)+(2))>>1)]=HEAP16[((($73)+(2))>>1)];
      var $74=$6;
      HEAP32[(($74)>>2)]=1;
      $1=0;
      label = 96; break;
    case 20: 
      $min=1;
      label = 21; break;
    case 21: 
      var $77=$min;
      var $78=$max;
      var $79=(($77)>>>0) < (($78)>>>0);
      if ($79) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $81=$min;
      var $82=(($count+($81<<1))|0);
      var $83=HEAP16[(($82)>>1)];
      var $84=(($83)&65535);
      var $85=(($84)|0)!=0;
      if ($85) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 26; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $89=$min;
      var $90=((($89)+(1))|0);
      $min=$90;
      label = 21; break;
    case 26: 
      var $92=$root;
      var $93=$min;
      var $94=(($92)>>>0) < (($93)>>>0);
      if ($94) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $96=$min;
      $root=$96;
      label = 28; break;
    case 28: 
      $left=1;
      $len=1;
      label = 29; break;
    case 29: 
      var $99=$len;
      var $100=(($99)>>>0) <= 15;
      if ($100) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $102=$left;
      var $103=$102 << 1;
      $left=$103;
      var $104=$len;
      var $105=(($count+($104<<1))|0);
      var $106=HEAP16[(($105)>>1)];
      var $107=(($106)&65535);
      var $108=$left;
      var $109=((($108)-($107))|0);
      $left=$109;
      var $110=$left;
      var $111=(($110)|0) < 0;
      if ($111) { label = 31; break; } else { label = 32; break; }
    case 31: 
      $1=-1;
      label = 96; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $115=$len;
      var $116=((($115)+(1))|0);
      $len=$116;
      label = 29; break;
    case 34: 
      var $118=$left;
      var $119=(($118)|0) > 0;
      if ($119) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $121=$2;
      var $122=(($121)|0)==0;
      if ($122) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $124=$max;
      var $125=(($124)|0)!=1;
      if ($125) { label = 37; break; } else { label = 38; break; }
    case 37: 
      $1=-1;
      label = 96; break;
    case 38: 
      var $128=(($offs+2)|0);
      HEAP16[(($128)>>1)]=0;
      $len=1;
      label = 39; break;
    case 39: 
      var $130=$len;
      var $131=(($130)>>>0) < 15;
      if ($131) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $133=$len;
      var $134=(($offs+($133<<1))|0);
      var $135=HEAP16[(($134)>>1)];
      var $136=(($135)&65535);
      var $137=$len;
      var $138=(($count+($137<<1))|0);
      var $139=HEAP16[(($138)>>1)];
      var $140=(($139)&65535);
      var $141=((($136)+($140))|0);
      var $142=(($141) & 65535);
      var $143=$len;
      var $144=((($143)+(1))|0);
      var $145=(($offs+($144<<1))|0);
      HEAP16[(($145)>>1)]=$142;
      label = 41; break;
    case 41: 
      var $147=$len;
      var $148=((($147)+(1))|0);
      $len=$148;
      label = 39; break;
    case 42: 
      $sym=0;
      label = 43; break;
    case 43: 
      var $151=$sym;
      var $152=$4;
      var $153=(($151)>>>0) < (($152)>>>0);
      if ($153) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $155=$sym;
      var $156=$3;
      var $157=(($156+($155<<1))|0);
      var $158=HEAP16[(($157)>>1)];
      var $159=(($158)&65535);
      var $160=(($159)|0)!=0;
      if ($160) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $162=$sym;
      var $163=(($162) & 65535);
      var $164=$sym;
      var $165=$3;
      var $166=(($165+($164<<1))|0);
      var $167=HEAP16[(($166)>>1)];
      var $168=(($167)&65535);
      var $169=(($offs+($168<<1))|0);
      var $170=HEAP16[(($169)>>1)];
      var $171=((($170)+(1))&65535);
      HEAP16[(($169)>>1)]=$171;
      var $172=(($170)&65535);
      var $173=$7;
      var $174=(($173+($172<<1))|0);
      HEAP16[(($174)>>1)]=$163;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $177=$sym;
      var $178=((($177)+(1))|0);
      $sym=$178;
      label = 43; break;
    case 48: 
      var $180=$2;
      if ((($180)|0) == 0) {
        label = 49; break;
      }
      else if ((($180)|0) == 1) {
        label = 50; break;
      }
      else {
      label = 51; break;
      }
      
    case 49: 
      var $182=$7;
      $extra=$182;
      $base=$182;
      $end=19;
      label = 52; break;
    case 50: 
      $base=((5247172)|0);
      var $184=$base;
      var $185=((($184)-(514))|0);
      $base=$185;
      $extra=((5247108)|0);
      var $186=$extra;
      var $187=((($186)-(514))|0);
      $extra=$187;
      $end=256;
      label = 52; break;
    case 51: 
      $base=((5247300)|0);
      $extra=((5247236)|0);
      $end=-1;
      label = 52; break;
    case 52: 
      $huff=0;
      $sym=0;
      var $190=$min;
      $len=$190;
      var $191=$5;
      var $192=HEAP32[(($191)>>2)];
      $next=$192;
      var $193=$root;
      $curr=$193;
      $drop=0;
      $low=-1;
      var $194=$root;
      var $195=1 << $194;
      $used=$195;
      var $196=$used;
      var $197=((($196)-(1))|0);
      $mask=$197;
      var $198=$2;
      var $199=(($198)|0)==1;
      if ($199) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $201=$used;
      var $202=(($201)>>>0) >= 852;
      if ($202) { label = 56; break; } else { label = 54; break; }
    case 54: 
      var $204=$2;
      var $205=(($204)|0)==2;
      if ($205) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $207=$used;
      var $208=(($207)>>>0) >= 592;
      if ($208) { label = 56; break; } else { label = 57; break; }
    case 56: 
      $1=1;
      label = 96; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $212=$len;
      var $213=$drop;
      var $214=((($212)-($213))|0);
      var $215=(($214) & 255);
      var $216=(($here+1)|0);
      HEAP8[($216)]=$215;
      var $217=$sym;
      var $218=$7;
      var $219=(($218+($217<<1))|0);
      var $220=HEAP16[(($219)>>1)];
      var $221=(($220)&65535);
      var $222=$end;
      var $223=(($221)|0) < (($222)|0);
      if ($223) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $225=(($here)|0);
      HEAP8[($225)]=0;
      var $226=$sym;
      var $227=$7;
      var $228=(($227+($226<<1))|0);
      var $229=HEAP16[(($228)>>1)];
      var $230=(($here+2)|0);
      HEAP16[(($230)>>1)]=$229;
      label = 64; break;
    case 60: 
      var $232=$sym;
      var $233=$7;
      var $234=(($233+($232<<1))|0);
      var $235=HEAP16[(($234)>>1)];
      var $236=(($235)&65535);
      var $237=$end;
      var $238=(($236)|0) > (($237)|0);
      if ($238) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $240=$sym;
      var $241=$7;
      var $242=(($241+($240<<1))|0);
      var $243=HEAP16[(($242)>>1)];
      var $244=(($243)&65535);
      var $245=$extra;
      var $246=(($245+($244<<1))|0);
      var $247=HEAP16[(($246)>>1)];
      var $248=(($247) & 255);
      var $249=(($here)|0);
      HEAP8[($249)]=$248;
      var $250=$sym;
      var $251=$7;
      var $252=(($251+($250<<1))|0);
      var $253=HEAP16[(($252)>>1)];
      var $254=(($253)&65535);
      var $255=$base;
      var $256=(($255+($254<<1))|0);
      var $257=HEAP16[(($256)>>1)];
      var $258=(($here+2)|0);
      HEAP16[(($258)>>1)]=$257;
      label = 63; break;
    case 62: 
      var $260=(($here)|0);
      HEAP8[($260)]=96;
      var $261=(($here+2)|0);
      HEAP16[(($261)>>1)]=0;
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $264=$len;
      var $265=$drop;
      var $266=((($264)-($265))|0);
      var $267=1 << $266;
      $incr=$267;
      var $268=$curr;
      var $269=1 << $268;
      $fill=$269;
      var $270=$fill;
      $min=$270;
      label = 65; break;
    case 65: 
      var $272=$incr;
      var $273=$fill;
      var $274=((($273)-($272))|0);
      $fill=$274;
      var $275=$huff;
      var $276=$drop;
      var $277=$275 >>> (($276)>>>0);
      var $278=$fill;
      var $279=((($277)+($278))|0);
      var $280=$next;
      var $281=(($280+($279<<2))|0);
      var $282=$281;
      var $283=$here;
      assert(4 % 1 === 0);HEAP16[(($282)>>1)]=HEAP16[(($283)>>1)];HEAP16[((($282)+(2))>>1)]=HEAP16[((($283)+(2))>>1)];
      label = 66; break;
    case 66: 
      var $285=$fill;
      var $286=(($285)|0)!=0;
      if ($286) { label = 65; break; } else { label = 67; break; }
    case 67: 
      var $288=$len;
      var $289=((($288)-(1))|0);
      var $290=1 << $289;
      $incr=$290;
      label = 68; break;
    case 68: 
      var $292=$huff;
      var $293=$incr;
      var $294=$292 & $293;
      var $295=(($294)|0)!=0;
      if ($295) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $297=$incr;
      var $298=$297 >>> 1;
      $incr=$298;
      label = 68; break;
    case 70: 
      var $300=$incr;
      var $301=(($300)|0)!=0;
      if ($301) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $303=$incr;
      var $304=((($303)-(1))|0);
      var $305=$huff;
      var $306=$305 & $304;
      $huff=$306;
      var $307=$incr;
      var $308=$huff;
      var $309=((($308)+($307))|0);
      $huff=$309;
      label = 73; break;
    case 72: 
      $huff=0;
      label = 73; break;
    case 73: 
      var $312=$sym;
      var $313=((($312)+(1))|0);
      $sym=$313;
      var $314=$len;
      var $315=(($count+($314<<1))|0);
      var $316=HEAP16[(($315)>>1)];
      var $317=((($316)-(1))&65535);
      HEAP16[(($315)>>1)]=$317;
      var $318=(($317)&65535);
      var $319=(($318)|0)==0;
      if ($319) { label = 74; break; } else { label = 77; break; }
    case 74: 
      var $321=$len;
      var $322=$max;
      var $323=(($321)|0)==(($322)|0);
      if ($323) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 93; break;
    case 76: 
      var $326=$sym;
      var $327=$7;
      var $328=(($327+($326<<1))|0);
      var $329=HEAP16[(($328)>>1)];
      var $330=(($329)&65535);
      var $331=$3;
      var $332=(($331+($330<<1))|0);
      var $333=HEAP16[(($332)>>1)];
      var $334=(($333)&65535);
      $len=$334;
      label = 77; break;
    case 77: 
      var $336=$len;
      var $337=$root;
      var $338=(($336)>>>0) > (($337)>>>0);
      if ($338) { label = 78; break; } else { label = 92; break; }
    case 78: 
      var $340=$huff;
      var $341=$mask;
      var $342=$340 & $341;
      var $343=$low;
      var $344=(($342)|0)!=(($343)|0);
      if ($344) { label = 79; break; } else { label = 92; break; }
    case 79: 
      var $346=$drop;
      var $347=(($346)|0)==0;
      if ($347) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $349=$root;
      $drop=$349;
      label = 81; break;
    case 81: 
      var $351=$min;
      var $352=$next;
      var $353=(($352+($351<<2))|0);
      $next=$353;
      var $354=$len;
      var $355=$drop;
      var $356=((($354)-($355))|0);
      $curr=$356;
      var $357=$curr;
      var $358=1 << $357;
      $left=$358;
      label = 82; break;
    case 82: 
      var $360=$curr;
      var $361=$drop;
      var $362=((($360)+($361))|0);
      var $363=$max;
      var $364=(($362)>>>0) < (($363)>>>0);
      if ($364) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $366=$curr;
      var $367=$drop;
      var $368=((($366)+($367))|0);
      var $369=(($count+($368<<1))|0);
      var $370=HEAP16[(($369)>>1)];
      var $371=(($370)&65535);
      var $372=$left;
      var $373=((($372)-($371))|0);
      $left=$373;
      var $374=$left;
      var $375=(($374)|0) <= 0;
      if ($375) { label = 84; break; } else { label = 85; break; }
    case 84: 
      label = 86; break;
    case 85: 
      var $378=$curr;
      var $379=((($378)+(1))|0);
      $curr=$379;
      var $380=$left;
      var $381=$380 << 1;
      $left=$381;
      label = 82; break;
    case 86: 
      var $383=$curr;
      var $384=1 << $383;
      var $385=$used;
      var $386=((($385)+($384))|0);
      $used=$386;
      var $387=$2;
      var $388=(($387)|0)==1;
      if ($388) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $390=$used;
      var $391=(($390)>>>0) >= 852;
      if ($391) { label = 90; break; } else { label = 88; break; }
    case 88: 
      var $393=$2;
      var $394=(($393)|0)==2;
      if ($394) { label = 89; break; } else { label = 91; break; }
    case 89: 
      var $396=$used;
      var $397=(($396)>>>0) >= 592;
      if ($397) { label = 90; break; } else { label = 91; break; }
    case 90: 
      $1=1;
      label = 96; break;
    case 91: 
      var $400=$huff;
      var $401=$mask;
      var $402=$400 & $401;
      $low=$402;
      var $403=$curr;
      var $404=(($403) & 255);
      var $405=$low;
      var $406=$5;
      var $407=HEAP32[(($406)>>2)];
      var $408=(($407+($405<<2))|0);
      var $409=(($408)|0);
      HEAP8[($409)]=$404;
      var $410=$root;
      var $411=(($410) & 255);
      var $412=$low;
      var $413=$5;
      var $414=HEAP32[(($413)>>2)];
      var $415=(($414+($412<<2))|0);
      var $416=(($415+1)|0);
      HEAP8[($416)]=$411;
      var $417=$next;
      var $418=$5;
      var $419=HEAP32[(($418)>>2)];
      var $420=$417;
      var $421=$419;
      var $422=((($420)-($421))|0);
      var $423=((((($422)|0))/(4))&-1);
      var $424=(($423) & 65535);
      var $425=$low;
      var $426=$5;
      var $427=HEAP32[(($426)>>2)];
      var $428=(($427+($425<<2))|0);
      var $429=(($428+2)|0);
      HEAP16[(($429)>>1)]=$424;
      label = 92; break;
    case 92: 
      label = 58; break;
    case 93: 
      var $432=$huff;
      var $433=(($432)|0)!=0;
      if ($433) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $435=(($here)|0);
      HEAP8[($435)]=64;
      var $436=$len;
      var $437=$drop;
      var $438=((($436)-($437))|0);
      var $439=(($438) & 255);
      var $440=(($here+1)|0);
      HEAP8[($440)]=$439;
      var $441=(($here+2)|0);
      HEAP16[(($441)>>1)]=0;
      var $442=$huff;
      var $443=$next;
      var $444=(($443+($442<<2))|0);
      var $445=$444;
      var $446=$here;
      assert(4 % 1 === 0);HEAP16[(($445)>>1)]=HEAP16[(($446)>>1)];HEAP16[((($445)+(2))>>1)]=HEAP16[((($446)+(2))>>1)];
      label = 95; break;
    case 95: 
      var $448=$used;
      var $449=$5;
      var $450=HEAP32[(($449)>>2)];
      var $451=(($450+($448<<2))|0);
      HEAP32[(($449)>>2)]=$451;
      var $452=$root;
      var $453=$6;
      HEAP32[(($453)>>2)]=$452;
      $1=0;
      label = 96; break;
    case 96: 
      var $455=$1;
      STACKTOP = __stackBase__;
      return $455;
    default: assert(0, "bad label: " + label);
  }
}
_inflate_table["X"]=1;

function _zcalloc($opaque, $items, $size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$opaque;
      $2=$items;
      $3=$size;
      var $4=$1;
      var $5=(($4)|0)!=0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$3;
      var $8=$3;
      var $9=((($7)-($8))|0);
      var $10=$2;
      var $11=((($10)+($9))|0);
      $2=$11;
      label = 4; break;
    case 4: 
      var $13=$2;
      var $14=$3;
      var $15=((($13)*($14))|0);
      var $16=_malloc($15);

      return $16;
    default: assert(0, "bad label: " + label);
  }
}


function _zcfree($opaque, $ptr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$opaque;
      $2=$ptr;
      var $3=$2;
      _free($3);
      var $4=$1;
      var $5=(($4)|0)!=0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 4; break;
    case 4: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _adler32($adler, $buf, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sum2;
      var $n;
      $2=$adler;
      $3=$buf;
      $4=$len;
      var $5=$2;
      var $6=$5 >>> 16;
      var $7=$6 & 65535;
      $sum2=$7;
      var $8=$2;
      var $9=$8 & 65535;
      $2=$9;
      var $10=$4;
      var $11=(($10)|0)==1;
      if ($11) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $13=$3;
      var $14=(($13)|0);
      var $15=HEAP8[($14)];
      var $16=(($15)&255);
      var $17=$2;
      var $18=((($17)+($16))|0);
      $2=$18;
      var $19=$2;
      var $20=(($19)>>>0) >= 65521;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $22=$2;
      var $23=((($22)-(65521))|0);
      $2=$23;
      label = 5; break;
    case 5: 
      var $25=$2;
      var $26=$sum2;
      var $27=((($26)+($25))|0);
      $sum2=$27;
      var $28=$sum2;
      var $29=(($28)>>>0) >= 65521;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $31=$sum2;
      var $32=((($31)-(65521))|0);
      $sum2=$32;
      label = 7; break;
    case 7: 
      var $34=$2;
      var $35=$sum2;
      var $36=$35 << 16;
      var $37=$34 | $36;
      $1=$37;
      label = 32; break;
    case 8: 
      var $39=$3;
      var $40=(($39)|0)==0;
      if ($40) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $1=1;
      label = 32; break;
    case 10: 
      var $43=$4;
      var $44=(($43)>>>0) < 16;
      if ($44) { label = 11; break; } else { label = 17; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $47=$4;
      var $48=((($47)-(1))|0);
      $4=$48;
      var $49=(($47)|0)!=0;
      if ($49) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $51=$3;
      var $52=(($51+1)|0);
      $3=$52;
      var $53=HEAP8[($51)];
      var $54=(($53)&255);
      var $55=$2;
      var $56=((($55)+($54))|0);
      $2=$56;
      var $57=$2;
      var $58=$sum2;
      var $59=((($58)+($57))|0);
      $sum2=$59;
      label = 12; break;
    case 14: 
      var $61=$2;
      var $62=(($61)>>>0) >= 65521;
      if ($62) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $64=$2;
      var $65=((($64)-(65521))|0);
      $2=$65;
      label = 16; break;
    case 16: 
      var $67=$sum2;
      var $68=((($67)>>>0))%(65521);
      $sum2=$68;
      var $69=$2;
      var $70=$sum2;
      var $71=$70 << 16;
      var $72=$69 | $71;
      $1=$72;
      label = 32; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $75=$4;
      var $76=(($75)>>>0) >= 5552;
      if ($76) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $78=$4;
      var $79=((($78)-(5552))|0);
      $4=$79;
      $n=347;
      label = 20; break;
    case 20: 
      var $81=$3;
      var $82=(($81)|0);
      var $83=HEAP8[($82)];
      var $84=(($83)&255);
      var $85=$2;
      var $86=((($85)+($84))|0);
      $2=$86;
      var $87=$2;
      var $88=$sum2;
      var $89=((($88)+($87))|0);
      $sum2=$89;
      var $90=$3;
      var $91=(($90+1)|0);
      var $92=HEAP8[($91)];
      var $93=(($92)&255);
      var $94=$2;
      var $95=((($94)+($93))|0);
      $2=$95;
      var $96=$2;
      var $97=$sum2;
      var $98=((($97)+($96))|0);
      $sum2=$98;
      var $99=$3;
      var $100=(($99+2)|0);
      var $101=HEAP8[($100)];
      var $102=(($101)&255);
      var $103=$2;
      var $104=((($103)+($102))|0);
      $2=$104;
      var $105=$2;
      var $106=$sum2;
      var $107=((($106)+($105))|0);
      $sum2=$107;
      var $108=$3;
      var $109=(($108+3)|0);
      var $110=HEAP8[($109)];
      var $111=(($110)&255);
      var $112=$2;
      var $113=((($112)+($111))|0);
      $2=$113;
      var $114=$2;
      var $115=$sum2;
      var $116=((($115)+($114))|0);
      $sum2=$116;
      var $117=$3;
      var $118=(($117+4)|0);
      var $119=HEAP8[($118)];
      var $120=(($119)&255);
      var $121=$2;
      var $122=((($121)+($120))|0);
      $2=$122;
      var $123=$2;
      var $124=$sum2;
      var $125=((($124)+($123))|0);
      $sum2=$125;
      var $126=$3;
      var $127=(($126+5)|0);
      var $128=HEAP8[($127)];
      var $129=(($128)&255);
      var $130=$2;
      var $131=((($130)+($129))|0);
      $2=$131;
      var $132=$2;
      var $133=$sum2;
      var $134=((($133)+($132))|0);
      $sum2=$134;
      var $135=$3;
      var $136=(($135+6)|0);
      var $137=HEAP8[($136)];
      var $138=(($137)&255);
      var $139=$2;
      var $140=((($139)+($138))|0);
      $2=$140;
      var $141=$2;
      var $142=$sum2;
      var $143=((($142)+($141))|0);
      $sum2=$143;
      var $144=$3;
      var $145=(($144+7)|0);
      var $146=HEAP8[($145)];
      var $147=(($146)&255);
      var $148=$2;
      var $149=((($148)+($147))|0);
      $2=$149;
      var $150=$2;
      var $151=$sum2;
      var $152=((($151)+($150))|0);
      $sum2=$152;
      var $153=$3;
      var $154=(($153+8)|0);
      var $155=HEAP8[($154)];
      var $156=(($155)&255);
      var $157=$2;
      var $158=((($157)+($156))|0);
      $2=$158;
      var $159=$2;
      var $160=$sum2;
      var $161=((($160)+($159))|0);
      $sum2=$161;
      var $162=$3;
      var $163=(($162+9)|0);
      var $164=HEAP8[($163)];
      var $165=(($164)&255);
      var $166=$2;
      var $167=((($166)+($165))|0);
      $2=$167;
      var $168=$2;
      var $169=$sum2;
      var $170=((($169)+($168))|0);
      $sum2=$170;
      var $171=$3;
      var $172=(($171+10)|0);
      var $173=HEAP8[($172)];
      var $174=(($173)&255);
      var $175=$2;
      var $176=((($175)+($174))|0);
      $2=$176;
      var $177=$2;
      var $178=$sum2;
      var $179=((($178)+($177))|0);
      $sum2=$179;
      var $180=$3;
      var $181=(($180+11)|0);
      var $182=HEAP8[($181)];
      var $183=(($182)&255);
      var $184=$2;
      var $185=((($184)+($183))|0);
      $2=$185;
      var $186=$2;
      var $187=$sum2;
      var $188=((($187)+($186))|0);
      $sum2=$188;
      var $189=$3;
      var $190=(($189+12)|0);
      var $191=HEAP8[($190)];
      var $192=(($191)&255);
      var $193=$2;
      var $194=((($193)+($192))|0);
      $2=$194;
      var $195=$2;
      var $196=$sum2;
      var $197=((($196)+($195))|0);
      $sum2=$197;
      var $198=$3;
      var $199=(($198+13)|0);
      var $200=HEAP8[($199)];
      var $201=(($200)&255);
      var $202=$2;
      var $203=((($202)+($201))|0);
      $2=$203;
      var $204=$2;
      var $205=$sum2;
      var $206=((($205)+($204))|0);
      $sum2=$206;
      var $207=$3;
      var $208=(($207+14)|0);
      var $209=HEAP8[($208)];
      var $210=(($209)&255);
      var $211=$2;
      var $212=((($211)+($210))|0);
      $2=$212;
      var $213=$2;
      var $214=$sum2;
      var $215=((($214)+($213))|0);
      $sum2=$215;
      var $216=$3;
      var $217=(($216+15)|0);
      var $218=HEAP8[($217)];
      var $219=(($218)&255);
      var $220=$2;
      var $221=((($220)+($219))|0);
      $2=$221;
      var $222=$2;
      var $223=$sum2;
      var $224=((($223)+($222))|0);
      $sum2=$224;
      var $225=$3;
      var $226=(($225+16)|0);
      $3=$226;
      label = 21; break;
    case 21: 
      var $228=$n;
      var $229=((($228)-(1))|0);
      $n=$229;
      var $230=(($229)|0)!=0;
      if ($230) { label = 20; break; } else { label = 22; break; }
    case 22: 
      var $232=$2;
      var $233=((($232)>>>0))%(65521);
      $2=$233;
      var $234=$sum2;
      var $235=((($234)>>>0))%(65521);
      $sum2=$235;
      label = 18; break;
    case 23: 
      var $237=$4;
      var $238=(($237)|0)!=0;
      if ($238) { label = 24; break; } else { label = 31; break; }
    case 24: 
      label = 25; break;
    case 25: 
      var $241=$4;
      var $242=(($241)>>>0) >= 16;
      if ($242) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $244=$4;
      var $245=((($244)-(16))|0);
      $4=$245;
      var $246=$3;
      var $247=(($246)|0);
      var $248=HEAP8[($247)];
      var $249=(($248)&255);
      var $250=$2;
      var $251=((($250)+($249))|0);
      $2=$251;
      var $252=$2;
      var $253=$sum2;
      var $254=((($253)+($252))|0);
      $sum2=$254;
      var $255=$3;
      var $256=(($255+1)|0);
      var $257=HEAP8[($256)];
      var $258=(($257)&255);
      var $259=$2;
      var $260=((($259)+($258))|0);
      $2=$260;
      var $261=$2;
      var $262=$sum2;
      var $263=((($262)+($261))|0);
      $sum2=$263;
      var $264=$3;
      var $265=(($264+2)|0);
      var $266=HEAP8[($265)];
      var $267=(($266)&255);
      var $268=$2;
      var $269=((($268)+($267))|0);
      $2=$269;
      var $270=$2;
      var $271=$sum2;
      var $272=((($271)+($270))|0);
      $sum2=$272;
      var $273=$3;
      var $274=(($273+3)|0);
      var $275=HEAP8[($274)];
      var $276=(($275)&255);
      var $277=$2;
      var $278=((($277)+($276))|0);
      $2=$278;
      var $279=$2;
      var $280=$sum2;
      var $281=((($280)+($279))|0);
      $sum2=$281;
      var $282=$3;
      var $283=(($282+4)|0);
      var $284=HEAP8[($283)];
      var $285=(($284)&255);
      var $286=$2;
      var $287=((($286)+($285))|0);
      $2=$287;
      var $288=$2;
      var $289=$sum2;
      var $290=((($289)+($288))|0);
      $sum2=$290;
      var $291=$3;
      var $292=(($291+5)|0);
      var $293=HEAP8[($292)];
      var $294=(($293)&255);
      var $295=$2;
      var $296=((($295)+($294))|0);
      $2=$296;
      var $297=$2;
      var $298=$sum2;
      var $299=((($298)+($297))|0);
      $sum2=$299;
      var $300=$3;
      var $301=(($300+6)|0);
      var $302=HEAP8[($301)];
      var $303=(($302)&255);
      var $304=$2;
      var $305=((($304)+($303))|0);
      $2=$305;
      var $306=$2;
      var $307=$sum2;
      var $308=((($307)+($306))|0);
      $sum2=$308;
      var $309=$3;
      var $310=(($309+7)|0);
      var $311=HEAP8[($310)];
      var $312=(($311)&255);
      var $313=$2;
      var $314=((($313)+($312))|0);
      $2=$314;
      var $315=$2;
      var $316=$sum2;
      var $317=((($316)+($315))|0);
      $sum2=$317;
      var $318=$3;
      var $319=(($318+8)|0);
      var $320=HEAP8[($319)];
      var $321=(($320)&255);
      var $322=$2;
      var $323=((($322)+($321))|0);
      $2=$323;
      var $324=$2;
      var $325=$sum2;
      var $326=((($325)+($324))|0);
      $sum2=$326;
      var $327=$3;
      var $328=(($327+9)|0);
      var $329=HEAP8[($328)];
      var $330=(($329)&255);
      var $331=$2;
      var $332=((($331)+($330))|0);
      $2=$332;
      var $333=$2;
      var $334=$sum2;
      var $335=((($334)+($333))|0);
      $sum2=$335;
      var $336=$3;
      var $337=(($336+10)|0);
      var $338=HEAP8[($337)];
      var $339=(($338)&255);
      var $340=$2;
      var $341=((($340)+($339))|0);
      $2=$341;
      var $342=$2;
      var $343=$sum2;
      var $344=((($343)+($342))|0);
      $sum2=$344;
      var $345=$3;
      var $346=(($345+11)|0);
      var $347=HEAP8[($346)];
      var $348=(($347)&255);
      var $349=$2;
      var $350=((($349)+($348))|0);
      $2=$350;
      var $351=$2;
      var $352=$sum2;
      var $353=((($352)+($351))|0);
      $sum2=$353;
      var $354=$3;
      var $355=(($354+12)|0);
      var $356=HEAP8[($355)];
      var $357=(($356)&255);
      var $358=$2;
      var $359=((($358)+($357))|0);
      $2=$359;
      var $360=$2;
      var $361=$sum2;
      var $362=((($361)+($360))|0);
      $sum2=$362;
      var $363=$3;
      var $364=(($363+13)|0);
      var $365=HEAP8[($364)];
      var $366=(($365)&255);
      var $367=$2;
      var $368=((($367)+($366))|0);
      $2=$368;
      var $369=$2;
      var $370=$sum2;
      var $371=((($370)+($369))|0);
      $sum2=$371;
      var $372=$3;
      var $373=(($372+14)|0);
      var $374=HEAP8[($373)];
      var $375=(($374)&255);
      var $376=$2;
      var $377=((($376)+($375))|0);
      $2=$377;
      var $378=$2;
      var $379=$sum2;
      var $380=((($379)+($378))|0);
      $sum2=$380;
      var $381=$3;
      var $382=(($381+15)|0);
      var $383=HEAP8[($382)];
      var $384=(($383)&255);
      var $385=$2;
      var $386=((($385)+($384))|0);
      $2=$386;
      var $387=$2;
      var $388=$sum2;
      var $389=((($388)+($387))|0);
      $sum2=$389;
      var $390=$3;
      var $391=(($390+16)|0);
      $3=$391;
      label = 25; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $394=$4;
      var $395=((($394)-(1))|0);
      $4=$395;
      var $396=(($394)|0)!=0;
      if ($396) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $398=$3;
      var $399=(($398+1)|0);
      $3=$399;
      var $400=HEAP8[($398)];
      var $401=(($400)&255);
      var $402=$2;
      var $403=((($402)+($401))|0);
      $2=$403;
      var $404=$2;
      var $405=$sum2;
      var $406=((($405)+($404))|0);
      $sum2=$406;
      label = 28; break;
    case 30: 
      var $408=$2;
      var $409=((($408)>>>0))%(65521);
      $2=$409;
      var $410=$sum2;
      var $411=((($410)>>>0))%(65521);
      $sum2=$411;
      label = 31; break;
    case 31: 
      var $413=$2;
      var $414=$sum2;
      var $415=$414 << 16;
      var $416=$413 | $415;
      $1=$416;
      label = 32; break;
    case 32: 
      var $418=$1;

      return $418;
    default: assert(0, "bad label: " + label);
  }
}
_adler32["X"]=1;

function _crc32($crc, $buf, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $endian=__stackBase__;
      $2=$crc;
      $3=$buf;
      $4=$len;
      var $5=$3;
      var $6=(($5)|0)==0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 7; break;
    case 4: 
      HEAP32[(($endian)>>2)]=1;
      var $9=$endian;
      var $10=HEAP8[($9)];
      var $11=(($10 << 24) >> 24)!=0;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$2;
      var $14=$3;
      var $15=$4;
      var $16=_crc32_little($13, $14, $15);
      $1=$16;
      label = 7; break;
    case 6: 
      var $18=$2;
      var $19=$3;
      var $20=$4;
      var $21=_crc32_big($18, $19, $20);
      $1=$21;
      label = 7; break;
    case 7: 
      var $23=$1;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}


function _crc32_little($crc, $buf, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $buf4;
      $1=$crc;
      $2=$buf;
      $3=$len;
      var $4=$1;
      $c=$4;
      var $5=$c;
      var $6=$5 ^ -1;
      $c=$6;
      label = 3; break;
    case 3: 
      var $8=$3;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { var $16 = 0;label = 5; break; }
    case 4: 
      var $11=$2;
      var $12=$11;
      var $13=$12 & 3;
      var $14=(($13)|0)!=0;
      var $16 = $14;label = 5; break;
    case 5: 
      var $16;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $18=$c;
      var $19=$2;
      var $20=(($19+1)|0);
      $2=$20;
      var $21=HEAP8[($19)];
      var $22=(($21)&255);
      var $23=$18 ^ $22;
      var $24=$23 & 255;
      var $25=((((5250380)|0)+($24<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$c;
      var $28=$27 >>> 8;
      var $29=$26 ^ $28;
      $c=$29;
      var $30=$3;
      var $31=((($30)-(1))|0);
      $3=$31;
      label = 3; break;
    case 7: 
      var $33=$2;
      var $34=$33;
      $buf4=$34;
      label = 8; break;
    case 8: 
      var $36=$3;
      var $37=(($36)>>>0) >= 32;
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $39=$buf4;
      var $40=(($39+4)|0);
      $buf4=$40;
      var $41=HEAP32[(($39)>>2)];
      var $42=$c;
      var $43=$42 ^ $41;
      $c=$43;
      var $44=$c;
      var $45=$44 & 255;
      var $46=((((5253452)|0)+($45<<2))|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$c;
      var $49=$48 >>> 8;
      var $50=$49 & 255;
      var $51=((((5252428)|0)+($50<<2))|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$47 ^ $52;
      var $54=$c;
      var $55=$54 >>> 16;
      var $56=$55 & 255;
      var $57=((((5251404)|0)+($56<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$53 ^ $58;
      var $60=$c;
      var $61=$60 >>> 24;
      var $62=((((5250380)|0)+($61<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$59 ^ $63;
      $c=$64;
      var $65=$buf4;
      var $66=(($65+4)|0);
      $buf4=$66;
      var $67=HEAP32[(($65)>>2)];
      var $68=$c;
      var $69=$68 ^ $67;
      $c=$69;
      var $70=$c;
      var $71=$70 & 255;
      var $72=((((5253452)|0)+($71<<2))|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$c;
      var $75=$74 >>> 8;
      var $76=$75 & 255;
      var $77=((((5252428)|0)+($76<<2))|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$73 ^ $78;
      var $80=$c;
      var $81=$80 >>> 16;
      var $82=$81 & 255;
      var $83=((((5251404)|0)+($82<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$79 ^ $84;
      var $86=$c;
      var $87=$86 >>> 24;
      var $88=((((5250380)|0)+($87<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$85 ^ $89;
      $c=$90;
      var $91=$buf4;
      var $92=(($91+4)|0);
      $buf4=$92;
      var $93=HEAP32[(($91)>>2)];
      var $94=$c;
      var $95=$94 ^ $93;
      $c=$95;
      var $96=$c;
      var $97=$96 & 255;
      var $98=((((5253452)|0)+($97<<2))|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$c;
      var $101=$100 >>> 8;
      var $102=$101 & 255;
      var $103=((((5252428)|0)+($102<<2))|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$99 ^ $104;
      var $106=$c;
      var $107=$106 >>> 16;
      var $108=$107 & 255;
      var $109=((((5251404)|0)+($108<<2))|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$105 ^ $110;
      var $112=$c;
      var $113=$112 >>> 24;
      var $114=((((5250380)|0)+($113<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$111 ^ $115;
      $c=$116;
      var $117=$buf4;
      var $118=(($117+4)|0);
      $buf4=$118;
      var $119=HEAP32[(($117)>>2)];
      var $120=$c;
      var $121=$120 ^ $119;
      $c=$121;
      var $122=$c;
      var $123=$122 & 255;
      var $124=((((5253452)|0)+($123<<2))|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$c;
      var $127=$126 >>> 8;
      var $128=$127 & 255;
      var $129=((((5252428)|0)+($128<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$125 ^ $130;
      var $132=$c;
      var $133=$132 >>> 16;
      var $134=$133 & 255;
      var $135=((((5251404)|0)+($134<<2))|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$131 ^ $136;
      var $138=$c;
      var $139=$138 >>> 24;
      var $140=((((5250380)|0)+($139<<2))|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=$137 ^ $141;
      $c=$142;
      var $143=$buf4;
      var $144=(($143+4)|0);
      $buf4=$144;
      var $145=HEAP32[(($143)>>2)];
      var $146=$c;
      var $147=$146 ^ $145;
      $c=$147;
      var $148=$c;
      var $149=$148 & 255;
      var $150=((((5253452)|0)+($149<<2))|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$c;
      var $153=$152 >>> 8;
      var $154=$153 & 255;
      var $155=((((5252428)|0)+($154<<2))|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=$151 ^ $156;
      var $158=$c;
      var $159=$158 >>> 16;
      var $160=$159 & 255;
      var $161=((((5251404)|0)+($160<<2))|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$157 ^ $162;
      var $164=$c;
      var $165=$164 >>> 24;
      var $166=((((5250380)|0)+($165<<2))|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$163 ^ $167;
      $c=$168;
      var $169=$buf4;
      var $170=(($169+4)|0);
      $buf4=$170;
      var $171=HEAP32[(($169)>>2)];
      var $172=$c;
      var $173=$172 ^ $171;
      $c=$173;
      var $174=$c;
      var $175=$174 & 255;
      var $176=((((5253452)|0)+($175<<2))|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$c;
      var $179=$178 >>> 8;
      var $180=$179 & 255;
      var $181=((((5252428)|0)+($180<<2))|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$177 ^ $182;
      var $184=$c;
      var $185=$184 >>> 16;
      var $186=$185 & 255;
      var $187=((((5251404)|0)+($186<<2))|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=$183 ^ $188;
      var $190=$c;
      var $191=$190 >>> 24;
      var $192=((((5250380)|0)+($191<<2))|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$189 ^ $193;
      $c=$194;
      var $195=$buf4;
      var $196=(($195+4)|0);
      $buf4=$196;
      var $197=HEAP32[(($195)>>2)];
      var $198=$c;
      var $199=$198 ^ $197;
      $c=$199;
      var $200=$c;
      var $201=$200 & 255;
      var $202=((((5253452)|0)+($201<<2))|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$c;
      var $205=$204 >>> 8;
      var $206=$205 & 255;
      var $207=((((5252428)|0)+($206<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$203 ^ $208;
      var $210=$c;
      var $211=$210 >>> 16;
      var $212=$211 & 255;
      var $213=((((5251404)|0)+($212<<2))|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$209 ^ $214;
      var $216=$c;
      var $217=$216 >>> 24;
      var $218=((((5250380)|0)+($217<<2))|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$215 ^ $219;
      $c=$220;
      var $221=$buf4;
      var $222=(($221+4)|0);
      $buf4=$222;
      var $223=HEAP32[(($221)>>2)];
      var $224=$c;
      var $225=$224 ^ $223;
      $c=$225;
      var $226=$c;
      var $227=$226 & 255;
      var $228=((((5253452)|0)+($227<<2))|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=$c;
      var $231=$230 >>> 8;
      var $232=$231 & 255;
      var $233=((((5252428)|0)+($232<<2))|0);
      var $234=HEAP32[(($233)>>2)];
      var $235=$229 ^ $234;
      var $236=$c;
      var $237=$236 >>> 16;
      var $238=$237 & 255;
      var $239=((((5251404)|0)+($238<<2))|0);
      var $240=HEAP32[(($239)>>2)];
      var $241=$235 ^ $240;
      var $242=$c;
      var $243=$242 >>> 24;
      var $244=((((5250380)|0)+($243<<2))|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$241 ^ $245;
      $c=$246;
      var $247=$3;
      var $248=((($247)-(32))|0);
      $3=$248;
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $251=$3;
      var $252=(($251)>>>0) >= 4;
      if ($252) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $254=$buf4;
      var $255=(($254+4)|0);
      $buf4=$255;
      var $256=HEAP32[(($254)>>2)];
      var $257=$c;
      var $258=$257 ^ $256;
      $c=$258;
      var $259=$c;
      var $260=$259 & 255;
      var $261=((((5253452)|0)+($260<<2))|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=$c;
      var $264=$263 >>> 8;
      var $265=$264 & 255;
      var $266=((((5252428)|0)+($265<<2))|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=$262 ^ $267;
      var $269=$c;
      var $270=$269 >>> 16;
      var $271=$270 & 255;
      var $272=((((5251404)|0)+($271<<2))|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=$268 ^ $273;
      var $275=$c;
      var $276=$275 >>> 24;
      var $277=((((5250380)|0)+($276<<2))|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=$274 ^ $278;
      $c=$279;
      var $280=$3;
      var $281=((($280)-(4))|0);
      $3=$281;
      label = 11; break;
    case 13: 
      var $283=$buf4;
      var $284=$283;
      $2=$284;
      var $285=$3;
      var $286=(($285)|0)!=0;
      if ($286) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $289=$c;
      var $290=$2;
      var $291=(($290+1)|0);
      $2=$291;
      var $292=HEAP8[($290)];
      var $293=(($292)&255);
      var $294=$289 ^ $293;
      var $295=$294 & 255;
      var $296=((((5250380)|0)+($295<<2))|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$c;
      var $299=$298 >>> 8;
      var $300=$297 ^ $299;
      $c=$300;
      label = 16; break;
    case 16: 
      var $302=$3;
      var $303=((($302)-(1))|0);
      $3=$303;
      var $304=(($303)|0)!=0;
      if ($304) { label = 15; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $307=$c;
      var $308=$307 ^ -1;
      $c=$308;
      var $309=$c;

      return $309;
    default: assert(0, "bad label: " + label);
  }
}
_crc32_little["X"]=1;

function _crc32_big($crc, $buf, $len) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $buf4;
      $1=$crc;
      $2=$buf;
      $3=$len;
      var $4=$1;
      var $5=$4 >>> 24;
      var $6=$5 & 255;
      var $7=$1;
      var $8=$7 >>> 8;
      var $9=$8 & 65280;
      var $10=((($6)+($9))|0);
      var $11=$1;
      var $12=$11 & 65280;
      var $13=$12 << 8;
      var $14=((($10)+($13))|0);
      var $15=$1;
      var $16=$15 & 255;
      var $17=$16 << 24;
      var $18=((($14)+($17))|0);
      $c=$18;
      var $19=$c;
      var $20=$19 ^ -1;
      $c=$20;
      label = 3; break;
    case 3: 
      var $22=$3;
      var $23=(($22)|0)!=0;
      if ($23) { label = 4; break; } else { var $30 = 0;label = 5; break; }
    case 4: 
      var $25=$2;
      var $26=$25;
      var $27=$26 & 3;
      var $28=(($27)|0)!=0;
      var $30 = $28;label = 5; break;
    case 5: 
      var $30;
      if ($30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $32=$c;
      var $33=$32 >>> 24;
      var $34=$2;
      var $35=(($34+1)|0);
      $2=$35;
      var $36=HEAP8[($34)];
      var $37=(($36)&255);
      var $38=$33 ^ $37;
      var $39=((((5254476)|0)+($38<<2))|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$c;
      var $42=$41 << 8;
      var $43=$40 ^ $42;
      $c=$43;
      var $44=$3;
      var $45=((($44)-(1))|0);
      $3=$45;
      label = 3; break;
    case 7: 
      var $47=$2;
      var $48=$47;
      $buf4=$48;
      var $49=$buf4;
      var $50=((($49)-(4))|0);
      $buf4=$50;
      label = 8; break;
    case 8: 
      var $52=$3;
      var $53=(($52)>>>0) >= 32;
      if ($53) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $55=$buf4;
      var $56=(($55+4)|0);
      $buf4=$56;
      var $57=HEAP32[(($56)>>2)];
      var $58=$c;
      var $59=$58 ^ $57;
      $c=$59;
      var $60=$c;
      var $61=$60 & 255;
      var $62=((((5254476)|0)+($61<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$c;
      var $65=$64 >>> 8;
      var $66=$65 & 255;
      var $67=((((5255500)|0)+($66<<2))|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$63 ^ $68;
      var $70=$c;
      var $71=$70 >>> 16;
      var $72=$71 & 255;
      var $73=((((5256524)|0)+($72<<2))|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$69 ^ $74;
      var $76=$c;
      var $77=$76 >>> 24;
      var $78=((((5257548)|0)+($77<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$75 ^ $79;
      $c=$80;
      var $81=$buf4;
      var $82=(($81+4)|0);
      $buf4=$82;
      var $83=HEAP32[(($82)>>2)];
      var $84=$c;
      var $85=$84 ^ $83;
      $c=$85;
      var $86=$c;
      var $87=$86 & 255;
      var $88=((((5254476)|0)+($87<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$c;
      var $91=$90 >>> 8;
      var $92=$91 & 255;
      var $93=((((5255500)|0)+($92<<2))|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$89 ^ $94;
      var $96=$c;
      var $97=$96 >>> 16;
      var $98=$97 & 255;
      var $99=((((5256524)|0)+($98<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$95 ^ $100;
      var $102=$c;
      var $103=$102 >>> 24;
      var $104=((((5257548)|0)+($103<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$101 ^ $105;
      $c=$106;
      var $107=$buf4;
      var $108=(($107+4)|0);
      $buf4=$108;
      var $109=HEAP32[(($108)>>2)];
      var $110=$c;
      var $111=$110 ^ $109;
      $c=$111;
      var $112=$c;
      var $113=$112 & 255;
      var $114=((((5254476)|0)+($113<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$c;
      var $117=$116 >>> 8;
      var $118=$117 & 255;
      var $119=((((5255500)|0)+($118<<2))|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$115 ^ $120;
      var $122=$c;
      var $123=$122 >>> 16;
      var $124=$123 & 255;
      var $125=((((5256524)|0)+($124<<2))|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$121 ^ $126;
      var $128=$c;
      var $129=$128 >>> 24;
      var $130=((((5257548)|0)+($129<<2))|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$127 ^ $131;
      $c=$132;
      var $133=$buf4;
      var $134=(($133+4)|0);
      $buf4=$134;
      var $135=HEAP32[(($134)>>2)];
      var $136=$c;
      var $137=$136 ^ $135;
      $c=$137;
      var $138=$c;
      var $139=$138 & 255;
      var $140=((((5254476)|0)+($139<<2))|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=$c;
      var $143=$142 >>> 8;
      var $144=$143 & 255;
      var $145=((((5255500)|0)+($144<<2))|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$141 ^ $146;
      var $148=$c;
      var $149=$148 >>> 16;
      var $150=$149 & 255;
      var $151=((((5256524)|0)+($150<<2))|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=$147 ^ $152;
      var $154=$c;
      var $155=$154 >>> 24;
      var $156=((((5257548)|0)+($155<<2))|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$153 ^ $157;
      $c=$158;
      var $159=$buf4;
      var $160=(($159+4)|0);
      $buf4=$160;
      var $161=HEAP32[(($160)>>2)];
      var $162=$c;
      var $163=$162 ^ $161;
      $c=$163;
      var $164=$c;
      var $165=$164 & 255;
      var $166=((((5254476)|0)+($165<<2))|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$c;
      var $169=$168 >>> 8;
      var $170=$169 & 255;
      var $171=((((5255500)|0)+($170<<2))|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$167 ^ $172;
      var $174=$c;
      var $175=$174 >>> 16;
      var $176=$175 & 255;
      var $177=((((5256524)|0)+($176<<2))|0);
      var $178=HEAP32[(($177)>>2)];
      var $179=$173 ^ $178;
      var $180=$c;
      var $181=$180 >>> 24;
      var $182=((((5257548)|0)+($181<<2))|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$179 ^ $183;
      $c=$184;
      var $185=$buf4;
      var $186=(($185+4)|0);
      $buf4=$186;
      var $187=HEAP32[(($186)>>2)];
      var $188=$c;
      var $189=$188 ^ $187;
      $c=$189;
      var $190=$c;
      var $191=$190 & 255;
      var $192=((((5254476)|0)+($191<<2))|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$c;
      var $195=$194 >>> 8;
      var $196=$195 & 255;
      var $197=((((5255500)|0)+($196<<2))|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$193 ^ $198;
      var $200=$c;
      var $201=$200 >>> 16;
      var $202=$201 & 255;
      var $203=((((5256524)|0)+($202<<2))|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$199 ^ $204;
      var $206=$c;
      var $207=$206 >>> 24;
      var $208=((((5257548)|0)+($207<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$205 ^ $209;
      $c=$210;
      var $211=$buf4;
      var $212=(($211+4)|0);
      $buf4=$212;
      var $213=HEAP32[(($212)>>2)];
      var $214=$c;
      var $215=$214 ^ $213;
      $c=$215;
      var $216=$c;
      var $217=$216 & 255;
      var $218=((((5254476)|0)+($217<<2))|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$c;
      var $221=$220 >>> 8;
      var $222=$221 & 255;
      var $223=((((5255500)|0)+($222<<2))|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=$219 ^ $224;
      var $226=$c;
      var $227=$226 >>> 16;
      var $228=$227 & 255;
      var $229=((((5256524)|0)+($228<<2))|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=$225 ^ $230;
      var $232=$c;
      var $233=$232 >>> 24;
      var $234=((((5257548)|0)+($233<<2))|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=$231 ^ $235;
      $c=$236;
      var $237=$buf4;
      var $238=(($237+4)|0);
      $buf4=$238;
      var $239=HEAP32[(($238)>>2)];
      var $240=$c;
      var $241=$240 ^ $239;
      $c=$241;
      var $242=$c;
      var $243=$242 & 255;
      var $244=((((5254476)|0)+($243<<2))|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$c;
      var $247=$246 >>> 8;
      var $248=$247 & 255;
      var $249=((((5255500)|0)+($248<<2))|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=$245 ^ $250;
      var $252=$c;
      var $253=$252 >>> 16;
      var $254=$253 & 255;
      var $255=((((5256524)|0)+($254<<2))|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=$251 ^ $256;
      var $258=$c;
      var $259=$258 >>> 24;
      var $260=((((5257548)|0)+($259<<2))|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=$257 ^ $261;
      $c=$262;
      var $263=$3;
      var $264=((($263)-(32))|0);
      $3=$264;
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $267=$3;
      var $268=(($267)>>>0) >= 4;
      if ($268) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $270=$buf4;
      var $271=(($270+4)|0);
      $buf4=$271;
      var $272=HEAP32[(($271)>>2)];
      var $273=$c;
      var $274=$273 ^ $272;
      $c=$274;
      var $275=$c;
      var $276=$275 & 255;
      var $277=((((5254476)|0)+($276<<2))|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=$c;
      var $280=$279 >>> 8;
      var $281=$280 & 255;
      var $282=((((5255500)|0)+($281<<2))|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=$278 ^ $283;
      var $285=$c;
      var $286=$285 >>> 16;
      var $287=$286 & 255;
      var $288=((((5256524)|0)+($287<<2))|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=$284 ^ $289;
      var $291=$c;
      var $292=$291 >>> 24;
      var $293=((((5257548)|0)+($292<<2))|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=$290 ^ $294;
      $c=$295;
      var $296=$3;
      var $297=((($296)-(4))|0);
      $3=$297;
      label = 11; break;
    case 13: 
      var $299=$buf4;
      var $300=(($299+4)|0);
      $buf4=$300;
      var $301=$buf4;
      var $302=$301;
      $2=$302;
      var $303=$3;
      var $304=(($303)|0)!=0;
      if ($304) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $307=$c;
      var $308=$307 >>> 24;
      var $309=$2;
      var $310=(($309+1)|0);
      $2=$310;
      var $311=HEAP8[($309)];
      var $312=(($311)&255);
      var $313=$308 ^ $312;
      var $314=((((5254476)|0)+($313<<2))|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=$c;
      var $317=$316 << 8;
      var $318=$315 ^ $317;
      $c=$318;
      label = 16; break;
    case 16: 
      var $320=$3;
      var $321=((($320)-(1))|0);
      $3=$321;
      var $322=(($321)|0)!=0;
      if ($322) { label = 15; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $325=$c;
      var $326=$325 ^ -1;
      $c=$326;
      var $327=$c;
      var $328=$327 >>> 24;
      var $329=$328 & 255;
      var $330=$c;
      var $331=$330 >>> 8;
      var $332=$331 & 65280;
      var $333=((($329)+($332))|0);
      var $334=$c;
      var $335=$334 & 65280;
      var $336=$335 << 8;
      var $337=((($333)+($336))|0);
      var $338=$c;
      var $339=$338 & 255;
      var $340=$339 << 24;
      var $341=((($337)+($340))|0);

      return $341;
    default: assert(0, "bad label: " + label);
  }
}
_crc32_big["X"]=1;

function _inflate_fast($strm, $start) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $state;
      var $in;
      var $last;
      var $out;
      var $beg;
      var $end;
      var $wsize;
      var $whave;
      var $wnext;
      var $window;
      var $hold;
      var $bits;
      var $lcode;
      var $dcode;
      var $lmask;
      var $dmask;
      var $here=__stackBase__;
      var $op;
      var $len;
      var $dist;
      var $from;
      $1=$strm;
      $2=$start;
      var $3=$1;
      var $4=(($3+28)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $state=$6;
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)-(1))|0);
      $in=$10;
      var $11=$in;
      var $12=$1;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(5))|0);
      var $16=(($11+$15)|0);
      $last=$16;
      var $17=$1;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      $out=$20;
      var $21=$out;
      var $22=$2;
      var $23=$1;
      var $24=(($23+16)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($22)-($25))|0);
      var $27=(((-$26))|0);
      var $28=(($21+$27)|0);
      $beg=$28;
      var $29=$out;
      var $30=$1;
      var $31=(($30+16)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(257))|0);
      var $34=(($29+$33)|0);
      $end=$34;
      var $35=$state;
      var $36=(($35+40)|0);
      var $37=HEAP32[(($36)>>2)];
      $wsize=$37;
      var $38=$state;
      var $39=(($38+44)|0);
      var $40=HEAP32[(($39)>>2)];
      $whave=$40;
      var $41=$state;
      var $42=(($41+48)|0);
      var $43=HEAP32[(($42)>>2)];
      $wnext=$43;
      var $44=$state;
      var $45=(($44+52)|0);
      var $46=HEAP32[(($45)>>2)];
      $window=$46;
      var $47=$state;
      var $48=(($47+56)|0);
      var $49=HEAP32[(($48)>>2)];
      $hold=$49;
      var $50=$state;
      var $51=(($50+60)|0);
      var $52=HEAP32[(($51)>>2)];
      $bits=$52;
      var $53=$state;
      var $54=(($53+76)|0);
      var $55=HEAP32[(($54)>>2)];
      $lcode=$55;
      var $56=$state;
      var $57=(($56+80)|0);
      var $58=HEAP32[(($57)>>2)];
      $dcode=$58;
      var $59=$state;
      var $60=(($59+84)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=1 << $61;
      var $63=((($62)-(1))|0);
      $lmask=$63;
      var $64=$state;
      var $65=(($64+88)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=1 << $66;
      var $68=((($67)-(1))|0);
      $dmask=$68;
      label = 3; break;
    case 3: 
      var $70=$bits;
      var $71=(($70)>>>0) < 15;
      if ($71) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $73=$in;
      var $74=(($73+1)|0);
      $in=$74;
      var $75=HEAP8[($74)];
      var $76=(($75)&255);
      var $77=$bits;
      var $78=$76 << $77;
      var $79=$hold;
      var $80=((($79)+($78))|0);
      $hold=$80;
      var $81=$bits;
      var $82=((($81)+(8))|0);
      $bits=$82;
      var $83=$in;
      var $84=(($83+1)|0);
      $in=$84;
      var $85=HEAP8[($84)];
      var $86=(($85)&255);
      var $87=$bits;
      var $88=$86 << $87;
      var $89=$hold;
      var $90=((($89)+($88))|0);
      $hold=$90;
      var $91=$bits;
      var $92=((($91)+(8))|0);
      $bits=$92;
      label = 5; break;
    case 5: 
      var $94=$hold;
      var $95=$lmask;
      var $96=$94 & $95;
      var $97=$lcode;
      var $98=(($97+($96<<2))|0);
      var $99=$here;
      var $100=$98;
      assert(4 % 1 === 0);HEAP16[(($99)>>1)]=HEAP16[(($100)>>1)];HEAP16[((($99)+(2))>>1)]=HEAP16[((($100)+(2))>>1)];
      label = 6; break;
    case 6: 
      var $102=(($here+1)|0);
      var $103=HEAP8[($102)];
      var $104=(($103)&255);
      $op=$104;
      var $105=$op;
      var $106=$hold;
      var $107=$106 >>> (($105)>>>0);
      $hold=$107;
      var $108=$op;
      var $109=$bits;
      var $110=((($109)-($108))|0);
      $bits=$110;
      var $111=(($here)|0);
      var $112=HEAP8[($111)];
      var $113=(($112)&255);
      $op=$113;
      var $114=$op;
      var $115=(($114)|0)==0;
      if ($115) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $117=(($here+2)|0);
      var $118=HEAP16[(($117)>>1)];
      var $119=(($118) & 255);
      var $120=$out;
      var $121=(($120+1)|0);
      $out=$121;
      HEAP8[($121)]=$119;
      label = 79; break;
    case 8: 
      var $123=$op;
      var $124=$123 & 16;
      var $125=(($124)|0)!=0;
      if ($125) { label = 9; break; } else { label = 73; break; }
    case 9: 
      var $127=(($here+2)|0);
      var $128=HEAP16[(($127)>>1)];
      var $129=(($128)&65535);
      $len=$129;
      var $130=$op;
      var $131=$130 & 15;
      $op=$131;
      var $132=$op;
      var $133=(($132)|0)!=0;
      if ($133) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $135=$bits;
      var $136=$op;
      var $137=(($135)>>>0) < (($136)>>>0);
      if ($137) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $139=$in;
      var $140=(($139+1)|0);
      $in=$140;
      var $141=HEAP8[($140)];
      var $142=(($141)&255);
      var $143=$bits;
      var $144=$142 << $143;
      var $145=$hold;
      var $146=((($145)+($144))|0);
      $hold=$146;
      var $147=$bits;
      var $148=((($147)+(8))|0);
      $bits=$148;
      label = 12; break;
    case 12: 
      var $150=$hold;
      var $151=$op;
      var $152=1 << $151;
      var $153=((($152)-(1))|0);
      var $154=$150 & $153;
      var $155=$len;
      var $156=((($155)+($154))|0);
      $len=$156;
      var $157=$op;
      var $158=$hold;
      var $159=$158 >>> (($157)>>>0);
      $hold=$159;
      var $160=$op;
      var $161=$bits;
      var $162=((($161)-($160))|0);
      $bits=$162;
      label = 13; break;
    case 13: 
      var $164=$bits;
      var $165=(($164)>>>0) < 15;
      if ($165) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $167=$in;
      var $168=(($167+1)|0);
      $in=$168;
      var $169=HEAP8[($168)];
      var $170=(($169)&255);
      var $171=$bits;
      var $172=$170 << $171;
      var $173=$hold;
      var $174=((($173)+($172))|0);
      $hold=$174;
      var $175=$bits;
      var $176=((($175)+(8))|0);
      $bits=$176;
      var $177=$in;
      var $178=(($177+1)|0);
      $in=$178;
      var $179=HEAP8[($178)];
      var $180=(($179)&255);
      var $181=$bits;
      var $182=$180 << $181;
      var $183=$hold;
      var $184=((($183)+($182))|0);
      $hold=$184;
      var $185=$bits;
      var $186=((($185)+(8))|0);
      $bits=$186;
      label = 15; break;
    case 15: 
      var $188=$hold;
      var $189=$dmask;
      var $190=$188 & $189;
      var $191=$dcode;
      var $192=(($191+($190<<2))|0);
      var $193=$here;
      var $194=$192;
      assert(4 % 1 === 0);HEAP16[(($193)>>1)]=HEAP16[(($194)>>1)];HEAP16[((($193)+(2))>>1)]=HEAP16[((($194)+(2))>>1)];
      label = 16; break;
    case 16: 
      var $196=(($here+1)|0);
      var $197=HEAP8[($196)];
      var $198=(($197)&255);
      $op=$198;
      var $199=$op;
      var $200=$hold;
      var $201=$200 >>> (($199)>>>0);
      $hold=$201;
      var $202=$op;
      var $203=$bits;
      var $204=((($203)-($202))|0);
      $bits=$204;
      var $205=(($here)|0);
      var $206=HEAP8[($205)];
      var $207=(($206)&255);
      $op=$207;
      var $208=$op;
      var $209=$208 & 16;
      var $210=(($209)|0)!=0;
      if ($210) { label = 17; break; } else { label = 69; break; }
    case 17: 
      var $212=(($here+2)|0);
      var $213=HEAP16[(($212)>>1)];
      var $214=(($213)&65535);
      $dist=$214;
      var $215=$op;
      var $216=$215 & 15;
      $op=$216;
      var $217=$bits;
      var $218=$op;
      var $219=(($217)>>>0) < (($218)>>>0);
      if ($219) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $221=$in;
      var $222=(($221+1)|0);
      $in=$222;
      var $223=HEAP8[($222)];
      var $224=(($223)&255);
      var $225=$bits;
      var $226=$224 << $225;
      var $227=$hold;
      var $228=((($227)+($226))|0);
      $hold=$228;
      var $229=$bits;
      var $230=((($229)+(8))|0);
      $bits=$230;
      var $231=$bits;
      var $232=$op;
      var $233=(($231)>>>0) < (($232)>>>0);
      if ($233) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $235=$in;
      var $236=(($235+1)|0);
      $in=$236;
      var $237=HEAP8[($236)];
      var $238=(($237)&255);
      var $239=$bits;
      var $240=$238 << $239;
      var $241=$hold;
      var $242=((($241)+($240))|0);
      $hold=$242;
      var $243=$bits;
      var $244=((($243)+(8))|0);
      $bits=$244;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $247=$hold;
      var $248=$op;
      var $249=1 << $248;
      var $250=((($249)-(1))|0);
      var $251=$247 & $250;
      var $252=$dist;
      var $253=((($252)+($251))|0);
      $dist=$253;
      var $254=$op;
      var $255=$hold;
      var $256=$255 >>> (($254)>>>0);
      $hold=$256;
      var $257=$op;
      var $258=$bits;
      var $259=((($258)-($257))|0);
      $bits=$259;
      var $260=$out;
      var $261=$beg;
      var $262=$260;
      var $263=$261;
      var $264=((($262)-($263))|0);
      $op=$264;
      var $265=$dist;
      var $266=$op;
      var $267=(($265)>>>0) > (($266)>>>0);
      if ($267) { label = 22; break; } else { label = 60; break; }
    case 22: 
      var $269=$dist;
      var $270=$op;
      var $271=((($269)-($270))|0);
      $op=$271;
      var $272=$op;
      var $273=$whave;
      var $274=(($272)>>>0) > (($273)>>>0);
      if ($274) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $276=$state;
      var $277=(($276+7104)|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278)|0)!=0;
      if ($279) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $281=$1;
      var $282=(($281+24)|0);
      HEAP32[(($282)>>2)]=((5266764)|0);
      var $283=$state;
      var $284=(($283)|0);
      HEAP32[(($284)>>2)]=29;
      label = 83; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $287=$window;
      var $288=((($287)-(1))|0);
      $from=$288;
      var $289=$wnext;
      var $290=(($289)|0)==0;
      if ($290) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $292=$wsize;
      var $293=$op;
      var $294=((($292)-($293))|0);
      var $295=$from;
      var $296=(($295+$294)|0);
      $from=$296;
      var $297=$op;
      var $298=$len;
      var $299=(($297)>>>0) < (($298)>>>0);
      if ($299) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $301=$op;
      var $302=$len;
      var $303=((($302)-($301))|0);
      $len=$303;
      label = 29; break;
    case 29: 
      var $305=$from;
      var $306=(($305+1)|0);
      $from=$306;
      var $307=HEAP8[($306)];
      var $308=$out;
      var $309=(($308+1)|0);
      $out=$309;
      HEAP8[($309)]=$307;
      label = 30; break;
    case 30: 
      var $311=$op;
      var $312=((($311)-(1))|0);
      $op=$312;
      var $313=(($312)|0)!=0;
      if ($313) { label = 29; break; } else { label = 31; break; }
    case 31: 
      var $315=$out;
      var $316=$dist;
      var $317=(((-$316))|0);
      var $318=(($315+$317)|0);
      $from=$318;
      label = 32; break;
    case 32: 
      label = 52; break;
    case 33: 
      var $321=$wnext;
      var $322=$op;
      var $323=(($321)>>>0) < (($322)>>>0);
      if ($323) { label = 34; break; } else { label = 45; break; }
    case 34: 
      var $325=$wsize;
      var $326=$wnext;
      var $327=((($325)+($326))|0);
      var $328=$op;
      var $329=((($327)-($328))|0);
      var $330=$from;
      var $331=(($330+$329)|0);
      $from=$331;
      var $332=$wnext;
      var $333=$op;
      var $334=((($333)-($332))|0);
      $op=$334;
      var $335=$op;
      var $336=$len;
      var $337=(($335)>>>0) < (($336)>>>0);
      if ($337) { label = 35; break; } else { label = 44; break; }
    case 35: 
      var $339=$op;
      var $340=$len;
      var $341=((($340)-($339))|0);
      $len=$341;
      label = 36; break;
    case 36: 
      var $343=$from;
      var $344=(($343+1)|0);
      $from=$344;
      var $345=HEAP8[($344)];
      var $346=$out;
      var $347=(($346+1)|0);
      $out=$347;
      HEAP8[($347)]=$345;
      label = 37; break;
    case 37: 
      var $349=$op;
      var $350=((($349)-(1))|0);
      $op=$350;
      var $351=(($350)|0)!=0;
      if ($351) { label = 36; break; } else { label = 38; break; }
    case 38: 
      var $353=$window;
      var $354=((($353)-(1))|0);
      $from=$354;
      var $355=$wnext;
      var $356=$len;
      var $357=(($355)>>>0) < (($356)>>>0);
      if ($357) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $359=$wnext;
      $op=$359;
      var $360=$op;
      var $361=$len;
      var $362=((($361)-($360))|0);
      $len=$362;
      label = 40; break;
    case 40: 
      var $364=$from;
      var $365=(($364+1)|0);
      $from=$365;
      var $366=HEAP8[($365)];
      var $367=$out;
      var $368=(($367+1)|0);
      $out=$368;
      HEAP8[($368)]=$366;
      label = 41; break;
    case 41: 
      var $370=$op;
      var $371=((($370)-(1))|0);
      $op=$371;
      var $372=(($371)|0)!=0;
      if ($372) { label = 40; break; } else { label = 42; break; }
    case 42: 
      var $374=$out;
      var $375=$dist;
      var $376=(((-$375))|0);
      var $377=(($374+$376)|0);
      $from=$377;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 51; break;
    case 45: 
      var $381=$wnext;
      var $382=$op;
      var $383=((($381)-($382))|0);
      var $384=$from;
      var $385=(($384+$383)|0);
      $from=$385;
      var $386=$op;
      var $387=$len;
      var $388=(($386)>>>0) < (($387)>>>0);
      if ($388) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $390=$op;
      var $391=$len;
      var $392=((($391)-($390))|0);
      $len=$392;
      label = 47; break;
    case 47: 
      var $394=$from;
      var $395=(($394+1)|0);
      $from=$395;
      var $396=HEAP8[($395)];
      var $397=$out;
      var $398=(($397+1)|0);
      $out=$398;
      HEAP8[($398)]=$396;
      label = 48; break;
    case 48: 
      var $400=$op;
      var $401=((($400)-(1))|0);
      $op=$401;
      var $402=(($401)|0)!=0;
      if ($402) { label = 47; break; } else { label = 49; break; }
    case 49: 
      var $404=$out;
      var $405=$dist;
      var $406=(((-$405))|0);
      var $407=(($404+$406)|0);
      $from=$407;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $412=$len;
      var $413=(($412)>>>0) > 2;
      if ($413) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $415=$from;
      var $416=(($415+1)|0);
      $from=$416;
      var $417=HEAP8[($416)];
      var $418=$out;
      var $419=(($418+1)|0);
      $out=$419;
      HEAP8[($419)]=$417;
      var $420=$from;
      var $421=(($420+1)|0);
      $from=$421;
      var $422=HEAP8[($421)];
      var $423=$out;
      var $424=(($423+1)|0);
      $out=$424;
      HEAP8[($424)]=$422;
      var $425=$from;
      var $426=(($425+1)|0);
      $from=$426;
      var $427=HEAP8[($426)];
      var $428=$out;
      var $429=(($428+1)|0);
      $out=$429;
      HEAP8[($429)]=$427;
      var $430=$len;
      var $431=((($430)-(3))|0);
      $len=$431;
      label = 53; break;
    case 55: 
      var $433=$len;
      var $434=(($433)|0)!=0;
      if ($434) { label = 56; break; } else { label = 59; break; }
    case 56: 
      var $436=$from;
      var $437=(($436+1)|0);
      $from=$437;
      var $438=HEAP8[($437)];
      var $439=$out;
      var $440=(($439+1)|0);
      $out=$440;
      HEAP8[($440)]=$438;
      var $441=$len;
      var $442=(($441)>>>0) > 1;
      if ($442) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $444=$from;
      var $445=(($444+1)|0);
      $from=$445;
      var $446=HEAP8[($445)];
      var $447=$out;
      var $448=(($447+1)|0);
      $out=$448;
      HEAP8[($448)]=$446;
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 68; break;
    case 60: 
      var $452=$out;
      var $453=$dist;
      var $454=(((-$453))|0);
      var $455=(($452+$454)|0);
      $from=$455;
      label = 61; break;
    case 61: 
      var $457=$from;
      var $458=(($457+1)|0);
      $from=$458;
      var $459=HEAP8[($458)];
      var $460=$out;
      var $461=(($460+1)|0);
      $out=$461;
      HEAP8[($461)]=$459;
      var $462=$from;
      var $463=(($462+1)|0);
      $from=$463;
      var $464=HEAP8[($463)];
      var $465=$out;
      var $466=(($465+1)|0);
      $out=$466;
      HEAP8[($466)]=$464;
      var $467=$from;
      var $468=(($467+1)|0);
      $from=$468;
      var $469=HEAP8[($468)];
      var $470=$out;
      var $471=(($470+1)|0);
      $out=$471;
      HEAP8[($471)]=$469;
      var $472=$len;
      var $473=((($472)-(3))|0);
      $len=$473;
      label = 62; break;
    case 62: 
      var $475=$len;
      var $476=(($475)>>>0) > 2;
      if ($476) { label = 61; break; } else { label = 63; break; }
    case 63: 
      var $478=$len;
      var $479=(($478)|0)!=0;
      if ($479) { label = 64; break; } else { label = 67; break; }
    case 64: 
      var $481=$from;
      var $482=(($481+1)|0);
      $from=$482;
      var $483=HEAP8[($482)];
      var $484=$out;
      var $485=(($484+1)|0);
      $out=$485;
      HEAP8[($485)]=$483;
      var $486=$len;
      var $487=(($486)>>>0) > 1;
      if ($487) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $489=$from;
      var $490=(($489+1)|0);
      $from=$490;
      var $491=HEAP8[($490)];
      var $492=$out;
      var $493=(($492+1)|0);
      $out=$493;
      HEAP8[($493)]=$491;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 72; break;
    case 69: 
      var $498=$op;
      var $499=$498 & 64;
      var $500=(($499)|0)==0;
      if ($500) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $502=(($here+2)|0);
      var $503=HEAP16[(($502)>>1)];
      var $504=(($503)&65535);
      var $505=$hold;
      var $506=$op;
      var $507=1 << $506;
      var $508=((($507)-(1))|0);
      var $509=$505 & $508;
      var $510=((($504)+($509))|0);
      var $511=$dcode;
      var $512=(($511+($510<<2))|0);
      var $513=$here;
      var $514=$512;
      assert(4 % 1 === 0);HEAP16[(($513)>>1)]=HEAP16[(($514)>>1)];HEAP16[((($513)+(2))>>1)]=HEAP16[((($514)+(2))>>1)];
      label = 16; break;
    case 71: 
      var $516=$1;
      var $517=(($516+24)|0);
      HEAP32[(($517)>>2)]=((5271480)|0);
      var $518=$state;
      var $519=(($518)|0);
      HEAP32[(($519)>>2)]=29;
      label = 83; break;
    case 72: 
      label = 78; break;
    case 73: 
      var $522=$op;
      var $523=$522 & 64;
      var $524=(($523)|0)==0;
      if ($524) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $526=(($here+2)|0);
      var $527=HEAP16[(($526)>>1)];
      var $528=(($527)&65535);
      var $529=$hold;
      var $530=$op;
      var $531=1 << $530;
      var $532=((($531)-(1))|0);
      var $533=$529 & $532;
      var $534=((($528)+($533))|0);
      var $535=$lcode;
      var $536=(($535+($534<<2))|0);
      var $537=$here;
      var $538=$536;
      assert(4 % 1 === 0);HEAP16[(($537)>>1)]=HEAP16[(($538)>>1)];HEAP16[((($537)+(2))>>1)]=HEAP16[((($538)+(2))>>1)];
      label = 6; break;
    case 75: 
      var $540=$op;
      var $541=$540 & 32;
      var $542=(($541)|0)!=0;
      if ($542) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $544=$state;
      var $545=(($544)|0);
      HEAP32[(($545)>>2)]=11;
      label = 83; break;
    case 77: 
      var $547=$1;
      var $548=(($547+24)|0);
      HEAP32[(($548)>>2)]=((5268632)|0);
      var $549=$state;
      var $550=(($549)|0);
      HEAP32[(($550)>>2)]=29;
      label = 83; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $554=$in;
      var $555=$last;
      var $556=(($554)>>>0) < (($555)>>>0);
      if ($556) { label = 81; break; } else { var $562 = 0;label = 82; break; }
    case 81: 
      var $558=$out;
      var $559=$end;
      var $560=(($558)>>>0) < (($559)>>>0);
      var $562 = $560;label = 82; break;
    case 82: 
      var $562;
      if ($562) { label = 3; break; } else { label = 83; break; }
    case 83: 
      var $564=$bits;
      var $565=$564 >>> 3;
      $len=$565;
      var $566=$len;
      var $567=$in;
      var $568=(((-$566))|0);
      var $569=(($567+$568)|0);
      $in=$569;
      var $570=$len;
      var $571=$570 << 3;
      var $572=$bits;
      var $573=((($572)-($571))|0);
      $bits=$573;
      var $574=$bits;
      var $575=1 << $574;
      var $576=((($575)-(1))|0);
      var $577=$hold;
      var $578=$577 & $576;
      $hold=$578;
      var $579=$in;
      var $580=(($579+1)|0);
      var $581=$1;
      var $582=(($581)|0);
      HEAP32[(($582)>>2)]=$580;
      var $583=$out;
      var $584=(($583+1)|0);
      var $585=$1;
      var $586=(($585+12)|0);
      HEAP32[(($586)>>2)]=$584;
      var $587=$in;
      var $588=$last;
      var $589=(($587)>>>0) < (($588)>>>0);
      if ($589) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $591=$last;
      var $592=$in;
      var $593=$591;
      var $594=$592;
      var $595=((($593)-($594))|0);
      var $596=((($595)+(5))|0);
      var $605 = $596;label = 86; break;
    case 85: 
      var $598=$in;
      var $599=$last;
      var $600=$598;
      var $601=$599;
      var $602=((($600)-($601))|0);
      var $603=(((5)-($602))|0);
      var $605 = $603;label = 86; break;
    case 86: 
      var $605;
      var $606=$1;
      var $607=(($606+4)|0);
      HEAP32[(($607)>>2)]=$605;
      var $608=$out;
      var $609=$end;
      var $610=(($608)>>>0) < (($609)>>>0);
      if ($610) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $612=$end;
      var $613=$out;
      var $614=$612;
      var $615=$613;
      var $616=((($614)-($615))|0);
      var $617=((($616)+(257))|0);
      var $626 = $617;label = 89; break;
    case 88: 
      var $619=$out;
      var $620=$end;
      var $621=$619;
      var $622=$620;
      var $623=((($621)-($622))|0);
      var $624=(((257)-($623))|0);
      var $626 = $624;label = 89; break;
    case 89: 
      var $626;
      var $627=$1;
      var $628=(($627+16)|0);
      HEAP32[(($628)>>2)]=$626;
      var $629=$hold;
      var $630=$state;
      var $631=(($630+56)|0);
      HEAP32[(($631)>>2)]=$629;
      var $632=$bits;
      var $633=$state;
      var $634=(($633+60)|0);
      HEAP32[(($634)>>2)]=$632;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
_inflate_fast["X"]=1;

function _malloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1;
      var $3=(($2)>>>0) <= 244;
      if ($3) { label = 3; break; } else { label = 38; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)>>>0) < 11;
      if ($6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14 = 16;label = 6; break;
    case 5: 
      var $9=$1;
      var $10=((($9)+(4))|0);
      var $11=((($10)+(7))|0);
      var $12=$11 & -8;
      var $14 = $12;label = 6; break;
    case 6: 
      var $14;
      $nb=$14;
      var $15=$nb;
      var $16=$15 >>> 3;
      $idx=$16;
      var $17=HEAP32[((((5273476)|0))>>2)];
      var $18=$idx;
      var $19=$17 >>> (($18)>>>0);
      $smallbits=$19;
      var $20=$smallbits;
      var $21=$20 & 3;
      var $22=(($21)|0)!=0;
      if ($22) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $24=$smallbits;
      var $25=$24 ^ -1;
      var $26=$25 & 1;
      var $27=$idx;
      var $28=((($27)+($26))|0);
      $idx=$28;
      var $29=$idx;
      var $30=$29 << 1;
      var $31=((((5273516)|0)+($30<<2))|0);
      var $32=$31;
      var $33=$32;
      $b=$33;
      var $34=$b;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      $p=$36;
      var $37=$p;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      $F=$39;
      var $40=$b;
      var $41=$F;
      var $42=(($40)|0)==(($41)|0);
      if ($42) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$idx;
      var $45=1 << $44;
      var $46=$45 ^ -1;
      var $47=HEAP32[((((5273476)|0))>>2)];
      var $48=$47 & $46;
      HEAP32[((((5273476)|0))>>2)]=$48;
      label = 13; break;
    case 9: 
      var $50=$F;
      var $51=$50;
      var $52=HEAP32[((((5273492)|0))>>2)];
      var $53=(($51)>>>0) >= (($52)>>>0);
      var $54=(($53)&1);
      var $55=($54);
      var $56=(($55)|0)!=0;
      if ($56) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $58=$F;
      var $59=$b;
      var $60=(($59+8)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$b;
      var $62=$F;
      var $63=(($62+12)|0);
      HEAP32[(($63)>>2)]=$61;
      label = 12; break;
    case 11: 
      _abort();
      throw "Reached an unreachable!"
    case 12: 
      label = 13; break;
    case 13: 
      var $67=$idx;
      var $68=$67 << 3;
      var $69=$68 | 1;
      var $70=$69 | 2;
      var $71=$p;
      var $72=(($71+4)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$p;
      var $74=$73;
      var $75=$idx;
      var $76=$75 << 3;
      var $77=(($74+$76)|0);
      var $78=$77;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$80 | 1;
      HEAP32[(($79)>>2)]=$81;
      var $82=$p;
      var $83=$82;
      var $84=(($83+8)|0);
      $mem=$84;
      label = 54; break;
    case 14: 
      var $86=$nb;
      var $87=HEAP32[((((5273484)|0))>>2)];
      var $88=(($86)>>>0) > (($87)>>>0);
      if ($88) { label = 15; break; } else { label = 36; break; }
    case 15: 
      var $90=$smallbits;
      var $91=(($90)|0)!=0;
      if ($91) { label = 16; break; } else { label = 31; break; }
    case 16: 
      var $93=$smallbits;
      var $94=$idx;
      var $95=$93 << $94;
      var $96=$idx;
      var $97=1 << $96;
      var $98=$97 << 1;
      var $99=$idx;
      var $100=1 << $99;
      var $101=$100 << 1;
      var $102=(((-$101))|0);
      var $103=$98 | $102;
      var $104=$95 & $103;
      $leftbits=$104;
      var $105=$leftbits;
      var $106=$leftbits;
      var $107=(((-$106))|0);
      var $108=$105 & $107;
      $leastbit=$108;
      var $109=$leastbit;
      var $110=((($109)-(1))|0);
      $Y=$110;
      var $111=$Y;
      var $112=$111 >>> 12;
      var $113=$112 & 16;
      $K=$113;
      var $114=$K;
      $N=$114;
      var $115=$K;
      var $116=$Y;
      var $117=$116 >>> (($115)>>>0);
      $Y=$117;
      var $118=$Y;
      var $119=$118 >>> 5;
      var $120=$119 & 8;
      $K=$120;
      var $121=$N;
      var $122=((($121)+($120))|0);
      $N=$122;
      var $123=$K;
      var $124=$Y;
      var $125=$124 >>> (($123)>>>0);
      $Y=$125;
      var $126=$Y;
      var $127=$126 >>> 2;
      var $128=$127 & 4;
      $K=$128;
      var $129=$N;
      var $130=((($129)+($128))|0);
      $N=$130;
      var $131=$K;
      var $132=$Y;
      var $133=$132 >>> (($131)>>>0);
      $Y=$133;
      var $134=$Y;
      var $135=$134 >>> 1;
      var $136=$135 & 2;
      $K=$136;
      var $137=$N;
      var $138=((($137)+($136))|0);
      $N=$138;
      var $139=$K;
      var $140=$Y;
      var $141=$140 >>> (($139)>>>0);
      $Y=$141;
      var $142=$Y;
      var $143=$142 >>> 1;
      var $144=$143 & 1;
      $K=$144;
      var $145=$N;
      var $146=((($145)+($144))|0);
      $N=$146;
      var $147=$K;
      var $148=$Y;
      var $149=$148 >>> (($147)>>>0);
      $Y=$149;
      var $150=$N;
      var $151=$Y;
      var $152=((($150)+($151))|0);
      $i=$152;
      var $153=$i;
      var $154=$153 << 1;
      var $155=((((5273516)|0)+($154<<2))|0);
      var $156=$155;
      var $157=$156;
      $b1=$157;
      var $158=$b1;
      var $159=(($158+8)|0);
      var $160=HEAP32[(($159)>>2)];
      $p2=$160;
      var $161=$p2;
      var $162=(($161+8)|0);
      var $163=HEAP32[(($162)>>2)];
      $F3=$163;
      var $164=$b1;
      var $165=$F3;
      var $166=(($164)|0)==(($165)|0);
      if ($166) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $168=$i;
      var $169=1 << $168;
      var $170=$169 ^ -1;
      var $171=HEAP32[((((5273476)|0))>>2)];
      var $172=$171 & $170;
      HEAP32[((((5273476)|0))>>2)]=$172;
      label = 22; break;
    case 18: 
      var $174=$F3;
      var $175=$174;
      var $176=HEAP32[((((5273492)|0))>>2)];
      var $177=(($175)>>>0) >= (($176)>>>0);
      var $178=(($177)&1);
      var $179=($178);
      var $180=(($179)|0)!=0;
      if ($180) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $182=$F3;
      var $183=$b1;
      var $184=(($183+8)|0);
      HEAP32[(($184)>>2)]=$182;
      var $185=$b1;
      var $186=$F3;
      var $187=(($186+12)|0);
      HEAP32[(($187)>>2)]=$185;
      label = 21; break;
    case 20: 
      _abort();
      throw "Reached an unreachable!"
    case 21: 
      label = 22; break;
    case 22: 
      var $191=$i;
      var $192=$191 << 3;
      var $193=$nb;
      var $194=((($192)-($193))|0);
      $rsize=$194;
      var $195=$nb;
      var $196=$195 | 1;
      var $197=$196 | 2;
      var $198=$p2;
      var $199=(($198+4)|0);
      HEAP32[(($199)>>2)]=$197;
      var $200=$p2;
      var $201=$200;
      var $202=$nb;
      var $203=(($201+$202)|0);
      var $204=$203;
      $r=$204;
      var $205=$rsize;
      var $206=$205 | 1;
      var $207=$r;
      var $208=(($207+4)|0);
      HEAP32[(($208)>>2)]=$206;
      var $209=$rsize;
      var $210=$r;
      var $211=$210;
      var $212=$rsize;
      var $213=(($211+$212)|0);
      var $214=$213;
      var $215=(($214)|0);
      HEAP32[(($215)>>2)]=$209;
      var $216=HEAP32[((((5273484)|0))>>2)];
      $DVS=$216;
      var $217=$DVS;
      var $218=(($217)|0)!=0;
      if ($218) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $220=HEAP32[((((5273496)|0))>>2)];
      $DV=$220;
      var $221=$DVS;
      var $222=$221 >>> 3;
      $I=$222;
      var $223=$I;
      var $224=$223 << 1;
      var $225=((((5273516)|0)+($224<<2))|0);
      var $226=$225;
      var $227=$226;
      $B=$227;
      var $228=$B;
      $F4=$228;
      var $229=HEAP32[((((5273476)|0))>>2)];
      var $230=$I;
      var $231=1 << $230;
      var $232=$229 & $231;
      var $233=(($232)|0)!=0;
      if ($233) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $235=$I;
      var $236=1 << $235;
      var $237=HEAP32[((((5273476)|0))>>2)];
      var $238=$237 | $236;
      HEAP32[((((5273476)|0))>>2)]=$238;
      label = 29; break;
    case 25: 
      var $240=$B;
      var $241=(($240+8)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$242;
      var $244=HEAP32[((((5273492)|0))>>2)];
      var $245=(($243)>>>0) >= (($244)>>>0);
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $250=$B;
      var $251=(($250+8)|0);
      var $252=HEAP32[(($251)>>2)];
      $F4=$252;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      var $256=$DV;
      var $257=$B;
      var $258=(($257+8)|0);
      HEAP32[(($258)>>2)]=$256;
      var $259=$DV;
      var $260=$F4;
      var $261=(($260+12)|0);
      HEAP32[(($261)>>2)]=$259;
      var $262=$F4;
      var $263=$DV;
      var $264=(($263+8)|0);
      HEAP32[(($264)>>2)]=$262;
      var $265=$B;
      var $266=$DV;
      var $267=(($266+12)|0);
      HEAP32[(($267)>>2)]=$265;
      label = 30; break;
    case 30: 
      var $269=$rsize;
      HEAP32[((((5273484)|0))>>2)]=$269;
      var $270=$r;
      HEAP32[((((5273496)|0))>>2)]=$270;
      var $271=$p2;
      var $272=$271;
      var $273=(($272+8)|0);
      $mem=$273;
      label = 54; break;
    case 31: 
      var $275=HEAP32[((((5273480)|0))>>2)];
      var $276=(($275)|0)!=0;
      if ($276) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $278=$nb;
      var $279=_tmalloc_small(5273476, $278);
      $mem=$279;
      var $280=(($279)|0)!=0;
      if ($280) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 54; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $287=$1;
      var $288=(($287)>>>0) >= 4294967232;
      if ($288) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $nb=-1;
      label = 44; break;
    case 40: 
      var $291=$1;
      var $292=((($291)+(4))|0);
      var $293=((($292)+(7))|0);
      var $294=$293 & -8;
      $nb=$294;
      var $295=HEAP32[((((5273480)|0))>>2)];
      var $296=(($295)|0)!=0;
      if ($296) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $298=$nb;
      var $299=_tmalloc_large(5273476, $298);
      $mem=$299;
      var $300=(($299)|0)!=0;
      if ($300) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 54; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $305=$nb;
      var $306=HEAP32[((((5273484)|0))>>2)];
      var $307=(($305)>>>0) <= (($306)>>>0);
      if ($307) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $309=HEAP32[((((5273484)|0))>>2)];
      var $310=$nb;
      var $311=((($309)-($310))|0);
      $rsize5=$311;
      var $312=HEAP32[((((5273496)|0))>>2)];
      $p6=$312;
      var $313=$rsize5;
      var $314=(($313)>>>0) >= 16;
      if ($314) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $316=$p6;
      var $317=$316;
      var $318=$nb;
      var $319=(($317+$318)|0);
      var $320=$319;
      HEAP32[((((5273496)|0))>>2)]=$320;
      $r7=$320;
      var $321=$rsize5;
      HEAP32[((((5273484)|0))>>2)]=$321;
      var $322=$rsize5;
      var $323=$322 | 1;
      var $324=$r7;
      var $325=(($324+4)|0);
      HEAP32[(($325)>>2)]=$323;
      var $326=$rsize5;
      var $327=$r7;
      var $328=$327;
      var $329=$rsize5;
      var $330=(($328+$329)|0);
      var $331=$330;
      var $332=(($331)|0);
      HEAP32[(($332)>>2)]=$326;
      var $333=$nb;
      var $334=$333 | 1;
      var $335=$334 | 2;
      var $336=$p6;
      var $337=(($336+4)|0);
      HEAP32[(($337)>>2)]=$335;
      label = 49; break;
    case 48: 
      var $339=HEAP32[((((5273484)|0))>>2)];
      $dvs=$339;
      HEAP32[((((5273484)|0))>>2)]=0;
      HEAP32[((((5273496)|0))>>2)]=0;
      var $340=$dvs;
      var $341=$340 | 1;
      var $342=$341 | 2;
      var $343=$p6;
      var $344=(($343+4)|0);
      HEAP32[(($344)>>2)]=$342;
      var $345=$p6;
      var $346=$345;
      var $347=$dvs;
      var $348=(($346+$347)|0);
      var $349=$348;
      var $350=(($349+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$351 | 1;
      HEAP32[(($350)>>2)]=$352;
      label = 49; break;
    case 49: 
      var $354=$p6;
      var $355=$354;
      var $356=(($355+8)|0);
      $mem=$356;
      label = 54; break;
    case 50: 
      var $358=$nb;
      var $359=HEAP32[((((5273488)|0))>>2)];
      var $360=(($358)>>>0) < (($359)>>>0);
      if ($360) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $362=$nb;
      var $363=HEAP32[((((5273488)|0))>>2)];
      var $364=((($363)-($362))|0);
      HEAP32[((((5273488)|0))>>2)]=$364;
      $rsize8=$364;
      var $365=HEAP32[((((5273500)|0))>>2)];
      $p9=$365;
      var $366=$p9;
      var $367=$366;
      var $368=$nb;
      var $369=(($367+$368)|0);
      var $370=$369;
      HEAP32[((((5273500)|0))>>2)]=$370;
      $r10=$370;
      var $371=$rsize8;
      var $372=$371 | 1;
      var $373=$r10;
      var $374=(($373+4)|0);
      HEAP32[(($374)>>2)]=$372;
      var $375=$nb;
      var $376=$375 | 1;
      var $377=$376 | 2;
      var $378=$p9;
      var $379=(($378+4)|0);
      HEAP32[(($379)>>2)]=$377;
      var $380=$p9;
      var $381=$380;
      var $382=(($381+8)|0);
      $mem=$382;
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $385=$nb;
      var $386=_sys_alloc(5273476, $385);
      $mem=$386;
      label = 54; break;
    case 54: 
      var $388=$mem;

      return $388;
    default: assert(0, "bad label: " + label);
  }
}
_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(((-$8))|0);
      var $10=$5 & $9;
      $leastbit=$10;
      var $11=$leastbit;
      var $12=((($11)-(1))|0);
      $Y=$12;
      var $13=$Y;
      var $14=$13 >>> 12;
      var $15=$14 & 16;
      $K=$15;
      var $16=$K;
      $N=$16;
      var $17=$K;
      var $18=$Y;
      var $19=$18 >>> (($17)>>>0);
      $Y=$19;
      var $20=$Y;
      var $21=$20 >>> 5;
      var $22=$21 & 8;
      $K=$22;
      var $23=$N;
      var $24=((($23)+($22))|0);
      $N=$24;
      var $25=$K;
      var $26=$Y;
      var $27=$26 >>> (($25)>>>0);
      $Y=$27;
      var $28=$Y;
      var $29=$28 >>> 2;
      var $30=$29 & 4;
      $K=$30;
      var $31=$N;
      var $32=((($31)+($30))|0);
      $N=$32;
      var $33=$K;
      var $34=$Y;
      var $35=$34 >>> (($33)>>>0);
      $Y=$35;
      var $36=$Y;
      var $37=$36 >>> 1;
      var $38=$37 & 2;
      $K=$38;
      var $39=$N;
      var $40=((($39)+($38))|0);
      $N=$40;
      var $41=$K;
      var $42=$Y;
      var $43=$42 >>> (($41)>>>0);
      $Y=$43;
      var $44=$Y;
      var $45=$44 >>> 1;
      var $46=$45 & 1;
      $K=$46;
      var $47=$N;
      var $48=((($47)+($46))|0);
      $N=$48;
      var $49=$K;
      var $50=$Y;
      var $51=$50 >>> (($49)>>>0);
      $Y=$51;
      var $52=$N;
      var $53=$Y;
      var $54=((($52)+($53))|0);
      $i=$54;
      var $55=$i;
      var $56=$1;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      $v=$59;
      var $60=$t;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & -8;
      var $64=$2;
      var $65=((($63)-($64))|0);
      $rsize=$65;
      label = 3; break;
    case 3: 
      var $67=$t;
      var $68=(($67+16)|0);
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0)!=0;
      if ($71) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $73=$t;
      var $74=(($73+16)|0);
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $83 = $76;label = 6; break;
    case 5: 
      var $78=$t;
      var $79=(($78+16)|0);
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $83 = $81;label = 6; break;
    case 6: 
      var $83;
      $t=$83;
      var $84=(($83)|0)!=0;
      if ($84) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $86=$t;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & -8;
      var $90=$2;
      var $91=((($89)-($90))|0);
      $trem=$91;
      var $92=$trem;
      var $93=$rsize;
      var $94=(($92)>>>0) < (($93)>>>0);
      if ($94) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $96=$trem;
      $rsize=$96;
      var $97=$t;
      $v=$97;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $100=$v;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) >= (($104)>>>0);
      var $106=(($105)&1);
      var $107=($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 11; break; } else { label = 70; break; }
    case 11: 
      var $110=$v;
      var $111=$110;
      var $112=$2;
      var $113=(($111+$112)|0);
      var $114=$113;
      $r=$114;
      var $115=$v;
      var $116=$115;
      var $117=$r;
      var $118=$117;
      var $119=(($116)>>>0) < (($118)>>>0);
      var $120=(($119)&1);
      var $121=($120);
      var $122=(($121)|0)!=0;
      if ($122) { label = 12; break; } else { label = 69; break; }
    case 12: 
      var $124=$v;
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      $XP=$126;
      var $127=$v;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$v;
      var $131=(($129)|0)!=(($130)|0);
      if ($131) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $133=$v;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      $F=$135;
      var $136=$v;
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      $R=$138;
      var $139=$F;
      var $140=$139;
      var $141=$1;
      var $142=(($141+16)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($140)>>>0) >= (($143)>>>0);
      var $145=(($144)&1);
      var $146=($145);
      var $147=(($146)|0)!=0;
      if ($147) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $149=$R;
      var $150=$F;
      var $151=(($150+12)|0);
      HEAP32[(($151)>>2)]=$149;
      var $152=$F;
      var $153=$R;
      var $154=(($153+8)|0);
      HEAP32[(($154)>>2)]=$152;
      label = 16; break;
    case 15: 
      _abort();
      throw "Reached an unreachable!"
    case 16: 
      label = 29; break;
    case 17: 
      var $158=$v;
      var $159=(($158+16)|0);
      var $160=(($159+4)|0);
      $RP=$160;
      var $161=HEAP32[(($160)>>2)];
      $R=$161;
      var $162=(($161)|0)!=0;
      if ($162) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $164=$v;
      var $165=(($164+16)|0);
      var $166=(($165)|0);
      $RP=$166;
      var $167=HEAP32[(($166)>>2)];
      $R=$167;
      var $168=(($167)|0)!=0;
      if ($168) { label = 19; break; } else { label = 28; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $171=$R;
      var $172=(($171+16)|0);
      var $173=(($172+4)|0);
      $CP=$173;
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)|0)!=0;
      if ($175) { var $183 = 1;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $177=$R;
      var $178=(($177+16)|0);
      var $179=(($178)|0);
      $CP=$179;
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180)|0)!=0;
      var $183 = $181;label = 22; break;
    case 22: 
      var $183;
      if ($183) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $185=$CP;
      $RP=$185;
      var $186=HEAP32[(($185)>>2)];
      $R=$186;
      label = 20; break;
    case 24: 
      var $188=$RP;
      var $189=$188;
      var $190=$1;
      var $191=(($190+16)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($189)>>>0) >= (($192)>>>0);
      var $194=(($193)&1);
      var $195=($194);
      var $196=(($195)|0)!=0;
      if ($196) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $198=$RP;
      HEAP32[(($198)>>2)]=0;
      label = 27; break;
    case 26: 
      _abort();
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $203=$XP;
      var $204=(($203)|0)!=0;
      if ($204) { label = 30; break; } else { label = 57; break; }
    case 30: 
      var $206=$v;
      var $207=(($206+28)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$1;
      var $210=(($209+304)|0);
      var $211=(($210+($208<<2))|0);
      $H=$211;
      var $212=$v;
      var $213=$H;
      var $214=HEAP32[(($213)>>2)];
      var $215=(($212)|0)==(($214)|0);
      if ($215) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $217=$R;
      var $218=$H;
      HEAP32[(($218)>>2)]=$217;
      var $219=(($217)|0)==0;
      if ($219) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $221=$v;
      var $222=(($221+28)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=1 << $223;
      var $225=$224 ^ -1;
      var $226=$1;
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$228 & $225;
      HEAP32[(($227)>>2)]=$229;
      label = 33; break;
    case 33: 
      label = 41; break;
    case 34: 
      var $232=$XP;
      var $233=$232;
      var $234=$1;
      var $235=(($234+16)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($233)>>>0) >= (($236)>>>0);
      var $238=(($237)&1);
      var $239=($238);
      var $240=(($239)|0)!=0;
      if ($240) { label = 35; break; } else { label = 39; break; }
    case 35: 
      var $242=$XP;
      var $243=(($242+16)|0);
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$v;
      var $247=(($245)|0)==(($246)|0);
      if ($247) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $249=$R;
      var $250=$XP;
      var $251=(($250+16)|0);
      var $252=(($251)|0);
      HEAP32[(($252)>>2)]=$249;
      label = 38; break;
    case 37: 
      var $254=$R;
      var $255=$XP;
      var $256=(($255+16)|0);
      var $257=(($256+4)|0);
      HEAP32[(($257)>>2)]=$254;
      label = 38; break;
    case 38: 
      label = 40; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 41; break;
    case 41: 
      var $262=$R;
      var $263=(($262)|0)!=0;
      if ($263) { label = 42; break; } else { label = 56; break; }
    case 42: 
      var $265=$R;
      var $266=$265;
      var $267=$1;
      var $268=(($267+16)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($266)>>>0) >= (($269)>>>0);
      var $271=(($270)&1);
      var $272=($271);
      var $273=(($272)|0)!=0;
      if ($273) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $275=$XP;
      var $276=$R;
      var $277=(($276+24)|0);
      HEAP32[(($277)>>2)]=$275;
      var $278=$v;
      var $279=(($278+16)|0);
      var $280=(($279)|0);
      var $281=HEAP32[(($280)>>2)];
      $C0=$281;
      var $282=(($281)|0)!=0;
      if ($282) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $284=$C0;
      var $285=$284;
      var $286=$1;
      var $287=(($286+16)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=(($285)>>>0) >= (($288)>>>0);
      var $290=(($289)&1);
      var $291=($290);
      var $292=(($291)|0)!=0;
      if ($292) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $294=$C0;
      var $295=$R;
      var $296=(($295+16)|0);
      var $297=(($296)|0);
      HEAP32[(($297)>>2)]=$294;
      var $298=$R;
      var $299=$C0;
      var $300=(($299+24)|0);
      HEAP32[(($300)>>2)]=$298;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!"
    case 47: 
      label = 48; break;
    case 48: 
      var $304=$v;
      var $305=(($304+16)|0);
      var $306=(($305+4)|0);
      var $307=HEAP32[(($306)>>2)];
      $C1=$307;
      var $308=(($307)|0)!=0;
      if ($308) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $310=$C1;
      var $311=$310;
      var $312=$1;
      var $313=(($312+16)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=(($311)>>>0) >= (($314)>>>0);
      var $316=(($315)&1);
      var $317=($316);
      var $318=(($317)|0)!=0;
      if ($318) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $320=$C1;
      var $321=$R;
      var $322=(($321+16)|0);
      var $323=(($322+4)|0);
      HEAP32[(($323)>>2)]=$320;
      var $324=$R;
      var $325=$C1;
      var $326=(($325+24)|0);
      HEAP32[(($326)>>2)]=$324;
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!"
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $334=$rsize;
      var $335=(($334)>>>0) < 16;
      if ($335) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $337=$rsize;
      var $338=$2;
      var $339=((($337)+($338))|0);
      var $340=$339 | 1;
      var $341=$340 | 2;
      var $342=$v;
      var $343=(($342+4)|0);
      HEAP32[(($343)>>2)]=$341;
      var $344=$v;
      var $345=$344;
      var $346=$rsize;
      var $347=$2;
      var $348=((($346)+($347))|0);
      var $349=(($345+$348)|0);
      var $350=$349;
      var $351=(($350+4)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=$352 | 1;
      HEAP32[(($351)>>2)]=$353;
      label = 68; break;
    case 59: 
      var $355=$2;
      var $356=$355 | 1;
      var $357=$356 | 2;
      var $358=$v;
      var $359=(($358+4)|0);
      HEAP32[(($359)>>2)]=$357;
      var $360=$rsize;
      var $361=$360 | 1;
      var $362=$r;
      var $363=(($362+4)|0);
      HEAP32[(($363)>>2)]=$361;
      var $364=$rsize;
      var $365=$r;
      var $366=$365;
      var $367=$rsize;
      var $368=(($366+$367)|0);
      var $369=$368;
      var $370=(($369)|0);
      HEAP32[(($370)>>2)]=$364;
      var $371=$1;
      var $372=(($371+8)|0);
      var $373=HEAP32[(($372)>>2)];
      $DVS=$373;
      var $374=$DVS;
      var $375=(($374)|0)!=0;
      if ($375) { label = 60; break; } else { label = 67; break; }
    case 60: 
      var $377=$1;
      var $378=(($377+20)|0);
      var $379=HEAP32[(($378)>>2)];
      $DV=$379;
      var $380=$DVS;
      var $381=$380 >>> 3;
      $I=$381;
      var $382=$I;
      var $383=$382 << 1;
      var $384=$1;
      var $385=(($384+40)|0);
      var $386=(($385+($383<<2))|0);
      var $387=$386;
      var $388=$387;
      $B=$388;
      var $389=$B;
      $F1=$389;
      var $390=$1;
      var $391=(($390)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=$I;
      var $394=1 << $393;
      var $395=$392 & $394;
      var $396=(($395)|0)!=0;
      if ($396) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $398=$I;
      var $399=1 << $398;
      var $400=$1;
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$402 | $399;
      HEAP32[(($401)>>2)]=$403;
      label = 66; break;
    case 62: 
      var $405=$B;
      var $406=(($405+8)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=$407;
      var $409=$1;
      var $410=(($409+16)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=(($408)>>>0) >= (($411)>>>0);
      var $413=(($412)&1);
      var $414=($413);
      var $415=(($414)|0)!=0;
      if ($415) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $417=$B;
      var $418=(($417+8)|0);
      var $419=HEAP32[(($418)>>2)];
      $F1=$419;
      label = 65; break;
    case 64: 
      _abort();
      throw "Reached an unreachable!"
    case 65: 
      label = 66; break;
    case 66: 
      var $423=$DV;
      var $424=$B;
      var $425=(($424+8)|0);
      HEAP32[(($425)>>2)]=$423;
      var $426=$DV;
      var $427=$F1;
      var $428=(($427+12)|0);
      HEAP32[(($428)>>2)]=$426;
      var $429=$F1;
      var $430=$DV;
      var $431=(($430+8)|0);
      HEAP32[(($431)>>2)]=$429;
      var $432=$B;
      var $433=$DV;
      var $434=(($433+12)|0);
      HEAP32[(($434)>>2)]=$432;
      label = 67; break;
    case 67: 
      var $436=$rsize;
      var $437=$1;
      var $438=(($437+8)|0);
      HEAP32[(($438)>>2)]=$436;
      var $439=$r;
      var $440=$1;
      var $441=(($440+20)|0);
      HEAP32[(($441)>>2)]=$439;
      label = 68; break;
    case 68: 
      var $443=$v;
      var $444=$443;
      var $445=(($444+8)|0);

      return $445;
    case 69: 
      label = 70; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0;
      var $4=$3;
      var $5=(((-$4))|0);
      $rsize=$5;
      var $6=$3;
      var $7=$6 >>> 8;
      $X=$7;
      var $8=$X;
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $12=$X;
      var $13=(($12)>>>0) > 65535;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $16=$X;
      $Y=$16;
      var $17=$Y;
      var $18=((($17)-(256))|0);
      var $19=$18 >>> 16;
      var $20=$19 & 8;
      $N=$20;
      var $21=$N;
      var $22=$Y;
      var $23=$22 << $21;
      $Y=$23;
      var $24=((($23)-(4096))|0);
      var $25=$24 >>> 16;
      var $26=$25 & 4;
      $K=$26;
      var $27=$K;
      var $28=$N;
      var $29=((($28)+($27))|0);
      $N=$29;
      var $30=$K;
      var $31=$Y;
      var $32=$31 << $30;
      $Y=$32;
      var $33=((($32)-(16384))|0);
      var $34=$33 >>> 16;
      var $35=$34 & 2;
      $K=$35;
      var $36=$N;
      var $37=((($36)+($35))|0);
      $N=$37;
      var $38=$N;
      var $39=(((14)-($38))|0);
      var $40=$K;
      var $41=$Y;
      var $42=$41 << $40;
      $Y=$42;
      var $43=$42 >>> 15;
      var $44=((($39)+($43))|0);
      $K=$44;
      var $45=$K;
      var $46=$45 << 1;
      var $47=$3;
      var $48=$K;
      var $49=((($48)+(7))|0);
      var $50=$47 >>> (($49)>>>0);
      var $51=$50 & 1;
      var $52=((($46)+($51))|0);
      $idx=$52;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $55=$idx;
      var $56=$2;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      var $60=(($59)|0)!=0;
      if ($60) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $62=$3;
      var $63=$idx;
      var $64=(($63)|0)==31;
      if ($64) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $73 = 0;label = 12; break;
    case 11: 
      var $67=$idx;
      var $68=$67 >>> 1;
      var $69=((($68)+(8))|0);
      var $70=((($69)-(2))|0);
      var $71=(((31)-($70))|0);
      var $73 = $71;label = 12; break;
    case 12: 
      var $73;
      var $74=$62 << $73;
      $sizebits=$74;
      $rst=0;
      label = 13; break;
    case 13: 
      var $76=$t;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & -8;
      var $80=$3;
      var $81=((($79)-($80))|0);
      $trem=$81;
      var $82=$trem;
      var $83=$rsize;
      var $84=(($82)>>>0) < (($83)>>>0);
      if ($84) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $86=$t;
      $v=$86;
      var $87=$trem;
      $rsize=$87;
      var $88=(($87)|0)==0;
      if ($88) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $92=$t;
      var $93=(($92+16)|0);
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      $rt=$95;
      var $96=$sizebits;
      var $97=$96 >>> 31;
      var $98=$97 & 1;
      var $99=$t;
      var $100=(($99+16)|0);
      var $101=(($100+($98<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      $t=$102;
      var $103=$rt;
      var $104=(($103)|0)!=0;
      if ($104) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $106=$rt;
      var $107=$t;
      var $108=(($106)|0)!=(($107)|0);
      if ($108) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $110=$rt;
      $rst=$110;
      label = 20; break;
    case 20: 
      var $112=$t;
      var $113=(($112)|0)==0;
      if ($113) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $115=$rst;
      $t=$115;
      label = 23; break;
    case 22: 
      var $117=$sizebits;
      var $118=$117 << 1;
      $sizebits=$118;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $121=$t;
      var $122=(($121)|0)==0;
      if ($122) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $124=$v;
      var $125=(($124)|0)==0;
      if ($125) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $127=$idx;
      var $128=1 << $127;
      var $129=$128 << 1;
      var $130=$idx;
      var $131=1 << $130;
      var $132=$131 << 1;
      var $133=(((-$132))|0);
      var $134=$129 | $133;
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$134 & $137;
      $leftbits=$138;
      var $139=$leftbits;
      var $140=(($139)|0)!=0;
      if ($140) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $142=$leftbits;
      var $143=$leftbits;
      var $144=(((-$143))|0);
      var $145=$142 & $144;
      $leastbit=$145;
      var $146=$leastbit;
      var $147=((($146)-(1))|0);
      $Y1=$147;
      var $148=$Y1;
      var $149=$148 >>> 12;
      var $150=$149 & 16;
      $K2=$150;
      var $151=$K2;
      $N3=$151;
      var $152=$K2;
      var $153=$Y1;
      var $154=$153 >>> (($152)>>>0);
      $Y1=$154;
      var $155=$Y1;
      var $156=$155 >>> 5;
      var $157=$156 & 8;
      $K2=$157;
      var $158=$N3;
      var $159=((($158)+($157))|0);
      $N3=$159;
      var $160=$K2;
      var $161=$Y1;
      var $162=$161 >>> (($160)>>>0);
      $Y1=$162;
      var $163=$Y1;
      var $164=$163 >>> 2;
      var $165=$164 & 4;
      $K2=$165;
      var $166=$N3;
      var $167=((($166)+($165))|0);
      $N3=$167;
      var $168=$K2;
      var $169=$Y1;
      var $170=$169 >>> (($168)>>>0);
      $Y1=$170;
      var $171=$Y1;
      var $172=$171 >>> 1;
      var $173=$172 & 2;
      $K2=$173;
      var $174=$N3;
      var $175=((($174)+($173))|0);
      $N3=$175;
      var $176=$K2;
      var $177=$Y1;
      var $178=$177 >>> (($176)>>>0);
      $Y1=$178;
      var $179=$Y1;
      var $180=$179 >>> 1;
      var $181=$180 & 1;
      $K2=$181;
      var $182=$N3;
      var $183=((($182)+($181))|0);
      $N3=$183;
      var $184=$K2;
      var $185=$Y1;
      var $186=$185 >>> (($184)>>>0);
      $Y1=$186;
      var $187=$N3;
      var $188=$Y1;
      var $189=((($187)+($188))|0);
      $i=$189;
      var $190=$i;
      var $191=$2;
      var $192=(($191+304)|0);
      var $193=(($192+($190<<2))|0);
      var $194=HEAP32[(($193)>>2)];
      $t=$194;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $198=$t;
      var $199=(($198)|0)!=0;
      if ($199) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $201=$t;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & -8;
      var $205=$3;
      var $206=((($204)-($205))|0);
      $trem4=$206;
      var $207=$trem4;
      var $208=$rsize;
      var $209=(($207)>>>0) < (($208)>>>0);
      if ($209) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $211=$trem4;
      $rsize=$211;
      var $212=$t;
      $v=$212;
      label = 33; break;
    case 33: 
      var $214=$t;
      var $215=(($214+16)|0);
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217)|0)!=0;
      if ($218) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $220=$t;
      var $221=(($220+16)|0);
      var $222=(($221)|0);
      var $223=HEAP32[(($222)>>2)];
      var $230 = $223;label = 36; break;
    case 35: 
      var $225=$t;
      var $226=(($225+16)|0);
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $230 = $228;label = 36; break;
    case 36: 
      var $230;
      $t=$230;
      label = 30; break;
    case 37: 
      var $232=$v;
      var $233=(($232)|0)!=0;
      if ($233) { label = 38; break; } else { label = 127; break; }
    case 38: 
      var $235=$rsize;
      var $236=$2;
      var $237=(($236+8)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$3;
      var $240=((($238)-($239))|0);
      var $241=(($235)>>>0) < (($240)>>>0);
      if ($241) { label = 39; break; } else { label = 127; break; }
    case 39: 
      var $243=$v;
      var $244=$243;
      var $245=$2;
      var $246=(($245+16)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($244)>>>0) >= (($247)>>>0);
      var $249=(($248)&1);
      var $250=($249);
      var $251=(($250)|0)!=0;
      if ($251) { label = 40; break; } else { label = 126; break; }
    case 40: 
      var $253=$v;
      var $254=$253;
      var $255=$3;
      var $256=(($254+$255)|0);
      var $257=$256;
      $r=$257;
      var $258=$v;
      var $259=$258;
      var $260=$r;
      var $261=$260;
      var $262=(($259)>>>0) < (($261)>>>0);
      var $263=(($262)&1);
      var $264=($263);
      var $265=(($264)|0)!=0;
      if ($265) { label = 41; break; } else { label = 125; break; }
    case 41: 
      var $267=$v;
      var $268=(($267+24)|0);
      var $269=HEAP32[(($268)>>2)];
      $XP=$269;
      var $270=$v;
      var $271=(($270+12)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$v;
      var $274=(($272)|0)!=(($273)|0);
      if ($274) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $276=$v;
      var $277=(($276+8)|0);
      var $278=HEAP32[(($277)>>2)];
      $F=$278;
      var $279=$v;
      var $280=(($279+12)|0);
      var $281=HEAP32[(($280)>>2)];
      $R=$281;
      var $282=$F;
      var $283=$282;
      var $284=$2;
      var $285=(($284+16)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=(($283)>>>0) >= (($286)>>>0);
      var $288=(($287)&1);
      var $289=($288);
      var $290=(($289)|0)!=0;
      if ($290) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $292=$R;
      var $293=$F;
      var $294=(($293+12)|0);
      HEAP32[(($294)>>2)]=$292;
      var $295=$F;
      var $296=$R;
      var $297=(($296+8)|0);
      HEAP32[(($297)>>2)]=$295;
      label = 45; break;
    case 44: 
      _abort();
      throw "Reached an unreachable!"
    case 45: 
      label = 58; break;
    case 46: 
      var $301=$v;
      var $302=(($301+16)|0);
      var $303=(($302+4)|0);
      $RP=$303;
      var $304=HEAP32[(($303)>>2)];
      $R=$304;
      var $305=(($304)|0)!=0;
      if ($305) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $307=$v;
      var $308=(($307+16)|0);
      var $309=(($308)|0);
      $RP=$309;
      var $310=HEAP32[(($309)>>2)];
      $R=$310;
      var $311=(($310)|0)!=0;
      if ($311) { label = 48; break; } else { label = 57; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $314=$R;
      var $315=(($314+16)|0);
      var $316=(($315+4)|0);
      $CP=$316;
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317)|0)!=0;
      if ($318) { var $326 = 1;label = 51; break; } else { label = 50; break; }
    case 50: 
      var $320=$R;
      var $321=(($320+16)|0);
      var $322=(($321)|0);
      $CP=$322;
      var $323=HEAP32[(($322)>>2)];
      var $324=(($323)|0)!=0;
      var $326 = $324;label = 51; break;
    case 51: 
      var $326;
      if ($326) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $328=$CP;
      $RP=$328;
      var $329=HEAP32[(($328)>>2)];
      $R=$329;
      label = 49; break;
    case 53: 
      var $331=$RP;
      var $332=$331;
      var $333=$2;
      var $334=(($333+16)|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=(($332)>>>0) >= (($335)>>>0);
      var $337=(($336)&1);
      var $338=($337);
      var $339=(($338)|0)!=0;
      if ($339) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $341=$RP;
      HEAP32[(($341)>>2)]=0;
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $346=$XP;
      var $347=(($346)|0)!=0;
      if ($347) { label = 59; break; } else { label = 86; break; }
    case 59: 
      var $349=$v;
      var $350=(($349+28)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$2;
      var $353=(($352+304)|0);
      var $354=(($353+($351<<2))|0);
      $H=$354;
      var $355=$v;
      var $356=$H;
      var $357=HEAP32[(($356)>>2)];
      var $358=(($355)|0)==(($357)|0);
      if ($358) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $360=$R;
      var $361=$H;
      HEAP32[(($361)>>2)]=$360;
      var $362=(($360)|0)==0;
      if ($362) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $364=$v;
      var $365=(($364+28)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=1 << $366;
      var $368=$367 ^ -1;
      var $369=$2;
      var $370=(($369+4)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$371 & $368;
      HEAP32[(($370)>>2)]=$372;
      label = 62; break;
    case 62: 
      label = 70; break;
    case 63: 
      var $375=$XP;
      var $376=$375;
      var $377=$2;
      var $378=(($377+16)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($376)>>>0) >= (($379)>>>0);
      var $381=(($380)&1);
      var $382=($381);
      var $383=(($382)|0)!=0;
      if ($383) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $385=$XP;
      var $386=(($385+16)|0);
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=$v;
      var $390=(($388)|0)==(($389)|0);
      if ($390) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $392=$R;
      var $393=$XP;
      var $394=(($393+16)|0);
      var $395=(($394)|0);
      HEAP32[(($395)>>2)]=$392;
      label = 67; break;
    case 66: 
      var $397=$R;
      var $398=$XP;
      var $399=(($398+16)|0);
      var $400=(($399+4)|0);
      HEAP32[(($400)>>2)]=$397;
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      var $405=$R;
      var $406=(($405)|0)!=0;
      if ($406) { label = 71; break; } else { label = 85; break; }
    case 71: 
      var $408=$R;
      var $409=$408;
      var $410=$2;
      var $411=(($410+16)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($409)>>>0) >= (($412)>>>0);
      var $414=(($413)&1);
      var $415=($414);
      var $416=(($415)|0)!=0;
      if ($416) { label = 72; break; } else { label = 83; break; }
    case 72: 
      var $418=$XP;
      var $419=$R;
      var $420=(($419+24)|0);
      HEAP32[(($420)>>2)]=$418;
      var $421=$v;
      var $422=(($421+16)|0);
      var $423=(($422)|0);
      var $424=HEAP32[(($423)>>2)];
      $C0=$424;
      var $425=(($424)|0)!=0;
      if ($425) { label = 73; break; } else { label = 77; break; }
    case 73: 
      var $427=$C0;
      var $428=$427;
      var $429=$2;
      var $430=(($429+16)|0);
      var $431=HEAP32[(($430)>>2)];
      var $432=(($428)>>>0) >= (($431)>>>0);
      var $433=(($432)&1);
      var $434=($433);
      var $435=(($434)|0)!=0;
      if ($435) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $437=$C0;
      var $438=$R;
      var $439=(($438+16)|0);
      var $440=(($439)|0);
      HEAP32[(($440)>>2)]=$437;
      var $441=$R;
      var $442=$C0;
      var $443=(($442+24)|0);
      HEAP32[(($443)>>2)]=$441;
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!"
    case 76: 
      label = 77; break;
    case 77: 
      var $447=$v;
      var $448=(($447+16)|0);
      var $449=(($448+4)|0);
      var $450=HEAP32[(($449)>>2)];
      $C1=$450;
      var $451=(($450)|0)!=0;
      if ($451) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $453=$C1;
      var $454=$453;
      var $455=$2;
      var $456=(($455+16)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($454)>>>0) >= (($457)>>>0);
      var $459=(($458)&1);
      var $460=($459);
      var $461=(($460)|0)!=0;
      if ($461) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $463=$C1;
      var $464=$R;
      var $465=(($464+16)|0);
      var $466=(($465+4)|0);
      HEAP32[(($466)>>2)]=$463;
      var $467=$R;
      var $468=$C1;
      var $469=(($468+24)|0);
      HEAP32[(($469)>>2)]=$467;
      label = 81; break;
    case 80: 
      _abort();
      throw "Reached an unreachable!"
    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      _abort();
      throw "Reached an unreachable!"
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $477=$rsize;
      var $478=(($477)>>>0) < 16;
      if ($478) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $480=$rsize;
      var $481=$3;
      var $482=((($480)+($481))|0);
      var $483=$482 | 1;
      var $484=$483 | 2;
      var $485=$v;
      var $486=(($485+4)|0);
      HEAP32[(($486)>>2)]=$484;
      var $487=$v;
      var $488=$487;
      var $489=$rsize;
      var $490=$3;
      var $491=((($489)+($490))|0);
      var $492=(($488+$491)|0);
      var $493=$492;
      var $494=(($493+4)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$495 | 1;
      HEAP32[(($494)>>2)]=$496;
      label = 124; break;
    case 88: 
      var $498=$3;
      var $499=$498 | 1;
      var $500=$499 | 2;
      var $501=$v;
      var $502=(($501+4)|0);
      HEAP32[(($502)>>2)]=$500;
      var $503=$rsize;
      var $504=$503 | 1;
      var $505=$r;
      var $506=(($505+4)|0);
      HEAP32[(($506)>>2)]=$504;
      var $507=$rsize;
      var $508=$r;
      var $509=$508;
      var $510=$rsize;
      var $511=(($509+$510)|0);
      var $512=$511;
      var $513=(($512)|0);
      HEAP32[(($513)>>2)]=$507;
      var $514=$rsize;
      var $515=$514 >>> 3;
      var $516=(($515)>>>0) < 32;
      if ($516) { label = 89; break; } else { label = 96; break; }
    case 89: 
      var $518=$rsize;
      var $519=$518 >>> 3;
      $I=$519;
      var $520=$I;
      var $521=$520 << 1;
      var $522=$2;
      var $523=(($522+40)|0);
      var $524=(($523+($521<<2))|0);
      var $525=$524;
      var $526=$525;
      $B=$526;
      var $527=$B;
      $F5=$527;
      var $528=$2;
      var $529=(($528)|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=$I;
      var $532=1 << $531;
      var $533=$530 & $532;
      var $534=(($533)|0)!=0;
      if ($534) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $536=$I;
      var $537=1 << $536;
      var $538=$2;
      var $539=(($538)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=$540 | $537;
      HEAP32[(($539)>>2)]=$541;
      label = 95; break;
    case 91: 
      var $543=$B;
      var $544=(($543+8)|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=$545;
      var $547=$2;
      var $548=(($547+16)|0);
      var $549=HEAP32[(($548)>>2)];
      var $550=(($546)>>>0) >= (($549)>>>0);
      var $551=(($550)&1);
      var $552=($551);
      var $553=(($552)|0)!=0;
      if ($553) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $555=$B;
      var $556=(($555+8)|0);
      var $557=HEAP32[(($556)>>2)];
      $F5=$557;
      label = 94; break;
    case 93: 
      _abort();
      throw "Reached an unreachable!"
    case 94: 
      label = 95; break;
    case 95: 
      var $561=$r;
      var $562=$B;
      var $563=(($562+8)|0);
      HEAP32[(($563)>>2)]=$561;
      var $564=$r;
      var $565=$F5;
      var $566=(($565+12)|0);
      HEAP32[(($566)>>2)]=$564;
      var $567=$F5;
      var $568=$r;
      var $569=(($568+8)|0);
      HEAP32[(($569)>>2)]=$567;
      var $570=$B;
      var $571=$r;
      var $572=(($571+12)|0);
      HEAP32[(($572)>>2)]=$570;
      label = 123; break;
    case 96: 
      var $574=$r;
      var $575=$574;
      $TP=$575;
      var $576=$rsize;
      var $577=$576 >>> 8;
      $X8=$577;
      var $578=$X8;
      var $579=(($578)|0)==0;
      if ($579) { label = 97; break; } else { label = 98; break; }
    case 97: 
      $I7=0;
      label = 102; break;
    case 98: 
      var $582=$X8;
      var $583=(($582)>>>0) > 65535;
      if ($583) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I7=31;
      label = 101; break;
    case 100: 
      var $586=$X8;
      $Y9=$586;
      var $587=$Y9;
      var $588=((($587)-(256))|0);
      var $589=$588 >>> 16;
      var $590=$589 & 8;
      $N10=$590;
      var $591=$N10;
      var $592=$Y9;
      var $593=$592 << $591;
      $Y9=$593;
      var $594=((($593)-(4096))|0);
      var $595=$594 >>> 16;
      var $596=$595 & 4;
      $K11=$596;
      var $597=$K11;
      var $598=$N10;
      var $599=((($598)+($597))|0);
      $N10=$599;
      var $600=$K11;
      var $601=$Y9;
      var $602=$601 << $600;
      $Y9=$602;
      var $603=((($602)-(16384))|0);
      var $604=$603 >>> 16;
      var $605=$604 & 2;
      $K11=$605;
      var $606=$N10;
      var $607=((($606)+($605))|0);
      $N10=$607;
      var $608=$N10;
      var $609=(((14)-($608))|0);
      var $610=$K11;
      var $611=$Y9;
      var $612=$611 << $610;
      $Y9=$612;
      var $613=$612 >>> 15;
      var $614=((($609)+($613))|0);
      $K11=$614;
      var $615=$K11;
      var $616=$615 << 1;
      var $617=$rsize;
      var $618=$K11;
      var $619=((($618)+(7))|0);
      var $620=$617 >>> (($619)>>>0);
      var $621=$620 & 1;
      var $622=((($616)+($621))|0);
      $I7=$622;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $625=$I7;
      var $626=$2;
      var $627=(($626+304)|0);
      var $628=(($627+($625<<2))|0);
      $H6=$628;
      var $629=$I7;
      var $630=$TP;
      var $631=(($630+28)|0);
      HEAP32[(($631)>>2)]=$629;
      var $632=$TP;
      var $633=(($632+16)|0);
      var $634=(($633+4)|0);
      HEAP32[(($634)>>2)]=0;
      var $635=$TP;
      var $636=(($635+16)|0);
      var $637=(($636)|0);
      HEAP32[(($637)>>2)]=0;
      var $638=$2;
      var $639=(($638+4)|0);
      var $640=HEAP32[(($639)>>2)];
      var $641=$I7;
      var $642=1 << $641;
      var $643=$640 & $642;
      var $644=(($643)|0)!=0;
      if ($644) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $646=$I7;
      var $647=1 << $646;
      var $648=$2;
      var $649=(($648+4)|0);
      var $650=HEAP32[(($649)>>2)];
      var $651=$650 | $647;
      HEAP32[(($649)>>2)]=$651;
      var $652=$TP;
      var $653=$H6;
      HEAP32[(($653)>>2)]=$652;
      var $654=$H6;
      var $655=$654;
      var $656=$TP;
      var $657=(($656+24)|0);
      HEAP32[(($657)>>2)]=$655;
      var $658=$TP;
      var $659=$TP;
      var $660=(($659+12)|0);
      HEAP32[(($660)>>2)]=$658;
      var $661=$TP;
      var $662=(($661+8)|0);
      HEAP32[(($662)>>2)]=$658;
      label = 122; break;
    case 104: 
      var $664=$H6;
      var $665=HEAP32[(($664)>>2)];
      $T=$665;
      var $666=$rsize;
      var $667=$I7;
      var $668=(($667)|0)==31;
      if ($668) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $677 = 0;label = 107; break;
    case 106: 
      var $671=$I7;
      var $672=$671 >>> 1;
      var $673=((($672)+(8))|0);
      var $674=((($673)-(2))|0);
      var $675=(((31)-($674))|0);
      var $677 = $675;label = 107; break;
    case 107: 
      var $677;
      var $678=$666 << $677;
      $K12=$678;
      label = 108; break;
    case 108: 
      var $680=$T;
      var $681=(($680+4)|0);
      var $682=HEAP32[(($681)>>2)];
      var $683=$682 & -8;
      var $684=$rsize;
      var $685=(($683)|0)!=(($684)|0);
      if ($685) { label = 109; break; } else { label = 115; break; }
    case 109: 
      var $687=$K12;
      var $688=$687 >>> 31;
      var $689=$688 & 1;
      var $690=$T;
      var $691=(($690+16)|0);
      var $692=(($691+($689<<2))|0);
      $C=$692;
      var $693=$K12;
      var $694=$693 << 1;
      $K12=$694;
      var $695=$C;
      var $696=HEAP32[(($695)>>2)];
      var $697=(($696)|0)!=0;
      if ($697) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $699=$C;
      var $700=HEAP32[(($699)>>2)];
      $T=$700;
      label = 114; break;
    case 111: 
      var $702=$C;
      var $703=$702;
      var $704=$2;
      var $705=(($704+16)|0);
      var $706=HEAP32[(($705)>>2)];
      var $707=(($703)>>>0) >= (($706)>>>0);
      var $708=(($707)&1);
      var $709=($708);
      var $710=(($709)|0)!=0;
      if ($710) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $712=$TP;
      var $713=$C;
      HEAP32[(($713)>>2)]=$712;
      var $714=$T;
      var $715=$TP;
      var $716=(($715+24)|0);
      HEAP32[(($716)>>2)]=$714;
      var $717=$TP;
      var $718=$TP;
      var $719=(($718+12)|0);
      HEAP32[(($719)>>2)]=$717;
      var $720=$TP;
      var $721=(($720+8)|0);
      HEAP32[(($721)>>2)]=$717;
      label = 121; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!"
    case 114: 
      label = 120; break;
    case 115: 
      var $725=$T;
      var $726=(($725+8)|0);
      var $727=HEAP32[(($726)>>2)];
      $F13=$727;
      var $728=$T;
      var $729=$728;
      var $730=$2;
      var $731=(($730+16)|0);
      var $732=HEAP32[(($731)>>2)];
      var $733=(($729)>>>0) >= (($732)>>>0);
      if ($733) { label = 116; break; } else { var $742 = 0;label = 117; break; }
    case 116: 
      var $735=$F13;
      var $736=$735;
      var $737=$2;
      var $738=(($737+16)|0);
      var $739=HEAP32[(($738)>>2)];
      var $740=(($736)>>>0) >= (($739)>>>0);
      var $742 = $740;label = 117; break;
    case 117: 
      var $742;
      var $743=(($742)&1);
      var $744=($743);
      var $745=(($744)|0)!=0;
      if ($745) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $747=$TP;
      var $748=$F13;
      var $749=(($748+12)|0);
      HEAP32[(($749)>>2)]=$747;
      var $750=$T;
      var $751=(($750+8)|0);
      HEAP32[(($751)>>2)]=$747;
      var $752=$F13;
      var $753=$TP;
      var $754=(($753+8)|0);
      HEAP32[(($754)>>2)]=$752;
      var $755=$T;
      var $756=$TP;
      var $757=(($756+12)|0);
      HEAP32[(($757)>>2)]=$755;
      var $758=$TP;
      var $759=(($758+24)|0);
      HEAP32[(($759)>>2)]=0;
      label = 121; break;
    case 119: 
      _abort();
      throw "Reached an unreachable!"
    case 120: 
      label = 108; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $766=$v;
      var $767=$766;
      var $768=(($767+8)|0);
      $1=$768;
      label = 128; break;
    case 125: 
      label = 126; break;
    case 126: 
      _abort();
      throw "Reached an unreachable!"
    case 127: 
      $1=0;
      label = 128; break;
    case 128: 
      var $773=$1;

      return $773;
    default: assert(0, "bad label: " + label);
  }
}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize1;
      var $br2;
      var $end3;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $4=HEAP32[((((5246528)|0))>>2)];
      var $5=(($4)|0)!=0;
      if ($5) { var $10 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=_init_mparams();
      var $8=(($7)|0)!=0;
      var $10 = $8;label = 4; break;
    case 4: 
      var $10;
      var $11=(($10)&1);
      var $12=$2;
      var $13=(($12+440)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 0;
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $18=$3;
      var $19=HEAP32[((((5246540)|0))>>2)];
      var $20=(($18)>>>0) >= (($19)>>>0);
      if ($20) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)!=0;
      if ($25) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $27=$2;
      var $28=$3;
      var $29=_mmap_alloc($27, $28);
      $mem=$29;
      var $30=$mem;
      var $31=(($30)|0)!=0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=$mem;
      $1=$33;
      label = 93; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $36=$2;
      var $37=(($36+440)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 & 4;
      var $40=(($39)|0)!=0;
      if ($40) { label = 43; break; } else { label = 11; break; }
    case 11: 
      $br=-1;
      var $42=$2;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|0)==0;
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $55 = 0;label = 14; break;
    case 13: 
      var $48=$2;
      var $49=$2;
      var $50=(($49+24)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=_segment_holding($48, $52);
      var $55 = $53;label = 14; break;
    case 14: 
      var $55;
      $ss=$55;
      $asize=0;
      var $56=$ss;
      var $57=(($56)|0)==0;
      if ($57) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $59=_sbrk(0);
      $base=$59;
      var $60=$base;
      var $61=(($60)|0)!=-1;
      if ($61) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $63=$3;
      var $64=((($63)+(48))|0);
      var $65=HEAP32[((((5246536)|0))>>2)];
      var $66=((($65)-(1))|0);
      var $67=((($64)+($66))|0);
      var $68=HEAP32[((((5246536)|0))>>2)];
      var $69=((($68)-(1))|0);
      var $70=$69 ^ -1;
      var $71=$67 & $70;
      $asize=$71;
      var $72=$base;
      var $73=$72;
      var $74=HEAP32[((((5246532)|0))>>2)];
      var $75=((($74)-(1))|0);
      var $76=$73 & $75;
      var $77=(($76)|0)==0;
      if ($77) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $79=$base;
      var $80=$79;
      var $81=HEAP32[((((5246532)|0))>>2)];
      var $82=((($81)-(1))|0);
      var $83=((($80)+($82))|0);
      var $84=HEAP32[((((5246532)|0))>>2)];
      var $85=((($84)-(1))|0);
      var $86=$85 ^ -1;
      var $87=$83 & $86;
      var $88=$base;
      var $89=$88;
      var $90=((($87)-($89))|0);
      var $91=$asize;
      var $92=((($91)+($90))|0);
      $asize=$92;
      label = 18; break;
    case 18: 
      var $94=$asize;
      var $95=(($94)>>>0) < 2147483647;
      if ($95) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $97=$asize;
      var $98=_sbrk($97);
      $br=$98;
      var $99=$base;
      var $100=(($98)|0)==(($99)|0);
      if ($100) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $102=$base;
      $tbase=$102;
      var $103=$asize;
      $tsize=$103;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 27; break;
    case 23: 
      var $107=$3;
      var $108=$2;
      var $109=(($108+12)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($107)-($110))|0);
      var $112=((($111)+(48))|0);
      var $113=HEAP32[((((5246536)|0))>>2)];
      var $114=((($113)-(1))|0);
      var $115=((($112)+($114))|0);
      var $116=HEAP32[((((5246536)|0))>>2)];
      var $117=((($116)-(1))|0);
      var $118=$117 ^ -1;
      var $119=$115 & $118;
      $asize=$119;
      var $120=$asize;
      var $121=(($120)>>>0) < 2147483647;
      if ($121) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $123=$asize;
      var $124=_sbrk($123);
      $br=$124;
      var $125=$ss;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$ss;
      var $129=(($128+4)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($127+$130)|0);
      var $132=(($124)|0)==(($131)|0);
      if ($132) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $134=$br;
      $tbase=$134;
      var $135=$asize;
      $tsize=$135;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $138=$tbase;
      var $139=(($138)|0)==-1;
      if ($139) { label = 28; break; } else { label = 42; break; }
    case 28: 
      var $141=$br;
      var $142=(($141)|0)!=-1;
      if ($142) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $144=$asize;
      var $145=(($144)>>>0) < 2147483647;
      if ($145) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $147=$asize;
      var $148=$3;
      var $149=((($148)+(48))|0);
      var $150=(($147)>>>0) < (($149)>>>0);
      if ($150) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $152=$3;
      var $153=((($152)+(48))|0);
      var $154=$asize;
      var $155=((($153)-($154))|0);
      var $156=HEAP32[((((5246536)|0))>>2)];
      var $157=((($156)-(1))|0);
      var $158=((($155)+($157))|0);
      var $159=HEAP32[((((5246536)|0))>>2)];
      var $160=((($159)-(1))|0);
      var $161=$160 ^ -1;
      var $162=$158 & $161;
      $esize=$162;
      var $163=$esize;
      var $164=(($163)>>>0) < 2147483647;
      if ($164) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $166=$esize;
      var $167=_sbrk($166);
      $end=$167;
      var $168=$end;
      var $169=(($168)|0)!=-1;
      if ($169) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $171=$esize;
      var $172=$asize;
      var $173=((($172)+($171))|0);
      $asize=$173;
      label = 35; break;
    case 34: 
      var $175=$asize;
      var $176=(((-$175))|0);
      var $177=_sbrk($176);
      $br=-1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $182=$br;
      var $183=(($182)|0)!=-1;
      if ($183) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $185=$br;
      $tbase=$185;
      var $186=$asize;
      $tsize=$186;
      label = 41; break;
    case 40: 
      var $188=$2;
      var $189=(($188+440)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$190 | 4;
      HEAP32[(($189)>>2)]=$191;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $195=$tbase;
      var $196=(($195)|0)==-1;
      if ($196) { label = 44; break; } else { label = 53; break; }
    case 44: 
      var $198=$3;
      var $199=((($198)+(48))|0);
      var $200=HEAP32[((((5246536)|0))>>2)];
      var $201=((($200)-(1))|0);
      var $202=((($199)+($201))|0);
      var $203=HEAP32[((((5246536)|0))>>2)];
      var $204=((($203)-(1))|0);
      var $205=$204 ^ -1;
      var $206=$202 & $205;
      $asize1=$206;
      var $207=$asize1;
      var $208=(($207)>>>0) < 2147483647;
      if ($208) { label = 45; break; } else { label = 52; break; }
    case 45: 
      $br2=-1;
      $end3=-1;
      var $210=$asize1;
      var $211=_sbrk($210);
      $br2=$211;
      var $212=_sbrk(0);
      $end3=$212;
      var $213=$br2;
      var $214=(($213)|0)!=-1;
      if ($214) { label = 46; break; } else { label = 51; break; }
    case 46: 
      var $216=$end3;
      var $217=(($216)|0)!=-1;
      if ($217) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $219=$br2;
      var $220=$end3;
      var $221=(($219)>>>0) < (($220)>>>0);
      if ($221) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $223=$end3;
      var $224=$br2;
      var $225=$223;
      var $226=$224;
      var $227=((($225)-($226))|0);
      $ssize=$227;
      var $228=$ssize;
      var $229=$3;
      var $230=((($229)+(40))|0);
      var $231=(($228)>>>0) > (($230)>>>0);
      if ($231) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $233=$br2;
      $tbase=$233;
      var $234=$ssize;
      $tsize=$234;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $239=$tbase;
      var $240=(($239)|0)!=-1;
      if ($240) { label = 54; break; } else { label = 92; break; }
    case 54: 
      var $242=$tsize;
      var $243=$2;
      var $244=(($243+432)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=((($245)+($242))|0);
      HEAP32[(($244)>>2)]=$246;
      var $247=$2;
      var $248=(($247+436)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($246)>>>0) > (($249)>>>0);
      if ($250) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $252=$2;
      var $253=(($252+432)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=$2;
      var $256=(($255+436)|0);
      HEAP32[(($256)>>2)]=$254;
      label = 56; break;
    case 56: 
      var $258=$2;
      var $259=(($258+24)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260)|0)!=0;
      if ($261) { label = 64; break; } else { label = 57; break; }
    case 57: 
      var $263=$2;
      var $264=(($263+16)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265)|0)==0;
      if ($266) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $268=$tbase;
      var $269=$2;
      var $270=(($269+16)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=(($268)>>>0) < (($271)>>>0);
      if ($272) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $274=$tbase;
      var $275=$2;
      var $276=(($275+16)|0);
      HEAP32[(($276)>>2)]=$274;
      label = 60; break;
    case 60: 
      var $278=$tbase;
      var $279=$2;
      var $280=(($279+444)|0);
      var $281=(($280)|0);
      HEAP32[(($281)>>2)]=$278;
      var $282=$tsize;
      var $283=$2;
      var $284=(($283+444)|0);
      var $285=(($284+4)|0);
      HEAP32[(($285)>>2)]=$282;
      var $286=$mmap_flag;
      var $287=$2;
      var $288=(($287+444)|0);
      var $289=(($288+12)|0);
      HEAP32[(($289)>>2)]=$286;
      var $290=HEAP32[((((5246528)|0))>>2)];
      var $291=$2;
      var $292=(($291+36)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$2;
      var $294=(($293+32)|0);
      HEAP32[(($294)>>2)]=-1;
      var $295=$2;
      _init_bins($295);
      var $296=$2;
      var $297=(($296)|0)==5273476;
      if ($297) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $299=$2;
      var $300=$tbase;
      var $301=$300;
      var $302=$tsize;
      var $303=((($302)-(40))|0);
      _init_top($299, $301, $303);
      label = 63; break;
    case 62: 
      var $305=$2;
      var $306=$305;
      var $307=((($306)-(8))|0);
      var $308=$307;
      var $309=$308;
      var $310=$2;
      var $311=$310;
      var $312=((($311)-(8))|0);
      var $313=$312;
      var $314=(($313+4)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=$315 & -8;
      var $317=(($309+$316)|0);
      var $318=$317;
      $mn=$318;
      var $319=$2;
      var $320=$mn;
      var $321=$tbase;
      var $322=$tsize;
      var $323=(($321+$322)|0);
      var $324=$mn;
      var $325=$324;
      var $326=$323;
      var $327=$325;
      var $328=((($326)-($327))|0);
      var $329=((($328)-(40))|0);
      _init_top($319, $320, $329);
      label = 63; break;
    case 63: 
      label = 89; break;
    case 64: 
      var $332=$2;
      var $333=(($332+444)|0);
      $sp=$333;
      label = 65; break;
    case 65: 
      var $335=$sp;
      var $336=(($335)|0)!=0;
      if ($336) { label = 66; break; } else { var $348 = 0;label = 67; break; }
    case 66: 
      var $338=$tbase;
      var $339=$sp;
      var $340=(($339)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$sp;
      var $343=(($342+4)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=(($341+$344)|0);
      var $346=(($338)|0)!=(($345)|0);
      var $348 = $346;label = 67; break;
    case 67: 
      var $348;
      if ($348) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $350=$sp;
      var $351=(($350+8)|0);
      var $352=HEAP32[(($351)>>2)];
      $sp=$352;
      label = 65; break;
    case 69: 
      var $354=$sp;
      var $355=(($354)|0)!=0;
      if ($355) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $357=$sp;
      var $358=(($357+12)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=$359 & 8;
      var $361=(($360)|0)!=0;
      if ($361) { label = 75; break; } else { label = 71; break; }
    case 71: 
      var $363=$sp;
      var $364=(($363+12)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$365 & 0;
      var $367=$mmap_flag;
      var $368=(($366)|0)==(($367)|0);
      if ($368) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $370=$2;
      var $371=(($370+24)|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=$372;
      var $374=$sp;
      var $375=(($374)|0);
      var $376=HEAP32[(($375)>>2)];
      var $377=(($373)>>>0) >= (($376)>>>0);
      if ($377) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $379=$2;
      var $380=(($379+24)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=$381;
      var $383=$sp;
      var $384=(($383)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$sp;
      var $387=(($386+4)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=(($385+$388)|0);
      var $390=(($382)>>>0) < (($389)>>>0);
      if ($390) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $392=$tsize;
      var $393=$sp;
      var $394=(($393+4)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=((($395)+($392))|0);
      HEAP32[(($394)>>2)]=$396;
      var $397=$2;
      var $398=$2;
      var $399=(($398+24)|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=$2;
      var $402=(($401+12)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=$tsize;
      var $405=((($403)+($404))|0);
      _init_top($397, $400, $405);
      label = 88; break;
    case 75: 
      var $407=$tbase;
      var $408=$2;
      var $409=(($408+16)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($407)>>>0) < (($410)>>>0);
      if ($411) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $413=$tbase;
      var $414=$2;
      var $415=(($414+16)|0);
      HEAP32[(($415)>>2)]=$413;
      label = 77; break;
    case 77: 
      var $417=$2;
      var $418=(($417+444)|0);
      $sp=$418;
      label = 78; break;
    case 78: 
      var $420=$sp;
      var $421=(($420)|0)!=0;
      if ($421) { label = 79; break; } else { var $431 = 0;label = 80; break; }
    case 79: 
      var $423=$sp;
      var $424=(($423)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=$tbase;
      var $427=$tsize;
      var $428=(($426+$427)|0);
      var $429=(($425)|0)!=(($428)|0);
      var $431 = $429;label = 80; break;
    case 80: 
      var $431;
      if ($431) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $433=$sp;
      var $434=(($433+8)|0);
      var $435=HEAP32[(($434)>>2)];
      $sp=$435;
      label = 78; break;
    case 82: 
      var $437=$sp;
      var $438=(($437)|0)!=0;
      if ($438) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $440=$sp;
      var $441=(($440+12)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=$442 & 8;
      var $444=(($443)|0)!=0;
      if ($444) { label = 86; break; } else { label = 84; break; }
    case 84: 
      var $446=$sp;
      var $447=(($446+12)|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=$448 & 0;
      var $450=$mmap_flag;
      var $451=(($449)|0)==(($450)|0);
      if ($451) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $453=$sp;
      var $454=(($453)|0);
      var $455=HEAP32[(($454)>>2)];
      $oldbase=$455;
      var $456=$tbase;
      var $457=$sp;
      var $458=(($457)|0);
      HEAP32[(($458)>>2)]=$456;
      var $459=$tsize;
      var $460=$sp;
      var $461=(($460+4)|0);
      var $462=HEAP32[(($461)>>2)];
      var $463=((($462)+($459))|0);
      HEAP32[(($461)>>2)]=$463;
      var $464=$2;
      var $465=$tbase;
      var $466=$oldbase;
      var $467=$3;
      var $468=_prepend_alloc($464, $465, $466, $467);
      $1=$468;
      label = 93; break;
    case 86: 
      var $470=$2;
      var $471=$tbase;
      var $472=$tsize;
      var $473=$mmap_flag;
      _add_segment($470, $471, $472, $473);
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $477=$3;
      var $478=$2;
      var $479=(($478+12)|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=(($477)>>>0) < (($480)>>>0);
      if ($481) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $483=$3;
      var $484=$2;
      var $485=(($484+12)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=((($486)-($483))|0);
      HEAP32[(($485)>>2)]=$487;
      $rsize=$487;
      var $488=$2;
      var $489=(($488+24)|0);
      var $490=HEAP32[(($489)>>2)];
      $p=$490;
      var $491=$p;
      var $492=$491;
      var $493=$3;
      var $494=(($492+$493)|0);
      var $495=$494;
      var $496=$2;
      var $497=(($496+24)|0);
      HEAP32[(($497)>>2)]=$495;
      $r=$495;
      var $498=$rsize;
      var $499=$498 | 1;
      var $500=$r;
      var $501=(($500+4)|0);
      HEAP32[(($501)>>2)]=$499;
      var $502=$3;
      var $503=$502 | 1;
      var $504=$503 | 2;
      var $505=$p;
      var $506=(($505+4)|0);
      HEAP32[(($506)>>2)]=$504;
      var $507=$p;
      var $508=$507;
      var $509=(($508+8)|0);
      $1=$509;
      label = 93; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $512=___errno_location();
      HEAP32[(($512)>>2)]=12;
      $1=0;
      label = 93; break;
    case 93: 
      var $514=$1;

      return $514;
    default: assert(0, "bad label: " + label);
  }
}
_sys_alloc["X"]=1;

function _free($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1;
      var $3=(($2)|0)!=0;
      if ($3) { label = 3; break; } else { label = 197; break; }
    case 3: 
      var $5=$1;
      var $6=((($5)-(8))|0);
      var $7=$6;
      $p=$7;
      var $8=$p;
      var $9=$8;
      var $10=HEAP32[((((5273492)|0))>>2)];
      var $11=(($9)>>>0) >= (($10)>>>0);
      if ($11) { label = 4; break; } else { var $19 = 0;label = 5; break; }
    case 4: 
      var $13=$p;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 3;
      var $17=(($16)|0)!=1;
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      var $20=(($19)&1);
      var $21=($20);
      var $22=(($21)|0)!=0;
      if ($22) { label = 6; break; } else { label = 194; break; }
    case 6: 
      var $24=$p;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & -8;
      $psize=$27;
      var $28=$p;
      var $29=$28;
      var $30=$psize;
      var $31=(($29+$30)|0);
      var $32=$31;
      $next=$32;
      var $33=$p;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 1;
      var $37=(($36)|0)!=0;
      if ($37) { label = 78; break; } else { label = 7; break; }
    case 7: 
      var $39=$p;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      $prevsize=$41;
      var $42=$p;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & 3;
      var $46=(($45)|0)==0;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$prevsize;
      var $49=((($48)+(16))|0);
      var $50=$psize;
      var $51=((($50)+($49))|0);
      $psize=$51;
      label = 196; break;
    case 9: 
      var $53=$p;
      var $54=$53;
      var $55=$prevsize;
      var $56=(((-$55))|0);
      var $57=(($54+$56)|0);
      var $58=$57;
      $prev=$58;
      var $59=$prevsize;
      var $60=$psize;
      var $61=((($60)+($59))|0);
      $psize=$61;
      var $62=$prev;
      $p=$62;
      var $63=$prev;
      var $64=$63;
      var $65=HEAP32[((((5273492)|0))>>2)];
      var $66=(($64)>>>0) >= (($65)>>>0);
      var $67=(($66)&1);
      var $68=($67);
      var $69=(($68)|0)!=0;
      if ($69) { label = 10; break; } else { label = 75; break; }
    case 10: 
      var $71=$p;
      var $72=HEAP32[((((5273496)|0))>>2)];
      var $73=(($71)|0)!=(($72)|0);
      if ($73) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $75=$prevsize;
      var $76=$75 >>> 3;
      var $77=(($76)>>>0) < 32;
      if ($77) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $79=$p;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      $F=$81;
      var $82=$p;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      $B=$84;
      var $85=$prevsize;
      var $86=$85 >>> 3;
      $I=$86;
      var $87=$F;
      var $88=$B;
      var $89=(($87)|0)==(($88)|0);
      if ($89) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $91=$I;
      var $92=1 << $91;
      var $93=$92 ^ -1;
      var $94=HEAP32[((((5273476)|0))>>2)];
      var $95=$94 & $93;
      HEAP32[((((5273476)|0))>>2)]=$95;
      label = 23; break;
    case 14: 
      var $97=$F;
      var $98=$I;
      var $99=$98 << 1;
      var $100=((((5273516)|0)+($99<<2))|0);
      var $101=$100;
      var $102=$101;
      var $103=(($97)|0)==(($102)|0);
      if ($103) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $105=$F;
      var $106=$105;
      var $107=HEAP32[((((5273492)|0))>>2)];
      var $108=(($106)>>>0) >= (($107)>>>0);
      if ($108) { label = 16; break; } else { var $125 = 0;label = 19; break; }
    case 16: 
      var $110=$B;
      var $111=$I;
      var $112=$111 << 1;
      var $113=((((5273516)|0)+($112<<2))|0);
      var $114=$113;
      var $115=$114;
      var $116=(($110)|0)==(($115)|0);
      if ($116) { var $123 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $118=$B;
      var $119=$118;
      var $120=HEAP32[((((5273492)|0))>>2)];
      var $121=(($119)>>>0) >= (($120)>>>0);
      var $123 = $121;label = 18; break;
    case 18: 
      var $123;
      var $125 = $123;label = 19; break;
    case 19: 
      var $125;
      var $126=(($125)&1);
      var $127=($126);
      var $128=(($127)|0)!=0;
      if ($128) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $130=$B;
      var $131=$F;
      var $132=(($131+12)|0);
      HEAP32[(($132)>>2)]=$130;
      var $133=$F;
      var $134=$B;
      var $135=(($134+8)|0);
      HEAP32[(($135)>>2)]=$133;
      label = 22; break;
    case 21: 
      _abort();
      throw "Reached an unreachable!"
    case 22: 
      label = 23; break;
    case 23: 
      label = 70; break;
    case 24: 
      var $140=$p;
      var $141=$140;
      $TP=$141;
      var $142=$TP;
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      $XP=$144;
      var $145=$TP;
      var $146=(($145+12)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$TP;
      var $149=(($147)|0)!=(($148)|0);
      if ($149) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $151=$TP;
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      $F1=$153;
      var $154=$TP;
      var $155=(($154+12)|0);
      var $156=HEAP32[(($155)>>2)];
      $R=$156;
      var $157=$F1;
      var $158=$157;
      var $159=HEAP32[((((5273492)|0))>>2)];
      var $160=(($158)>>>0) >= (($159)>>>0);
      var $161=(($160)&1);
      var $162=($161);
      var $163=(($162)|0)!=0;
      if ($163) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $165=$R;
      var $166=$F1;
      var $167=(($166+12)|0);
      HEAP32[(($167)>>2)]=$165;
      var $168=$F1;
      var $169=$R;
      var $170=(($169+8)|0);
      HEAP32[(($170)>>2)]=$168;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 41; break;
    case 29: 
      var $174=$TP;
      var $175=(($174+16)|0);
      var $176=(($175+4)|0);
      $RP=$176;
      var $177=HEAP32[(($176)>>2)];
      $R=$177;
      var $178=(($177)|0)!=0;
      if ($178) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $180=$TP;
      var $181=(($180+16)|0);
      var $182=(($181)|0);
      $RP=$182;
      var $183=HEAP32[(($182)>>2)];
      $R=$183;
      var $184=(($183)|0)!=0;
      if ($184) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $187=$R;
      var $188=(($187+16)|0);
      var $189=(($188+4)|0);
      $CP=$189;
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190)|0)!=0;
      if ($191) { var $199 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $193=$R;
      var $194=(($193+16)|0);
      var $195=(($194)|0);
      $CP=$195;
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196)|0)!=0;
      var $199 = $197;label = 34; break;
    case 34: 
      var $199;
      if ($199) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $201=$CP;
      $RP=$201;
      var $202=HEAP32[(($201)>>2)];
      $R=$202;
      label = 32; break;
    case 36: 
      var $204=$RP;
      var $205=$204;
      var $206=HEAP32[((((5273492)|0))>>2)];
      var $207=(($205)>>>0) >= (($206)>>>0);
      var $208=(($207)&1);
      var $209=($208);
      var $210=(($209)|0)!=0;
      if ($210) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $212=$RP;
      HEAP32[(($212)>>2)]=0;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!"
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $217=$XP;
      var $218=(($217)|0)!=0;
      if ($218) { label = 42; break; } else { label = 69; break; }
    case 42: 
      var $220=$TP;
      var $221=(($220+28)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=((((5273780)|0)+($222<<2))|0);
      $H=$223;
      var $224=$TP;
      var $225=$H;
      var $226=HEAP32[(($225)>>2)];
      var $227=(($224)|0)==(($226)|0);
      if ($227) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $229=$R;
      var $230=$H;
      HEAP32[(($230)>>2)]=$229;
      var $231=(($229)|0)==0;
      if ($231) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $233=$TP;
      var $234=(($233+28)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=1 << $235;
      var $237=$236 ^ -1;
      var $238=HEAP32[((((5273480)|0))>>2)];
      var $239=$238 & $237;
      HEAP32[((((5273480)|0))>>2)]=$239;
      label = 45; break;
    case 45: 
      label = 53; break;
    case 46: 
      var $242=$XP;
      var $243=$242;
      var $244=HEAP32[((((5273492)|0))>>2)];
      var $245=(($243)>>>0) >= (($244)>>>0);
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $250=$XP;
      var $251=(($250+16)|0);
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$TP;
      var $255=(($253)|0)==(($254)|0);
      if ($255) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $257=$R;
      var $258=$XP;
      var $259=(($258+16)|0);
      var $260=(($259)|0);
      HEAP32[(($260)>>2)]=$257;
      label = 50; break;
    case 49: 
      var $262=$R;
      var $263=$XP;
      var $264=(($263+16)|0);
      var $265=(($264+4)|0);
      HEAP32[(($265)>>2)]=$262;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      var $270=$R;
      var $271=(($270)|0)!=0;
      if ($271) { label = 54; break; } else { label = 68; break; }
    case 54: 
      var $273=$R;
      var $274=$273;
      var $275=HEAP32[((((5273492)|0))>>2)];
      var $276=(($274)>>>0) >= (($275)>>>0);
      var $277=(($276)&1);
      var $278=($277);
      var $279=(($278)|0)!=0;
      if ($279) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $281=$XP;
      var $282=$R;
      var $283=(($282+24)|0);
      HEAP32[(($283)>>2)]=$281;
      var $284=$TP;
      var $285=(($284+16)|0);
      var $286=(($285)|0);
      var $287=HEAP32[(($286)>>2)];
      $C0=$287;
      var $288=(($287)|0)!=0;
      if ($288) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $290=$C0;
      var $291=$290;
      var $292=HEAP32[((((5273492)|0))>>2)];
      var $293=(($291)>>>0) >= (($292)>>>0);
      var $294=(($293)&1);
      var $295=($294);
      var $296=(($295)|0)!=0;
      if ($296) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $298=$C0;
      var $299=$R;
      var $300=(($299+16)|0);
      var $301=(($300)|0);
      HEAP32[(($301)>>2)]=$298;
      var $302=$R;
      var $303=$C0;
      var $304=(($303+24)|0);
      HEAP32[(($304)>>2)]=$302;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!"
    case 59: 
      label = 60; break;
    case 60: 
      var $308=$TP;
      var $309=(($308+16)|0);
      var $310=(($309+4)|0);
      var $311=HEAP32[(($310)>>2)];
      $C1=$311;
      var $312=(($311)|0)!=0;
      if ($312) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $314=$C1;
      var $315=$314;
      var $316=HEAP32[((((5273492)|0))>>2)];
      var $317=(($315)>>>0) >= (($316)>>>0);
      var $318=(($317)&1);
      var $319=($318);
      var $320=(($319)|0)!=0;
      if ($320) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $322=$C1;
      var $323=$R;
      var $324=(($323+16)|0);
      var $325=(($324+4)|0);
      HEAP32[(($325)>>2)]=$322;
      var $326=$R;
      var $327=$C1;
      var $328=(($327+24)|0);
      HEAP32[(($328)>>2)]=$326;
      label = 64; break;
    case 63: 
      _abort();
      throw "Reached an unreachable!"
    case 64: 
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 74; break;
    case 71: 
      var $338=$next;
      var $339=(($338+4)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=$340 & 3;
      var $342=(($341)|0)==3;
      if ($342) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $344=$psize;
      HEAP32[((((5273484)|0))>>2)]=$344;
      var $345=$next;
      var $346=(($345+4)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=$347 & -2;
      HEAP32[(($346)>>2)]=$348;
      var $349=$psize;
      var $350=$349 | 1;
      var $351=$p;
      var $352=(($351+4)|0);
      HEAP32[(($352)>>2)]=$350;
      var $353=$psize;
      var $354=$p;
      var $355=$354;
      var $356=$psize;
      var $357=(($355+$356)|0);
      var $358=$357;
      var $359=(($358)|0);
      HEAP32[(($359)>>2)]=$353;
      label = 196; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      label = 195; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $366=$p;
      var $367=$366;
      var $368=$next;
      var $369=$368;
      var $370=(($367)>>>0) < (($369)>>>0);
      if ($370) { label = 79; break; } else { var $378 = 0;label = 80; break; }
    case 79: 
      var $372=$next;
      var $373=(($372+4)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=$374 & 1;
      var $376=(($375)|0)!=0;
      var $378 = $376;label = 80; break;
    case 80: 
      var $378;
      var $379=(($378)&1);
      var $380=($379);
      var $381=(($380)|0)!=0;
      if ($381) { label = 81; break; } else { label = 193; break; }
    case 81: 
      var $383=$next;
      var $384=(($383+4)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$385 & 2;
      var $387=(($386)|0)!=0;
      if ($387) { label = 154; break; } else { label = 82; break; }
    case 82: 
      var $389=$next;
      var $390=HEAP32[((((5273500)|0))>>2)];
      var $391=(($389)|0)==(($390)|0);
      if ($391) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $393=$psize;
      var $394=HEAP32[((((5273488)|0))>>2)];
      var $395=((($394)+($393))|0);
      HEAP32[((((5273488)|0))>>2)]=$395;
      $tsize=$395;
      var $396=$p;
      HEAP32[((((5273500)|0))>>2)]=$396;
      var $397=$tsize;
      var $398=$397 | 1;
      var $399=$p;
      var $400=(($399+4)|0);
      HEAP32[(($400)>>2)]=$398;
      var $401=$p;
      var $402=HEAP32[((((5273496)|0))>>2)];
      var $403=(($401)|0)==(($402)|0);
      if ($403) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5273496)|0))>>2)]=0;
      HEAP32[((((5273484)|0))>>2)]=0;
      label = 85; break;
    case 85: 
      var $406=$tsize;
      var $407=HEAP32[((((5273504)|0))>>2)];
      var $408=(($406)>>>0) > (($407)>>>0);
      if ($408) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $410=_sys_trim(5273476, 0);
      label = 87; break;
    case 87: 
      label = 196; break;
    case 88: 
      var $413=$next;
      var $414=HEAP32[((((5273496)|0))>>2)];
      var $415=(($413)|0)==(($414)|0);
      if ($415) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $417=$psize;
      var $418=HEAP32[((((5273484)|0))>>2)];
      var $419=((($418)+($417))|0);
      HEAP32[((((5273484)|0))>>2)]=$419;
      $dsize=$419;
      var $420=$p;
      HEAP32[((((5273496)|0))>>2)]=$420;
      var $421=$dsize;
      var $422=$421 | 1;
      var $423=$p;
      var $424=(($423+4)|0);
      HEAP32[(($424)>>2)]=$422;
      var $425=$dsize;
      var $426=$p;
      var $427=$426;
      var $428=$dsize;
      var $429=(($427+$428)|0);
      var $430=$429;
      var $431=(($430)|0);
      HEAP32[(($431)>>2)]=$425;
      label = 196; break;
    case 90: 
      var $433=$next;
      var $434=(($433+4)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$435 & -8;
      $nsize=$436;
      var $437=$nsize;
      var $438=$psize;
      var $439=((($438)+($437))|0);
      $psize=$439;
      var $440=$nsize;
      var $441=$440 >>> 3;
      var $442=(($441)>>>0) < 32;
      if ($442) { label = 91; break; } else { label = 103; break; }
    case 91: 
      var $444=$next;
      var $445=(($444+8)|0);
      var $446=HEAP32[(($445)>>2)];
      $F2=$446;
      var $447=$next;
      var $448=(($447+12)|0);
      var $449=HEAP32[(($448)>>2)];
      $B3=$449;
      var $450=$nsize;
      var $451=$450 >>> 3;
      $I4=$451;
      var $452=$F2;
      var $453=$B3;
      var $454=(($452)|0)==(($453)|0);
      if ($454) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $456=$I4;
      var $457=1 << $456;
      var $458=$457 ^ -1;
      var $459=HEAP32[((((5273476)|0))>>2)];
      var $460=$459 & $458;
      HEAP32[((((5273476)|0))>>2)]=$460;
      label = 102; break;
    case 93: 
      var $462=$F2;
      var $463=$I4;
      var $464=$463 << 1;
      var $465=((((5273516)|0)+($464<<2))|0);
      var $466=$465;
      var $467=$466;
      var $468=(($462)|0)==(($467)|0);
      if ($468) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $470=$F2;
      var $471=$470;
      var $472=HEAP32[((((5273492)|0))>>2)];
      var $473=(($471)>>>0) >= (($472)>>>0);
      if ($473) { label = 95; break; } else { var $490 = 0;label = 98; break; }
    case 95: 
      var $475=$B3;
      var $476=$I4;
      var $477=$476 << 1;
      var $478=((((5273516)|0)+($477<<2))|0);
      var $479=$478;
      var $480=$479;
      var $481=(($475)|0)==(($480)|0);
      if ($481) { var $488 = 1;label = 97; break; } else { label = 96; break; }
    case 96: 
      var $483=$B3;
      var $484=$483;
      var $485=HEAP32[((((5273492)|0))>>2)];
      var $486=(($484)>>>0) >= (($485)>>>0);
      var $488 = $486;label = 97; break;
    case 97: 
      var $488;
      var $490 = $488;label = 98; break;
    case 98: 
      var $490;
      var $491=(($490)&1);
      var $492=($491);
      var $493=(($492)|0)!=0;
      if ($493) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $495=$B3;
      var $496=$F2;
      var $497=(($496+12)|0);
      HEAP32[(($497)>>2)]=$495;
      var $498=$F2;
      var $499=$B3;
      var $500=(($499+8)|0);
      HEAP32[(($500)>>2)]=$498;
      label = 101; break;
    case 100: 
      _abort();
      throw "Reached an unreachable!"
    case 101: 
      label = 102; break;
    case 102: 
      label = 149; break;
    case 103: 
      var $505=$next;
      var $506=$505;
      $TP5=$506;
      var $507=$TP5;
      var $508=(($507+24)|0);
      var $509=HEAP32[(($508)>>2)];
      $XP6=$509;
      var $510=$TP5;
      var $511=(($510+12)|0);
      var $512=HEAP32[(($511)>>2)];
      var $513=$TP5;
      var $514=(($512)|0)!=(($513)|0);
      if ($514) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $516=$TP5;
      var $517=(($516+8)|0);
      var $518=HEAP32[(($517)>>2)];
      $F8=$518;
      var $519=$TP5;
      var $520=(($519+12)|0);
      var $521=HEAP32[(($520)>>2)];
      $R7=$521;
      var $522=$F8;
      var $523=$522;
      var $524=HEAP32[((((5273492)|0))>>2)];
      var $525=(($523)>>>0) >= (($524)>>>0);
      var $526=(($525)&1);
      var $527=($526);
      var $528=(($527)|0)!=0;
      if ($528) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $530=$R7;
      var $531=$F8;
      var $532=(($531+12)|0);
      HEAP32[(($532)>>2)]=$530;
      var $533=$F8;
      var $534=$R7;
      var $535=(($534+8)|0);
      HEAP32[(($535)>>2)]=$533;
      label = 107; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!"
    case 107: 
      label = 120; break;
    case 108: 
      var $539=$TP5;
      var $540=(($539+16)|0);
      var $541=(($540+4)|0);
      $RP9=$541;
      var $542=HEAP32[(($541)>>2)];
      $R7=$542;
      var $543=(($542)|0)!=0;
      if ($543) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $545=$TP5;
      var $546=(($545+16)|0);
      var $547=(($546)|0);
      $RP9=$547;
      var $548=HEAP32[(($547)>>2)];
      $R7=$548;
      var $549=(($548)|0)!=0;
      if ($549) { label = 110; break; } else { label = 119; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $552=$R7;
      var $553=(($552+16)|0);
      var $554=(($553+4)|0);
      $CP10=$554;
      var $555=HEAP32[(($554)>>2)];
      var $556=(($555)|0)!=0;
      if ($556) { var $564 = 1;label = 113; break; } else { label = 112; break; }
    case 112: 
      var $558=$R7;
      var $559=(($558+16)|0);
      var $560=(($559)|0);
      $CP10=$560;
      var $561=HEAP32[(($560)>>2)];
      var $562=(($561)|0)!=0;
      var $564 = $562;label = 113; break;
    case 113: 
      var $564;
      if ($564) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $566=$CP10;
      $RP9=$566;
      var $567=HEAP32[(($566)>>2)];
      $R7=$567;
      label = 111; break;
    case 115: 
      var $569=$RP9;
      var $570=$569;
      var $571=HEAP32[((((5273492)|0))>>2)];
      var $572=(($570)>>>0) >= (($571)>>>0);
      var $573=(($572)&1);
      var $574=($573);
      var $575=(($574)|0)!=0;
      if ($575) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $577=$RP9;
      HEAP32[(($577)>>2)]=0;
      label = 118; break;
    case 117: 
      _abort();
      throw "Reached an unreachable!"
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $582=$XP6;
      var $583=(($582)|0)!=0;
      if ($583) { label = 121; break; } else { label = 148; break; }
    case 121: 
      var $585=$TP5;
      var $586=(($585+28)|0);
      var $587=HEAP32[(($586)>>2)];
      var $588=((((5273780)|0)+($587<<2))|0);
      $H11=$588;
      var $589=$TP5;
      var $590=$H11;
      var $591=HEAP32[(($590)>>2)];
      var $592=(($589)|0)==(($591)|0);
      if ($592) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $594=$R7;
      var $595=$H11;
      HEAP32[(($595)>>2)]=$594;
      var $596=(($594)|0)==0;
      if ($596) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $598=$TP5;
      var $599=(($598+28)|0);
      var $600=HEAP32[(($599)>>2)];
      var $601=1 << $600;
      var $602=$601 ^ -1;
      var $603=HEAP32[((((5273480)|0))>>2)];
      var $604=$603 & $602;
      HEAP32[((((5273480)|0))>>2)]=$604;
      label = 124; break;
    case 124: 
      label = 132; break;
    case 125: 
      var $607=$XP6;
      var $608=$607;
      var $609=HEAP32[((((5273492)|0))>>2)];
      var $610=(($608)>>>0) >= (($609)>>>0);
      var $611=(($610)&1);
      var $612=($611);
      var $613=(($612)|0)!=0;
      if ($613) { label = 126; break; } else { label = 130; break; }
    case 126: 
      var $615=$XP6;
      var $616=(($615+16)|0);
      var $617=(($616)|0);
      var $618=HEAP32[(($617)>>2)];
      var $619=$TP5;
      var $620=(($618)|0)==(($619)|0);
      if ($620) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $622=$R7;
      var $623=$XP6;
      var $624=(($623+16)|0);
      var $625=(($624)|0);
      HEAP32[(($625)>>2)]=$622;
      label = 129; break;
    case 128: 
      var $627=$R7;
      var $628=$XP6;
      var $629=(($628+16)|0);
      var $630=(($629+4)|0);
      HEAP32[(($630)>>2)]=$627;
      label = 129; break;
    case 129: 
      label = 131; break;
    case 130: 
      _abort();
      throw "Reached an unreachable!"
    case 131: 
      label = 132; break;
    case 132: 
      var $635=$R7;
      var $636=(($635)|0)!=0;
      if ($636) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $638=$R7;
      var $639=$638;
      var $640=HEAP32[((((5273492)|0))>>2)];
      var $641=(($639)>>>0) >= (($640)>>>0);
      var $642=(($641)&1);
      var $643=($642);
      var $644=(($643)|0)!=0;
      if ($644) { label = 134; break; } else { label = 145; break; }
    case 134: 
      var $646=$XP6;
      var $647=$R7;
      var $648=(($647+24)|0);
      HEAP32[(($648)>>2)]=$646;
      var $649=$TP5;
      var $650=(($649+16)|0);
      var $651=(($650)|0);
      var $652=HEAP32[(($651)>>2)];
      $C012=$652;
      var $653=(($652)|0)!=0;
      if ($653) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $655=$C012;
      var $656=$655;
      var $657=HEAP32[((((5273492)|0))>>2)];
      var $658=(($656)>>>0) >= (($657)>>>0);
      var $659=(($658)&1);
      var $660=($659);
      var $661=(($660)|0)!=0;
      if ($661) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $663=$C012;
      var $664=$R7;
      var $665=(($664+16)|0);
      var $666=(($665)|0);
      HEAP32[(($666)>>2)]=$663;
      var $667=$R7;
      var $668=$C012;
      var $669=(($668+24)|0);
      HEAP32[(($669)>>2)]=$667;
      label = 138; break;
    case 137: 
      _abort();
      throw "Reached an unreachable!"
    case 138: 
      label = 139; break;
    case 139: 
      var $673=$TP5;
      var $674=(($673+16)|0);
      var $675=(($674+4)|0);
      var $676=HEAP32[(($675)>>2)];
      $C113=$676;
      var $677=(($676)|0)!=0;
      if ($677) { label = 140; break; } else { label = 144; break; }
    case 140: 
      var $679=$C113;
      var $680=$679;
      var $681=HEAP32[((((5273492)|0))>>2)];
      var $682=(($680)>>>0) >= (($681)>>>0);
      var $683=(($682)&1);
      var $684=($683);
      var $685=(($684)|0)!=0;
      if ($685) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $687=$C113;
      var $688=$R7;
      var $689=(($688+16)|0);
      var $690=(($689+4)|0);
      HEAP32[(($690)>>2)]=$687;
      var $691=$R7;
      var $692=$C113;
      var $693=(($692+24)|0);
      HEAP32[(($693)>>2)]=$691;
      label = 143; break;
    case 142: 
      _abort();
      throw "Reached an unreachable!"
    case 143: 
      label = 144; break;
    case 144: 
      label = 146; break;
    case 145: 
      _abort();
      throw "Reached an unreachable!"
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $702=$psize;
      var $703=$702 | 1;
      var $704=$p;
      var $705=(($704+4)|0);
      HEAP32[(($705)>>2)]=$703;
      var $706=$psize;
      var $707=$p;
      var $708=$707;
      var $709=$psize;
      var $710=(($708+$709)|0);
      var $711=$710;
      var $712=(($711)|0);
      HEAP32[(($712)>>2)]=$706;
      var $713=$p;
      var $714=HEAP32[((((5273496)|0))>>2)];
      var $715=(($713)|0)==(($714)|0);
      if ($715) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $717=$psize;
      HEAP32[((((5273484)|0))>>2)]=$717;
      label = 196; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      var $722=$next;
      var $723=(($722+4)|0);
      var $724=HEAP32[(($723)>>2)];
      var $725=$724 & -2;
      HEAP32[(($723)>>2)]=$725;
      var $726=$psize;
      var $727=$726 | 1;
      var $728=$p;
      var $729=(($728+4)|0);
      HEAP32[(($729)>>2)]=$727;
      var $730=$psize;
      var $731=$p;
      var $732=$731;
      var $733=$psize;
      var $734=(($732+$733)|0);
      var $735=$734;
      var $736=(($735)|0);
      HEAP32[(($736)>>2)]=$730;
      label = 155; break;
    case 155: 
      var $738=$psize;
      var $739=$738 >>> 3;
      var $740=(($739)>>>0) < 32;
      if ($740) { label = 156; break; } else { label = 163; break; }
    case 156: 
      var $742=$psize;
      var $743=$742 >>> 3;
      $I14=$743;
      var $744=$I14;
      var $745=$744 << 1;
      var $746=((((5273516)|0)+($745<<2))|0);
      var $747=$746;
      var $748=$747;
      $B15=$748;
      var $749=$B15;
      $F16=$749;
      var $750=HEAP32[((((5273476)|0))>>2)];
      var $751=$I14;
      var $752=1 << $751;
      var $753=$750 & $752;
      var $754=(($753)|0)!=0;
      if ($754) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $756=$I14;
      var $757=1 << $756;
      var $758=HEAP32[((((5273476)|0))>>2)];
      var $759=$758 | $757;
      HEAP32[((((5273476)|0))>>2)]=$759;
      label = 162; break;
    case 158: 
      var $761=$B15;
      var $762=(($761+8)|0);
      var $763=HEAP32[(($762)>>2)];
      var $764=$763;
      var $765=HEAP32[((((5273492)|0))>>2)];
      var $766=(($764)>>>0) >= (($765)>>>0);
      var $767=(($766)&1);
      var $768=($767);
      var $769=(($768)|0)!=0;
      if ($769) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $771=$B15;
      var $772=(($771+8)|0);
      var $773=HEAP32[(($772)>>2)];
      $F16=$773;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!"
    case 161: 
      label = 162; break;
    case 162: 
      var $777=$p;
      var $778=$B15;
      var $779=(($778+8)|0);
      HEAP32[(($779)>>2)]=$777;
      var $780=$p;
      var $781=$F16;
      var $782=(($781+12)|0);
      HEAP32[(($782)>>2)]=$780;
      var $783=$F16;
      var $784=$p;
      var $785=(($784+8)|0);
      HEAP32[(($785)>>2)]=$783;
      var $786=$B15;
      var $787=$p;
      var $788=(($787+12)|0);
      HEAP32[(($788)>>2)]=$786;
      label = 192; break;
    case 163: 
      var $790=$p;
      var $791=$790;
      $tp=$791;
      var $792=$psize;
      var $793=$792 >>> 8;
      $X=$793;
      var $794=$X;
      var $795=(($794)|0)==0;
      if ($795) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $I18=0;
      label = 169; break;
    case 165: 
      var $798=$X;
      var $799=(($798)>>>0) > 65535;
      if ($799) { label = 166; break; } else { label = 167; break; }
    case 166: 
      $I18=31;
      label = 168; break;
    case 167: 
      var $802=$X;
      $Y=$802;
      var $803=$Y;
      var $804=((($803)-(256))|0);
      var $805=$804 >>> 16;
      var $806=$805 & 8;
      $N=$806;
      var $807=$N;
      var $808=$Y;
      var $809=$808 << $807;
      $Y=$809;
      var $810=((($809)-(4096))|0);
      var $811=$810 >>> 16;
      var $812=$811 & 4;
      $K=$812;
      var $813=$K;
      var $814=$N;
      var $815=((($814)+($813))|0);
      $N=$815;
      var $816=$K;
      var $817=$Y;
      var $818=$817 << $816;
      $Y=$818;
      var $819=((($818)-(16384))|0);
      var $820=$819 >>> 16;
      var $821=$820 & 2;
      $K=$821;
      var $822=$N;
      var $823=((($822)+($821))|0);
      $N=$823;
      var $824=$N;
      var $825=(((14)-($824))|0);
      var $826=$K;
      var $827=$Y;
      var $828=$827 << $826;
      $Y=$828;
      var $829=$828 >>> 15;
      var $830=((($825)+($829))|0);
      $K=$830;
      var $831=$K;
      var $832=$831 << 1;
      var $833=$psize;
      var $834=$K;
      var $835=((($834)+(7))|0);
      var $836=$833 >>> (($835)>>>0);
      var $837=$836 & 1;
      var $838=((($832)+($837))|0);
      $I18=$838;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $841=$I18;
      var $842=((((5273780)|0)+($841<<2))|0);
      $H17=$842;
      var $843=$I18;
      var $844=$tp;
      var $845=(($844+28)|0);
      HEAP32[(($845)>>2)]=$843;
      var $846=$tp;
      var $847=(($846+16)|0);
      var $848=(($847+4)|0);
      HEAP32[(($848)>>2)]=0;
      var $849=$tp;
      var $850=(($849+16)|0);
      var $851=(($850)|0);
      HEAP32[(($851)>>2)]=0;
      var $852=HEAP32[((((5273480)|0))>>2)];
      var $853=$I18;
      var $854=1 << $853;
      var $855=$852 & $854;
      var $856=(($855)|0)!=0;
      if ($856) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $858=$I18;
      var $859=1 << $858;
      var $860=HEAP32[((((5273480)|0))>>2)];
      var $861=$860 | $859;
      HEAP32[((((5273480)|0))>>2)]=$861;
      var $862=$tp;
      var $863=$H17;
      HEAP32[(($863)>>2)]=$862;
      var $864=$H17;
      var $865=$864;
      var $866=$tp;
      var $867=(($866+24)|0);
      HEAP32[(($867)>>2)]=$865;
      var $868=$tp;
      var $869=$tp;
      var $870=(($869+12)|0);
      HEAP32[(($870)>>2)]=$868;
      var $871=$tp;
      var $872=(($871+8)|0);
      HEAP32[(($872)>>2)]=$868;
      label = 189; break;
    case 171: 
      var $874=$H17;
      var $875=HEAP32[(($874)>>2)];
      $T=$875;
      var $876=$psize;
      var $877=$I18;
      var $878=(($877)|0)==31;
      if ($878) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $887 = 0;label = 174; break;
    case 173: 
      var $881=$I18;
      var $882=$881 >>> 1;
      var $883=((($882)+(8))|0);
      var $884=((($883)-(2))|0);
      var $885=(((31)-($884))|0);
      var $887 = $885;label = 174; break;
    case 174: 
      var $887;
      var $888=$876 << $887;
      $K19=$888;
      label = 175; break;
    case 175: 
      var $890=$T;
      var $891=(($890+4)|0);
      var $892=HEAP32[(($891)>>2)];
      var $893=$892 & -8;
      var $894=$psize;
      var $895=(($893)|0)!=(($894)|0);
      if ($895) { label = 176; break; } else { label = 182; break; }
    case 176: 
      var $897=$K19;
      var $898=$897 >>> 31;
      var $899=$898 & 1;
      var $900=$T;
      var $901=(($900+16)|0);
      var $902=(($901+($899<<2))|0);
      $C=$902;
      var $903=$K19;
      var $904=$903 << 1;
      $K19=$904;
      var $905=$C;
      var $906=HEAP32[(($905)>>2)];
      var $907=(($906)|0)!=0;
      if ($907) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $909=$C;
      var $910=HEAP32[(($909)>>2)];
      $T=$910;
      label = 181; break;
    case 178: 
      var $912=$C;
      var $913=$912;
      var $914=HEAP32[((((5273492)|0))>>2)];
      var $915=(($913)>>>0) >= (($914)>>>0);
      var $916=(($915)&1);
      var $917=($916);
      var $918=(($917)|0)!=0;
      if ($918) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $920=$tp;
      var $921=$C;
      HEAP32[(($921)>>2)]=$920;
      var $922=$T;
      var $923=$tp;
      var $924=(($923+24)|0);
      HEAP32[(($924)>>2)]=$922;
      var $925=$tp;
      var $926=$tp;
      var $927=(($926+12)|0);
      HEAP32[(($927)>>2)]=$925;
      var $928=$tp;
      var $929=(($928+8)|0);
      HEAP32[(($929)>>2)]=$925;
      label = 188; break;
    case 180: 
      _abort();
      throw "Reached an unreachable!"
    case 181: 
      label = 187; break;
    case 182: 
      var $933=$T;
      var $934=(($933+8)|0);
      var $935=HEAP32[(($934)>>2)];
      $F20=$935;
      var $936=$T;
      var $937=$936;
      var $938=HEAP32[((((5273492)|0))>>2)];
      var $939=(($937)>>>0) >= (($938)>>>0);
      if ($939) { label = 183; break; } else { var $946 = 0;label = 184; break; }
    case 183: 
      var $941=$F20;
      var $942=$941;
      var $943=HEAP32[((((5273492)|0))>>2)];
      var $944=(($942)>>>0) >= (($943)>>>0);
      var $946 = $944;label = 184; break;
    case 184: 
      var $946;
      var $947=(($946)&1);
      var $948=($947);
      var $949=(($948)|0)!=0;
      if ($949) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $951=$tp;
      var $952=$F20;
      var $953=(($952+12)|0);
      HEAP32[(($953)>>2)]=$951;
      var $954=$T;
      var $955=(($954+8)|0);
      HEAP32[(($955)>>2)]=$951;
      var $956=$F20;
      var $957=$tp;
      var $958=(($957+8)|0);
      HEAP32[(($958)>>2)]=$956;
      var $959=$T;
      var $960=$tp;
      var $961=(($960+12)|0);
      HEAP32[(($961)>>2)]=$959;
      var $962=$tp;
      var $963=(($962+24)|0);
      HEAP32[(($963)>>2)]=0;
      label = 188; break;
    case 186: 
      _abort();
      throw "Reached an unreachable!"
    case 187: 
      label = 175; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $968=HEAP32[((((5273508)|0))>>2)];
      var $969=((($968)-(1))|0);
      HEAP32[((((5273508)|0))>>2)]=$969;
      var $970=(($969)|0)==0;
      if ($970) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $972=_release_unused_segments(5273476);
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 196; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      _abort();
      throw "Reached an unreachable!"
    case 196: 
      label = 197; break;
    case 197: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0;
      var $3=HEAP32[((((5246528)|0))>>2)];
      var $4=(($3)|0)!=0;
      if ($4) { var $9 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=_init_mparams();
      var $7=(($6)|0)!=0;
      var $9 = $7;label = 4; break;
    case 4: 
      var $9;
      var $10=(($9)&1);
      var $11=$2;
      var $12=(($11)>>>0) < 4294967232;
      if ($12) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $14=$1;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)!=0;
      if ($17) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $19=$2;
      var $20=((($19)+(40))|0);
      $2=$20;
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($23)>>>0) > (($24)>>>0);
      if ($25) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $27=HEAP32[((((5246536)|0))>>2)];
      $unit=$27;
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=((($30)-($31))|0);
      var $33=$unit;
      var $34=((($33)-(1))|0);
      var $35=((($32)+($34))|0);
      var $36=$unit;
      var $37=Math.floor(((($35)>>>0))/((($36)>>>0)));
      var $38=((($37)-(1))|0);
      var $39=$unit;
      var $40=((($38)*($39))|0);
      $extra=$40;
      var $41=$1;
      var $42=$1;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=_segment_holding($41, $45);
      $sp=$46;
      var $47=$sp;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 8;
      var $51=(($50)|0)!=0;
      if ($51) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $53=$sp;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 0;
      var $57=(($56)|0)!=0;
      if ($57) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $60=$extra;
      var $61=(($60)>>>0) >= 2147483647;
      if ($61) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $63=$unit;
      var $64=(((-2147483648)-($63))|0);
      $extra=$64;
      label = 12; break;
    case 12: 
      var $66=_sbrk(0);
      $old_br=$66;
      var $67=$old_br;
      var $68=$sp;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$sp;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70+$73)|0);
      var $75=(($67)|0)==(($74)|0);
      if ($75) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $77=$extra;
      var $78=(((-$77))|0);
      var $79=_sbrk($78);
      $rel_br=$79;
      var $80=_sbrk(0);
      $new_br=$80;
      var $81=$rel_br;
      var $82=(($81)|0)!=-1;
      if ($82) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $84=$new_br;
      var $85=$old_br;
      var $86=(($84)>>>0) < (($85)>>>0);
      if ($86) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $88=$old_br;
      var $89=$new_br;
      var $90=$88;
      var $91=$89;
      var $92=((($90)-($91))|0);
      $released=$92;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $97=$released;
      var $98=(($97)|0)!=0;
      if ($98) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $100=$released;
      var $101=$sp;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-($100))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=$released;
      var $106=$1;
      var $107=(($106+432)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-($105))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=$1;
      var $111=$1;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$1;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$released;
      var $118=((($116)-($117))|0);
      _init_top($110, $113, $118);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $121=$released;
      var $122=(($121)|0)==0;
      if ($122) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $124=$1;
      var $125=(($124+12)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$1;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($126)>>>0) > (($129)>>>0);
      if ($130) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $132=$1;
      var $133=(($132+28)|0);
      HEAP32[(($133)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $136=$released;
      var $137=(($136)|0)!=0;
      var $138=$137 ? 1 : 0;

      return $138;
    default: assert(0, "bad label: " + label);
  }
}
_sys_trim["X"]=1;

function _calloc($n_elements, $elem_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $mem;
      var $req;
      $1=$n_elements;
      $2=$elem_size;
      $req=0;
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $6=$1;
      var $7=$2;
      var $8=((($6)*($7))|0);
      $req=$8;
      var $9=$1;
      var $10=$2;
      var $11=$9 | $10;
      var $12=$11 & -65536;
      var $13=(($12)|0)!=0;
      if ($13) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $15=$req;
      var $16=$1;
      var $17=Math.floor(((($15)>>>0))/((($16)>>>0)));
      var $18=$2;
      var $19=(($17)|0)!=(($18)|0);
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $req=-1;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $23=$req;
      var $24=_malloc($23);
      $mem=$24;
      var $25=$mem;
      var $26=(($25)|0)!=0;
      if ($26) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $28=$mem;
      var $29=((($28)-(8))|0);
      var $30=$29;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 & 3;
      var $34=(($33)|0)==0;
      if ($34) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $36=$mem;
      var $37=$req;
      _memset($36, 0, $37, 1);
      label = 10; break;
    case 10: 
      var $39=$mem;

      return $39;
    default: assert(0, "bad label: " + label);
  }
}
Module["_calloc"] = _calloc;

function _realloc($oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$oldmem;
      $3=$bytes;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$3;
      var $8=_malloc($7);
      $1=$8;
      label = 5; break;
    case 4: 
      $m=5273476;
      var $10=$m;
      var $11=$2;
      var $12=$3;
      var $13=_internal_realloc($10, $11, $12);
      $1=$13;
      label = 5; break;
    case 5: 
      var $15=$1;

      return $15;
    default: assert(0, "bad label: " + label);
  }
}


function _release_unused_segments($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0;
      $nsegs=0;
      var $2=$1;
      var $3=(($2+444)|0);
      $pred=$3;
      var $4=$pred;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $sp=$6;
      label = 3; break;
    case 3: 
      var $8=$sp;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 88; break; }
    case 4: 
      var $11=$sp;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $base=$13;
      var $14=$sp;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $size=$16;
      var $17=$sp;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      $next=$19;
      var $20=$nsegs;
      var $21=((($20)+(1))|0);
      $nsegs=$21;
      var $22=$sp;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 0;
      var $26=(($25)|0)!=0;
      if ($26) { label = 5; break; } else { label = 87; break; }
    case 5: 
      var $28=$sp;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & 8;
      var $32=(($31)|0)!=0;
      if ($32) { label = 87; break; } else { label = 6; break; }
    case 6: 
      var $34=$base;
      var $35=$base;
      var $36=(($35+8)|0);
      var $37=$36;
      var $38=$37 & 7;
      var $39=(($38)|0)==0;
      if ($39) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $49 = 0;label = 9; break;
    case 8: 
      var $42=$base;
      var $43=(($42+8)|0);
      var $44=$43;
      var $45=$44 & 7;
      var $46=(((8)-($45))|0);
      var $47=$46 & 7;
      var $49 = $47;label = 9; break;
    case 9: 
      var $49;
      var $50=(($34+$49)|0);
      var $51=$50;
      $p=$51;
      var $52=$p;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 & -8;
      $psize=$55;
      var $56=$p;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & 3;
      var $60=(($59)|0)!=1;
      if ($60) { label = 86; break; } else { label = 10; break; }
    case 10: 
      var $62=$p;
      var $63=$62;
      var $64=$psize;
      var $65=(($63+$64)|0);
      var $66=$base;
      var $67=$size;
      var $68=(($66+$67)|0);
      var $69=((($68)-(40))|0);
      var $70=(($65)>>>0) >= (($69)>>>0);
      if ($70) { label = 11; break; } else { label = 86; break; }
    case 11: 
      var $72=$p;
      var $73=$72;
      $tp=$73;
      var $74=$p;
      var $75=$1;
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)|0)==(($77)|0);
      if ($78) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $80=$1;
      var $81=(($80+20)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$1;
      var $83=(($82+8)|0);
      HEAP32[(($83)>>2)]=0;
      label = 59; break;
    case 13: 
      var $85=$tp;
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      $XP=$87;
      var $88=$tp;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$tp;
      var $92=(($90)|0)!=(($91)|0);
      if ($92) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $94=$tp;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      $F=$96;
      var $97=$tp;
      var $98=(($97+12)|0);
      var $99=HEAP32[(($98)>>2)];
      $R=$99;
      var $100=$F;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) >= (($104)>>>0);
      var $106=(($105)&1);
      var $107=($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $110=$R;
      var $111=$F;
      var $112=(($111+12)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$F;
      var $114=$R;
      var $115=(($114+8)|0);
      HEAP32[(($115)>>2)]=$113;
      label = 17; break;
    case 16: 
      _abort();
      throw "Reached an unreachable!"
    case 17: 
      label = 30; break;
    case 18: 
      var $119=$tp;
      var $120=(($119+16)|0);
      var $121=(($120+4)|0);
      $RP=$121;
      var $122=HEAP32[(($121)>>2)];
      $R=$122;
      var $123=(($122)|0)!=0;
      if ($123) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $125=$tp;
      var $126=(($125+16)|0);
      var $127=(($126)|0);
      $RP=$127;
      var $128=HEAP32[(($127)>>2)];
      $R=$128;
      var $129=(($128)|0)!=0;
      if ($129) { label = 20; break; } else { label = 29; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $132=$R;
      var $133=(($132+16)|0);
      var $134=(($133+4)|0);
      $CP=$134;
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|0)!=0;
      if ($136) { var $144 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $138=$R;
      var $139=(($138+16)|0);
      var $140=(($139)|0);
      $CP=$140;
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141)|0)!=0;
      var $144 = $142;label = 23; break;
    case 23: 
      var $144;
      if ($144) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $146=$CP;
      $RP=$146;
      var $147=HEAP32[(($146)>>2)];
      $R=$147;
      label = 21; break;
    case 25: 
      var $149=$RP;
      var $150=$149;
      var $151=$1;
      var $152=(($151+16)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($150)>>>0) >= (($153)>>>0);
      var $155=(($154)&1);
      var $156=($155);
      var $157=(($156)|0)!=0;
      if ($157) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $159=$RP;
      HEAP32[(($159)>>2)]=0;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $164=$XP;
      var $165=(($164)|0)!=0;
      if ($165) { label = 31; break; } else { label = 58; break; }
    case 31: 
      var $167=$tp;
      var $168=(($167+28)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$1;
      var $171=(($170+304)|0);
      var $172=(($171+($169<<2))|0);
      $H=$172;
      var $173=$tp;
      var $174=$H;
      var $175=HEAP32[(($174)>>2)];
      var $176=(($173)|0)==(($175)|0);
      if ($176) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $178=$R;
      var $179=$H;
      HEAP32[(($179)>>2)]=$178;
      var $180=(($178)|0)==0;
      if ($180) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $182=$tp;
      var $183=(($182+28)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=1 << $184;
      var $186=$185 ^ -1;
      var $187=$1;
      var $188=(($187+4)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 & $186;
      HEAP32[(($188)>>2)]=$190;
      label = 34; break;
    case 34: 
      label = 42; break;
    case 35: 
      var $193=$XP;
      var $194=$193;
      var $195=$1;
      var $196=(($195+16)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($194)>>>0) >= (($197)>>>0);
      var $199=(($198)&1);
      var $200=($199);
      var $201=(($200)|0)!=0;
      if ($201) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $203=$XP;
      var $204=(($203+16)|0);
      var $205=(($204)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=$tp;
      var $208=(($206)|0)==(($207)|0);
      if ($208) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $210=$R;
      var $211=$XP;
      var $212=(($211+16)|0);
      var $213=(($212)|0);
      HEAP32[(($213)>>2)]=$210;
      label = 39; break;
    case 38: 
      var $215=$R;
      var $216=$XP;
      var $217=(($216+16)|0);
      var $218=(($217+4)|0);
      HEAP32[(($218)>>2)]=$215;
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      var $223=$R;
      var $224=(($223)|0)!=0;
      if ($224) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $226=$R;
      var $227=$226;
      var $228=$1;
      var $229=(($228+16)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($227)>>>0) >= (($230)>>>0);
      var $232=(($231)&1);
      var $233=($232);
      var $234=(($233)|0)!=0;
      if ($234) { label = 44; break; } else { label = 55; break; }
    case 44: 
      var $236=$XP;
      var $237=$R;
      var $238=(($237+24)|0);
      HEAP32[(($238)>>2)]=$236;
      var $239=$tp;
      var $240=(($239+16)|0);
      var $241=(($240)|0);
      var $242=HEAP32[(($241)>>2)];
      $C0=$242;
      var $243=(($242)|0)!=0;
      if ($243) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $245=$C0;
      var $246=$245;
      var $247=$1;
      var $248=(($247+16)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($246)>>>0) >= (($249)>>>0);
      var $251=(($250)&1);
      var $252=($251);
      var $253=(($252)|0)!=0;
      if ($253) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $255=$C0;
      var $256=$R;
      var $257=(($256+16)|0);
      var $258=(($257)|0);
      HEAP32[(($258)>>2)]=$255;
      var $259=$R;
      var $260=$C0;
      var $261=(($260+24)|0);
      HEAP32[(($261)>>2)]=$259;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!"
    case 48: 
      label = 49; break;
    case 49: 
      var $265=$tp;
      var $266=(($265+16)|0);
      var $267=(($266+4)|0);
      var $268=HEAP32[(($267)>>2)];
      $C1=$268;
      var $269=(($268)|0)!=0;
      if ($269) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $271=$C1;
      var $272=$271;
      var $273=$1;
      var $274=(($273+16)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($272)>>>0) >= (($275)>>>0);
      var $277=(($276)&1);
      var $278=($277);
      var $279=(($278)|0)!=0;
      if ($279) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $281=$C1;
      var $282=$R;
      var $283=(($282+16)|0);
      var $284=(($283+4)|0);
      HEAP32[(($284)>>2)]=$281;
      var $285=$R;
      var $286=$C1;
      var $287=(($286+24)|0);
      HEAP32[(($287)>>2)]=$285;
      label = 53; break;
    case 52: 
      _abort();
      throw "Reached an unreachable!"
    case 53: 
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $296=$psize;
      var $297=$296 >>> 8;
      $X=$297;
      var $298=$X;
      var $299=(($298)|0)==0;
      if ($299) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $I=0;
      label = 65; break;
    case 61: 
      var $302=$X;
      var $303=(($302)>>>0) > 65535;
      if ($303) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=31;
      label = 64; break;
    case 63: 
      var $306=$X;
      $Y=$306;
      var $307=$Y;
      var $308=((($307)-(256))|0);
      var $309=$308 >>> 16;
      var $310=$309 & 8;
      $N=$310;
      var $311=$N;
      var $312=$Y;
      var $313=$312 << $311;
      $Y=$313;
      var $314=((($313)-(4096))|0);
      var $315=$314 >>> 16;
      var $316=$315 & 4;
      $K=$316;
      var $317=$K;
      var $318=$N;
      var $319=((($318)+($317))|0);
      $N=$319;
      var $320=$K;
      var $321=$Y;
      var $322=$321 << $320;
      $Y=$322;
      var $323=((($322)-(16384))|0);
      var $324=$323 >>> 16;
      var $325=$324 & 2;
      $K=$325;
      var $326=$N;
      var $327=((($326)+($325))|0);
      $N=$327;
      var $328=$N;
      var $329=(((14)-($328))|0);
      var $330=$K;
      var $331=$Y;
      var $332=$331 << $330;
      $Y=$332;
      var $333=$332 >>> 15;
      var $334=((($329)+($333))|0);
      $K=$334;
      var $335=$K;
      var $336=$335 << 1;
      var $337=$psize;
      var $338=$K;
      var $339=((($338)+(7))|0);
      var $340=$337 >>> (($339)>>>0);
      var $341=$340 & 1;
      var $342=((($336)+($341))|0);
      $I=$342;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $345=$I;
      var $346=$1;
      var $347=(($346+304)|0);
      var $348=(($347+($345<<2))|0);
      $H1=$348;
      var $349=$I;
      var $350=$tp;
      var $351=(($350+28)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$tp;
      var $353=(($352+16)|0);
      var $354=(($353+4)|0);
      HEAP32[(($354)>>2)]=0;
      var $355=$tp;
      var $356=(($355+16)|0);
      var $357=(($356)|0);
      HEAP32[(($357)>>2)]=0;
      var $358=$1;
      var $359=(($358+4)|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=$I;
      var $362=1 << $361;
      var $363=$360 & $362;
      var $364=(($363)|0)!=0;
      if ($364) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $366=$I;
      var $367=1 << $366;
      var $368=$1;
      var $369=(($368+4)|0);
      var $370=HEAP32[(($369)>>2)];
      var $371=$370 | $367;
      HEAP32[(($369)>>2)]=$371;
      var $372=$tp;
      var $373=$H1;
      HEAP32[(($373)>>2)]=$372;
      var $374=$H1;
      var $375=$374;
      var $376=$tp;
      var $377=(($376+24)|0);
      HEAP32[(($377)>>2)]=$375;
      var $378=$tp;
      var $379=$tp;
      var $380=(($379+12)|0);
      HEAP32[(($380)>>2)]=$378;
      var $381=$tp;
      var $382=(($381+8)|0);
      HEAP32[(($382)>>2)]=$378;
      label = 85; break;
    case 67: 
      var $384=$H1;
      var $385=HEAP32[(($384)>>2)];
      $T=$385;
      var $386=$psize;
      var $387=$I;
      var $388=(($387)|0)==31;
      if ($388) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $397 = 0;label = 70; break;
    case 69: 
      var $391=$I;
      var $392=$391 >>> 1;
      var $393=((($392)+(8))|0);
      var $394=((($393)-(2))|0);
      var $395=(((31)-($394))|0);
      var $397 = $395;label = 70; break;
    case 70: 
      var $397;
      var $398=$386 << $397;
      $K2=$398;
      label = 71; break;
    case 71: 
      var $400=$T;
      var $401=(($400+4)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$402 & -8;
      var $404=$psize;
      var $405=(($403)|0)!=(($404)|0);
      if ($405) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $407=$K2;
      var $408=$407 >>> 31;
      var $409=$408 & 1;
      var $410=$T;
      var $411=(($410+16)|0);
      var $412=(($411+($409<<2))|0);
      $C=$412;
      var $413=$K2;
      var $414=$413 << 1;
      $K2=$414;
      var $415=$C;
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|0)!=0;
      if ($417) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $419=$C;
      var $420=HEAP32[(($419)>>2)];
      $T=$420;
      label = 77; break;
    case 74: 
      var $422=$C;
      var $423=$422;
      var $424=$1;
      var $425=(($424+16)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=(($423)>>>0) >= (($426)>>>0);
      var $428=(($427)&1);
      var $429=($428);
      var $430=(($429)|0)!=0;
      if ($430) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $432=$tp;
      var $433=$C;
      HEAP32[(($433)>>2)]=$432;
      var $434=$T;
      var $435=$tp;
      var $436=(($435+24)|0);
      HEAP32[(($436)>>2)]=$434;
      var $437=$tp;
      var $438=$tp;
      var $439=(($438+12)|0);
      HEAP32[(($439)>>2)]=$437;
      var $440=$tp;
      var $441=(($440+8)|0);
      HEAP32[(($441)>>2)]=$437;
      label = 84; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!"
    case 77: 
      label = 83; break;
    case 78: 
      var $445=$T;
      var $446=(($445+8)|0);
      var $447=HEAP32[(($446)>>2)];
      $F3=$447;
      var $448=$T;
      var $449=$448;
      var $450=$1;
      var $451=(($450+16)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=(($449)>>>0) >= (($452)>>>0);
      if ($453) { label = 79; break; } else { var $462 = 0;label = 80; break; }
    case 79: 
      var $455=$F3;
      var $456=$455;
      var $457=$1;
      var $458=(($457+16)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=(($456)>>>0) >= (($459)>>>0);
      var $462 = $460;label = 80; break;
    case 80: 
      var $462;
      var $463=(($462)&1);
      var $464=($463);
      var $465=(($464)|0)!=0;
      if ($465) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $467=$tp;
      var $468=$F3;
      var $469=(($468+12)|0);
      HEAP32[(($469)>>2)]=$467;
      var $470=$T;
      var $471=(($470+8)|0);
      HEAP32[(($471)>>2)]=$467;
      var $472=$F3;
      var $473=$tp;
      var $474=(($473+8)|0);
      HEAP32[(($474)>>2)]=$472;
      var $475=$T;
      var $476=$tp;
      var $477=(($476+12)|0);
      HEAP32[(($477)>>2)]=$475;
      var $478=$tp;
      var $479=(($478+24)|0);
      HEAP32[(($479)>>2)]=0;
      label = 84; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!"
    case 83: 
      label = 71; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $486=$sp;
      $pred=$486;
      var $487=$next;
      $sp=$487;
      label = 3; break;
    case 88: 
      var $489=$nsegs;
      var $490=(($489)>>>0) > 4294967295;
      if ($490) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $492=$nsegs;
      var $495 = $492;label = 91; break;
    case 90: 
      var $495 = -1;label = 91; break;
    case 91: 
      var $495;
      var $496=$1;
      var $497=(($496+32)|0);
      HEAP32[(($497)>>2)]=$495;
      var $498=$released;

      return $498;
    default: assert(0, "bad label: " + label);
  }
}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      var $5=$3;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & -8;
      $oldsize=$8;
      var $9=$4;
      var $10=$9 >>> 3;
      var $11=(($10)>>>0) < 32;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 15; break;
    case 4: 
      var $14=$oldsize;
      var $15=$4;
      var $16=((($15)+(4))|0);
      var $17=(($14)>>>0) >= (($16)>>>0);
      if ($17) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $19=$oldsize;
      var $20=$4;
      var $21=((($19)-($20))|0);
      var $22=HEAP32[((((5246536)|0))>>2)];
      var $23=$22 << 1;
      var $24=(($21)>>>0) <= (($23)>>>0);
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$3;
      $1=$26;
      label = 15; break;
    case 7: 
      var $28=$3;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      $offset=$30;
      var $31=$oldsize;
      var $32=$offset;
      var $33=((($31)+($32))|0);
      var $34=((($33)+(16))|0);
      $oldmmsize=$34;
      var $35=$4;
      var $36=((($35)+(24))|0);
      var $37=((($36)+(7))|0);
      var $38=HEAP32[((((5246532)|0))>>2)];
      var $39=((($38)-(1))|0);
      var $40=((($37)+($39))|0);
      var $41=HEAP32[((((5246532)|0))>>2)];
      var $42=((($41)-(1))|0);
      var $43=$42 ^ -1;
      var $44=$40 & $43;
      $newmmsize=$44;
      $cp=-1;
      var $45=$cp;
      var $46=(($45)|0)!=-1;
      if ($46) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $48=$cp;
      var $49=$offset;
      var $50=(($48+$49)|0);
      var $51=$50;
      $newp=$51;
      var $52=$newmmsize;
      var $53=$offset;
      var $54=((($52)-($53))|0);
      var $55=((($54)-(16))|0);
      $psize=$55;
      var $56=$psize;
      var $57=$newp;
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$56;
      var $59=$newp;
      var $60=$59;
      var $61=$psize;
      var $62=(($60+$61)|0);
      var $63=$62;
      var $64=(($63+4)|0);
      HEAP32[(($64)>>2)]=7;
      var $65=$newp;
      var $66=$65;
      var $67=$psize;
      var $68=((($67)+(4))|0);
      var $69=(($66+$68)|0);
      var $70=$69;
      var $71=(($70+4)|0);
      HEAP32[(($71)>>2)]=0;
      var $72=$cp;
      var $73=$2;
      var $74=(($73+16)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($72)>>>0) < (($75)>>>0);
      if ($76) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $78=$cp;
      var $79=$2;
      var $80=(($79+16)|0);
      HEAP32[(($80)>>2)]=$78;
      label = 10; break;
    case 10: 
      var $82=$newmmsize;
      var $83=$oldmmsize;
      var $84=((($82)-($83))|0);
      var $85=$2;
      var $86=(($85+432)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)+($84))|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=$2;
      var $90=(($89+436)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($88)>>>0) > (($91)>>>0);
      if ($92) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $94=$2;
      var $95=(($94+432)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$2;
      var $98=(($97+436)|0);
      HEAP32[(($98)>>2)]=$96;
      label = 12; break;
    case 12: 
      var $100=$newp;
      $1=$100;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $104=$1;

      return $104;
    default: assert(0, "bad label: " + label);
  }
}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2;
      var $5=(($4+444)|0);
      $sp=$5;
      label = 3; break;
    case 3: 
      var $7=$3;
      var $8=$sp;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)>>>0) >= (($10)>>>0);
      if ($11) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=$3;
      var $14=$sp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$sp;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+$19)|0);
      var $21=(($13)>>>0) < (($20)>>>0);
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$sp;
      $1=$23;
      label = 9; break;
    case 6: 
      var $25=$sp;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $sp=$27;
      var $28=(($27)|0)==0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $32=$1;

      return $32;
    default: assert(0, "bad label: " + label);
  }
}


function _init_top($m, $p, $psize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2;
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=$6;
      var $8=$7 & 7;
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20 = 0;label = 5; break;
    case 4: 
      var $12=$2;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      $offset=$20;
      var $21=$2;
      var $22=$21;
      var $23=$offset;
      var $24=(($22+$23)|0);
      var $25=$24;
      $2=$25;
      var $26=$offset;
      var $27=$3;
      var $28=((($27)-($26))|0);
      $3=$28;
      var $29=$2;
      var $30=$1;
      var $31=(($30+24)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$3;
      var $33=$1;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$3;
      var $36=$35 | 1;
      var $37=$2;
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$2;
      var $40=$39;
      var $41=$3;
      var $42=(($40+$41)|0);
      var $43=$42;
      var $44=(($43+4)|0);
      HEAP32[(($44)>>2)]=40;
      var $45=HEAP32[((((5246544)|0))>>2)];
      var $46=$1;
      var $47=(($46+28)|0);
      HEAP32[(($47)>>2)]=$45;

      return;
    default: assert(0, "bad label: " + label);
  }
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3;
      var $5=((($4)+(24))|0);
      var $6=((($5)+(7))|0);
      var $7=HEAP32[((((5246532)|0))>>2)];
      var $8=((($7)-(1))|0);
      var $9=((($6)+($8))|0);
      var $10=HEAP32[((((5246532)|0))>>2)];
      var $11=((($10)-(1))|0);
      var $12=$11 ^ -1;
      var $13=$9 & $12;
      $mmsize=$13;
      var $14=$mmsize;
      var $15=$3;
      var $16=(($14)>>>0) > (($15)>>>0);
      if ($16) { label = 3; break; } else { label = 14; break; }
    case 3: 
      $mm=-1;
      var $18=$mm;
      var $19=(($18)|0)!=-1;
      if ($19) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $21=$mm;
      var $22=(($21+8)|0);
      var $23=$22;
      var $24=$23 & 7;
      var $25=(($24)|0)==0;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $35 = 0;label = 7; break;
    case 6: 
      var $28=$mm;
      var $29=(($28+8)|0);
      var $30=$29;
      var $31=$30 & 7;
      var $32=(((8)-($31))|0);
      var $33=$32 & 7;
      var $35 = $33;label = 7; break;
    case 7: 
      var $35;
      $offset=$35;
      var $36=$mmsize;
      var $37=$offset;
      var $38=((($36)-($37))|0);
      var $39=((($38)-(16))|0);
      $psize=$39;
      var $40=$mm;
      var $41=$offset;
      var $42=(($40+$41)|0);
      var $43=$42;
      $p=$43;
      var $44=$offset;
      var $45=$p;
      var $46=(($45)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$psize;
      var $48=$p;
      var $49=(($48+4)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=$p;
      var $51=$50;
      var $52=$psize;
      var $53=(($51+$52)|0);
      var $54=$53;
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=7;
      var $56=$p;
      var $57=$56;
      var $58=$psize;
      var $59=((($58)+(4))|0);
      var $60=(($57+$59)|0);
      var $61=$60;
      var $62=(($61+4)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0)==0;
      if ($66) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $68=$mm;
      var $69=$2;
      var $70=(($69+16)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($68)>>>0) < (($71)>>>0);
      if ($72) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $74=$mm;
      var $75=$2;
      var $76=(($75+16)|0);
      HEAP32[(($76)>>2)]=$74;
      label = 10; break;
    case 10: 
      var $78=$mmsize;
      var $79=$2;
      var $80=(($79+432)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)+($78))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=$2;
      var $84=(($83+436)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($82)>>>0) > (($85)>>>0);
      if ($86) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $88=$2;
      var $89=(($88+432)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$2;
      var $92=(($91+436)|0);
      HEAP32[(($92)>>2)]=$90;
      label = 12; break;
    case 12: 
      var $94=$p;
      var $95=$94;
      var $96=(($95+8)|0);
      $1=$96;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $100=$1;

      return $100;
    default: assert(0, "bad label: " + label);
  }
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=(($3)>>>0) < 32;
      if ($4) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$i;
      var $7=$6 << 1;
      var $8=$1;
      var $9=(($8+40)|0);
      var $10=(($9+($7<<2))|0);
      var $11=$10;
      var $12=$11;
      $bin=$12;
      var $13=$bin;
      var $14=$bin;
      var $15=(($14+12)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$bin;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=$13;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }
}


function _internal_realloc($m, $oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $2=$m;
      $3=$oldmem;
      $4=$bytes;
      var $5=$4;
      var $6=(($5)>>>0) >= 4294967232;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=___errno_location();
      HEAP32[(($8)>>2)]=12;
      $1=0;
      label = 35; break;
    case 4: 
      var $10=$3;
      var $11=((($10)-(8))|0);
      var $12=$11;
      $oldp=$12;
      var $13=$oldp;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -8;
      $oldsize=$16;
      var $17=$oldp;
      var $18=$17;
      var $19=$oldsize;
      var $20=(($18+$19)|0);
      var $21=$20;
      $next=$21;
      $newp=0;
      $extra=0;
      var $22=$oldp;
      var $23=$22;
      var $24=$2;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)>>>0) >= (($26)>>>0);
      if ($27) { label = 5; break; } else { var $47 = 0;label = 8; break; }
    case 5: 
      var $29=$oldp;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 3;
      var $33=(($32)|0)!=1;
      if ($33) { label = 6; break; } else { var $47 = 0;label = 8; break; }
    case 6: 
      var $35=$oldp;
      var $36=$35;
      var $37=$next;
      var $38=$37;
      var $39=(($36)>>>0) < (($38)>>>0);
      if ($39) { label = 7; break; } else { var $47 = 0;label = 8; break; }
    case 7: 
      var $41=$next;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & 1;
      var $45=(($44)|0)!=0;
      var $47 = $45;label = 8; break;
    case 8: 
      var $47;
      var $48=(($47)&1);
      var $49=($48);
      var $50=(($49)|0)!=0;
      if ($50) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $52=$4;
      var $53=(($52)>>>0) < 11;
      if ($53) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $61 = 16;label = 12; break;
    case 11: 
      var $56=$4;
      var $57=((($56)+(4))|0);
      var $58=((($57)+(7))|0);
      var $59=$58 & -8;
      var $61 = $59;label = 12; break;
    case 12: 
      var $61;
      $nb=$61;
      var $62=$oldp;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & 3;
      var $66=(($65)|0)==0;
      if ($66) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $68=$2;
      var $69=$oldp;
      var $70=$nb;
      var $71=_mmap_resize($68, $69, $70);
      $newp=$71;
      label = 23; break;
    case 14: 
      var $73=$oldsize;
      var $74=$nb;
      var $75=(($73)>>>0) >= (($74)>>>0);
      if ($75) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $77=$oldsize;
      var $78=$nb;
      var $79=((($77)-($78))|0);
      $rsize=$79;
      var $80=$oldp;
      $newp=$80;
      var $81=$rsize;
      var $82=(($81)>>>0) >= 16;
      if ($82) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $84=$newp;
      var $85=$84;
      var $86=$nb;
      var $87=(($85+$86)|0);
      var $88=$87;
      $remainder=$88;
      var $89=$newp;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$91 & 1;
      var $93=$nb;
      var $94=$92 | $93;
      var $95=$94 | 2;
      var $96=$newp;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$newp;
      var $99=$98;
      var $100=$nb;
      var $101=(($99+$100)|0);
      var $102=$101;
      var $103=(($102+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 | 1;
      HEAP32[(($103)>>2)]=$105;
      var $106=$rsize;
      var $107=$106 | 1;
      var $108=$107 | 2;
      var $109=$remainder;
      var $110=(($109+4)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$remainder;
      var $112=$111;
      var $113=$rsize;
      var $114=(($112+$113)|0);
      var $115=$114;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$117 | 1;
      HEAP32[(($116)>>2)]=$118;
      var $119=$remainder;
      var $120=$119;
      var $121=(($120+8)|0);
      $extra=$121;
      label = 17; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $124=$next;
      var $125=$2;
      var $126=(($125+24)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($124)|0)==(($127)|0);
      if ($128) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $130=$oldsize;
      var $131=$2;
      var $132=(($131+12)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($130)+($133))|0);
      var $135=$nb;
      var $136=(($134)>>>0) > (($135)>>>0);
      if ($136) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $138=$oldsize;
      var $139=$2;
      var $140=(($139+12)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=((($138)+($141))|0);
      $newsize=$142;
      var $143=$newsize;
      var $144=$nb;
      var $145=((($143)-($144))|0);
      $newtopsize=$145;
      var $146=$oldp;
      var $147=$146;
      var $148=$nb;
      var $149=(($147+$148)|0);
      var $150=$149;
      $newtop=$150;
      var $151=$oldp;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$153 & 1;
      var $155=$nb;
      var $156=$154 | $155;
      var $157=$156 | 2;
      var $158=$oldp;
      var $159=(($158+4)|0);
      HEAP32[(($159)>>2)]=$157;
      var $160=$oldp;
      var $161=$160;
      var $162=$nb;
      var $163=(($161+$162)|0);
      var $164=$163;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$166 | 1;
      HEAP32[(($165)>>2)]=$167;
      var $168=$newtopsize;
      var $169=$168 | 1;
      var $170=$newtop;
      var $171=(($170+4)|0);
      HEAP32[(($171)>>2)]=$169;
      var $172=$newtop;
      var $173=$2;
      var $174=(($173+24)|0);
      HEAP32[(($174)>>2)]=$172;
      var $175=$newtopsize;
      var $176=$2;
      var $177=(($176+12)|0);
      HEAP32[(($177)>>2)]=$175;
      var $178=$oldp;
      $newp=$178;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!"
    case 25: 
      var $184=$newp;
      var $185=(($184)|0)!=0;
      if ($185) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $187=$extra;
      var $188=(($187)|0)!=0;
      if ($188) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $190=$extra;
      _free($190);
      label = 28; break;
    case 28: 
      var $192=$newp;
      var $193=$192;
      var $194=(($193+8)|0);
      $1=$194;
      label = 35; break;
    case 29: 
      var $196=$4;
      var $197=_malloc($196);
      $newmem=$197;
      var $198=$newmem;
      var $199=(($198)|0)!=0;
      if ($199) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $201=$oldsize;
      var $202=$oldp;
      var $203=(($202+4)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$204 & 3;
      var $206=(($205)|0)==0;
      var $207=$206 ? 8 : 4;
      var $208=((($201)-($207))|0);
      $oc=$208;
      var $209=$newmem;
      var $210=$3;
      var $211=$oc;
      var $212=$4;
      var $213=(($211)>>>0) < (($212)>>>0);
      if ($213) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $215=$oc;
      var $219 = $215;label = 33; break;
    case 32: 
      var $217=$4;
      var $219 = $217;label = 33; break;
    case 33: 
      var $219;
      assert($219 % 1 === 0);_memcpy($209, $210, $219);
      var $220=$3;
      _free($220);
      label = 34; break;
    case 34: 
      var $222=$newmem;
      $1=$222;
      label = 35; break;
    case 35: 
      var $224=$1;

      return $224;
    default: assert(0, "bad label: " + label);
  }
}
_internal_realloc["X"]=1;

function _init_mparams() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((5246528)|0))>>2)];
      var $2=(($1)|0)==0;
      if ($2) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=_sysconf(8);
      $psize=$4;
      var $5=$psize;
      $gsize=$5;
      var $6=$gsize;
      var $7=$gsize;
      var $8=((($7)-(1))|0);
      var $9=$6 & $8;
      var $10=(($9)|0)!=0;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $12=$psize;
      var $13=$psize;
      var $14=((($13)-(1))|0);
      var $15=$12 & $14;
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $19=$gsize;
      HEAP32[((((5246536)|0))>>2)]=$19;
      var $20=$psize;
      HEAP32[((((5246532)|0))>>2)]=$20;
      HEAP32[((((5246540)|0))>>2)]=-1;
      HEAP32[((((5246544)|0))>>2)]=2097152;
      HEAP32[((((5246548)|0))>>2)]=0;
      var $21=HEAP32[((((5246548)|0))>>2)];
      HEAP32[((((5273916)|0))>>2)]=$21;
      var $22=_time(0);
      var $23=$22 ^ 1431655765;
      $magic=$23;
      var $24=$magic;
      var $25=$24 | 8;
      $magic=$25;
      var $26=$magic;
      var $27=$26 & -8;
      $magic=$27;
      var $28=$magic;
      HEAP32[((((5246528)|0))>>2)]=$28;
      label = 7; break;
    case 7: 

      return 1;
    default: assert(0, "bad label: " + label);
  }
}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=$7;
      var $9=$8 & 7;
      var $10=(($9)|0)==0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20 = 0;label = 5; break;
    case 4: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      var $21=(($5+$20)|0);
      var $22=$21;
      $p=$22;
      var $23=$3;
      var $24=$3;
      var $25=(($24+8)|0);
      var $26=$25;
      var $27=$26 & 7;
      var $28=(($27)|0)==0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38 = 0;label = 8; break;
    case 7: 
      var $31=$3;
      var $32=(($31+8)|0);
      var $33=$32;
      var $34=$33 & 7;
      var $35=(((8)-($34))|0);
      var $36=$35 & 7;
      var $38 = $36;label = 8; break;
    case 8: 
      var $38;
      var $39=(($23+$38)|0);
      var $40=$39;
      $oldfirst=$40;
      var $41=$oldfirst;
      var $42=$41;
      var $43=$p;
      var $44=$43;
      var $45=$42;
      var $46=$44;
      var $47=((($45)-($46))|0);
      $psize=$47;
      var $48=$p;
      var $49=$48;
      var $50=$4;
      var $51=(($49+$50)|0);
      var $52=$51;
      $q=$52;
      var $53=$psize;
      var $54=$4;
      var $55=((($53)-($54))|0);
      $qsize=$55;
      var $56=$4;
      var $57=$56 | 1;
      var $58=$57 | 2;
      var $59=$p;
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$oldfirst;
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($61)|0)==(($64)|0);
      if ($65) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $67=$qsize;
      var $68=$1;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)+($67))|0);
      HEAP32[(($69)>>2)]=$71;
      $tsize=$71;
      var $72=$q;
      var $73=$1;
      var $74=(($73+24)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$tsize;
      var $76=$75 | 1;
      var $77=$q;
      var $78=(($77+4)|0);
      HEAP32[(($78)>>2)]=$76;
      label = 110; break;
    case 10: 
      var $80=$oldfirst;
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($80)|0)==(($83)|0);
      if ($84) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $86=$qsize;
      var $87=$1;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)+($86))|0);
      HEAP32[(($88)>>2)]=$90;
      $dsize=$90;
      var $91=$q;
      var $92=$1;
      var $93=(($92+20)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$dsize;
      var $95=$94 | 1;
      var $96=$q;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$dsize;
      var $99=$q;
      var $100=$99;
      var $101=$dsize;
      var $102=(($100+$101)|0);
      var $103=$102;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$98;
      label = 109; break;
    case 12: 
      var $106=$oldfirst;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 & 3;
      var $110=(($109)|0)!=1;
      if ($110) { label = 73; break; } else { label = 13; break; }
    case 13: 
      var $112=$oldfirst;
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & -8;
      $nsize=$115;
      var $116=$nsize;
      var $117=$116 >>> 3;
      var $118=(($117)>>>0) < 32;
      if ($118) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $120=$oldfirst;
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      $F=$122;
      var $123=$oldfirst;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      $B=$125;
      var $126=$nsize;
      var $127=$126 >>> 3;
      $I=$127;
      var $128=$F;
      var $129=$B;
      var $130=(($128)|0)==(($129)|0);
      if ($130) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $132=$I;
      var $133=1 << $132;
      var $134=$133 ^ -1;
      var $135=$1;
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$137 & $134;
      HEAP32[(($136)>>2)]=$138;
      label = 25; break;
    case 16: 
      var $140=$F;
      var $141=$I;
      var $142=$141 << 1;
      var $143=$1;
      var $144=(($143+40)|0);
      var $145=(($144+($142<<2))|0);
      var $146=$145;
      var $147=$146;
      var $148=(($140)|0)==(($147)|0);
      if ($148) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $150=$F;
      var $151=$150;
      var $152=$1;
      var $153=(($152+16)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($151)>>>0) >= (($154)>>>0);
      if ($155) { label = 18; break; } else { var $176 = 0;label = 21; break; }
    case 18: 
      var $157=$B;
      var $158=$I;
      var $159=$158 << 1;
      var $160=$1;
      var $161=(($160+40)|0);
      var $162=(($161+($159<<2))|0);
      var $163=$162;
      var $164=$163;
      var $165=(($157)|0)==(($164)|0);
      if ($165) { var $174 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $167=$B;
      var $168=$167;
      var $169=$1;
      var $170=(($169+16)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($168)>>>0) >= (($171)>>>0);
      var $174 = $172;label = 20; break;
    case 20: 
      var $174;
      var $176 = $174;label = 21; break;
    case 21: 
      var $176;
      var $177=(($176)&1);
      var $178=($177);
      var $179=(($178)|0)!=0;
      if ($179) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $181=$B;
      var $182=$F;
      var $183=(($182+12)|0);
      HEAP32[(($183)>>2)]=$181;
      var $184=$F;
      var $185=$B;
      var $186=(($185+8)|0);
      HEAP32[(($186)>>2)]=$184;
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!"
    case 24: 
      label = 25; break;
    case 25: 
      label = 72; break;
    case 26: 
      var $191=$oldfirst;
      var $192=$191;
      $TP=$192;
      var $193=$TP;
      var $194=(($193+24)|0);
      var $195=HEAP32[(($194)>>2)];
      $XP=$195;
      var $196=$TP;
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$TP;
      var $200=(($198)|0)!=(($199)|0);
      if ($200) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $202=$TP;
      var $203=(($202+8)|0);
      var $204=HEAP32[(($203)>>2)];
      $F1=$204;
      var $205=$TP;
      var $206=(($205+12)|0);
      var $207=HEAP32[(($206)>>2)];
      $R=$207;
      var $208=$F1;
      var $209=$208;
      var $210=$1;
      var $211=(($210+16)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($209)>>>0) >= (($212)>>>0);
      var $214=(($213)&1);
      var $215=($214);
      var $216=(($215)|0)!=0;
      if ($216) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $218=$R;
      var $219=$F1;
      var $220=(($219+12)|0);
      HEAP32[(($220)>>2)]=$218;
      var $221=$F1;
      var $222=$R;
      var $223=(($222+8)|0);
      HEAP32[(($223)>>2)]=$221;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!"
    case 30: 
      label = 43; break;
    case 31: 
      var $227=$TP;
      var $228=(($227+16)|0);
      var $229=(($228+4)|0);
      $RP=$229;
      var $230=HEAP32[(($229)>>2)];
      $R=$230;
      var $231=(($230)|0)!=0;
      if ($231) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $233=$TP;
      var $234=(($233+16)|0);
      var $235=(($234)|0);
      $RP=$235;
      var $236=HEAP32[(($235)>>2)];
      $R=$236;
      var $237=(($236)|0)!=0;
      if ($237) { label = 33; break; } else { label = 42; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $240=$R;
      var $241=(($240+16)|0);
      var $242=(($241+4)|0);
      $CP=$242;
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243)|0)!=0;
      if ($244) { var $252 = 1;label = 36; break; } else { label = 35; break; }
    case 35: 
      var $246=$R;
      var $247=(($246+16)|0);
      var $248=(($247)|0);
      $CP=$248;
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249)|0)!=0;
      var $252 = $250;label = 36; break;
    case 36: 
      var $252;
      if ($252) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $254=$CP;
      $RP=$254;
      var $255=HEAP32[(($254)>>2)];
      $R=$255;
      label = 34; break;
    case 38: 
      var $257=$RP;
      var $258=$257;
      var $259=$1;
      var $260=(($259+16)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=(($258)>>>0) >= (($261)>>>0);
      var $263=(($262)&1);
      var $264=($263);
      var $265=(($264)|0)!=0;
      if ($265) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $267=$RP;
      HEAP32[(($267)>>2)]=0;
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $272=$XP;
      var $273=(($272)|0)!=0;
      if ($273) { label = 44; break; } else { label = 71; break; }
    case 44: 
      var $275=$TP;
      var $276=(($275+28)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$1;
      var $279=(($278+304)|0);
      var $280=(($279+($277<<2))|0);
      $H=$280;
      var $281=$TP;
      var $282=$H;
      var $283=HEAP32[(($282)>>2)];
      var $284=(($281)|0)==(($283)|0);
      if ($284) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $286=$R;
      var $287=$H;
      HEAP32[(($287)>>2)]=$286;
      var $288=(($286)|0)==0;
      if ($288) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $290=$TP;
      var $291=(($290+28)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=1 << $292;
      var $294=$293 ^ -1;
      var $295=$1;
      var $296=(($295+4)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$297 & $294;
      HEAP32[(($296)>>2)]=$298;
      label = 47; break;
    case 47: 
      label = 55; break;
    case 48: 
      var $301=$XP;
      var $302=$301;
      var $303=$1;
      var $304=(($303+16)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=(($302)>>>0) >= (($305)>>>0);
      var $307=(($306)&1);
      var $308=($307);
      var $309=(($308)|0)!=0;
      if ($309) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $311=$XP;
      var $312=(($311+16)|0);
      var $313=(($312)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$TP;
      var $316=(($314)|0)==(($315)|0);
      if ($316) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $318=$R;
      var $319=$XP;
      var $320=(($319+16)|0);
      var $321=(($320)|0);
      HEAP32[(($321)>>2)]=$318;
      label = 52; break;
    case 51: 
      var $323=$R;
      var $324=$XP;
      var $325=(($324+16)|0);
      var $326=(($325+4)|0);
      HEAP32[(($326)>>2)]=$323;
      label = 52; break;
    case 52: 
      label = 54; break;
    case 53: 
      _abort();
      throw "Reached an unreachable!"
    case 54: 
      label = 55; break;
    case 55: 
      var $331=$R;
      var $332=(($331)|0)!=0;
      if ($332) { label = 56; break; } else { label = 70; break; }
    case 56: 
      var $334=$R;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>0) >= (($338)>>>0);
      var $340=(($339)&1);
      var $341=($340);
      var $342=(($341)|0)!=0;
      if ($342) { label = 57; break; } else { label = 68; break; }
    case 57: 
      var $344=$XP;
      var $345=$R;
      var $346=(($345+24)|0);
      HEAP32[(($346)>>2)]=$344;
      var $347=$TP;
      var $348=(($347+16)|0);
      var $349=(($348)|0);
      var $350=HEAP32[(($349)>>2)];
      $C0=$350;
      var $351=(($350)|0)!=0;
      if ($351) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $353=$C0;
      var $354=$353;
      var $355=$1;
      var $356=(($355+16)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($354)>>>0) >= (($357)>>>0);
      var $359=(($358)&1);
      var $360=($359);
      var $361=(($360)|0)!=0;
      if ($361) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $363=$C0;
      var $364=$R;
      var $365=(($364+16)|0);
      var $366=(($365)|0);
      HEAP32[(($366)>>2)]=$363;
      var $367=$R;
      var $368=$C0;
      var $369=(($368+24)|0);
      HEAP32[(($369)>>2)]=$367;
      label = 61; break;
    case 60: 
      _abort();
      throw "Reached an unreachable!"
    case 61: 
      label = 62; break;
    case 62: 
      var $373=$TP;
      var $374=(($373+16)|0);
      var $375=(($374+4)|0);
      var $376=HEAP32[(($375)>>2)];
      $C1=$376;
      var $377=(($376)|0)!=0;
      if ($377) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $379=$C1;
      var $380=$379;
      var $381=$1;
      var $382=(($381+16)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=(($380)>>>0) >= (($383)>>>0);
      var $385=(($384)&1);
      var $386=($385);
      var $387=(($386)|0)!=0;
      if ($387) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $389=$C1;
      var $390=$R;
      var $391=(($390+16)|0);
      var $392=(($391+4)|0);
      HEAP32[(($392)>>2)]=$389;
      var $393=$R;
      var $394=$C1;
      var $395=(($394+24)|0);
      HEAP32[(($395)>>2)]=$393;
      label = 66; break;
    case 65: 
      _abort();
      throw "Reached an unreachable!"
    case 66: 
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $404=$oldfirst;
      var $405=$404;
      var $406=$nsize;
      var $407=(($405+$406)|0);
      var $408=$407;
      $oldfirst=$408;
      var $409=$nsize;
      var $410=$qsize;
      var $411=((($410)+($409))|0);
      $qsize=$411;
      label = 73; break;
    case 73: 
      var $413=$oldfirst;
      var $414=(($413+4)|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=$415 & -2;
      HEAP32[(($414)>>2)]=$416;
      var $417=$qsize;
      var $418=$417 | 1;
      var $419=$q;
      var $420=(($419+4)|0);
      HEAP32[(($420)>>2)]=$418;
      var $421=$qsize;
      var $422=$q;
      var $423=$422;
      var $424=$qsize;
      var $425=(($423+$424)|0);
      var $426=$425;
      var $427=(($426)|0);
      HEAP32[(($427)>>2)]=$421;
      var $428=$qsize;
      var $429=$428 >>> 3;
      var $430=(($429)>>>0) < 32;
      if ($430) { label = 74; break; } else { label = 81; break; }
    case 74: 
      var $432=$qsize;
      var $433=$432 >>> 3;
      $I2=$433;
      var $434=$I2;
      var $435=$434 << 1;
      var $436=$1;
      var $437=(($436+40)|0);
      var $438=(($437+($435<<2))|0);
      var $439=$438;
      var $440=$439;
      $B3=$440;
      var $441=$B3;
      $F4=$441;
      var $442=$1;
      var $443=(($442)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=$I2;
      var $446=1 << $445;
      var $447=$444 & $446;
      var $448=(($447)|0)!=0;
      if ($448) { label = 76; break; } else { label = 75; break; }
    case 75: 
      var $450=$I2;
      var $451=1 << $450;
      var $452=$1;
      var $453=(($452)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=$454 | $451;
      HEAP32[(($453)>>2)]=$455;
      label = 80; break;
    case 76: 
      var $457=$B3;
      var $458=(($457+8)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=$459;
      var $461=$1;
      var $462=(($461+16)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=(($460)>>>0) >= (($463)>>>0);
      var $465=(($464)&1);
      var $466=($465);
      var $467=(($466)|0)!=0;
      if ($467) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $469=$B3;
      var $470=(($469+8)|0);
      var $471=HEAP32[(($470)>>2)];
      $F4=$471;
      label = 79; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!"
    case 79: 
      label = 80; break;
    case 80: 
      var $475=$q;
      var $476=$B3;
      var $477=(($476+8)|0);
      HEAP32[(($477)>>2)]=$475;
      var $478=$q;
      var $479=$F4;
      var $480=(($479+12)|0);
      HEAP32[(($480)>>2)]=$478;
      var $481=$F4;
      var $482=$q;
      var $483=(($482+8)|0);
      HEAP32[(($483)>>2)]=$481;
      var $484=$B3;
      var $485=$q;
      var $486=(($485+12)|0);
      HEAP32[(($486)>>2)]=$484;
      label = 108; break;
    case 81: 
      var $488=$q;
      var $489=$488;
      $TP5=$489;
      var $490=$qsize;
      var $491=$490 >>> 8;
      $X=$491;
      var $492=$X;
      var $493=(($492)|0)==0;
      if ($493) { label = 82; break; } else { label = 83; break; }
    case 82: 
      $I7=0;
      label = 87; break;
    case 83: 
      var $496=$X;
      var $497=(($496)>>>0) > 65535;
      if ($497) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $I7=31;
      label = 86; break;
    case 85: 
      var $500=$X;
      $Y=$500;
      var $501=$Y;
      var $502=((($501)-(256))|0);
      var $503=$502 >>> 16;
      var $504=$503 & 8;
      $N=$504;
      var $505=$N;
      var $506=$Y;
      var $507=$506 << $505;
      $Y=$507;
      var $508=((($507)-(4096))|0);
      var $509=$508 >>> 16;
      var $510=$509 & 4;
      $K=$510;
      var $511=$K;
      var $512=$N;
      var $513=((($512)+($511))|0);
      $N=$513;
      var $514=$K;
      var $515=$Y;
      var $516=$515 << $514;
      $Y=$516;
      var $517=((($516)-(16384))|0);
      var $518=$517 >>> 16;
      var $519=$518 & 2;
      $K=$519;
      var $520=$N;
      var $521=((($520)+($519))|0);
      $N=$521;
      var $522=$N;
      var $523=(((14)-($522))|0);
      var $524=$K;
      var $525=$Y;
      var $526=$525 << $524;
      $Y=$526;
      var $527=$526 >>> 15;
      var $528=((($523)+($527))|0);
      $K=$528;
      var $529=$K;
      var $530=$529 << 1;
      var $531=$qsize;
      var $532=$K;
      var $533=((($532)+(7))|0);
      var $534=$531 >>> (($533)>>>0);
      var $535=$534 & 1;
      var $536=((($530)+($535))|0);
      $I7=$536;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $539=$I7;
      var $540=$1;
      var $541=(($540+304)|0);
      var $542=(($541+($539<<2))|0);
      $H6=$542;
      var $543=$I7;
      var $544=$TP5;
      var $545=(($544+28)|0);
      HEAP32[(($545)>>2)]=$543;
      var $546=$TP5;
      var $547=(($546+16)|0);
      var $548=(($547+4)|0);
      HEAP32[(($548)>>2)]=0;
      var $549=$TP5;
      var $550=(($549+16)|0);
      var $551=(($550)|0);
      HEAP32[(($551)>>2)]=0;
      var $552=$1;
      var $553=(($552+4)|0);
      var $554=HEAP32[(($553)>>2)];
      var $555=$I7;
      var $556=1 << $555;
      var $557=$554 & $556;
      var $558=(($557)|0)!=0;
      if ($558) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $560=$I7;
      var $561=1 << $560;
      var $562=$1;
      var $563=(($562+4)|0);
      var $564=HEAP32[(($563)>>2)];
      var $565=$564 | $561;
      HEAP32[(($563)>>2)]=$565;
      var $566=$TP5;
      var $567=$H6;
      HEAP32[(($567)>>2)]=$566;
      var $568=$H6;
      var $569=$568;
      var $570=$TP5;
      var $571=(($570+24)|0);
      HEAP32[(($571)>>2)]=$569;
      var $572=$TP5;
      var $573=$TP5;
      var $574=(($573+12)|0);
      HEAP32[(($574)>>2)]=$572;
      var $575=$TP5;
      var $576=(($575+8)|0);
      HEAP32[(($576)>>2)]=$572;
      label = 107; break;
    case 89: 
      var $578=$H6;
      var $579=HEAP32[(($578)>>2)];
      $T=$579;
      var $580=$qsize;
      var $581=$I7;
      var $582=(($581)|0)==31;
      if ($582) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $591 = 0;label = 92; break;
    case 91: 
      var $585=$I7;
      var $586=$585 >>> 1;
      var $587=((($586)+(8))|0);
      var $588=((($587)-(2))|0);
      var $589=(((31)-($588))|0);
      var $591 = $589;label = 92; break;
    case 92: 
      var $591;
      var $592=$580 << $591;
      $K8=$592;
      label = 93; break;
    case 93: 
      var $594=$T;
      var $595=(($594+4)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=$596 & -8;
      var $598=$qsize;
      var $599=(($597)|0)!=(($598)|0);
      if ($599) { label = 94; break; } else { label = 100; break; }
    case 94: 
      var $601=$K8;
      var $602=$601 >>> 31;
      var $603=$602 & 1;
      var $604=$T;
      var $605=(($604+16)|0);
      var $606=(($605+($603<<2))|0);
      $C=$606;
      var $607=$K8;
      var $608=$607 << 1;
      $K8=$608;
      var $609=$C;
      var $610=HEAP32[(($609)>>2)];
      var $611=(($610)|0)!=0;
      if ($611) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $613=$C;
      var $614=HEAP32[(($613)>>2)];
      $T=$614;
      label = 99; break;
    case 96: 
      var $616=$C;
      var $617=$616;
      var $618=$1;
      var $619=(($618+16)|0);
      var $620=HEAP32[(($619)>>2)];
      var $621=(($617)>>>0) >= (($620)>>>0);
      var $622=(($621)&1);
      var $623=($622);
      var $624=(($623)|0)!=0;
      if ($624) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $626=$TP5;
      var $627=$C;
      HEAP32[(($627)>>2)]=$626;
      var $628=$T;
      var $629=$TP5;
      var $630=(($629+24)|0);
      HEAP32[(($630)>>2)]=$628;
      var $631=$TP5;
      var $632=$TP5;
      var $633=(($632+12)|0);
      HEAP32[(($633)>>2)]=$631;
      var $634=$TP5;
      var $635=(($634+8)|0);
      HEAP32[(($635)>>2)]=$631;
      label = 106; break;
    case 98: 
      _abort();
      throw "Reached an unreachable!"
    case 99: 
      label = 105; break;
    case 100: 
      var $639=$T;
      var $640=(($639+8)|0);
      var $641=HEAP32[(($640)>>2)];
      $F9=$641;
      var $642=$T;
      var $643=$642;
      var $644=$1;
      var $645=(($644+16)|0);
      var $646=HEAP32[(($645)>>2)];
      var $647=(($643)>>>0) >= (($646)>>>0);
      if ($647) { label = 101; break; } else { var $656 = 0;label = 102; break; }
    case 101: 
      var $649=$F9;
      var $650=$649;
      var $651=$1;
      var $652=(($651+16)|0);
      var $653=HEAP32[(($652)>>2)];
      var $654=(($650)>>>0) >= (($653)>>>0);
      var $656 = $654;label = 102; break;
    case 102: 
      var $656;
      var $657=(($656)&1);
      var $658=($657);
      var $659=(($658)|0)!=0;
      if ($659) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $661=$TP5;
      var $662=$F9;
      var $663=(($662+12)|0);
      HEAP32[(($663)>>2)]=$661;
      var $664=$T;
      var $665=(($664+8)|0);
      HEAP32[(($665)>>2)]=$661;
      var $666=$F9;
      var $667=$TP5;
      var $668=(($667+8)|0);
      HEAP32[(($668)>>2)]=$666;
      var $669=$T;
      var $670=$TP5;
      var $671=(($670+12)|0);
      HEAP32[(($671)>>2)]=$669;
      var $672=$TP5;
      var $673=(($672+24)|0);
      HEAP32[(($673)>>2)]=0;
      label = 106; break;
    case 104: 
      _abort();
      throw "Reached an unreachable!"
    case 105: 
      label = 93; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $681=$p;
      var $682=$681;
      var $683=(($682+8)|0);

      return $683;
    default: assert(0, "bad label: " + label);
  }
}
_prepend_alloc["X"]=1;

function _memcpy($dest, $src, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $d;
      var $s;
      var $wd;
      var $ws;
      $1=$dest;
      $2=$src;
      $3=$n;
      var $4=$1;
      $d=$4;
      var $5=$2;
      $s=$5;
      var $6=$d;
      var $7=$6;
      var $8=$7 & 3;
      var $9=$s;
      var $10=$9;
      var $11=$10 & 3;
      var $12=(($8)|0)!=(($11)|0);
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 16; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $16=$d;
      var $17=$16;
      var $18=$17 & 3;
      var $19=(($18)|0)!=0;
      if ($19) { label = 6; break; } else { var $24 = 0;label = 7; break; }
    case 6: 
      var $21=$3;
      var $22=(($21)|0)!=0;
      var $24 = $22;label = 7; break;
    case 7: 
      var $24;
      if ($24) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $26=$s;
      var $27=(($26+1)|0);
      $s=$27;
      var $28=HEAP8[($26)];
      var $29=$d;
      var $30=(($29+1)|0);
      $d=$30;
      HEAP8[($29)]=$28;
      label = 9; break;
    case 9: 
      var $32=$3;
      var $33=((($32)-(1))|0);
      $3=$33;
      label = 5; break;
    case 10: 
      var $35=$3;
      var $36=(($35)|0)!=0;
      if ($36) { label = 11; break; } else { label = 21; break; }
    case 11: 
      var $38=$d;
      var $39=$38;
      $wd=$39;
      var $40=$s;
      var $41=$40;
      $ws=$41;
      label = 12; break;
    case 12: 
      var $43=$3;
      var $44=(($43)>>>0) >= 4;
      if ($44) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $46=$ws;
      var $47=(($46+4)|0);
      $ws=$47;
      var $48=HEAP32[(($46)>>2)];
      var $49=$wd;
      var $50=(($49+4)|0);
      $wd=$50;
      HEAP32[(($49)>>2)]=$48;
      label = 14; break;
    case 14: 
      var $52=$3;
      var $53=((($52)-(4))|0);
      $3=$53;
      label = 12; break;
    case 15: 
      var $55=$wd;
      var $56=$55;
      $d=$56;
      var $57=$ws;
      var $58=$57;
      $s=$58;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $61=$3;
      var $62=(($61)|0)!=0;
      if ($62) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $64=$s;
      var $65=(($64+1)|0);
      $s=$65;
      var $66=HEAP8[($64)];
      var $67=$d;
      var $68=(($67+1)|0);
      $d=$68;
      HEAP8[($67)]=$66;
      label = 19; break;
    case 19: 
      var $70=$3;
      var $71=((($70)-(1))|0);
      $3=$71;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $74=$1;

      return $74;
    default: assert(0, "bad label: " + label);
  }
}
Module["_memcpy"] = _memcpy;_memcpy["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1;
      var $6=(($5+24)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $old_top=$8;
      var $9=$1;
      var $10=$old_top;
      var $11=_segment_holding($9, $10);
      $oldsp=$11;
      var $12=$oldsp;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$oldsp;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14+$17)|0);
      $old_end=$18;
      $ssize=24;
      var $19=$old_end;
      var $20=$ssize;
      var $21=((($20)+(16))|0);
      var $22=((($21)+(7))|0);
      var $23=(((-$22))|0);
      var $24=(($19+$23)|0);
      $rawsp=$24;
      var $25=$rawsp;
      var $26=(($25+8)|0);
      var $27=$26;
      var $28=$27 & 7;
      var $29=(($28)|0)==0;
      if ($29) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $39 = 0;label = 5; break;
    case 4: 
      var $32=$rawsp;
      var $33=(($32+8)|0);
      var $34=$33;
      var $35=$34 & 7;
      var $36=(((8)-($35))|0);
      var $37=$36 & 7;
      var $39 = $37;label = 5; break;
    case 5: 
      var $39;
      $offset=$39;
      var $40=$rawsp;
      var $41=$offset;
      var $42=(($40+$41)|0);
      $asp=$42;
      var $43=$asp;
      var $44=$old_top;
      var $45=(($44+16)|0);
      var $46=(($43)>>>0) < (($45)>>>0);
      if ($46) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $48=$old_top;
      var $52 = $48;label = 8; break;
    case 7: 
      var $50=$asp;
      var $52 = $50;label = 8; break;
    case 8: 
      var $52;
      $csp=$52;
      var $53=$csp;
      var $54=$53;
      $sp=$54;
      var $55=$sp;
      var $56=$55;
      var $57=(($56+8)|0);
      var $58=$57;
      $ss=$58;
      var $59=$sp;
      var $60=$59;
      var $61=$ssize;
      var $62=(($60+$61)|0);
      var $63=$62;
      $tnext=$63;
      var $64=$tnext;
      $p=$64;
      $nfences=0;
      var $65=$1;
      var $66=$2;
      var $67=$66;
      var $68=$3;
      var $69=((($68)-(40))|0);
      _init_top($65, $67, $69);
      var $70=$ssize;
      var $71=$70 | 1;
      var $72=$71 | 2;
      var $73=$sp;
      var $74=(($73+4)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$ss;
      var $76=$1;
      var $77=(($76+444)|0);
      var $78=$75;
      var $79=$77;
      assert(16 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
      var $80=$2;
      var $81=$1;
      var $82=(($81+444)|0);
      var $83=(($82)|0);
      HEAP32[(($83)>>2)]=$80;
      var $84=$3;
      var $85=$1;
      var $86=(($85+444)|0);
      var $87=(($86+4)|0);
      HEAP32[(($87)>>2)]=$84;
      var $88=$4;
      var $89=$1;
      var $90=(($89+444)|0);
      var $91=(($90+12)|0);
      HEAP32[(($91)>>2)]=$88;
      var $92=$ss;
      var $93=$1;
      var $94=(($93+444)|0);
      var $95=(($94+8)|0);
      HEAP32[(($95)>>2)]=$92;
      label = 9; break;
    case 9: 
      var $97=$p;
      var $98=$97;
      var $99=(($98+4)|0);
      var $100=$99;
      $nextp=$100;
      var $101=$p;
      var $102=(($101+4)|0);
      HEAP32[(($102)>>2)]=7;
      var $103=$nfences;
      var $104=((($103)+(1))|0);
      $nfences=$104;
      var $105=$nextp;
      var $106=(($105+4)|0);
      var $107=$106;
      var $108=$old_end;
      var $109=(($107)>>>0) < (($108)>>>0);
      if ($109) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $111=$nextp;
      $p=$111;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $115=$csp;
      var $116=$old_top;
      var $117=(($115)|0)!=(($116)|0);
      if ($117) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $119=$old_top;
      var $120=$119;
      $q=$120;
      var $121=$csp;
      var $122=$old_top;
      var $123=$121;
      var $124=$122;
      var $125=((($123)-($124))|0);
      $psize=$125;
      var $126=$q;
      var $127=$126;
      var $128=$psize;
      var $129=(($127+$128)|0);
      var $130=$129;
      $tn=$130;
      var $131=$tn;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$133 & -2;
      HEAP32[(($132)>>2)]=$134;
      var $135=$psize;
      var $136=$135 | 1;
      var $137=$q;
      var $138=(($137+4)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$psize;
      var $140=$q;
      var $141=$140;
      var $142=$psize;
      var $143=(($141+$142)|0);
      var $144=$143;
      var $145=(($144)|0);
      HEAP32[(($145)>>2)]=$139;
      var $146=$psize;
      var $147=$146 >>> 3;
      var $148=(($147)>>>0) < 32;
      if ($148) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $150=$psize;
      var $151=$150 >>> 3;
      $I=$151;
      var $152=$I;
      var $153=$152 << 1;
      var $154=$1;
      var $155=(($154+40)|0);
      var $156=(($155+($153<<2))|0);
      var $157=$156;
      var $158=$157;
      $B=$158;
      var $159=$B;
      $F=$159;
      var $160=$1;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$I;
      var $164=1 << $163;
      var $165=$162 & $164;
      var $166=(($165)|0)!=0;
      if ($166) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $168=$I;
      var $169=1 << $168;
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$172 | $169;
      HEAP32[(($171)>>2)]=$173;
      label = 21; break;
    case 17: 
      var $175=$B;
      var $176=(($175+8)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=$1;
      var $180=(($179+16)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($178)>>>0) >= (($181)>>>0);
      var $183=(($182)&1);
      var $184=($183);
      var $185=(($184)|0)!=0;
      if ($185) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $187=$B;
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      $F=$189;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!"
    case 20: 
      label = 21; break;
    case 21: 
      var $193=$q;
      var $194=$B;
      var $195=(($194+8)|0);
      HEAP32[(($195)>>2)]=$193;
      var $196=$q;
      var $197=$F;
      var $198=(($197+12)|0);
      HEAP32[(($198)>>2)]=$196;
      var $199=$F;
      var $200=$q;
      var $201=(($200+8)|0);
      HEAP32[(($201)>>2)]=$199;
      var $202=$B;
      var $203=$q;
      var $204=(($203+12)|0);
      HEAP32[(($204)>>2)]=$202;
      label = 49; break;
    case 22: 
      var $206=$q;
      var $207=$206;
      $TP=$207;
      var $208=$psize;
      var $209=$208 >>> 8;
      $X=$209;
      var $210=$X;
      var $211=(($210)|0)==0;
      if ($211) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I1=0;
      label = 28; break;
    case 24: 
      var $214=$X;
      var $215=(($214)>>>0) > 65535;
      if ($215) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I1=31;
      label = 27; break;
    case 26: 
      var $218=$X;
      $Y=$218;
      var $219=$Y;
      var $220=((($219)-(256))|0);
      var $221=$220 >>> 16;
      var $222=$221 & 8;
      $N=$222;
      var $223=$N;
      var $224=$Y;
      var $225=$224 << $223;
      $Y=$225;
      var $226=((($225)-(4096))|0);
      var $227=$226 >>> 16;
      var $228=$227 & 4;
      $K=$228;
      var $229=$K;
      var $230=$N;
      var $231=((($230)+($229))|0);
      $N=$231;
      var $232=$K;
      var $233=$Y;
      var $234=$233 << $232;
      $Y=$234;
      var $235=((($234)-(16384))|0);
      var $236=$235 >>> 16;
      var $237=$236 & 2;
      $K=$237;
      var $238=$N;
      var $239=((($238)+($237))|0);
      $N=$239;
      var $240=$N;
      var $241=(((14)-($240))|0);
      var $242=$K;
      var $243=$Y;
      var $244=$243 << $242;
      $Y=$244;
      var $245=$244 >>> 15;
      var $246=((($241)+($245))|0);
      $K=$246;
      var $247=$K;
      var $248=$247 << 1;
      var $249=$psize;
      var $250=$K;
      var $251=((($250)+(7))|0);
      var $252=$249 >>> (($251)>>>0);
      var $253=$252 & 1;
      var $254=((($248)+($253))|0);
      $I1=$254;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $257=$I1;
      var $258=$1;
      var $259=(($258+304)|0);
      var $260=(($259+($257<<2))|0);
      $H=$260;
      var $261=$I1;
      var $262=$TP;
      var $263=(($262+28)|0);
      HEAP32[(($263)>>2)]=$261;
      var $264=$TP;
      var $265=(($264+16)|0);
      var $266=(($265+4)|0);
      HEAP32[(($266)>>2)]=0;
      var $267=$TP;
      var $268=(($267+16)|0);
      var $269=(($268)|0);
      HEAP32[(($269)>>2)]=0;
      var $270=$1;
      var $271=(($270+4)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$I1;
      var $274=1 << $273;
      var $275=$272 & $274;
      var $276=(($275)|0)!=0;
      if ($276) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $278=$I1;
      var $279=1 << $278;
      var $280=$1;
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$282 | $279;
      HEAP32[(($281)>>2)]=$283;
      var $284=$TP;
      var $285=$H;
      HEAP32[(($285)>>2)]=$284;
      var $286=$H;
      var $287=$286;
      var $288=$TP;
      var $289=(($288+24)|0);
      HEAP32[(($289)>>2)]=$287;
      var $290=$TP;
      var $291=$TP;
      var $292=(($291+12)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$TP;
      var $294=(($293+8)|0);
      HEAP32[(($294)>>2)]=$290;
      label = 48; break;
    case 30: 
      var $296=$H;
      var $297=HEAP32[(($296)>>2)];
      $T=$297;
      var $298=$psize;
      var $299=$I1;
      var $300=(($299)|0)==31;
      if ($300) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $309 = 0;label = 33; break;
    case 32: 
      var $303=$I1;
      var $304=$303 >>> 1;
      var $305=((($304)+(8))|0);
      var $306=((($305)-(2))|0);
      var $307=(((31)-($306))|0);
      var $309 = $307;label = 33; break;
    case 33: 
      var $309;
      var $310=$298 << $309;
      $K2=$310;
      label = 34; break;
    case 34: 
      var $312=$T;
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$314 & -8;
      var $316=$psize;
      var $317=(($315)|0)!=(($316)|0);
      if ($317) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $319=$K2;
      var $320=$319 >>> 31;
      var $321=$320 & 1;
      var $322=$T;
      var $323=(($322+16)|0);
      var $324=(($323+($321<<2))|0);
      $C=$324;
      var $325=$K2;
      var $326=$325 << 1;
      $K2=$326;
      var $327=$C;
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|0)!=0;
      if ($329) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $331=$C;
      var $332=HEAP32[(($331)>>2)];
      $T=$332;
      label = 40; break;
    case 37: 
      var $334=$C;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>0) >= (($338)>>>0);
      var $340=(($339)&1);
      var $341=($340);
      var $342=(($341)|0)!=0;
      if ($342) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $344=$TP;
      var $345=$C;
      HEAP32[(($345)>>2)]=$344;
      var $346=$T;
      var $347=$TP;
      var $348=(($347+24)|0);
      HEAP32[(($348)>>2)]=$346;
      var $349=$TP;
      var $350=$TP;
      var $351=(($350+12)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$TP;
      var $353=(($352+8)|0);
      HEAP32[(($353)>>2)]=$349;
      label = 47; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 46; break;
    case 41: 
      var $357=$T;
      var $358=(($357+8)|0);
      var $359=HEAP32[(($358)>>2)];
      $F3=$359;
      var $360=$T;
      var $361=$360;
      var $362=$1;
      var $363=(($362+16)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=(($361)>>>0) >= (($364)>>>0);
      if ($365) { label = 42; break; } else { var $374 = 0;label = 43; break; }
    case 42: 
      var $367=$F3;
      var $368=$367;
      var $369=$1;
      var $370=(($369+16)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=(($368)>>>0) >= (($371)>>>0);
      var $374 = $372;label = 43; break;
    case 43: 
      var $374;
      var $375=(($374)&1);
      var $376=($375);
      var $377=(($376)|0)!=0;
      if ($377) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $379=$TP;
      var $380=$F3;
      var $381=(($380+12)|0);
      HEAP32[(($381)>>2)]=$379;
      var $382=$T;
      var $383=(($382+8)|0);
      HEAP32[(($383)>>2)]=$379;
      var $384=$F3;
      var $385=$TP;
      var $386=(($385+8)|0);
      HEAP32[(($386)>>2)]=$384;
      var $387=$T;
      var $388=$TP;
      var $389=(($388+12)|0);
      HEAP32[(($389)>>2)]=$387;
      var $390=$TP;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();
      throw "Reached an unreachable!"
    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 

      return;
    default: assert(0, "bad label: " + label);
  }
}
_add_segment["X"]=1;

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    add: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.add(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    subtract: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.subtract(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    multiply: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.multiply(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    divide: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.div(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, z, null);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    modulo: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.modulo(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, null, z);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return Module['_main'](argc, argv, 0);
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_fixedtables","_unwrap","_enlarge","_magic_close","_adler32","_check_cond","_file_ascmagic","_findmust","_inflateReset","_file_tryelf","_looks_latin1","_p_bre","_cmpstrp","_file_error","_getdelim","_file_check_mem","_file_fsmagic","_eatsize","_type_s","_match","_cdf_read_short_sector","_mget","_file_reset","_cvt_flip","_magic_setflags","_cdf_read_sector_chain","_file_apprentice","_crc32_little","_file_buffer","_init_bins","_nch","_magic_open","_getstr","_apprentice_compile","_inflate","_file_magicfind","_file_magwarn","_p_b_eclass","_regcomp","_bothcases","_lslow","_cdf_read_header","_cdf_read","_uncompressgzipped","_freezeset","_cdf_print_property_name","_cdf_ctime","_release_unused_segments","_addentry","_apprentice_1","_tmalloc_large","_zcfree","_dofwd","_sys_alloc","_cdf_read_property_info","_free","_print_sep","_lfast","_inflate_fast","_parse_apple","_file_delmagic","_repeat","_cdf_read_summary_info","_lmatcher","_looks_ucs16","_parse","_inflateResetKeep","_cdf_check_stream_offset","_crc32_big","_from_ebcdic","_dophn_core","_cdf_getuint32","_main","_file_trycdf","_file_getbuffer","_cvt_64","_file_encoding","_cdf_count_chain","_close_and_restore","_file_strncmp","_tmalloc_small","_mmap_alloc","_file_mdump","_inflateReset2","_cdf_unpack_summary_info","_file_badread","_mcadd","_looks_utf8_with_BOM","_trim_nuls","_load_1","_magiccheck","_cvt_8","_p_count","_cdf_read_dir","_moffset","_magic_compile","_p_str","_p_ere","_seterr","_inflateInit2_","_apprentice_map","_getopt_internal","_permute_args","_file_mbswidth","_cdf_tole2","__cdf_tole8","_file_zmagic","_p_b_term","_apprentice_load","_realloc_buff","_vasprintf","_cdf_read_long_sector_chain","_core","_file_pipe2file","_doinsert","_file_replace","_magic_getpath","_init_file_tables","_apprentice_list","_sfast","_print_it","_inflateEnd","_mprint","_categorize","_cdf_unpack_header","_updatewindow","_crc32","_mkdbname","_check_format_type","_sbackref","_from_oct","_check_format","_stripsnug","_sys_trim","_regfree","_file_vprintf","_nonnewline","_file_badseek","_cvt_16","_p_bracket","_cdf_file_summary_info","_sslow","_mmap_resize","_set_last_default","_get_type","_bad_link","_p_b_cclass","_usage","_file_ms_free","_ldissect","_inflate_table","_prepend_alloc","_lbackref","_file_is_tar","_usual_char","_dophn_exec","_cdf_swap_header","_file_signextend","_cdf_read_short_stream","_process","_swrite","_smatcher","_getu32","_set_text_binary","_p_ere_exp","_cvt_float","_getint","_cdf_read_sat","_byteswap","_magic_error","_samesets","_handle_annotation","_doemit","_add_segment","_apprentice_sort","_mconvert","_getopt_long","_othercase","_getline","_apprentice_magic_strength","_cdf_unpack_dir","_mccase","_check_fmt","_regexec","_file_ascmagic_with_encoding","_get_op","_cvt_32","_looks_ascii","_load","_encode_utf8","_magic_entry_free","_cdf_read_sector","_cdf_timestamp_to_timespec","_mdebug","_regatoi","_file_showstr","_file_oomem","_donote","_malloc","_cdf_getday","_dispatch","_firstch","_is_tar","_sdissect","_cdf_read_short_sector_chain","_p_simp_re","_set_test_type","_dupl","_file_pstring_get_length","__cdf_tole2","_freeset","_magic_list","_cdf_namecmp","_strlcpy","__cdf_tole4","_file_looks_utf8","_string_modifier_check","_looks_extended","_calloc","_bs1","_cdf_getdays","_handle_mime","_parse_strength","_magic_load","_magic_file","_mcinvert","_strlcat","_file_error_core","_p_b_symbol","_gcd","_init_top","_mlist_alloc","_cdf_getmonth","_hextoint","_file_softmagic","_help","_internal_realloc","_asprintf","_allocset","_getu16","_lstep","_init_mparams","_get_default_magic","_cdf_print_elapsed_time","_file_printedlen","_add_mlist","_realloc","_mcopy","_segment_holding","_file_or_fd","_magic_check","_cdf_swap_dir","_parse_mime","_file_printf","_file_ms_alloc","_doshn","_file_strncmp16","_file_pstring_length_size","_zcalloc","_pluscount","_ordinary","_cdf_read_ssat","_swap2","_p_b_coll_elem","_swap4","_cdf_file_property_info","_swap8","_docprint","_uncompressbuf","_unreadable_info","_sread","_memcpy","_mlist_free","_sstep","_isinsets","_getvalue","_file_magerror","_get_cond","_cvt_double","_cdf_swap_class","_regerror","_coalesce_entries","_file_fmttime"]


